<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[个人技能]]></title>
    <url>%2F2018%2F05%2F23%2F%E4%B8%AA%E4%BA%BA%E6%A0%87%E7%AD%BE%2F</url>
    <content type="text"></content>
      <categories>
        <category>个人技能</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSS3</tag>
        <tag>js</tag>
        <tag>Ajax</tag>
        <tag>AngularJS</tag>
        <tag>BOM</tag>
        <tag>Bower</tag>
        <tag>Cookie</tag>
        <tag>DOM</tag>
        <tag>EJS</tag>
        <tag>Express</tag>
        <tag>Gulp</tag>
        <tag>HTML</tag>
        <tag>HTML5</tag>
        <tag>JSON</tag>
        <tag>MongoDB</tag>
        <tag>MySQL</tag>
        <tag>Node.js</tag>
        <tag>PHP</tag>
        <tag>React</tag>
        <tag>RequireJS</tag>
        <tag>SeaJs</tag>
        <tag>Session</tag>
        <tag>Underscore</tag>
        <tag>bolg</tag>
        <tag>browser</tag>
        <tag>canvas</tag>
        <tag>cordova</tag>
        <tag>eCharts</tag>
        <tag>git</tag>
        <tag>github</tag>
        <tag>hexo</tag>
        <tag>http</tag>
        <tag>ionic</tag>
        <tag>jQuery</tag>
        <tag>Grunt</tag>
        <tag>markdown</tag>
        <tag>mine</tag>
        <tag>net</tag>
        <tag>network</tag>
        <tag>npm</tag>
        <tag>nrm</tag>
        <tag>nvm</tag>
        <tag>tools</tag>
        <tag>webpack</tag>
        <tag>artTemplate</tag>
        <tag>ps</tag>
        <tag>sublime</tag>
        <tag>webstorm</tag>
        <tag>vs code</tag>
        <tag>svn</tag>
        <tag>eclipse</tag>
        <tag>命令行</tag>
        <tag>小项目</tag>
        <tag>库</tag>
        <tag>性能优化</tag>
        <tag>数据库</tag>
        <tag>框架</tag>
        <tag>模块化</tag>
        <tag>正则</tag>
        <tag>表单</tag>
        <tag>面向对象</tag>
        <tag>交互</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js Date、Math、包装对象、RegExp]]></title>
    <url>%2F2015%2F06%2F08%2Fjs%20Date%E3%80%81Math%E3%80%81%E5%8C%85%E8%A3%85%E5%AF%B9%E8%B1%A1%E3%80%81RegExp%2F</url>
    <content type="text"><![CDATA[javaScript的几个内置对象Date对象ECMAScript 5 提供了两个方法：Date.parase() 和 Date.UTC() 返回日期的毫秒数 12345678var now = new Date(); //创建对象alert(Date()); //返回一个完整的日期时间alert(now.getDate()); //返回从1开始计数的天数alert(now.getDay()); //返回当前周几alert(now.getFullYear()); //返回当前年份alert(now.getMonth()+1); //返回当前月份alert(now.getHours()); //当地时间的小时var then = new Date(2011, 10, 10); // 2011年10月10日 日期格式化方法 toDateString(); toTimeString(); toLocaleDateString(); toLocalTimeString(); toUTCString() Math对象123456789101112131415161718// 控制台输出Math.max(1,2,3,4,5);//这些数字中的最大值Math.min(1,2,3,4,5);//返回多个数中的最小值Math.floor(45.84334);//向下取整Math.ceil(5.4443);//向上取整Math.round(67.55);//四舍五入Math.random();//随机数 0-1 parseInt(Math.random()*10+1); //随机数 1-10parseInt(Math.random()*100+1); //随机数 1-100Math.abs(-100);//返回绝对值 Math.pow(4,3); //4 的 3 次幂 Math.sqrt(16); //开平方Math.sin(4);//返回正弦值Math.PI; // π 圆周率Math.sqrt(3); // 3 的平方根Math.exp(3); // e 的 3 次幂Math.log(10); // 10 的自然对数Math.E; // 自然对数的底数 全局对象当 JavaScript 解释器启动时，它将创建一个新的全局对象，并给它一组定义的初始属性。 全局属性，如 undefined、Infinity 和 NaN; 全局函数，如：isNaN()、parseInt() 和 eval(); 构造函数，如：Date()、RegExp()、String()、Object() 和 Array() 全局对象，如：Math 和 JSON; 包装对象 String() Number() Boolean()字符串字面量、数字字面量、布尔字面量均可以使用”.”符号引用属性值，当属性值是一个函数时，称其为方法。只有对象有属性，JavaScript 在创建字符串、数字、布尔值时会自动的通过调用 new String(); new Number(); new Boolean() 的方式调用。 RegExp 对象var expression = /pattern/flags; pattern 是正则表达式，可以包含字符类，限定符，分组，向前查找以及反向查找。flag是标志，有 3 种： g: 全局(global)模式 i: 表示不区分大小写 m: 表示多行(multiline)模式 RegExp 构造函数的模式参数是字符串，在某些情况下需要双重转义； RegExp 实例属性 global 布尔值，是否设置了 g 标志 ignoreCase 布尔值，是否设置了 i 标志 lastIndex 整数，表示开始搜索下一个匹配项的字符位置，从 0 算起 multiline 布尔值，是否设置了 m 标志 source 正则表达式的字符串表示，按照字面量形式而非传入构造函数中的字符串模式返回； RegExp 实例方法 exec() ； 接收一个参数，要引用匹配模式的字符串，返回包含第一个匹配项信息的数组； 没有匹配项的情况下返回 null 返回的数组虽然是 Array 的实例，但包含两个属性：index 和 input index 表示匹配项子在字符串中的位置 input 表示应用正则表达式的字符串 exec() 方法在设置了全局标志的情况下，每次调用该方法都会在字符串中继续查找新匹配项。 12345678var text = "mom and dad and baby";var pattern = /mom( and dad( and baby)?)?/gi;var mataches = pattern.exec(text);console.log(matches.index); // 0console.log(matches.input); // "mom and dad and baby"console.log(matches[0]); // "mom and dad and baby"console.log(matches[1]); // " and dad and baby"console.log(matches[2]); // " and baby" 总之：正则分组之后匹配到的结果如果匹配成功则会得到数组，数组中第 0 项是与整个模式匹配的字符串，从第一项开始就是数正则表达式中的左括号就可以了，左括号是第几个，则解析出来的数据就是数组中下标为该数字的元素`]]></content>
      <categories>
        <category>JS系列</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js表达式和运算符]]></title>
    <url>%2F2015%2F06%2F06%2Fjs%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[JavaScript 解释器会将表达式计算出一个结果，程序中最常见的变量就是一种表达式。变量名也是一种表达式。复杂表达式是由简单表达式组成的，最常用的方法是使用运算符。 表达式原始表达式原始表达式是表达式的最小单位，通常包含： 常量 直接量 关键字 变量 对象和数组的初始化表达式 数组表达式 [] [1+2,3+1] var matrix = [[1,2,3],[1,2,2],[2,3,1]]; [0,,,1] 对象表达式 var p = {name: &quot;Hiraku&quot;, age: 17}; var q = {}; q.x = 2.3 var data = {casData:{cas: canvas, ctx: context}, lineData{lineStyle:&quot;red&quot;,lineWidth:2}} 函数定义表达式 var square = function(x){ return x * x}; 访问对象属性的方式 obj.key; obj[key]; 调用表达式: 函数表达式开始，这个函数表达式指代了要调用的函数，函数表达式后是一对圆括号，括号内是以逗号隔开的参数； f(0); Math.max(1,2,3); 对象创建表达式 new Object() new Point(1,3) 无参数时()可以省略： new Object 运算符ECMAScript 描述了一组用于操作数组的操作符，分为算术操作符、位操作符、关系操作符合相等操作符。对于对象，相应的操作符通常都会调用对象的 valueOf() 方法或者 toString() 方法。 比较、typeof、+、-、*、/、%、=、==、===、三元、逻辑运算符 比较运算符 &lt; = &lt;= != 判断数据类型 typeof(变量名); 算术运算符 加运算： 两个数据类型都为数字类型变量相加，得到的是数字类型。 一个为数字类型的变量和一个为字符串类型的变量相加，得到的是一个字符串类型，加号起一个连接的作用。 减运算 如果两个变量都为数字类型相减，得到的是数字类型。 如果一个为数字类型的变量，一个为数字字符串，相减得到的是数字类型。 如果一个为数字类型的变量，一个为非数字字符串，相减得到的NaN,数字类型。 * 乘运算 Inifinity 与 0 相乘， undefined。 / 除运算 两个都为数字类型的变量，相除得到的是数字类型。 如果一个为数字类型的变量，一个为数字字符串变量，相除得到的是数字类型。 如果一个为数字类型的变量，一个为非数字字符串，相除得到的NaN,数字类型。 如果0作为除数，得到的是infinity(无限大)，是一个数字类型。 0 / 0 是 undefined。 Infinity / Infinity 结果是 NaN。 % 取余数 ()优先级 先计算()括号里边的值。 等号运算符 “=” 赋值预算符 “==” 比较运算符: 只判断内容是否相同，不判断数据类型。 “===” 比较运算符: 不仅判断内容是否相同，还判断数据类型是否相同。 “!=” 不等于: 只判断内容是否不相同，不判断数据类型。 “!==” 不等于: 不仅判断内容是否不相同，还判断数据类型是否相同。 三元运算符 语法： 表达式？如果表达式的值为true,执行表达式后边的代码，如果值为false,执行冒号后边的值。 三元运算符可以理解为if..else的另外一种写法。 逻辑运算符：逻辑运算的前提是参与运算的变量结果为Boolean类型。 或（||） 参与运算，只要满足一个为true,或运算最后的值为true. 参与运算的值都为false,或运算最后的值为false. 且（&amp;&amp;） 参与运算，只要满足一个为false,或运算最后的值为false. 参与运算，都为true的时候，且运算最后的值为true. 非（!） 如果运算结果为true,非运算结果为false 如果运算结果为false,非运算结果为true. 非 如果操作数是一个对象，返回 false 如果操作数是一个空字符串，返回 true 如果操作数是一个非空字符串，返回 false 如果操作数是数值 0 ，返回 true 如果操作数是任意非 0 数值，包括 Infinity ，返回 true 如果操作数是 null ，返回 true 如果操作数是 NaN ，返回 true 如果操作数是 undefined ，返回 true与 如果第一个操作数是对象，返回第二个操作数； 如果第二个操作数是对象，只有第二个数求值结果为 true 是，返回该对象 如果两个都是对象，返回第二个； 如果有一个操作数是 null ，返回 null 如果有一个操作数是 NaN ，返回 NaN 如果有一个操作数是 undefined ，返回 undefined或 如果第一个操作数是对象，返回第一个； 如果第一个操作数求值结果 false ，返回第二个 如果两个都是对象，返回第一个； 如果两个操作数是 null ，返回 null 如果两个操作数是 NaN ，返回 NaN 如果两个操作数是 undefined ，返回 undefined 总结逻辑运算符： &amp;&amp;和||都采取短路运算，即第一个能够决定结果就不再看第二个了 &amp;&amp; 的要求比较宽松 要两个都是true才是true 所以看到第一个是false就没有必要继续完后看了 || 的要求比较严格，要两个都是false才是false，所以看到第一个是true就没有必要继续完后看了 &amp;&amp;和||不但可以操作布尔类型的值，对其他类型的值也可以进行操作，并返回可以决定表达式结果的那个值。 自增自减 ++i，i++ 在没有参加运算的情况下，++i i++都是在变量的基础上加1。 在参加运算的情况下： 123var n1=123;var n2=n1++; // 先把n1的值赋给n2,然后n1执行加1的操作。Var n2=++n1; // 先执行n1加1的操作，再赋值给n2. 总的来说： 递增++ 递减– a++ 先参与运算 后自加 ++a 先自加 后参与运算 注意： 在应用于一个包含有效数字字符串是，先将其转换为数字值再执行加减1的操作。 在应用于一个不包含有效数字字符的字符串时，将变量的值设置为 NaN。 在应用于布尔值 false 时，先将其转换为 0 再执行加减 1 的操作。 在应用于布尔值 true 时，先将其转换为 1 再执行加减 1 的操作。 在应用于对象时，先抵用对象的 valueOf 方法以取得一个可供操作的值，然后对该值应用前面的规则。如果结果是NaN，则调用 toString() 方法后再应用前述的规则。 带操作的赋值运算符 位操作符0 正 1 负，最高位表示符号位。正数和负数都是以二进制码来存储，但负数使用的格式是二进制补码。计算过程如下： 求这个数绝对值的二进制码； 求二进制反码； 得到的反码加 1。ECMAScript 中，对 NaN, Infinity 值应用位操作时，这两个值都当做 0 来处理。 按位非(~) 按位与(&amp;) 按位或(|) 按位异或(^) 左移(&lt;&lt;) 有符号右移(&gt;&gt;) 无符号右移(&gt;&gt;&gt;) instanceof 操作符测试对象类，左操作数是一个对象，右操作数是标识对象的类。如果左侧的对象是右侧类的实例，则表达式返回true，否则返回false。 操作符优先级 eval()eval() 是一个函数，但它已经被当做运算符来对待了。 eval()eval() 只有一个参数。如果传入的不是字符串，直接返回这个参数，如果是字符串，会把字符串当成 JavaScript 代码进行编译，如果便以失败抛出异常，编译成功则执行这段代码。返回字符串中最后一个表达式或语句的值，如果最后一个表达式中没有返回值，则返回 undefined。 eval() 它使用了调用它的变量作用域环境。它查找变量的值和定义新变量和函数的操作和局部作用域中的代码完全一样。 全局的eval()eval() 具有改变局部变量的能力。当直接使用 “eval” 名称来调用 eval() 函数时，通常称为”直接 eval”.直接调用 eval() 时，它总是调用它的上下文作用域内执行。其它间接调用使用全局对象作为其上下文作用域，并且无法读、写、定义局部变量和函数。 1234567891011121314var geval = eval;var x = "global", y = "global";function f()&#123; var x = "local"; eval ("x += 'changed'"); return x;&#125;function g()&#123; var y = "local"; geval ("y += 'changed'"); return y;&#125;console.log(f(),x);console.log(g(),y); 严格的eval()ECMAScript 5 严格模式中，eval() 是私有上下文环境中的局部 eval()，eval() 执行的代码段可以查询或更改局部变量，但不能在局部作用域中定义新变量。 eval总结 函数是封装了一段可以重复执行的代码 eval方法的功能：执行一段JS代码(封装了代码) 在eval方法中没有作用域的概念（ES5严格模式有了独立的作用域）——&gt;声明的变量都是全局变量，函数都是全局函数 eval和函数的比较 eval封装了一段代码（只能执行一次）；函数封装了一段代码（可以重复执行） eval中没有独立作用域的——&gt;声明的变量和函数都是全局的； 函数中是有独立作用域 ——&gt;函数内声明的变量和函数只能在当前函数内部所访问 delete运算符delete 运算符时一元运算符，用来删除对象属性或者数组元素。删除属性或者删除数组元素不仅仅是设置了一个 undefined 的值。当删除一个属性时，这个属性将不再存在。读取一个不存在的属性将返回 undefined，但是可以通过 in 运算符来检测这个属性是否在对象中存在。 void运算符void 运算符是一元运算符，在操作数之前，操作数可以使任意类型。通常用在客户端的URL–javascript: URL 中，在 URL 中可以写带有副作用的表达式，而 void 则让浏览器不比显示这个表达式的计算结果。 例如： 1&lt;a href="javascript:void window.open();"&gt;打开一个新窗口&lt;/a&gt; 通过给 &lt;a&gt; 标签的onclick 绑定一个事件处理程序要比在 href 中写 “javascript:URL” 要更加清晰，这种情况下 void 可有可无。 逗号运算符逗号运算符是二元操作符，操作数可以是任意类型，先计算左边操作数后计算右边操作数，最后返回右操作数的值。]]></content>
      <categories>
        <category>JS系列</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js变量和数据类型]]></title>
    <url>%2F2015%2F06%2F03%2Fjs%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[变量JavaScript是弱类型的语言，变量是松散的。所谓松散是可以保存任何类型的变量。即声明不同数据类型的变量使用同一个关键字 var，变量就是变化的量，变量的作用就是用来装数据的容器。声明变量的时候不用考虑类型，但是处理和计算的时候要考虑类型. 定义变量定义变量使用关键字 var来定义变量名。 1234// 在全局作用域下声明了变量 avar a; // 使用赋值运算符来给变量赋值a = "a此时是字符串"; 赋值： 赋值运算符为“=”，这个等号不用判断两者是否相同。 如果判断是否相同，可使用==（===）。 以上两步可简写为： 1var a = "a此时是字符串"; 注意： 123function foo()&#123; msg = "我是函数内部定义的全局变量";&#125; 上面例子省略了var操作符， msg 就变成了全局变量，函数外部也能访问到，但不要这样做！。 变量命名规范 由字母、数字、下划线、$ 组成且开头不能是数字定义变量名。 不能使用特殊符号或者特殊符号开头来定义变量名（_除外）。 不能以关键字来定义变量名 变量的名称要有实际意义 规则中所说的字母包括ASCII和Unicode字母字符，如汉字，但不推荐使用 变量的命名遵守驼峰命名法，首字母小写,第二个单词的首字母大写 例如：userName 关键字 1234567break do instanceof typeofcase else new varcatch finally return voidcontinue for switch whiledebugger* function this withdefault if throwdelete in try 不能使用保留字来定义变量名 (保留字) 12345678abstract enum int shortboolean export interface staticbyte extends long superchar final native synchronizedclass float package throwsconst goto private transientdebugger implements protected volatiledouble import public 注意：在JS中，是严格区分大小写的。 执行环境和作用域执行环境是 JavaScript 中最为重要的一个概念。定义了变量或函数有权访问其它数据。每个环境中都有一个与之关联的变量对象，我们编写的代码无法访问，但是环境中定义的变量存放在这个对象中。 全局执行环境是最外围的一个执行环境。根据 ECMAScript 实现所在的宿主环境的不同，表示执行环境的对象也不一样。在 web 浏览器中，全局执行环境被认为是 window 对象，因此所有的全局变量和函数都是作为 window 对象的属性和方法创建的。某个环境中的代码全部执行完，该环境中的变量被销毁，保存在其中的所有的变量和函数定义也随之销毁。全局执行环境直到应用程序退出才销毁。 每个函数都有自己的执行环境。当代码在一个环境中执行时，会创建作用域链。作用域链式保证对执行环境有权访问的所有变量和函数的有序访问。作用域的前端始终都是当前执行的代码所在环境的变量对象。如果这个环境是函数，则将其活动对象作为变量对象。活动对象在最开始的时候只包含一个变量，即 arguments 对象。作用域中的下一个变量对象来说包含（外部的环境），而再下一个变量对象则来自下一个包含环境。这样，一直延续到全局执行环境，全局执行环境的变量对象始终都是作用域链中的最后一个对象。 一个变量的作用域是程序源代码中定义这个变量的区域。全局变量拥有全局作用域，在 JavaScript 代码中任何地方都是有定义的。而在函数内部声明的变量只有在函数体内有定义，它们是局部变量，作用域是局部的。 在函数体内部，局部变量的优先级高于同名的全局变量。 函数作用域和声明提前块级作用域是指在一对花括号内的代码都具有各自的作用域，而且变量在声明它们的代码之外是不可见的。但是 JavaScript 没有块级作用域的概念。而是使用了函数作用域。JavaScript 的函数作用域是指函数内声明的所有变量在函数体内始终是可见的。 1234567891011function test(o)&#123; var i = 0; // i 在整个函数体内部有定义 if (typeof o == 'object')&#123; var j = 0; // j 在函数体内有定义 for(var k = 0; k &lt; 10; k++)&#123; // k 在函数体内是有定义的，不仅仅是在循环内 console.log(k); // 输出 0~9 &#125; console.log(k); // 输出 10 &#125; console.log(j); // j 已经定义了，但是可能没有初始化&#125; 作为属性的变量当声明一个变量时，实际上是定义了一个全局对象的一个属性，当使用 var 声明变量时，创建的这个对象是不可配置的，也就是说这个变量不能通过 delete 操作符来删除。如果在非严格模式下，给一个未声明的全局变量赋值的话， JavaScript 会自动创建一个全局变量。以这种方式创建的变量是全局对象的正常的可配置属性，并且可以删除它们。 作用域链嵌套的函数体内部，可以访问它上一级作用域中的变量。 延长作用域链： try-catch 语句 with 语句 垃圾收集 标记清除 引用计数 性能问题 管理内存 数据类型javaScript 数据类型有两类： 基本数据类型 和 复杂数据类型，其中基本数据类型（简单类型）有： Number/String/Boolean/Uundefined/Null一种复杂数据类型：object：Array/Date/Math/RegExp/ typeof 操作符 “undefined” –&gt; 这个值未定义 “boolean” –&gt; 这个值是布尔值 “string” –&gt; 这个只是字符串 “number” –&gt; 这个值是数值 “object” –&gt; 这个值是对象或null “function” –&gt; 这个值是函数 typeof 操作符号后面的操作数可以是变量，也可以是字面量； typeof 误区： null 值返回 “object”; Safari5 以及之前的版本、Chrome7 以及之前的版本对正则表达式调用返回”object”， 其他浏览器在这种情况下返回”object” 未初始化的变量和没有定义的变量操作符 typeof 都返回 “undefined”， 但它们有本质区别 Number 数据类型字面量： var num = 数字; 包括正数，负数，小数 取值范围： 能表示的最大值是±1.7976931348623157乘以10的308次方 能表示的最小值是±5 乘以10的-324次方 表示方式 十进制 十六进制 以 0x 开头，从 0-9，a(A) 到 f（F）的范围。 八进制 以 0 开头，0-7 组成。 NaN (not a number) 也是 number 类型，NaN 不等于自身 两个都为字符串的变量相减，得到的是NaN. 浮点数： 计算浮点数时会丢失精度 通常用整数的计算来表示浮点数的计算 不要以两个浮点数是否相等作为条件判断的依据（判断范围还是可以的） String,字符串类型字面量： var str = “字符串”; 字符串的长度： str.length; 凡是用””或者’’引起来的全是字符串类型。 转义字符 \” 转双引号 \’ 转单引 \r 回车 \n 换行 \t 制表符 \f 进纸 \xnn 以十六进制表示一个字符(n 是 0~F) \unnnn 以十六进制代码nnnn表示一个 Unicode 字符 (n 是 0~F) 字符串的特点ECMAScript 中的字符串是不可变的，也就是说，字符串一旦创建，它们的直就不能改变。要改变某个变量保存的字符串，首先要销毁原来的字符串，然后再用另一个包含心智的字符串填充该变量。如： 12var str = "Java";str = str + "Script"; 转换为字符串数值、布尔值、对象和字符串值都有 toString()方法, 但是 null 和 undefined 没用这个方法。 调用toString() 方法时，大多数情况下不传参数，但是如果传递了一个参数，输出数值的基数。默认情况下，toString() 方法以十进制格式返回数值字符串表示。而通过传递基数，可以输出对应的二进制、八进制、十六进制。 123456var n = 10;console.log(n.toString()); // "10"console.log(n.toString(2)); // "1010"console.log(n.toString(8)); // "12"console.log(n.toString(10)); // "10"console.log(n.toString(16)); // "a" 在不知道要转换的值是什么类型的时候，可以用 String() 函数，它可以将任意类型转成字符串。 Boolean 布尔类型 布尔数据类型两个数据值: true/false 实际运算中，true 代表1, false代表0; Undefined 表示声明但未赋值的变量在 js 中，一下四种情况的返回值是 undefined 变量声明了但没有赋值 函数没有返回值默认返回undefined 函数传递的实参个数少于形参个数时，未传递的参数值为undefined 对象没有定义的属性默认为undefined Null用 typeof判断时值为 object(值为空)/引用为空，内存里找不到这个变量。 再如： 1console.log(undefined == null); // true 两等号判断，两边都转成false 总的来说，只要意在保存对象的变量还没有真正保存对象，就应该让该变量保存 null 值，这样做体现了 null 作为空对象指针的惯例，也区分了 undefined 和 null。 复杂类型（来自JavaScript高级程序设计） object 对象 ECMAScript 中的对象就是一组数据和功能的集合。可以通过 new 操作符后跟要创建的对象类型的名称来创建。而创建 Object 类型的实例并为其添加属性或方法，就可以创建自定义对象，如： 1var o = new Object(); Object的每个实例具有的属性和方法 constructor： 保存着用于创建当前对象的函数，即构造函数。 hasOwnProperty(propertyName): 用于检查给定的属性在当前对象的实例中(而不是在原型中)存在；参数是字符串。 isPrototypeOf(object): 检查传入的对象是否是传入对象的原型。 propertyIsEnumerable(propertyName): 检查给定的属性是否能够使用 for-in 语言来枚举。参数是字符串。 toLocalString(): 返回对象的字符串表示，该字符串与执行环境的地区对应。 toString(): 返回对象的字符串表示。 valueOf(): 返回对象的字符串、数值、或布尔值表示。通常与 toString() 方法的返回值相同。 数据类型转换隐式数据类型转换 变量参与到运算中，程序对变量进行的数据类型转换（不是程序员进行的数据类型） 强制数据类型转换 将数字转换为字符串 String 变量.toString ，注意：null 和 undefined 没有 toString() 方法 将字符串转换为数字 Number 转换后保留原数据，不会对数据进行四舍五入。 非数字类型字符串转换后，比如 undefined，得到 NaN 。 如果字符串中包含有效的十六进制格式，则将其转换为相同大小的十进制整数值。 parseInt 对小数转换后保留的是整数部分，不会对数据进行四舍五入。 如果是数字后边有非数字字符串，转换后得到的是前边数字的整数部分。 parseFloat 转换为数字类型之后保留原数据，不进行四舍五入。 非数字类型字符串转换后，得到 NaN 。 如果是数字后边有非数字字符串，转换后得到的是前边数字的部分。 将其他类型转换为布尔类型：所有类型的值都可以转化成布尔值 Boolean 会转化成false的值有： 空字符串 数值零 NaN undefined null 假值：空字符串””/数字0/null/undefined/false/NaN 基本数据类型和复杂数据类型总结 基本类型—值类型— String Undefined Number Boolean Null 复杂类型—引用类型– Object 数组–Array,Date…. 基本类型的值存储在—- 栈中 复杂类型的地址(引用)存储在栈中,—地址指向的空间中的对象(对象)—对象存储在堆中 创建对象并返回对象—返回的是对象的地址(对象在堆空间中的地址) 基本类型传值的时候，传递的是值 复杂类型(引用类型)传递的时候,传递的是:地址(引用)]]></content>
      <categories>
        <category>JS系列</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js词法结构]]></title>
    <url>%2F2015%2F06%2F01%2Fjs%E8%AF%8D%E6%B3%95%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[js 的词法结构是一套基本规则，用来描述如何使用 js 编程。它规定了如何变量名长什么样，如何写注释以及程序语句之间如何分隔。 字符集（JavaScript权威指南）区分大小写标识符关键字、变量名、函数名、函数参数和所有标识符都是采用一致的大小写。 第一个字符必须是一个字母、下划线(_)或一个美元符($)； 其它字符可以是字母、下划线、美元符号或者数字 驼峰命名法 关键字js 没有使用但保留的关键字 class const enum export extends import super 保留字 js已经使用的关键字 123456break delete function return typeofcase do if switch var catch else in this void continue false instanceof throw whiledebugger finally new true withdefault for null try 严格模式下的保留字 123implements let private public yieldinterface package protected staticarguments eval js 尽量避免使用的标识符 123456abstract double goto native ataticboolean enum implements package superbyte export import private synchronizedchar extends int protected throwsclass final interface public transientconst float long short volatiole js 预定义的全局变量和函数名 123456arguments encodeURI Infinity Number RegExpencodeURICompnent Array isFinite Object StringBoolean Error isNaN parseFloat SyntaxError Date eval JSON parseInt TypeErrordecodeURI EvalError Math RangeError undefineddecodeURIComponent Function NaN ReferenceError URIError 空格、换行符、格式控制 \u0020 空格符 \u0009 水平制表符 \u000B 垂直制表符 \u000C 换页符 \u00A0 不中断空白符 \uFEFF 字节标记 \u000A 换行符 \u000D 回车符 \u2028 行分隔符 \u2029 段分隔符 \u200F 格式控制符 \u200E 格式控制符 \u200D 零宽连接符 \uFEFF 零宽非连接符注释 单行注释 1//单行注释 单行段落注释 1/*这是一个段落注释*/ 多行注释 1234/** 多行注释* 这里的注释可以连续写几行*/ 直接量直接量就是程序中直接使用的数据值，如： 1.2 // 数字 “123” // 字符串 “string” // 字符串 true // 布尔值 /^/w+/g // 正则表达式直接量 null // 空 {name:&quot;Hiraku&quot;,age:12} // 对象 [1,2,4] // 数组 分号的问题JavaScritp 使用分号(;)将语句和语句分开。JavaScript 并不是所有换行处都加分号，而是只有在缺少了分号就无法正确解析代码的时候，JavaScript才会填补分号。 如果当前语句和下一行语句无法合并解析，JavaScript 则在第一行后面填补分号，这是通用规则，但是有两个例外，一个是在涉及语句时，如果这三个关键字后紧跟着换行，JavaScript 则会在换行处填补分号。也就是说， return、break 和 continue 语句之后不能直接换行.]]></content>
      <categories>
        <category>JS系列</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js初识]]></title>
    <url>%2F2015%2F05%2F30%2Fjs%E5%88%9D%E8%AF%86%2F</url>
    <content type="text"><![CDATA[ECMAScript 是一种由 Ecma 国际前身为欧洲计算机制造商协会,英文名称是European Computer Manufacturers Association，制定的标准。 JavaScript 是由公司开发而成的，公司开发而成的一定是有一些问题，不便于其他的公司拓展和使用。所以欧洲的这个ECMA的组织，牵头制定 JavaScript 的标准，取名为 ECMAScript。简单来说 ECMAScript 不是一门语言，而是一个标准。符合这个标准的比较常见的有：JavaScript、Action Script（Flash中用的语言）。就是说，你JavaScript学完了，Flash中的程序也会写了。 ECMAScript 在 2015 年 6 月，发布了 ECMAScript 6 版本，语言的能力更强。 javaScript概念、组成概念：js是一门在客户端进行交互的网页编程语言. 一个完整的 JavaScript实现应该由下列三个部分组成： 组成： ECMAScript js标准 Dom 可以利用JS操作网页元素 Bom 通过api来操作浏览器 ECMAScriptweb 浏览器是 ECMAScript 实现可能的宿主环境之一，ECMAScript 规定了语言的的下列组成部分： 语法 类型 语句 关键字 保留字 操作符 对象 ECMAScript 就是对实现这个标准规定的各方面内容的语言描述。 DOM 文档对象模型 简介文档对象模型是针对 XML 但经过扩展用于 HTML 的应用程序编程接口。DOM 把整个页面映射为一个多层节点结构。HTML 或 XML 页面中的每个组成部分都是某种类型的节点，这些节点又包含不同的数据类型的数据。 BOM 浏览器对象模型 简介BOM 只处理浏览器窗口和框架，习惯上把所有针对浏览器的 JavaScrip 扩展算作 BOM 的一部分。如： 弹出新浏览器窗口 移动、缩放和关闭浏览器窗口的功能 提供浏览器信息信息的 navigator 对象 提供浏览器所加载页面详细信息的 location 对象 提供用户显示器分辨率详细信息的 screen 对象 对 cookie 的支持 像 XMLHttpRequest 和 IE 的 ActiveXObject 这样的自定义对象 由于没 BOM 统一标准，所以各个浏览器都有自己的实现功能，尽管各规定浏览器都实现 window 对象和 navigator 对象； JavaScript 的特点 简单易用 基于对象 基于过程 解释执行：js引擎来执行源代码 ， node 平台 编译执行类语言有：Java c# 源代码 ==&gt; 可执行文件.dll ==&gt; 电脑执行.dll课执行文件 使用范围： 表单验证 轮播图特效 游戏开发 &lt;script&gt;&lt;/script&gt;元素&lt;script&gt;&lt;/script&gt; 定义了6个属性 async: 可选。立即下载脚标，对页面中其他元素没有影响。只对外部脚标文件有效 charset: 可选。 表示通过 src 属性指定的代码的字符集。大多数浏览器会忽略其值，很少用 defer：可选。 表示脚本可以延迟到文档完全被解析和显示之后再执行。只对外部脚本有效 language: 已废弃。 src：可选。要执行的外部文件 type：可选。考虑到最大程度的兼容，使用 &quot;text/javascript&quot; js书写位置 内嵌式 1234567&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;title&gt;js 书写位置&lt;/title&gt;&lt;script&gt; // js 代码段&lt;/script&gt;&lt;/head&gt; 外链式写法 新建一个js文件 通过script标签里的src=”1.js”属性将JS文件调入到当前页面。 补充内嵌式写法：推荐Js代码最好放在body结束标签的后边。 在XHTML中的用法XHTML 即可扩展的超文本标记语言，是将 HTML 作为 XML 的应用重新定义的一个标准。 1234567&lt;script type="text/javascript"&gt;// &lt;![CDATA[ funciton foo()&#123; // 代码段 &#125;//]]&gt;&lt;/script&gt; 文档模式doctype: 标准模式、混杂模式 严格模式开启：use strict; 页面中输出消息的几种方式12345alert("信息") 在页面出现一个弹出框，将信息弹出。confirm("信息") 在页面出现一个弹出框，将信息显示，常与if判断语句结合使用。prompt("信息") 弹出一个文本框，可以在文本框接收内容。常用于接收信息。console.log("信息")将信息输出到控制台，常用于代码调试。document.write("信息") 直接在页面输出消息。 注：document.write(“信息”)，不仅可以输出内容，还可以输出html标签。]]></content>
      <categories>
        <category>JS系列</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML元素分类、伪类、背景图片]]></title>
    <url>%2F2015%2F05%2F28%2FHTML%E5%85%83%E7%B4%A0%E5%88%86%E7%B1%BB%E3%80%81%E4%BC%AA%E7%B1%BB%E3%80%81%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[CSS Cascading style sheets写法 内嵌式 外链式 1&lt;link rel="stylesheet" href="1.css"&gt; 行内样式 三种样式写法的区别 内嵌样式表： 影响范围限于当前页面，其他页面无效，不能真正实现结构和表现解耦 外链样式表 影响范围大，是整个站点，实现真正的结构表现分离 行内样式表： 仅限于当前标签，作用范围小。结构和表现完全耦合 link和@import区别 link属于HTML标签，而@import是CSS提供的 页面加载时，link会同时加载，而@import引入的CSS要等到页面中的所有元素加载完再加载 @import有兼容性，而link是HTML标签，无兼容性问题 link方式的样式的权重高于@import的权重 link引入的CSS支持js修改样式，而@import导入的CSS不能被js代码修改样式； html分类（显示方式）块元素最常用的有： div,p, li, h1-h6 特点： 独占一行 可以定义宽度和高度 包含关系的时候，父元素和子元素都为块元素的时候，子元素的宽度等于父元素的宽度 行内元素（内联元素）典型代表：strong span a em b del s ins i u 特点： 不能设置宽高， 宽高度由内容撑开 在一行上显示 行内块元素典型代表img input 特点： 在一行显示 可以定义宽高 元素之间的转换 行内元素转成块级元素 1display:block; 块级元素转成行内元素 1display:inline-block; 块元素转成行内元素 块、行内元素转成行内块元素 css特性层叠性当样式属性冲突时，执行时是最后面样式。和标签调用顺序无关。 继承性 条件：包含关系 普遍性：文本大小、字体、粗细、颜色、行高、风格样式被继承 特殊性： 标题标签不会继承，但受父级元素的影响，文字大小。 a标签不会继承父元素的文字颜色。 不可继承的：display、margin、border、padding、background、height、min-height、max-height、width、min-width、max-width、overflow、position、left、right、top、bottom、z-index、float、clear、table-layout、vertical-align、page-break-after、page-bread-before和unicode-bidi。 所有元素可继承：visibility和cursor。 内联元素可继承：letter-spacing、word-spacing、white-space、line-height、color、font、font-family、font-size、font-style、font-variant、font-weight、text-decoration、text-transform、direction。 终端块状元素可继承：text-indent和text-align。 列表元素可继承：list-style、list-style-type、list-style-position、list-style-image。 文字的所有属性可以继承，行高也可以继承, 但a标签不继承文字颜色 优先级 !important &gt; 行内样式 &gt; id选择器 &gt; 类选择器 &gt; 标签选择器 &gt; 默认 1000以上 1000 100 10 1 0 继承的权重为0, 权重会叠加 连接伪类a:link{属性:值;}, 没有点击时默认状态 a{属性:值;} 一般写这个 1234567891011121314151617181920a:link&#123; /*连接默认状态*/ 属性:值;&#125;a:visited&#123; /*连接访问之后的状态*/ 属性:值;&#125;a:hover&#123; /*鼠标放上去显示的状态*/ 属性:值;&#125;a:active&#123; /*连接激活的状态*/ 属性:值;&#125;a:focus&#123; /*获取较大*/ 属性:值;&#125; 注意：连接伪类的顺序不能错； text-decoration 文本修饰 text-decoration: none; 去掉a标签的默认样式的下划线 text-decoration: underline; 加上下划线 text-decoration: line-through; 删除线 背景 background-color background-image background-repeat 背景图片沿着x轴平铺 background-position left|right|top|bottom|center 背景定位写具体方位的时候，书写顺序没有限制 background-attchment scroll|fixed scroll 背景滚动 默认 fixed 背景固定 背景属性连写1background: color imge repeat position attachment 特点：没有顺序要求]]></content>
      <categories>
        <category>CSS系列</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS样式表、CSS选择器]]></title>
    <url>%2F2015%2F05%2F26%2FCSS%E6%A0%B7%E5%BC%8F%E8%A1%A8%E3%80%81CSS%E9%80%89%E6%8B%A9%E5%99%A8%2F</url>
    <content type="text"><![CDATA[样式表的书写位置写在 &lt;head&gt;&lt;/head&gt; 中, 样式：选择器{属性:值;属性:值; }1234567&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;样式表写法&lt;/title&gt; &lt;style type="texr/css"&gt; 样式表内容 &lt;/style&gt;&lt;/head&gt; 样式表的常见属性 width 宽度 width:200px; height 高度 height:200px; background-color 背景色 background-color:red; font-size 文字大小 font-size:20px; color 文本颜色(前景色) color:yellow; text-align 内容的水平对齐方式 text-align:left|center|right text-indent 首行缩进 text-indent:2em;（2个汉字的大小） 常见属性表格 属性 值 说明 width 20px 宽 height 300px 高 background-color red 背景色 text-align left/center/right 内容水平对齐方式 text-indent 2em/px/% 首行缩进 font-size normal/bold 文本大小 font-weight 100-900/bold 文本粗细 font-style normal/italic 文本风格 font-family 宋体 字体 line-height 1.5/2em/px/% 行高 行高行高 浏览器默认文字大小 div 1350px*18px 行高=文本+上边距+下边距 默认文字大小是16px 默认行高大小是18px一行文字，行高与父元素高度一致时，文本垂直居中对齐。 行高的单位12345行高值 文字大小 行高大小40px 20px 40px2em 20px 40px150% 20px 30px3 20px 60px 总结： 当给父元素设置行高的时候，除了以px为单位以外，其他的值都与文字大小有关，是与文字大小的乘积, 行高是可以继承。 12345父元素行高 父元素文字大小 子元素文字大小 子元素行高40px 20px 30px 40px2em 20px 30px 40px150% 20px 30px 30px3 20px 30px 90px 文本基线 基础选择器标签选择器 写法：标签{属性值;} 特点：标签选择器定义之后，会将页面所有的元素都执行这个样式颜色的显示方式： 直接写颜色名称： 如： “red”； 16进制显示 由0-9和a-ff一共16个值组成；#ff0000; #ff0000,前边2个数值对应的是红色, #00ff00,中间2个对应的是绿色, #0000ff,后边2个对应的是蓝色。 RGB表示颜色 如：span{color: rgb(23,23,23); } r代表红色，g绿色 b蓝色 rgba 表示不透明度 如：h1{width: 500px; height: 400px; color: rgba(121,232,108,0.5); } a代标alpha 0-1; 类选择器 写法：自定义类名{属性:值;} 特点：类选择器需要调用才能生效，谁调用谁生效1.box&#123;width: 200px; height: 40px; color: yellow; background-color: rgb(24,124,101); text-align: center; font-size: 24px; &#125; 多标签可以调用同一个类选择器1&lt;div class="box baby"&gt;加油努力奋斗&lt;/div&gt; 类选择器的命名规则 不能使用纯数字和纯数字开头来定义类名 不建议使用中文 不能使用特殊符号来定义类名（“_”除外） 不建议使用标签名和属性名来定义类名 id选择器 写法： #名称{属性:值} 1#box&#123;width: 300px; height: 200px; background-color: pink; font-size: 20px; &#125; 特点: id选择器需要调用才能生效，谁调用谁生效 一个标签不能调用多个ID选择器 一个id选择器在一个页面内只能调用一次，多次调用不符合w3c规范，配合js使用，若出现多次js调用则会出错 通配符选择器 写法：*{属性:值;} 特点： 浏览器累死了，消耗服务器资源，不推荐使用； 会将所有的标签都执行这个通配符选择器 文本介绍文本属性 文本属性 font-size 文字大小 font-weight 文字的粗细 值从100-900; 700的值和bold大约一样(用700,不用bold) font-style 文本风格： nomarl |italic font-family 字体：宋体，微软雅黑，楷体 line-height 行高 文本属性连写顺序：font: font-style font-weight font-size/line-height font-family 注：按照顺序写，文字大小和字体在文字连写的时候为必须写的属性 字体的表达方式 直接写中文字体（宋体|微软雅黑） 直接写字体的英文名字（simsun|microsoft yahei|） Unicode编码方式 在浏览器中查找Unicode编码 chrome–&gt;f12–&gt;console–&gt;escape(“宋体”)–&gt;enter 复合选择器两个或两个以上的选择器通过不同的方式连接到一起 交集选择器 写法 标签+类(id){属性:值} 特点：既…又的关系 后代选择器 写法： 选择器+空格+选择器+空格+选择器{属性:值;} 注意：后代选择器首先要满足包含（嵌套关系）。 特点： 可以无限制隔代。 只要能代表父子关系，标签选择器、类选择器、id选择器可以任意组合 父级元素在前面，子级元素在后面 子代选择器 写法：选择器&gt;选择器{属性:值;} 特点：选中的是直接下一级 12345678910111213&lt;style type="text/css"&gt; div&gt;span&#123; color: red; font-size: 36px;&#125;&lt;/style&gt;&lt;div&gt; &lt;p&gt; &lt;span&gt; 愿使岁月静好，现世安稳。 &lt;/span&gt; &lt;/p&gt; &lt;span&gt;天才在左疯子在右&lt;/span&gt;&lt;/div&gt; 并集选择器将不同选择器之间相同的样式写在一起，选择器之间通过逗号链接在一起。 可能是包含关系，也可能是并列关系。 如果标签样式相同或者部分相同，可以用并集选择器，通过逗号连接在一起 选择器+,+选择器{属性:值;} 特点：并集选择器不一定是并列关系 标签选择器、类选择器、id选择器、复合选择器，可以通过逗号任意组合连接在一起 123456.one,.one .two, .three, p&#123;font-size: 50px; font-weight: normal; &#125;&lt;div class="one"&gt;&lt;h1 class="two"&gt;明媚的心&lt;/h1&gt;&lt;/div&gt;&lt;p&gt;天才，和蠢材的差别是勤奋&lt;/p&gt;&lt;div class="three"&gt;美丽的人生要靠努力&lt;/div&gt;]]></content>
      <categories>
        <category>CSS系列</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML表格、表单、标签语义化]]></title>
    <url>%2F2015%2F05%2F22%2FHTML%E8%A1%A8%E6%A0%BC%E3%80%81%E8%A1%A8%E5%8D%95%E3%80%81%E6%A0%87%E7%AD%BE%E8%AF%AD%E4%B9%89%E5%8C%96%2F</url>
    <content type="text"><![CDATA[HTML5标签结构sublime 快捷键 !+Tab 可以写成HTML5结构 字符编码 ASCLL ansi unicode GBK GB2312(中文简体) BIG5(只支持繁体字) UTF-8(国际通用编码) meta标签12345678910标签说明 &lt;!--编码--&gt; &lt;meta charset="utf-8"&gt; &lt;!--关键字--&gt; &lt;meta name="keywords" content="java培训, ios"&gt; &lt;!--name 页面里面的关键词 content 里面是给SEO用的--&gt; &lt;!--网页描述--&gt; &lt;meta name="description" content="给搜索引擎看的，可以看得到的内容"&gt; &lt;!--网页重定向--&gt; &lt;meta http-equiv="refresh" content="5;http:www.itcast.com"&gt; link标签调用外部样式表：11 &lt;link rel="stylesheet" href="1.css"&gt; ico小图标，在网页显示时的标题的前面：(必用)11 &lt;link rel="icon" href="../favicom.ico"&gt; 简单表格用来存放数据的，表格是对网页重构（css+div）一个有有益补充 行 tr 列 td 简单结构（1行2列）123456&lt;table border="1" width="300" height="100" cellspacing="0" cellpadding="10"&gt; &lt;tr&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 表格属性介绍 边框 border=”1” 宽度 width=”300” 高度 height=”100” 单元格与单元格的距离 cellspacing=”2”，默认值2 内容到边框的距离cellpadding=”2” 默认值0 背景色 bgcolor=”yellow” 对齐方式 align left|center|right 如果align放到tr或者td里面是内容的对齐方式 如果align放到table里面，是表格的对齐方式 表格标题 用法和td一样 1234567891011&lt;table border="1" width="300" height="100" cellspacing="0" cellpadding="10"&gt; &lt;caption&gt;表头&lt;/caption&gt; &lt;tr&gt; &lt;th&gt;&lt;/th&gt; 表格的标题 &lt;th&gt;&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 表格的标准结构1234567891011121314151617&lt;table&gt; &lt;caption&gt;&lt;/caption&gt; &lt;thead&gt; &lt;tr&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;tfoot&gt; &lt;/tfoot&gt;&lt;/table&gt; 表格单元格的合并 在同一行上合并 colspan=”2” 在同一列上合并 表单用来收集信息 提示信息 表单控件 action：用来处理信息（信息提交给谁，把文件提交给那个文件处理） method：get|post 传递信息的方法 get 安全性很低，通过浏览器的地址栏传递信息，post 安全性高，通过action文件处理，它们的区别如下 1.GET没有请求主体，使用xhr.send(null)2.GET可以通过在请求URL上添加请求参数3.POST可以通过xhr.send(‘name=itcast&amp;age=10’)4.POST需要设置5.GET效率更好（应用多）6.GET大小限制约4K，POST则没有限制 表单控件1 &lt;form action=&quot;1.php&quot; method=&quot;post&quot;&gt;&lt;/form&gt; 单行文本输入框1 &lt;input type=&quot;text&quot; name=&quot;username&quot; value=&quot;Hiraku&quot; maxlength=&quot;16&quot; readonly=&quot;readonly&quot; &gt; name 文本输入框的名字 value 接收的默认值 文本框的值 maxlength 输入的最大字符长度 readonly 输入框为只读状态 disabled 输入框为未激活状态 密码输入框1 &lt;input type=&quot;password&quot; name=&quot;密码输入框&quot;&gt; 单行文本输入框的属性对密码输入框都适用 单选框1 &lt;input type=&quot;radio&quot; name=&quot;gender&quot; checked=&quot;checked&quot;&gt;男 2 &lt;input type=&quot;radio&quot; name=&quot;gender&quot;&gt;女 当将单选框name值设置相同的时候才能实现单选效果, checked 设置默认选中项。 下拉列表下拉列表12345678910111213&lt;select&gt; &lt;option selected=”selected”&gt;下拉列表选项&lt;/option&gt; &lt;!--设置默认选项--&gt;&lt;/select&gt;&lt;!-- multiple="mutiple" 下拉列表多选 设置下拉列表为多选项 --&gt;&lt;optgroup label="甘肃省"&gt; 对下拉列表进行分组 &lt;option value=""&gt;定西市&lt;/option&gt; &lt;option value=""&gt;兰州市&lt;/option&gt; &lt;option value=""&gt;庆阳市&lt;/option&gt; &lt;option value=""&gt;天水市&lt;/option&gt; &lt;option value=""&gt;嘉峪关&lt;/option&gt; &lt;option value=""&gt;酒泉市&lt;/option&gt;&lt;/optgroup&gt; 多选框1234&lt;input type="checkbox" checked="checked"&gt;动漫&lt;input type="checkbox"&gt;电影&lt;input type="checkbox"&gt;电子竞技&lt;input type="checkbox"&gt;音乐 checked 默认选项 多文本输入框1 &lt;textarea name=&quot;输入框&quot; id=&quot;&quot; cols=&quot;30&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt; cols 输入字符的长度 rows 输入字符的行数 上传文件控件1 &lt;input type=&quot;file&quot;&gt; 提交按钮1 &lt;input type=&quot;submit&quot;&gt; 普通按钮1 &lt;input type=&quot;button&quot; value=&quot;普通按钮&quot;&gt; 普通按钮不能实现表单信息提交，常配合js使用 图片按钮1 &lt;input type=&quot;image&quot; src=&quot;&quot;&gt; 表单信息分组1 &lt;form&gt; 2 &lt;fieldset&gt; 3 &lt;legend&gt;注册信息&lt;/legend&gt; 4 &lt;input&gt; 5 &lt;/fieldset&gt; 6 &lt;/form&gt; 重置按钮1 &lt;input type=”reset” value=”重置信息”&gt; HTML5表单控件1 &lt;form action=&quot;1.php&quot; method=&quot;post&quot;&gt; 2 &lt;!-- 判断网址 --&gt; 3 &lt;input type=&quot;url&quot;&gt;&lt;br/&gt;&lt;br/&gt; 4 &lt;!-- 判断邮箱 --&gt; 5 &lt;input type=&quot;email&quot;&gt;&lt;br/&gt;&lt;br/&gt; 6 &lt;!-- 日期控件 --&gt; 7 &lt;input type=&quot;date&quot;&gt;&lt;br/&gt;&lt;br/&gt; 8 &lt;!-- 时间控件 --&gt; 9 &lt;input type=&quot;time&quot;&gt;&lt;br/&gt;&lt;br/&gt; 10 &lt;!-- 数字控件 --&gt; 11 &lt;input type=&quot;number&quot;&gt;&lt;br/&gt;&lt;br/&gt; 12 &lt;!-- 滑块控件 --&gt; 13 &lt;input type=&quot;range&quot; max=&quot;150&quot; min=&quot;2&quot; step=&quot;5&quot;&gt;&lt;br/&gt;&lt;br/&gt; 14 &lt;input type=&quot;submit&quot;&gt; 15 &lt;/form&gt; 标签语义化标签语义化即：根据内容的结构化（内容语义化），选择合适的标签 注意事项： 尽可能少的使用无语义的标签div和span 在语义不明显是尽量用p,即可使用div也可使用p 不要使用纯样式标签: 需要强调的文本尽量用和 好的标签语义化网站：去掉CSS，结构依然很清晰]]></content>
      <categories>
        <category>HTML系列</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识HTML]]></title>
    <url>%2F2015%2F05%2F20%2F%E5%88%9D%E8%AF%86HTML%2F</url>
    <content type="text"><![CDATA[HTML基础 Hyper text markup language 超文本标记语言 超文本：网页中可以包含图片、文字、视频、音频、文本框等元素; 标记（标签）：在网页中给网页元素做标记（右键，查看网页源代码） 超链接：实现页面之间的跳转 Sublime常用快捷键 windows+D 返回桌面 windows+R 运行dos windows+E 打开我的电脑 Alt+Tab 切换软件 Ctrl+Tab 软件内部文档间切换 F2 重命名 Web标准 结构标准：HTML HyperText Mark Language 超文本标记语言 表现标准：CSS Casading Style Sheets 层次样式表 行为标准：javaScript ECMAScript javaScript标准 DOM Document Object Model 文档对象模型 BOM Browser Object Model 浏览器对象模型 浏览器简介浏览器涉及技术：浏览器内核，渲染引擎 SEO,Search Engine Optimization(搜索引擎优化)。 浏览器内核：分为两部分：渲染引擎和JS引擎，决定了浏览器如何显示网页的内容、页面格式等 ie trident firefox gecko chrome/safari webkit chrome blink opera persto 浏览器和服务器的那点事 http协议：超文本传输协议、浏览器和服务器之间的对话（通信的协议）。 https：加密的过程 url协议：规定url地址的格式 协议规定格式：scheme:定义因特网服务类型 host：定义域主机 端口：网页默认80端口 path：路径 filename： 文件名 HTML结构1234567891011121314151617&lt;! Doctype html&gt; &lt;!--声明文档类型--&gt;&lt;html&gt; &lt;!--根标签--&gt;&lt;head&gt; &lt;!--头部标签--&gt;&lt;title&gt;标题&lt;/title&gt; &lt;!--网页标题标签--&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;网页主体&lt;/div&gt; &lt;!--网页主体标签--&gt;&lt;/body&gt;&lt;/html&gt;解析： &lt;! Doctype html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt;&lt;/body&gt; &lt;/html&gt; 注：文档的后缀名只能决定打开方式，不能修改文档类型 HTML标签的分类 单标签 &lt;! Doctype html&gt; &lt;img src=&quot;&quot; alt=&quot;&quot;/&gt; 双标签 &lt;html&gt;&lt;/html&gt; &lt;head&gt;&lt;/head&gt; &lt;title&gt;&lt;/title&gt; &lt;body&gt;&lt;/body&gt; … HTML关系 并列关系（同级） &lt;head&gt;&lt;/head&gt; 和 &lt;body&gt;&lt;/body&gt; 包含关系（嵌套） &lt;head&gt;&lt;title&gt;标题&lt;/title&gt;&lt;/head&gt; 开发工具 DreamWeaver：很老的一个软件 偏设计师使用 Sublime:轻量级的软件，有很多好用的插件 WebStorm:重量级软件，功能强大 Sublime 常用的快捷键 html:xt + tab html结构 html:5 + tab html结构 Ctrl+shift+D 快速复制 Ctrl+shift+K 快速删除一行 Ctrl+shift+↑/↓ 快速上下移动一行 Tab 补全标签 Ctrl+鼠标左键 选中多行 Ctrl+L 选中一行 Ctrl+H 替换别的标签 Alt+shift+2 查看布局 Alt+V 显示/隐藏菜单栏 ctrl+shift+p + move指令 移动文件 HTML标签单标签1231 &lt;!--注释: 快捷键Ctrl+/--&gt; 2 &lt;br/&gt; 换行3 &lt;hr/&gt; 水平线 双标签 段落标签：&lt;p&gt;&lt;/p&gt; 文本标签：&lt;font&gt;&lt;/font&gt; 标题标签：12341 &lt;h1&gt;&lt;/h1&gt;2 &lt;!--h1只能出现一次，出现多了不利于搜索引擎--&gt;3 &lt;h2&gt;&lt;/h2&gt;4 &lt;h6&gt;&lt;/h6&gt; 标题系列取值只能取到h6 文本格式化标签 加粗 , 常用strong 倾斜 , 常用em 删除线标签 , 常用del 插入文本： , 常用ins 上下标标签：, 注意：使用strong em del ins 更有意义 图片标签&lt;img src=&quot;Legolas.jpg&quot; alt=&quot;我的男神&quot; title=&quot;legolas&quot; width=&quot;500&quot; /&gt; 仅指定宽或高时，等比例缩放。 src 图片来源（路径）, alt 替换文本. title 提示文本（鼠标放到图片上显示的文字; width 图片显示的宽度 height 图片显示的高度 相对路径和绝对路径（相对路径的可移植性好） 相对路径： 文档（html/图片）在同一个文件夹，直接写图片（文档）名字 &lt;img src=&quot;Legolas.jpg&quot; alt=&quot;legolas&quot; height=&quot;300&quot; /&gt; 文档不在同一个文件夹，在上级文件中 &lt;img src=&quot;../1.jpg&quot; alt=&quot;legolas&quot; height=&quot;300&quot; /&gt; 文档不在同一个文件夹，在上两级文件中 &lt;img src=&quot;../../Hydrangeas.jpg&quot; alt=&quot;菊花&quot; height=&quot;300&quot; /&gt; 文档不在同一个文件夹，在下级文件中 &lt;img src=&quot;pic/Koala.jpg&quot; alt=&quot;考拉&quot; height=&quot;300&quot; /&gt; 文档不在同一个文件夹，在下两级文件中 &lt;img src=&quot;pic/photo/Penguins.jpg&quot; alt=&quot;企鹅&quot; height=&quot;300&quot; /&gt; 绝对路径： 本地电脑绝对路径 &lt;img src=&quot;F:\pic\photo&quot; alt=&quot;企鹅&quot; /&gt; 互联网上的绝对路径： 网页中的图片来自服务器端传输过来的。 超链接标签超链接：&lt;a href=&quot;06_test&quot; target=&quot;_blank&quot; title=&quot;气温高&quot;&gt;气温案例&lt;/a&gt; href 去往的路径（连接的文档），必写属性。 target=” _self” 关闭自身串口，打开新窗口 target=”_blank” 自身窗口不关闭，打开新窗口 title 提示文本，是非必须的 ctrl+shift+s: 另存为 把文件复制并另存为 超链接优化： &lt;base target=”_blank”&gt; 锚点： 第一步：给标签加id 第二部：herf写上#+id名 &lt;a href=&quot;#xd&quot;&gt;回到顶部&lt;/a&gt; 压缩包：&lt;a href=&quot;压缩包.rar&quot;&gt;压缩文件下载&lt;/a&gt; 空连接：&lt;a href=&quot;#&quot;&gt;此处有连接&lt;/a&gt; 特殊字符：段落标签的写法列表标签 无序列表 square 实心方块 dick 默认实心小圆圈 circle 空心小圆圈 注意：ul标签里面只能放li标签，li里面可以放任何标签 有序列表 12345671 &lt;ol&gt;2 &lt;li&gt;打开冰箱门&lt;/li&gt;3 &lt;li&gt;把大象装在冰箱里&lt;/li&gt;4 &lt;li&gt;关上冰箱门&lt;/li&gt;5 &lt;/ol&gt;6 &lt;ol type="A"&gt;&lt;/ol&gt;7 &lt;ol type="1" start="4"&gt;&lt;/ol&gt; type 的取值可以是1，a，A，i，I start 是开始的序号 自定义列表 12341 &lt;dl&gt;2 &lt;dt&gt;北京&lt;/dt&gt; &lt;!--小标题--&gt;3 &lt;dd&gt;昌平区&lt;/dd&gt; &lt;!—标题的解释--&gt;4 &lt;/dl&gt; 其他标签 音乐标签 embed 背景音乐 &lt;embed src=&quot;BIGBANG - BAD BOY (Live).mp3&quot; hidden=&quot;false&quot; /&gt; hidden = “ture” 影藏，默认是false，播放器 滚动标签 &lt;marquee behavior=&quot;scroll&quot; direction=&quot;right&quot; width=&quot;500px&quot; height=&quot;100px&quot; bgcolor=&quot;blue&quot;&gt;我来也&lt;/marquee&gt;]]></content>
      <categories>
        <category>HTML系列</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
</search>
