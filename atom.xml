<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Honey Young</title>
  
  <subtitle>小杨鹤</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-24T08:17:18.524Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>honey young</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>个人技能</title>
    <link href="http://yoursite.com/2018/05/23/%E4%B8%AA%E4%BA%BA%E6%A0%87%E7%AD%BE/"/>
    <id>http://yoursite.com/2018/05/23/个人标签/</id>
    <published>2018-05-23T07:23:29.000Z</published>
    <updated>2018-05-24T08:17:18.524Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="个人技能" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
      <category term="CSS3" scheme="http://yoursite.com/tags/CSS3/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="Ajax" scheme="http://yoursite.com/tags/Ajax/"/>
    
      <category term="AngularJS" scheme="http://yoursite.com/tags/AngularJS/"/>
    
      <category term="BOM" scheme="http://yoursite.com/tags/BOM/"/>
    
      <category term="Bower" scheme="http://yoursite.com/tags/Bower/"/>
    
      <category term="Cookie" scheme="http://yoursite.com/tags/Cookie/"/>
    
      <category term="DOM" scheme="http://yoursite.com/tags/DOM/"/>
    
      <category term="EJS" scheme="http://yoursite.com/tags/EJS/"/>
    
      <category term="Express" scheme="http://yoursite.com/tags/Express/"/>
    
      <category term="Gulp" scheme="http://yoursite.com/tags/Gulp/"/>
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
      <category term="JSON" scheme="http://yoursite.com/tags/JSON/"/>
    
      <category term="MongoDB" scheme="http://yoursite.com/tags/MongoDB/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="RequireJS" scheme="http://yoursite.com/tags/RequireJS/"/>
    
      <category term="SeaJs" scheme="http://yoursite.com/tags/SeaJs/"/>
    
      <category term="Session" scheme="http://yoursite.com/tags/Session/"/>
    
      <category term="Underscore" scheme="http://yoursite.com/tags/Underscore/"/>
    
      <category term="bolg" scheme="http://yoursite.com/tags/bolg/"/>
    
      <category term="browser" scheme="http://yoursite.com/tags/browser/"/>
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
      <category term="cordova" scheme="http://yoursite.com/tags/cordova/"/>
    
      <category term="eCharts" scheme="http://yoursite.com/tags/eCharts/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="ionic" scheme="http://yoursite.com/tags/ionic/"/>
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
      <category term="Grunt" scheme="http://yoursite.com/tags/Grunt/"/>
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
      <category term="mine" scheme="http://yoursite.com/tags/mine/"/>
    
      <category term="net" scheme="http://yoursite.com/tags/net/"/>
    
      <category term="network" scheme="http://yoursite.com/tags/network/"/>
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
      <category term="nrm" scheme="http://yoursite.com/tags/nrm/"/>
    
      <category term="nvm" scheme="http://yoursite.com/tags/nvm/"/>
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
      <category term="artTemplate" scheme="http://yoursite.com/tags/artTemplate/"/>
    
      <category term="ps" scheme="http://yoursite.com/tags/ps/"/>
    
      <category term="sublime" scheme="http://yoursite.com/tags/sublime/"/>
    
      <category term="webstorm" scheme="http://yoursite.com/tags/webstorm/"/>
    
      <category term="vs code" scheme="http://yoursite.com/tags/vs-code/"/>
    
      <category term="svn" scheme="http://yoursite.com/tags/svn/"/>
    
      <category term="eclipse" scheme="http://yoursite.com/tags/eclipse/"/>
    
      <category term="命令行" scheme="http://yoursite.com/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
      <category term="小项目" scheme="http://yoursite.com/tags/%E5%B0%8F%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="库" scheme="http://yoursite.com/tags/%E5%BA%93/"/>
    
      <category term="性能优化" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="框架" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="模块化" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
      <category term="正则" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99/"/>
    
      <category term="表单" scheme="http://yoursite.com/tags/%E8%A1%A8%E5%8D%95/"/>
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="交互" scheme="http://yoursite.com/tags/%E4%BA%A4%E4%BA%92/"/>
    
  </entry>
  
  <entry>
    <title>js的数组</title>
    <link href="http://yoursite.com/2015/06/22/js%E7%9A%84%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2015/06/22/js的数组/</id>
    <published>2015-06-21T16:00:00.000Z</published>
    <updated>2018-05-30T07:27:46.349Z</updated>
    
    <content type="html"><![CDATA[<p>数组是表示集合的值，每一个值是一个元素，每一个元素在数组中有一个位置，以数字表示，叫索引。数组继承自 Array.prototype.</p><h2 id="js的内置对象：数组Array"><a href="#js的内置对象：数组Array" class="headerlink" title="js的内置对象：数组Array"></a>js的内置对象：数组Array</h2><h2 id="数组声明"><a href="#数组声明" class="headerlink" title="数组声明"></a>数组声明</h2><ul><li>直接量方式创建数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> empty = []; <span class="comment">// 没有元素的空数组</span></span><br><span class="line"><span class="keyword">var</span> num = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>]; <span class="comment">// 有5个元素的数组</span></span><br><span class="line"><span class="keyword">var</span> misc = [<span class="number">1</span>, <span class="literal">true</span>, <span class="string">"a"</span>, ]; <span class="comment">// 有不同数据类型元素的数组</span></span><br><span class="line"><span class="keyword">var</span> misc2 = [[<span class="number">1</span>], &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;,[<span class="number">2</span>, &#123;<span class="attr">x</span>:<span class="number">2</span>, <span class="attr">y</span>: <span class="number">1</span>&#125;]];</span><br></pre></td></tr></table></figure><p>数组直接量中可以是任意的表达式。</p><ul><li>使用构造函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();<span class="comment">// 数组的构造函数 创建的是一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"4"</span>);<span class="comment">// 只有传入一个数值的时候 才表示数组元素的个数</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>, <span class="number">4</span>, <span class="string">"abc"</span>); <span class="comment">// 显示的指定两个或多个数组元素或者数组的一个非数值元素</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="数组元素的读和写"><a href="#数组元素的读和写" class="headerlink" title="数组元素的读和写"></a>数组元素的读和写</h2><h3 id="数组的合法表达式"><a href="#数组的合法表达式" class="headerlink" title="数组的合法表达式"></a>数组的合法表达式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">"world"</span>]; </span><br><span class="line"><span class="keyword">var</span> value = a[<span class="number">0</span>]; <span class="comment">// 读取第 0 个元素</span></span><br><span class="line">a[<span class="number">1</span>] = <span class="number">10</span>; <span class="comment">// 设置值</span></span><br><span class="line"><span class="keyword">var</span> b = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">  a[length++] = i;  <span class="comment">// 将 0 - 4 的数值装到数组中</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> j = <span class="number">2</span>;</span><br><span class="line">a[j] = <span class="number">3</span>;  <span class="comment">// 写第二个元素</span></span><br><span class="line">a[j+<span class="number">1</span>] = <span class="string">"abc"</span>; <span class="comment">// 写第三个元素</span></span><br><span class="line">a[a[j]] = a[<span class="number">0</span>];  <span class="comment">// 读第 0 个元素和第 2 个元素，写第 3 个元素</span></span><br></pre></td></tr></table></figure><h3 id="数组索引和对象属性"><a href="#数组索引和对象属性" class="headerlink" title="数组索引和对象属性"></a>数组索引和对象属性</h3><p>数组是对象的特殊形式。 常规的对象如：<code>o = {}; o[1] = &quot;one&quot;; // 可以用一个整数来访问。</code>数组的索引只能是 0 ~ 2的32次幂 - 2 之间的整数，所有的索引是属性名。负数和浮点数也可以来索引数组。这种情况下转成字符串当成常规对象的属性，而非负整数字符串被使用了： <code>arr[&quot;99&quot;]</code>, 当做数组的索引，而非对象的属性。数组的索引是属性的特殊类型，因此数组的索引找不到值时不会报错，而是 undefined。</p><h2 id="数组的长度"><a href="#数组的长度" class="headerlink" title="数组的长度"></a>数组的长度</h2><p>每一个数组都有一个 length 属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="built_in">console</span>.log(arr.lengh); <span class="comment">//获取数组元素的个数</span></span><br><span class="line"><span class="comment">// length属性是动态改变的 通过arr.length可以动态追加</span></span><br></pre></td></tr></table></figure><p>可以将数组的长度设置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.length = [<span class="number">1</span>]; <span class="comment">// arr 现在为 [1];</span></span><br><span class="line">arr.length = []; <span class="comment">// 删除 arr 中的元素</span></span><br><span class="line">arr.length = <span class="number">5</span>; <span class="comment">// 长度为 4，但没有元素，相当于 new Array(5);</span></span><br></pre></td></tr></table></figure><p>ECMAScript 5，可以使用 Object.defineProperty() 来设置数组的 length 为只读的。</p><h2 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h2><p>稀疏数组是包含从 0 开始的不连续索引的数组。可以使用 Array() 构造函数或简单指定数组索引大于当前数组的长度来定义稀疏数组。还可以使用 delete 操作符来创建稀疏数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> arr[<span class="number">99</span>] = <span class="number">1</span>; <span class="comment">// 赋值添加一个元素1，length 变为 100</span></span><br><span class="line"><span class="keyword">var</span> a2 = [];</span><br><span class="line"><span class="keyword">var</span> a3 = [,]; <span class="comment">// 此时数组没有元素，长度是 1；也是稀疏数组</span></span><br></pre></td></tr></table></figure><p>注：当给直接量中省略值时不会创建稀疏数组。因为省略的值是 undefined 类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a5 = [,,,]; <span class="comment">// 不是稀疏数组</span></span><br><span class="line"><span class="keyword">var</span> a4 = [<span class="literal">undefined</span>]; <span class="comment">// 此时数组包含一个数值 undefined 类型。</span></span><br></pre></td></tr></table></figure><h2 id="数组冒泡排序"><a href="#数组冒泡排序" class="headerlink" title="数组冒泡排序"></a>数组冒泡排序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr17 = [<span class="number">56</span>,<span class="number">45</span>,<span class="number">23</span>,<span class="number">78</span>,<span class="number">67</span>,<span class="number">34</span>,<span class="number">96</span>,<span class="number">39</span>,<span class="number">44</span>,<span class="number">23</span>,<span class="number">45</span>,<span class="number">37</span>,<span class="number">85</span>];</span><br><span class="line"><span class="keyword">var</span> outer = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> inner = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr17.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span> ; j &lt; arr17.length - <span class="number">1</span> - i; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr17[j] &gt; arr17[j+<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">var</span> tempValue = arr17[j+<span class="number">1</span>];</span><br><span class="line">            arr17[j+<span class="number">1</span>] = arr17[j];</span><br><span class="line">            arr17[j] = tempValue;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        inner++;</span><br><span class="line">    &#125;</span><br><span class="line">    outer++;</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a>数组的方法</h2><ul><li>push();<ul><li>尾部追加一个或多个元素，push 一个元素与给数组 a[a.length] 赋值一样；</li><li>返回新数组长度</li><li>操作原数组，末尾追加</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line">a.push(<span class="string">"ab"</span>);</span><br><span class="line">a.push(<span class="string">"bc"</span>,<span class="string">"cd"</span>);  <span class="comment">// a = ["ab","bc","cd"];</span></span><br><span class="line">a.push(<span class="string">"123"</span>,[<span class="string">"e"</span>,<span class="string">"f"</span>]);  <span class="comment">// a = ["ab","bc","cd","123",["e","f"]];</span></span><br></pre></td></tr></table></figure><ul><li>pop();<ul><li>删除数组中最后一个元素，</li><li>返回值是被删除的这个元素</li><li>操作原数组</li></ul></li><li>shift();<ul><li>删除数组中的第一个元素，</li><li>返回值是被删除的元素</li></ul></li><li>unshift();<ul><li>向数组中第一个元素之前插入一个或多个新的元素</li><li>返回值是新数组的长度</li></ul></li><li>concat(); Array.concat() 方法创建并返回新数组<ul><li>新的数组和旧的数组拼接，产生一个新的数组</li><li>不修改原数组</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line">arr.concat([<span class="number">3</span>,<span class="number">4</span>]);  <span class="comment">// 返回 [1,2,3,4]</span></span><br><span class="line">arr.concat(<span class="number">3</span>,[<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>]]); <span class="comment">// 返回 [1,2,3,4,[5,6]]</span></span><br></pre></td></tr></table></figure><ul><li>slice(); Array.slice()方法返回指定数组的一个片段或子数组<ul><li>两个参数： 开始索引，结束索引，返回包含开始索引，不包含结束索引位置之间的所有数组元素；</li><li>指定一个参数，返回包含开始位置到数组结尾的所有元素</li><li>参数是负数，相对于最后一个位置的。如参数 -1 指定了最后一个元素，-2 是倒数第二个</li><li>从原来的数组中截取出来指定的一部分元素，产生新的数组</li><li>不操作原数组</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">a.slice (<span class="number">0</span>,<span class="number">3</span>); <span class="comment">// [0,1,2];</span></span><br><span class="line">a.slice(<span class="number">3</span>); <span class="comment">// [3,4,5]</span></span><br><span class="line">a.slice(<span class="number">1</span>,<span class="number">-1</span>); <span class="comment">// [1,2,3,4];</span></span><br><span class="line">a.slice(<span class="number">-3</span>,<span class="number">-2</span>); <span class="comment">// [3]</span></span><br></pre></td></tr></table></figure><ul><li>splice(); Array.splice()是数组中插入或删除元素的方法。<ul><li>会修改调用数组，</li><li>第一个参数是开始的下标,第二个参数是指定了删除原数组元素的个数；</li><li>如果省略了第二个参数，从开始索引位置后的元素都被删除；</li><li>可以有第三个参数，第四个参数…跟在第二个参数后的任意多个参数是需要插入原数组中的元素，从第一个参数指定的索引位置插入；</li><li>该方法返回的是删除元素组成的数组,如果没有替换则返回空数组。</li></ul></li><li>join(); 将数组中的所有元素都转化成字符串并连接到一起<ul><li>返回最终生成的字符串</li><li>是 String.split() 方法的逆向操作。String.split() 是将字符串分隔成分隔，返回数组；</li></ul></li><li>reverse();<ul><li>反转数组</li><li>操作原数组</li><li>返回操作后的逆向数组</li></ul></li><li>sort(); Array.sort() 方法将数组中的元素排序并返回排序后的数组<ul><li>操作原数组；</li><li>返回排序后的数组</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">arr, fn</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">              <span class="keyword">if</span> (fn(arr[j], arr[j + <span class="number">1</span>]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">                  arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                  arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                  flag = <span class="literal">false</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>toString()<ul><li>和不使用任何参数调用 join() 方法返回的字符串是一样的。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>].toString();  <span class="comment">// "1,2"</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="string">"c"</span>,<span class="number">5</span>]].toString(); <span class="comment">// "1,2,3,c,5"</span></span><br></pre></td></tr></table></figure><ul><li>toLocalString() 方法是 toString() 方法的本地化版本，使用本地化分隔符将这些字符串连接起来生成最终字符串。</li></ul><h2 id="ECMAScript-5-中的数组方法"><a href="#ECMAScript-5-中的数组方法" class="headerlink" title="ECMAScript 5 中的数组方法"></a>ECMAScript 5 中的数组方法</h2><p>ECMAScript 5 定义了 9 个新的数组方法来遍历、映射、过滤、检测、简化和搜索数组；大多数 ECMAScript 5 数组方法的第一个参数是一个函数，第二个参数是可选的，如果有第二个参数，则调用的函数被看做是第二个参数的方法。即在调用函数时传递的第二个参数作为它的 this 关键字的值来使用。ECMAScript 5 中的数组方法都不会修改原始数组。</p><ul><li>indexOf()和lastIndexOf(); 搜索整个数组中具有给定值的元素<ul><li>查找某个元素，</li><li>第一个参数是要查找的元素,</li><li>第二个参数是开始查找的下标,</li><li>找到则返回找到的第一个元素的索引，找不到则返回-1</li></ul></li><li>lastIndexOf();<ul><li>这个方法也是查找元素,从后面向前面找,找到则返回对应的下标,找不到则返回-1；</li><li>第二个元素可以是负数，代表相对数组末尾的偏移量；</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findall</span>(<span class="params">a, x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> results = [],</span><br><span class="line">      len = a.length,</span><br><span class="line">      index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(index &lt; len)&#123;</span><br><span class="line">    index = a.indexOf(x, index);</span><br><span class="line">    <span class="keyword">if</span> (pos === <span class="number">-1</span>) <span class="keyword">break</span>;  <span class="comment">// 未找到，完成搜索</span></span><br><span class="line">    results.push(index); <span class="comment">// 否则在数组中存储索引</span></span><br><span class="line">    index = index + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  returen results;  <span class="comment">// 返回包含索引的数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>every() 和 some(); 数组的逻辑判定，传入一个函数,判断每个数组中的元素是否满足条件；<ul><li>every() 方法针对所有的元素判断调用函数返回全为 true，则返回true；</li><li>every() 方法有一个不满足条件的则返回 false</li><li>some() 方法所有的元素判断调用函数有一个满足条件的则返回 true</li><li>some() 方法全为 false, 则返回 false</li></ul></li><li>map() 方法，将调用的数组的每个元素传递给指定的函数，并返回一个包含该函数的数组。<ul><li>返回新数组</li><li>不修改原数组</li><li>稀疏数组调用返回的还是稀疏数组<ul><li>一个例子：arr.map(Math.sqrt);<ul><li>map这个方法可以传入一个回调函数,</li><li>直接传入了一个Math.sqrt方法,sqrt方法是为某个数字开平方的</li><li>调用map方法传入Math.sqrt的时候,去掉了括号,也没有传入参数</li><li>map方法内部帮我们遍历并且传入数组的每个元素</li></ul></li></ul></li></ul></li><li>filter() 方法，返回的是调用的数组的一个子集，传递的回调函数用来逻辑判断，该函数的返回值是布尔值；<ul><li>压缩空缺或并删除 undefined 和 null 元素，也可以使用 filter();</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = a.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x !== <span class="literal">undefined</span> &amp;&amp; x !== <span class="literal">null</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="检测数组"><a href="#检测数组" class="headerlink" title="检测数组"></a>检测数组</h2><ul><li>instanceof</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Array</span>; <span class="comment">// true</span></span><br><span class="line">&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Array</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>但是在web浏览器多窗口或窗体存在时，每个全局对象有自己的一组构造函数。一个窗体中的对象不可能是另外一个窗体中构造函数和实例。因此，instanceof 操作符不能视为一个可靠的数组检测方法。</p><ul><li>isArray(); ECMAScript 5 中给出的检测数组类型的方法；<ul><li>这个方法是判断变量是不是数组</li></ul></li></ul><p>因此，封装检测数组的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isArray = <span class="built_in">Function</span>.isArray || <span class="function"><span class="keyword">function</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> o === <span class="string">"object"</span> &amp;&amp; <span class="built_in">Object</span>.prototype.toString.call(o) === <span class="string">"[object Array]"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>forEach 方法，从头至尾遍历数组，为每个元素调用指定的函数；<ul><li>三个参数，数值元素、数组索引、数组本身</li><li>无法再所有元素传递完调用函数之前终止遍历</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="comment">// 计算数组元素和值</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">  sum += v;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(sum);  <span class="comment">// sum =&gt; 15</span></span><br><span class="line">data.forEach(funciton (v,i,a) &#123;</span><br><span class="line">  a[i] = v + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(data); <span class="comment">// [2,3,4,5,6];</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 终止 forEach 循环</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foreach</span> (<span class="params">a, f, t</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123; a.forEach (f, t)&#125;</span><br><span class="line">  <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e === foreach.break) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">throw</span> e;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">foreach.break = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"StopIteration"</span>);</span><br></pre></td></tr></table></figure><ul><li>reduce()和 reduceRight()<ul><li>reduce() 和 reduceRight() 方法使用指定的函数将数组元素进行组合，生成单个值。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> sum = a.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;); <span class="comment">// 求和</span></span><br><span class="line"><span class="keyword">var</span> max = a.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (x&gt;y)?x:y;</span><br><span class="line">&#125;);  <span class="comment">// 求最大值</span></span><br></pre></td></tr></table></figure><ul><li>reduce() 两个参数：<ul><li>第一个是执行简化操作的函数。化简函数的任务就是用某种方法把两个值组合和化简为一个值，并返回简化后的值。</li><li>第二个参数是可选参数</li></ul></li><li>reduceRight() 的工作原理和 reduce() 一样，不同的是它按照数组索引从高到低处理数组；</li></ul><p>reduce() 和 reduceRight() 都能接收一个可选的参数，它指定了化简函数调用时的 this 关键值。</p><p>计算两个对象的并集，返回一个新对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [union description] 如果有重名属性，使用 p 中的属性</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; o [description]</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; p [description]</span></span><br><span class="line"><span class="comment"> * @return &#123;[type]&#125;   [description] 返回一个新对象这个对象同时拥有 o 的属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">union</span> (<span class="params">o, p</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> extend (extend(&#123;&#125;, o), p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> objs = [&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;, &#123;<span class="attr">y</span>:<span class="number">2</span>&#125;, &#123;<span class="attr">z</span>:<span class="number">3</span>&#125;];</span><br><span class="line"><span class="keyword">var</span> merged = objs.reduce(union);  <span class="comment">// &#123;x:1, y:2, z:3&#125;</span></span><br></pre></td></tr></table></figure><p>拥有同名属性时，reduce() 和 reduceRight() 方法返回值不同；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objs = [&#123;<span class="attr">x</span>:<span class="number">1</span>, <span class="attr">a</span>:<span class="number">1</span>&#125;, &#123;<span class="attr">y</span>:<span class="number">2</span>, <span class="attr">a</span>:<span class="number">2</span>&#125;, &#123;<span class="attr">z</span>:<span class="number">3</span>, <span class="attr">a</span>:<span class="number">3</span>&#125;];</span><br><span class="line"><span class="keyword">var</span> lUnion = objs.reduce(union);  <span class="comment">// &#123;x:1, y:2, z:3, a:1&#125;</span></span><br><span class="line"><span class="keyword">var</span> lUnion = objs.reduceRight(union);  <span class="comment">// &#123;x:1, y:2, z:3, a:3&#125;</span></span><br></pre></td></tr></table></figure><h2 id="ECMAScript-6-中数组新方法"><a href="#ECMAScript-6-中数组新方法" class="headerlink" title="ECMAScript 6 中数组新方法"></a>ECMAScript 6 中数组新方法</h2><ul><li>Array.prototype.find 方法用于找出第一个符合条件的数组成员。<ul><li>参数是一个回调函数，找到第一个返回 true 的数组项，然后返回该数组项；</li><li>找不到返回undefined；</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">123</span>,<span class="number">23</span>];</span><br><span class="line">arr.find(functiton(num)&#123;</span><br><span class="line">  <span class="keyword">return</span> num === <span class="number">123</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>两个静态方法<ul><li>Array.from<ul><li>将一个伪数组转成正真的数组</li></ul></li><li>Array.of<ul><li>将方法中参数都添加到一个数组中</li></ul></li></ul></li><li>操作、填充和过滤数组的方法<ul><li>Array.prototype.copyWidthin</li><li>Array.prototype.fill</li><li>Array.prototype.find<ul><li>接收一个回调函数，每一项执行调用它</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> users = [</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">'bb'</span>, <span class="attr">age</span>:<span class="number">24</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">'cc'</span>, <span class="attr">age</span>:<span class="number">32</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">'dd'</span>, <span class="attr">age</span>:<span class="number">12</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">'aa'</span>, <span class="attr">age</span>:<span class="number">16</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">'ed'</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">'aa'</span>, <span class="attr">age</span>:<span class="number">29</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="built_in">console</span>.log(users.find(<span class="function"><span class="params">u</span> =&gt;</span> u.name === <span class="string">'aa'</span>)); <span class="comment">// &#123;name: 'aa', age:16&#125;</span></span><br></pre></td></tr></table></figure><ul><li>Array.prototype.findIndex<ul><li>有关数组迭代的方法</li></ul></li><li>Array.prototype.keys</li><li>Array.prototype.values</li><li>Array.prototype.entries</li><li>Array.prototype[Symbol.iterator]</li></ul><h2 id="类数组对象-伪数组"><a href="#类数组对象-伪数组" class="headerlink" title="类数组对象(伪数组)"></a>类数组对象(伪数组)</h2><p>JavaScript 的类数组对象：把拥有数组 length 属性和对应非负整数属性的对象看着一种类型的数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">  a[i] = i * i;</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br><span class="line">a.length = i;</span><br><span class="line"><span class="comment">// 那么可以当成真正的数组遍历</span></span><br><span class="line"><span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; a.length; j++)&#123;</span><br><span class="line">  total += a[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断是否是伪数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArrayLike</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (o &amp;&amp; <span class="keyword">typeof</span> o === <span class="string">"object"</span> </span><br><span class="line">  &amp;&amp; <span class="built_in">isFinite</span>(o.length)</span><br><span class="line">  &amp;&amp; o.length &gt;=<span class="number">0</span> </span><br><span class="line">  &amp;&amp; o.length === <span class="built_in">Math</span>.floor(o.length)</span><br><span class="line">  &amp;&amp; o.length &lt; <span class="number">4294967296</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="作为数组的字符串"><a href="#作为数组的字符串" class="headerlink" title="作为数组的字符串"></a>作为数组的字符串</h2><p>ECMAScript 5 中的字符串除了用 charAt() 访问单个元素之外，还可以使用方括号：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"string"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">1</span>));  <span class="comment">// =&gt; "t";</span></span><br><span class="line"><span class="built_in">console</span>.log(s[<span class="number">1</span>]);  <span class="comment">// =&gt; "t";</span></span><br></pre></td></tr></table></figure><p>数组方法总结：</p><ul><li>push();<ul><li>尾部追加一个或多个元素，push 一个元素与给数组 a[a.length] 赋值一样；</li><li>返回新数组长度</li><li>操作原数组，末尾追加</li></ul></li><li>pop();<ul><li>删除数组中最后一个元素，</li><li>返回值是被删除的这个元素</li><li>操作原数组</li></ul></li><li>shift();<ul><li>删除数组中的第一个元素，</li><li>返回值是被删除的元素</li></ul></li><li>unshift();<ul><li>向数组中第一个元素之前插入一个或多个新的元素</li><li>返回值是新数组的长度</li></ul></li><li>concat(); Array.concat() 方法创建并返回新数组<ul><li>新的数组和旧的数组拼接，产生一个新的数组</li><li>不修改原数组</li></ul></li><li>slice(); Array.slice()方法返回指定数组的一个片段或子数组<ul><li>两个参数： 开始索引，结束索引，返回包含开始索引，不包含结束索引位置之间的所有数组元素；</li><li>指定一个参数，返回包含开始位置到数组结尾的所有元素</li><li>参数是负数，相对于最后一个位置的。如参数 -1 指定了最后一个元素，-2 是倒数第二个</li><li>从原来的数组中截取出来指定的一部分元素，产生新的数组</li><li>不操作原数组</li></ul></li><li>splice(); Array.splice()是数组中插入或删除元素的方法。<ul><li>会修改调用数组，</li><li>第一个参数是开始的下标,第二个参数是指定了删除原数组元素的个数；</li><li>如果省略了第二个参数，从开始索引位置后的元素都被删除；</li><li>可以有第三个参数，第四个参数…跟在第二个参数后的任意多个参数是需要插入原数组中的元素，从第一个参数指定的索引位置插入；</li><li>该方法返回的是删除元素组成的数组,如果没有替换则返回空数组。</li></ul></li><li>join(); 将数组中的所有元素都转化成字符串并连接到一起<ul><li>返回最终生成的字符串</li><li>是 String.split() 方法的逆向操作。String.split() 是将字符串分隔成分隔，返回数组；</li></ul></li><li>reverse();<ul><li>反转数组</li><li>操作原数组</li><li>返回操作后的逆向数组</li></ul></li><li>sort(); Array.sort() 方法将数组中的元素排序并返回排序后的数组<ul><li>操作原数组；</li><li>返回排序后的数组</li></ul></li><li>toString()<ul><li>和不使用任何参数调用 join() 方法返回的字符串是一样的。</li></ul></li><li>toLocalString() 方法是 toString() 方法的本地化版本，使用本地化分隔符将这些字符串连接起来生成最终字符串。</li><li>indexOf()和lastIndexOf(); 搜索整个数组中具有给定值的元素<ul><li>查找某个元素，</li><li>第一个参数是要查找的元素,</li><li>第二个参数是开始查找的下标,</li><li>找到则返回找到的第一个元素的索引，找不到则返回-1</li></ul></li><li>lastIndexOf();<ul><li>这个方法也是查找元素,从后面向前面找,找到则返回对应的下标,找不到则返回-1；</li><li>第二个元素可以是负数，代表相对数组末尾的偏移量；</li></ul></li><li>every() 和 some(); 数组的逻辑判定，传入一个函数,判断每个数组中的元素是否满足条件；<ul><li>every() 方法针对所有的元素判断调用函数返回全为 true，则返回true；</li><li>every() 方法有一个不满足条件的则返回 false</li><li>some() 方法所有的元素判断调用函数有一个满足条件的则返回 true</li><li>some() 方法全为 false, 则返回 false</li></ul></li><li>map() 方法，将调用的数组的每个元素传递给指定的函数，并返回一个包含该函数的数组。<ul><li>返回新数组</li><li>不修改原数组</li><li>稀疏数组调用返回的还是稀疏数组<ul><li>一个例子：arr.map(Math.sqrt);<ul><li>map这个方法可以传入一个回调函数,</li><li>直接传入了一个Math.sqrt方法,sqrt方法是为某个数字开平方的</li><li>调用map方法传入Math.sqrt的时候,去掉了括号,也没有传入参数</li><li>map方法内部帮我们遍历并且传入数组的每个元素</li></ul></li></ul></li></ul></li><li>filter() 方法，返回的是调用的数组的一个子集，传递的回调函数用来逻辑判断，该函数的返回值是布尔值；<ul><li>压缩空缺或并删除 undefined 和 null 元素，也可以使用 filter();</li></ul></li><li>instanceof</li><li>isArray(); ECMAScript 5 中给出的检测数组类型的方法；<ul><li>这个方法是判断变量是不是数组</li></ul></li><li>forEach 方法，从头至尾遍历数组，为每个元素调用指定的函数；<ul><li>三个参数，数值元素、数组索引、数组本身</li><li>无法再所有元素传递完调用函数之前终止遍历</li></ul></li><li>reduce()和 reduceRight()<ul><li>reduce() 和 reduceRight() 方法使用指定的函数将数组元素进行组合，生成单个值。</li><li>reduce() 两个参数：<ul><li>第一个是执行简化操作的函数。化简函数的任务就是用某种方法把两个值组合和化简为一个值，并返回简化后的值。</li><li>第二个参数是可选参数</li></ul></li><li>reduceRight() 的工作原理和 reduce() 一样，不同的是它按照数组索引从高到低处理数组；</li></ul></li></ul><p>本文参考自：《JavaScript 权威指南》</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数组是表示集合的值，每一个值是一个元素，每一个元素在数组中有一个位置，以数字表示，叫索引。数组继承自 Array.prototype.&lt;/p&gt;
&lt;h2 id=&quot;js的内置对象：数组Array&quot;&gt;&lt;a href=&quot;#js的内置对象：数组Array&quot; class=&quot;headerlink&quot; title=&quot;js的内置对象：数组Array&quot;&gt;&lt;/a&gt;js的内置对象：数组Array&lt;/h2&gt;&lt;h2 id=&quot;数组声明&quot;&gt;&lt;a href=&quot;#数组声明&quot; class=&quot;headerlink&quot; title=&quot;数组声明&quot;&gt;&lt;/a&gt;数组声明&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;直接量方式创建数组&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; empty = []; &lt;span class=&quot;comment&quot;&gt;// 没有元素的空数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;// 有5个元素的数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; misc = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;, ]; &lt;span class=&quot;comment&quot;&gt;// 有不同数据类型元素的数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; misc2 = [[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], &amp;#123;&lt;span class=&quot;attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;,[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &amp;#123;&lt;span class=&quot;attr&quot;&gt;x&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;]];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;数组直接量中可以是任意的表达式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用构造函数&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;();&lt;span class=&quot;comment&quot;&gt;// 数组的构造函数 创建的是一个空数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;4&quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;// 只有传入一个数值的时候 才表示数组元素的个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;abc&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 显示的指定两个或多个数组元素或者数组的一个非数值元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JS系列" scheme="http://yoursite.com/categories/JS%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js的对象</title>
    <link href="http://yoursite.com/2015/06/18/js%E7%9A%84%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2015/06/18/js的对象/</id>
    <published>2015-06-17T16:00:00.000Z</published>
    <updated>2018-05-30T06:51:19.712Z</updated>
    
    <content type="html"><![CDATA[<p>除了字符串、数字、true、false、null 和 undefined 之外，JavaScript 中的值都是对象。引用类型的值（对象）是引用类型的一个实例。在 ECMAScript 中，引用类型是一种数据结构，用于将数据和功能组织在一起。</p><p>从宏观的角度讲，对象是对客观事物的抽象，事物的特征可以用属性表示，事物的行为可以用方法表示；</p><p>从微观的角度讲，对象就是一种数据类型，通过对象可以方便地对变量和函数进行管理。</p><h2 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h2><p>JavaScript 对象的创建有三种方式：直接量，new 关键字 和 Object.creat() 方来创建。</p><a id="more"></a><h3 id="对象直接量"><a href="#对象直接量" class="headerlink" title="对象直接量"></a>对象直接量</h3><p>对象的直接量就是由若干兼职对组成的映射表，键和值之间用 “:” 分隔，键值对之间用 “,” 分隔，整个映射表用一对花括号包裹，比如通过字面量声明（更加简便）<code>var obj= {};</code></p><h4 id="键值对"><a href="#键值对" class="headerlink" title="键值对"></a>键值对</h4><p>键值对就是一种对应关系，通过键能够方便地找到值</p><p>键:值 <code>key:value</code>  <code>k:v</code></p><h4 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> emptyObj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> pointObj = &#123;<span class="attr">x</span>:<span class="number">0</span>, <span class="attr">y</span>:<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> pointObj2 = &#123;<span class="attr">x</span>: pointObj.x, <span class="attr">y</span>: pointObj.y&#125;;</span><br><span class="line"><span class="keyword">var</span> books = &#123;</span><br><span class="line">  <span class="string">"main title"</span>: <span class="string">"JavaScript"</span>,   <span class="comment">// 属性名中有空格时，必须用字符串</span></span><br><span class="line">  <span class="string">'sub-title'</span>: <span class="string">"The Definitive Guide"</span>,   <span class="comment">// 属性名中有连字符，必须用字符串</span></span><br><span class="line">  <span class="string">"for"</span>: <span class="string">"all audiences"</span>,   <span class="comment">// "for" 是保留字，必须用引号</span></span><br><span class="line">  author: &#123;     <span class="comment">// 这里的属性名没有引号</span></span><br><span class="line">    firstname: <span class="string">"Hiraku"</span>,</span><br><span class="line">    surname: <span class="string">"Hongqin"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对象的字面量是一个表达式，这个表达式的每次运算都创建并初始化一个新对象。每次计算对象直接量的时候，也会计算它的每个属性的值。也就是说，如果在一个重复调用的函数中的循环体内使用对象直接量，它将创建很多新对象，并且每次创建的对象的属性值可有可能不同。</p><h2 id="通过-new-关键字创建对象"><a href="#通过-new-关键字创建对象" class="headerlink" title="通过 new 关键字创建对象"></a>通过 new 关键字创建对象</h2><p>new 运算符创建并初始化一个新对象。n关键字 new 后面跟随一个函数调用。</p><p>通过构造函数声明（更加通用）var obj= new Object(); // 创建一个空对象，和 {} 一样</p><p>对象具有属性和方法</p><ul><li>属性 用来描述对象的特征 一般是名词 对应变量</li><li>方法 用来描述对象的行为 一般是动词 对应函数</li></ul><h2 id="原型初识"><a href="#原型初识" class="headerlink" title="原型初识"></a>原型初识</h2><p>除了 null 以外的每一个 JavaScript 对象都和 <code>原型</code> 相关联。所有通过对象直接量创建的对象对具有同一个原型对象，可通过 Object.prototype 获得对原型对象的引用。通过 new 关键字和构造函数调用创建的对象的原型就是构造函数的 prototype 属性的值。因此，和使用 {} 创建对象一样，通过 new Object() 创建的对象也继承自 Object.prototype。</p><p>没有原型的对象有 Object.prototype，它不继承任何属性。其他对象都是普通对象，都有原型。所有的内置构造函数比如：Array(), Date() 都具有一个继承自 Object.prototype 的原型。</p><h2 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h2><p>ECMAScript 5 定义了一个名为 Object.create() 方法，是一个静态函数，可以用来创建对象。有两个参数：第一个参数是对象，第二个参数可选，用于对属性进行详细描述。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// o1 继承了属性 x 和 y</span></span><br><span class="line"><span class="keyword">var</span> o1 = <span class="built_in">Object</span>.create(&#123;<span class="attr">x</span>:<span class="number">1</span>, <span class="attr">y</span>:<span class="number">1</span>&#125;);  </span><br><span class="line"><span class="comment">// o2 不继承任何属性和方法，没有原型，不能和 + 运算符一起工作</span></span><br><span class="line"><span class="keyword">var</span> o2 = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">// o3 创建一个普通的空对象</span></span><br><span class="line"><span class="keyword">var</span> o3 = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype);</span><br></pre></td></tr></table></figure><p>可以通过任意原型对象创建新对象，即可以使任意对象继承。</p><p>例子： 返回一个继承自原型对象 p 的属性的新对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">p</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (p == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="built_in">TypeError</span>();            <span class="comment">// p 是一个对象</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.create) <span class="keyword">return</span> <span class="built_in">Object</span>.create(p);  <span class="comment">// 如果存在 Object.create，直接使用它来创建</span></span><br><span class="line">  <span class="keyword">var</span> t = <span class="keyword">typeof</span> p;  <span class="comment">// 否则进一步检测</span></span><br><span class="line">  <span class="keyword">if</span> (t !== <span class="string">"object"</span> &amp;&amp; t !== <span class="string">"function"</span>) <span class="keyword">throw</span> <span class="built_in">TypeError</span>();</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// 创建一个空构造函数</span></span><br><span class="line">  f.prototype = p; <span class="comment">// 将其原型属性设置为 p</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> f(); <span class="comment">// 使用 f() 创建 p 的继承对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="属性和方法的查询和设置"><a href="#属性和方法的查询和设置" class="headerlink" title="属性和方法的查询和设置"></a>属性和方法的查询和设置</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li>属性的定义<ul><li>对象.属性名 = 值；</li><li>对象[“属性名”] = 值;</li></ul></li><li>属性的调用<ul><li>对象.属性名;</li><li>对象[“属性名”];</li></ul></li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li>方法的定义<ul><li>对象.方法名 = function() { //函数体 };</li><li>对象[“方法名”] = function() { //函数体 };</li></ul></li><li>方法的调用<ul><li>对象.方法名();</li><li>对象[“方法名”];</li></ul></li></ul><h3 id="作为关联数组的对象"><a href="#作为关联数组的对象" class="headerlink" title="作为关联数组的对象"></a>作为关联数组的对象</h3><p>对象属性和方法的第二种设置和访问用了 “[]”，只是利用的不是索引访问，而是字符串。这种数据就是关联数组，也叫散列、映射或者字典。</p><p>当我们通过 [] 来访问对象的属性时，在程序运行是可以设置和修改或者创建它们。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>对象具有自有属性（own property），也有一些属性是从原型对象上继承来的。</p><p>还是这个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">p</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (p == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="built_in">TypeError</span>();            <span class="comment">// p 是一个对象</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.create) <span class="keyword">return</span> <span class="built_in">Object</span>.create(p);  <span class="comment">// 如果存在 Object.create，直接使用它来创建</span></span><br><span class="line">  <span class="keyword">var</span> t = <span class="keyword">typeof</span> p;  <span class="comment">// 否则进一步检测</span></span><br><span class="line">  <span class="keyword">if</span> (t !== <span class="string">"object"</span> &amp;&amp; t !== <span class="string">"function"</span>) <span class="keyword">throw</span> <span class="built_in">TypeError</span>();</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// 创建一个空构造函数</span></span><br><span class="line">  f.prototype = p; <span class="comment">// 将其原型属性设置为 p</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> f(); <span class="comment">// 使用 f() 创建 p 的继承对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">o.x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> p = inherit(o);  <span class="comment">// p 继承自对象 o 和 Object.prototype</span></span><br><span class="line">p.y = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> q = inherit(p);  <span class="comment">// q 继承自对象 p、 o 和 Object.prototype</span></span><br><span class="line">q.z = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> s = q.toString();</span><br><span class="line"><span class="built_in">console</span>.log(s);  <span class="comment">// "[object object]"</span></span><br><span class="line"><span class="built_in">console</span>.log(q.x + q.y + q.z); <span class="comment">// 6 属性 x 和 y 分别继承自 o 和 p</span></span><br></pre></td></tr></table></figure><h3 id="属性访问错误"><a href="#属性访问错误" class="headerlink" title="属性访问错误"></a>属性访问错误</h3><ul><li>JavaScript 中，属性访问时，并不总是会话或者设置。</li><li>在查询不存在的属性时不会报错，而返回 undefined。</li><li>内置构造函数的原型是只读的。</li></ul><h2 id="删除属性"><a href="#删除属性" class="headerlink" title="删除属性"></a>删除属性</h2><p>delete 运算符可以删除对象的属性。delete 只是断开属性和宿主对象的联系，而不会操作属性中的属性。</p><p>delete 只能删除自有属性，不能删除继承属性。</p><p>delete 不能删除可配置属性。</p><p>在非严格模式下，删除全局独享的可配置属性时，可以省略对全局对象的引用，直接在 delete 操作符后跟要删除的属性名即可。</p><p>在严格模式下，delete x; 报错， delete this.x; 正常运行</p><h2 id="属性检测"><a href="#属性检测" class="headerlink" title="属性检测"></a>属性检测</h2><p>通过 in 运算符、hasOwnProperty()、propertyIsEnumerable() 方法；</p><ul><li>in 运算符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="string">"x"</span> <span class="keyword">in</span> o;  <span class="comment">// true "x" 是 o 的属性</span></span><br></pre></td></tr></table></figure><ul><li>hasOwnProperty() 方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;</span><br><span class="line">o.hasOwnProperty(x);  <span class="comment">// true "x" 是 o 的自有属性</span></span><br><span class="line">o.hasOwnProperty(<span class="keyword">constructor</span>);  // false <span class="keyword">constructor</span> 是原型中的属性</span><br></pre></td></tr></table></figure><ul><li>propertyIsEnumerable() 方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">p</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (p == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="built_in">TypeError</span>();            <span class="comment">// p 是一个对象</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.create) <span class="keyword">return</span> <span class="built_in">Object</span>.create(p);  <span class="comment">// 如果存在 Object.create，直接使用它来创建</span></span><br><span class="line">  <span class="keyword">var</span> t = <span class="keyword">typeof</span> p;  <span class="comment">// 否则进一步检测</span></span><br><span class="line">  <span class="keyword">if</span> (t !== <span class="string">"object"</span> &amp;&amp; t !== <span class="string">"function"</span>) <span class="keyword">throw</span> <span class="built_in">TypeError</span>();</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// 创建一个空构造函数</span></span><br><span class="line">  f.prototype = p; <span class="comment">// 将其原型属性设置为 p</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> f(); <span class="comment">// 使用 f() 创建 p 的继承对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o = interit(&#123;<span class="attr">x</span>: <span class="number">1</span>&#125;);</span><br><span class="line">o.y = <span class="number">1</span>;  </span><br><span class="line">o.propertyIsEnumerable(<span class="string">"x"</span>); <span class="comment">// false "x" 属性是继承的，不能被枚举</span></span><br><span class="line">o.propertyIsEnumerable(<span class="string">"y"</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>除了 in 以外， 另一种简单的判断一个属性是否是 “undefined” 使用 “!==”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;</span><br><span class="line">o.x !== <span class="literal">undefined</span>;   <span class="comment">// true</span></span><br><span class="line">o.y !== <span class="literal">undefined</span>;   <span class="comment">// false;</span></span><br><span class="line">o.toString !== <span class="literal">undefined</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>但 in 可以区分不存在的属性和存在但值为 undefined 类型的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">x</span>: <span class="literal">undefined</span>&#125;;</span><br><span class="line">o.x !== <span class="literal">undefined</span>;   <span class="comment">// false  属性存在，但是值为 undefined</span></span><br><span class="line">o.y !== <span class="literal">undefined</span>;   <span class="comment">// false  属性不存在</span></span><br><span class="line"><span class="string">"x"</span> <span class="keyword">in</span> o; <span class="comment">// true 属性存在</span></span><br><span class="line"><span class="string">"y"</span> <span class="keyword">in</span> o; <span class="comment">// false 属性不存在</span></span><br><span class="line"><span class="keyword">delete</span> o.x;  <span class="comment">// 删除了属性 x</span></span><br><span class="line"><span class="string">"x"</span> <span class="keyword">in</span> o; <span class="comment">// false 属性不再存在</span></span><br></pre></td></tr></table></figure><h2 id="对象的枚举属性"><a href="#对象的枚举属性" class="headerlink" title="对象的枚举属性"></a>对象的枚举属性</h2><p>除了检测对象的属性，我们经常需要遍历对象的属性，通常使用 for-in 遍历;</p><p>ECMAScript 5 提供了 Object.keys() 方法，返回值是一个数组，这个数组由对象中可枚举的自有属性的名称组成。</p><p>ECMASciript 5 提供的另一种枚举属性的方法是 Object.getOwnPropertyNames(), 和 Object.keys() 类似，只是它返回对象的所有自有属性的名称，而不仅仅是可以枚举的属性。</p><h3 id="用来枚举对象属性的工具函数"><a href="#用来枚举对象属性的工具函数" class="headerlink" title="用来枚举对象属性的工具函数"></a>用来枚举对象属性的工具函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [extend description] 把 P 中的可枚举属性复制到 o 中，</span></span><br><span class="line"><span class="comment"> * 如果有同名属性，则覆盖 o 中的属性 </span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; o [description]</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; p [description]</span></span><br><span class="line"><span class="comment"> * @return &#123;[type]&#125;   [description]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">o, p</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> p) &#123;</span><br><span class="line">    o[prop] = p [prop];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [merge description] 把 P 中的可枚举属性复制到 o 中，</span></span><br><span class="line"><span class="comment"> * 如果有同名属性, o 中的属性不受影响 </span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; o [description]</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; p [description]</span></span><br><span class="line"><span class="comment"> * @return &#123;[type]&#125;   [description]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span> (<span class="params">o, p</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> p) &#123;</span><br><span class="line">    <span class="keyword">if</span> (o.hasOwnProperty[prop]) <span class="keyword">continue</span>;</span><br><span class="line">    o[prop] = p [prop];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [restrict description] 如果 o 中的属性没有同名属性，则从 o 中删除这个属性</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; o [description]</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; p [description]</span></span><br><span class="line"><span class="comment"> * @return &#123;[type]&#125;   [description] 返回 o </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">restrict</span> (<span class="params">o, p</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> p) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(prop <span class="keyword">in</span> p)) <span class="keyword">delete</span> o[prop];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [substract description] 如果 o 中存在同名属性，则删除这个属性</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; o [description]</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; p [description]</span></span><br><span class="line"><span class="comment"> * @return &#123;[type]&#125;   [description]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">substract</span>(<span class="params">o, p</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> p) &#123;</span><br><span class="line">    <span class="keyword">delete</span> o[prop];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [union description] 如果有重名属性，使用 p 中的属性</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; o [description]</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; p [description]</span></span><br><span class="line"><span class="comment"> * @return &#123;[type]&#125;   [description] 返回一个新对象这个对象同时拥有 o 的属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">union</span> (<span class="params">o, p</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> extend (extend(&#123;&#125;, o), p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [keys description] 返回的数组中包含的是 o 中可枚举的自有属性的名字</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; o [description]</span></span><br><span class="line"><span class="comment"> * @return &#123;[type]&#125;   [description] 返回一个数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keys</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> o !== <span class="string">"object"</span>) <span class="keyword">throw</span> <span class="built_in">TypeError</span>();</span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> o)&#123;</span><br><span class="line">    <span class="keyword">if</span> (o.hasOwnProperty(prop)) result.push(prop);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="属性-getter-和-setter"><a href="#属性-getter-和-setter" class="headerlink" title="属性 getter 和 setter"></a>属性 getter 和 setter</h2><p>当程序执行查询存储属性的值的时候，JavaScript 调用 getter 方法(无参数)，当设置属性值的时候，调用的是 setter 方法。</p><h2 id="属性的特性"><a href="#属性的特性" class="headerlink" title="属性的特性"></a>属性的特性</h2><p>属性包含一个属性名和4个特性：</p><ul><li>value 属性值</li><li>writable 可写性</li><li>enumerable 可枚举性</li><li>configurable 可配置性<br>存取器属性不具有值 value 和 可写性</li></ul><p>ECMAScript 5 中定义了属性描述符 Object.getOwnPropertyDesctiptor() 获取某个对象特定的属性，这个方法只能得到自有属性的特性。</p><p>让新建的属性具有某种特性，需要调用 Object.definePeoperty() 方法；传入要修改的对象，要创建或修改的属性的名称以及属性描述符对象；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;&#125;;  <span class="comment">// 创建一个空对象</span></span><br><span class="line"><span class="comment">// 插入一个不可枚举的数据属性 x, 并赋值为 1；</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"x"</span>, &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line">  writable: <span class="literal">true</span>,</span><br><span class="line">  enumerable: <span class="literal">false</span>,</span><br><span class="line">  configurable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line">o.x;   <span class="comment">// --&gt; 1</span></span><br><span class="line"><span class="built_in">Object</span>.keys(o); <span class="comment">// --&gt; []</span></span><br><span class="line"><span class="comment">// 对属性 x 做修改变为只读</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"x"</span>, &#123;<span class="attr">writable</span>: <span class="literal">false</span>&#125;);</span><br><span class="line"><span class="comment">// 试图更改这个属性值</span></span><br><span class="line">o.x = <span class="number">2</span>; <span class="comment">// 更改操作失败，在严格模式中抛出异常</span></span><br><span class="line">o.x;  <span class="comment">// =&gt; 1;</span></span><br><span class="line"><span class="comment">// 属性依然是可配置的，因此可以通过这种方式对它进行修改</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"x"</span>, &#123;<span class="attr">value</span>: <span class="number">2</span>&#125;);</span><br><span class="line">o.x; <span class="comment">// =&gt; 2</span></span><br><span class="line"><span class="comment">// 现在讲 x 从数据属性修改为存储器属性</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"x"</span>, &#123;</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">o.x; <span class="comment">// =&gt; 0</span></span><br></pre></td></tr></table></figure><p>需要同时修改多个属性，使用 Object.defineProperties(),它返回修改后的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 复制属性的特性</span></span><br><span class="line"><span class="comment"> * 给 Object.prototype 上添加一个不可枚举的extend() 方法</span></span><br><span class="line"><span class="comment"> * 这个方法继承自它的调用对象，将作为参数传入的对象的属性以一幅字</span></span><br><span class="line"><span class="comment"> * 除了值之外也赋值属性所有的特性，除非在目标对象中存在同名的属性。</span></span><br><span class="line"><span class="comment"> * 参数对象的所有自有属性（包括不可枚举的属性）也会一一复制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(object.prototype, <span class="string">"extend"</span>, &#123; <span class="comment">// 定义 Object.prototype.extend</span></span><br><span class="line">  writable: <span class="literal">true</span>,</span><br><span class="line">  enumerable: <span class="literal">false</span>,  <span class="comment">// 将其定义为不可枚举的</span></span><br><span class="line">  configurable: <span class="literal">true</span>,</span><br><span class="line">  value: <span class="function"><span class="keyword">function</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 得到所有的自有属性，包括不可枚举属性</span></span><br><span class="line">    <span class="keyword">var</span> names = <span class="built_in">Object</span>.getOwnPropertyNames(o);</span><br><span class="line">    <span class="comment">// 遍历它们</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; names.length; i++)&#123;</span><br><span class="line">      <span class="comment">// 如果属性已经存在，则跳过</span></span><br><span class="line">      <span class="keyword">if</span> (names[i] <span class="keyword">in</span> <span class="keyword">this</span>) <span class="keyword">continue</span>;</span><br><span class="line">      <span class="comment">// 获取 o 中的属性描述符</span></span><br><span class="line">      <span class="keyword">var</span> desc = <span class="built_in">Object</span>.getOwnPropertyDescriptor(o, names[i])</span><br><span class="line">      <span class="comment">// 用它给 this 创建一个属性</span></span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, names[i], desc)</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="对象的三个属性"><a href="#对象的三个属性" class="headerlink" title="对象的三个属性"></a>对象的三个属性</h2><p>每一个对象都有与之相关联的原型 (prototype)、类 (class) 和可扩展性 (extensible attribute)。</p><h3 id="原型属性"><a href="#原型属性" class="headerlink" title="原型属性"></a>原型属性</h3><p>通过直接量创建的对象使用 Object.prototype 作为它们的原型，而使用 new 创建的对象使用 构造函数的 prototype 属性作为它们的原型。而通过 Object.create() 创建的对象使用第一个参数作为它们的原型，也可以是 null .</p><p>ECMAScript 5 中将对象作为参数传入 Object.getPrototypeOf() 方法中可以查询它的原型。</p><p>要检测一个对象是否是另一个对象的原型（或处于原型链中），用 isPrototypeOf() 方法。</p><h3 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h3><p>对象的类属性是一个字符串，用以表示对象的类型信息。只有一种间接的方法可以访问，即toString() 方法。默认的 toString() 方法继承自 Object.prototype，返回 <code>[object class]</code> 格式的字符串。</p><p>如何获得对象的类？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * classof() 函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">classof</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (o === <span class="literal">null</span> ) <span class="keyword">return</span> <span class="string">"null"</span>;</span><br><span class="line">  <span class="keyword">if</span> (o === <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="string">"undefined"</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数可以传入任意的参数。</p><h3 id="对象的可扩展性"><a href="#对象的可扩展性" class="headerlink" title="对象的可扩展性"></a>对象的可扩展性</h3><p>ECMAScript 5 的 Object.preventExtensions() 方法将对象转为不可扩展的，Object.seal() 还可以设置对象的属性不可配置。</p><h2 id="序列化对象（JSON-对象表示法）"><a href="#序列化对象（JSON-对象表示法）" class="headerlink" title="序列化对象（JSON 对象表示法）"></a>序列化对象（JSON 对象表示法）</h2><p>是指将对象的状态转为字符串，也可以将字符串还原为对象。</p><p>ECMAScript 5 提供了内置函数 JSON.stringify() 和 JSON.parse() 用来序列化和还原JavaScript对象。这两个方法使用 JSON 数据格式。</p><p>JSON, 即 <code>JavaScript Object Notation</code>（ JavaScript 对象表示法）是仿照JS中对象字面量的格式去书写的一串用来记录对象数据的字符串，可以用于数据传输。 即 JSON</p><p>注意：函数、RegExp、Error 对象和 undefined 值不能序列化和还原</p><ul><li>JSON 转字符串 序列化 JSON.stringfy();</li><li>字符串转 JSON 反序列化 JSON.parse();</li></ul><h3 id="遍历的-JSON-两种方式"><a href="#遍历的-JSON-两种方式" class="headerlink" title="遍历的 JSON 两种方式"></a>遍历的 JSON 两种方式</h3><p>通过for可以对集合进行有序的遍历for(var k in json) { 语句 }; k变量代表的是json中的各个属性（key）和 var i = 0中的i是一个意思,名字不同而已</p><h2 id="对象的方法"><a href="#对象的方法" class="headerlink" title="对象的方法"></a>对象的方法</h2><ul><li>toString() 方法</li><li>toLocalString() 方法</li><li>toJSON() 方法</li><li>valueOf() 方法</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;除了字符串、数字、true、false、null 和 undefined 之外，JavaScript 中的值都是对象。引用类型的值（对象）是引用类型的一个实例。在 ECMAScript 中，引用类型是一种数据结构，用于将数据和功能组织在一起。&lt;/p&gt;
&lt;p&gt;从宏观的角度讲，对象是对客观事物的抽象，事物的特征可以用属性表示，事物的行为可以用方法表示；&lt;/p&gt;
&lt;p&gt;从微观的角度讲，对象就是一种数据类型，通过对象可以方便地对变量和函数进行管理。&lt;/p&gt;
&lt;h2 id=&quot;对象的创建&quot;&gt;&lt;a href=&quot;#对象的创建&quot; class=&quot;headerlink&quot; title=&quot;对象的创建&quot;&gt;&lt;/a&gt;对象的创建&lt;/h2&gt;&lt;p&gt;JavaScript 对象的创建有三种方式：直接量，new 关键字 和 Object.creat() 方来创建。&lt;/p&gt;
    
    </summary>
    
      <category term="JS系列" scheme="http://yoursite.com/categories/JS%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js语句</title>
    <link href="http://yoursite.com/2015/06/15/js%E8%AF%AD%E5%8F%A5/"/>
    <id>http://yoursite.com/2015/06/15/js语句/</id>
    <published>2015-06-14T16:00:00.000Z</published>
    <updated>2018-05-30T06:37:26.527Z</updated>
    
    <content type="html"><![CDATA[<p>ECMAScript 语法定义的语句通常使用一个或多个关键字来完成给定的任务。</p><h2 id="条件判断结构-if-if…else-if…else-嵌套"><a href="#条件判断结构-if-if…else-if…else-嵌套" class="headerlink" title="条件判断结构 if/ if…else/ if…else 嵌套"></a>条件判断结构 if/ if…else/ if…else 嵌套</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">  <span class="comment">// 如果条件表达式为true，执行该处代码</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="comment">// 如果条件表达式为false,执行该处代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>条件判断的嵌套</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式）&#123;</span><br><span class="line">  <span class="comment">//如果条件表达式结果为true,执行该语句，下边语句不执行。</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">  <span class="comment">// 如果条件表达式结果为true,执行该语句，下边语句不执行。</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">  <span class="comment">// 如果条件表达式结果为true,执行该语句，下边语句不执行。</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 如果以上语句都为false,执行该语句。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Switch语句"><a href="#Switch语句" class="headerlink" title="Switch语句"></a>Switch语句</h2><p>写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mon=prompt(<span class="string">"请输入月份"</span>);</span><br><span class="line"><span class="keyword">switch</span>(mon)&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"3"</span>: <span class="keyword">case</span> <span class="string">"4"</span>:  <span class="keyword">case</span> <span class="string">"5"</span>:</span><br><span class="line">  alert(<span class="string">"春季"</span>);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"6"</span>: <span class="keyword">case</span> <span class="string">"7"</span>:  <span class="keyword">case</span> <span class="string">"8"</span>:</span><br><span class="line">  alert(<span class="string">"夏季"</span>);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"9"</span>: <span class="keyword">case</span> <span class="string">"10"</span>:  <span class="keyword">case</span> <span class="string">"11"</span>:</span><br><span class="line">  alert(<span class="string">"秋季"</span>);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"12"</span>: <span class="keyword">case</span> <span class="string">"1"</span>:  <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">  alert(<span class="string">"冬季"</span>);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">  alert(<span class="string">"请输入正确月份"</span>);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:switch后边的变量和case后边值的数据类型必须保持一致。</p><h2 id="While循环语句"><a href="#While循环语句" class="headerlink" title="While循环语句"></a>While循环语句</h2><p>语法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n1;</span><br><span class="line">While(条件表达式)&#123;</span><br><span class="line">  <span class="comment">// 循环语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果while后边的条件表达式为true,循环语句一直执行，直到while后边的条件表达式为false, 循环终止（跳出循环）,使用while语句的时候，需在外边定义一个变量。</p><h2 id="Do-while-语句"><a href="#Do-while-语句" class="headerlink" title="Do while 语句"></a>Do while 语句</h2><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">  <span class="comment">// 循环语句</span></span><br><span class="line">&#125;<span class="keyword">while</span>(条件表达式)</span><br></pre></td></tr></table></figure><p>先执行do里循环代码，再和while后边的条件表达式进行判断，如果结果为true,继续执行do里的循环，结果为false，循环终止。比while多执行一次循环。</p><p>while语句 先判断后执行do while 语句 先执行后判断</p><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">100</span>; i++)&#123;</span><br><span class="line">  <span class="comment">//循环代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h2><p>单独使用 break 语句的作用是立即退出最内层的循环或 switch 语句。</p><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>()&#123;</span><br><span class="line">  <span class="comment">// 循环语句</span></span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Break是跳出当前循环体；</p><h2 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h2><p>跳出循环一次。后边的代码不继续执行。</p><h3 id="break-和-continue-的区别"><a href="#break-和-continue-的区别" class="headerlink" title="break 和 continue 的区别"></a>break 和 continue 的区别</h3><ul><li>break跳出当前循环，执行循环后的语句</li><li>continue跳出当前循环，继续执行循环</li></ul><h2 id="for-in-属性枚举语句"><a href="#for-in-属性枚举语句" class="headerlink" title="for-in 属性枚举语句"></a>for-in 属性枚举语句</h2><p><code>for-in</code> 语句用来枚举对象的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(variable <span class="keyword">in</span> object)&#123;</span><br><span class="line">  <span class="comment">// 代码段</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>variable 是一个变量名，也可以是一个可以产生左值表达式或者一个通过 var 语句声明的变量，每次循环都会计算 variable 这个表达式，也就是说每次循环它的值可能不同。for/in 循环并不会遍历对象的所有属性，只有”可枚举”的属性才会遍历到。内置对象的方法就是不可枚举的</p><h2 id="label-（标签）语句"><a href="#label-（标签）语句" class="headerlink" title="label （标签）语句"></a>label （标签）语句</h2><p>label 语句可以在代码中添加标签，以便将来使用。通过给语句定义标签，就可以在程序的任何地方通过标签名引用这条语句。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start: <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="with-语句"><a href="#with-语句" class="headerlink" title="with 语句"></a>with 语句</h2><p>with 语句的作用是将作用域设置到一个特定的对象中。如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> qs = location.search.substring();</span><br><span class="line"><span class="keyword">var</span> hostName = location.hostname();</span><br><span class="line"><span class="keyword">var</span> utl = location.href();</span><br><span class="line"><span class="comment">// 以上代码可以写成下面的方式, 严格模式下不允许使用 with</span></span><br><span class="line"><span class="keyword">with</span>(location)&#123;</span><br><span class="line">  <span class="keyword">var</span> qs = search.substring();</span><br><span class="line">  <span class="keyword">var</span> hostName = hostname();</span><br><span class="line">  <span class="keyword">var</span> utl = href();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="return-语句"><a href="#return-语句" class="headerlink" title="return 语句"></a>return 语句</h2><p>函数是一种表达式，所有的表达式都有值。函数中国的 return 语句既是指定函数调用后的返回值。因此，return 语句只能在函数体内部出现，而且 return 语句经常作为函数的最后一条语句出现，但并不是说一定要放在函数体的最后，即使在执行 return 语句的时候还有很多后续代码没有执行，这是函数也还会返回调用程序。</p><h2 id="throw-语句"><a href="#throw-语句" class="headerlink" title="throw 语句"></a>throw 语句</h2><p>异常是指程序在程序在运行时发生的异常情况或错误时产生的一个信号。在 JavaScript 中，当产生运行时错误或者程序使用 throw 语句时就会显式的抛出异常。</p><h2 id="try-catch-finally-语句"><a href="#try-catch-finally-语句" class="headerlink" title="try/catch/finally 语句"></a>try/catch/finally 语句</h2><p>try/catch/finally 是 JavaScript 的异常处理机制。其中 try 从句中定义了需要处理的异常所在代码块，catch 从句跟在 try 后，当 try 块内发生了异常时，调用 catch 内的代码逻辑。catch 从句后跟随 finally 块，后者中国放置清理代码，不管是 try 块中是否产生异常，finally 块内的逻辑总是会执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 需要捕获异常的代码块</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="comment">// try 代码块抛出异常才会执行此代码块中的逻辑</span></span><br><span class="line">  <span class="comment">// 还可以通过 throw 语句来再次抛出异常</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="comment">// 不管异常有没有发生，这个代码块中的逻辑都会执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其它语句"><a href="#其它语句" class="headerlink" title="其它语句"></a>其它语句</h2><h3 id="debugger-语句"><a href="#debugger-语句" class="headerlink" title="debugger 语句"></a>debugger 语句</h3><h3 id="“use-strict”"><a href="#“use-strict”" class="headerlink" title="“use strict”"></a>“use strict”</h3><p>开启 ECMAScript 5 引入的一条命令，开启严格模式。说明后续的所有 JavaScript 代码都在严格模式下执行。</p><ul><li>严格模式下禁止使用 with 语句</li><li>在严格模式下，所有的变量都要先声明；</li><li>严格模式中，调用的函数中的一个 this 值是 undefined ；<ul><li>可以利用这种方式判断 JavaScript 实现是否支持严格模式</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hasStrictMode = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">  "use strict"</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span> === <span class="literal">undefined</span>;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><ul><li>在严格模式中，当通过 call() 或 apply() 来调用函数时，其中 this 值就是通过 call() 或 apply() 传入的第一个参数；<br>+（在非严格模式中，null 和 undefined 值被全局对象和转换为对象的费对象值所替代）</li><li>在严格模式，给只读属性和给不可扩展的对象创建新成员都抛出一个类型错误异常。<br>+（在非严格模式中，这些操作只是简单地操作失败，不会报错）</li><li>在严格模式下，传入 eval() 的代码不能在调用程序锁在的上下文中声明变量或定义函数<ul><li>在非严格模式中是可以这样做的。</li></ul></li><li>严格模式下，函数里的 arguments 对象拥有传入函数值的静态副本。</li><li>严格模式下，delete 运算符后跟随非法的标识符会抛出异常</li><li>严格模式下，试图删除一个不可配置的属性将抛出一个类型错误异常</li><li>严格模式下，在一个对象直接量中定义两个或多个同名属性将会产生一个语法错误</li><li>严格模式下是不允许使用八进制整数直接量</li><li>严格模式下标识符 eval() 和 arguments 当做关键字，它们的值是不能更改的。不能给这些标识符赋值。</li><li>严格模式中限制了对调用栈的检测能力，在严格模式的函数中，arguments.caller 和 arguments.callee 都会抛出一个类型错误异常。<ul><li>严格模式的函数同样具有 caller 和 arguments 属性，当访问这两个属性时将会抛出类型错误异常。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ECMAScript 语法定义的语句通常使用一个或多个关键字来完成给定的任务。&lt;/p&gt;
&lt;h2 id=&quot;条件判断结构-if-if…else-if…else-嵌套&quot;&gt;&lt;a href=&quot;#条件判断结构-if-if…else-if…else-嵌套&quot; class=&quot;headerlink&quot; title=&quot;条件判断结构 if/ if…else/ if…else 嵌套&quot;&gt;&lt;/a&gt;条件判断结构 if/ if…else/ if…else 嵌套&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(条件表达式)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 如果条件表达式为true，执行该处代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 如果条件表达式为false,执行该处代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JS系列" scheme="http://yoursite.com/categories/JS%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js Date、Math、包装对象、RegExp</title>
    <link href="http://yoursite.com/2015/06/08/js%20Date%E3%80%81Math%E3%80%81%E5%8C%85%E8%A3%85%E5%AF%B9%E8%B1%A1%E3%80%81RegExp/"/>
    <id>http://yoursite.com/2015/06/08/js Date、Math、包装对象、RegExp/</id>
    <published>2015-06-07T16:00:00.000Z</published>
    <updated>2018-05-30T06:24:00.674Z</updated>
    
    <content type="html"><![CDATA[<h2 id="javaScript的几个内置对象"><a href="#javaScript的几个内置对象" class="headerlink" title="javaScript的几个内置对象"></a>javaScript的几个内置对象</h2><h2 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h2><p>ECMAScript 5 提供了两个方法：Date.parase() 和 Date.UTC() 返回日期的毫秒数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();   <span class="comment">//创建对象</span></span><br><span class="line">alert(<span class="built_in">Date</span>()); <span class="comment">//返回一个完整的日期时间</span></span><br><span class="line">alert(now.getDate()); <span class="comment">//返回从1开始计数的天数</span></span><br><span class="line">alert(now.getDay()); <span class="comment">//返回当前周几</span></span><br><span class="line">alert(now.getFullYear()); <span class="comment">//返回当前年份</span></span><br><span class="line">alert(now.getMonth()+<span class="number">1</span>);  <span class="comment">//返回当前月份</span></span><br><span class="line">alert(now.getHours());  <span class="comment">//当地时间的小时</span></span><br><span class="line"><span class="keyword">var</span> then = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2011</span>, <span class="number">10</span>, <span class="number">10</span>);  <span class="comment">// 2011年10月10日</span></span><br></pre></td></tr></table></figure><h3 id="日期格式化方法"><a href="#日期格式化方法" class="headerlink" title="日期格式化方法"></a>日期格式化方法</h3><ul><li>toDateString();</li><li>toTimeString();</li><li>toLocaleDateString();</li><li>toLocalTimeString();</li><li>toUTCString()</li></ul><a id="more"></a><h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 控制台输出</span></span><br><span class="line"><span class="built_in">Math</span>.max(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);<span class="comment">//这些数字中的最大值</span></span><br><span class="line"><span class="built_in">Math</span>.min(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);<span class="comment">//返回多个数中的最小值</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="number">45.84334</span>);<span class="comment">//向下取整</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">5.4443</span>);<span class="comment">//向上取整</span></span><br><span class="line"><span class="built_in">Math</span>.round(<span class="number">67.55</span>);<span class="comment">//四舍五入</span></span><br><span class="line"><span class="built_in">Math</span>.random();<span class="comment">//随机数 0-1 </span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*<span class="number">10</span>+<span class="number">1</span>); <span class="comment">//随机数 1-10</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*<span class="number">100</span>+<span class="number">1</span>); <span class="comment">//随机数 1-100</span></span><br><span class="line"><span class="built_in">Math</span>.abs(<span class="number">-100</span>);<span class="comment">//返回绝对值       </span></span><br><span class="line"><span class="built_in">Math</span>.pow(<span class="number">4</span>,<span class="number">3</span>); <span class="comment">//4 的 3 次幂  </span></span><br><span class="line"><span class="built_in">Math</span>.sqrt(<span class="number">16</span>); <span class="comment">//开平方</span></span><br><span class="line"><span class="built_in">Math</span>.sin(<span class="number">4</span>);<span class="comment">//返回正弦值</span></span><br><span class="line"><span class="built_in">Math</span>.PI; <span class="comment">// π 圆周率</span></span><br><span class="line"><span class="built_in">Math</span>.sqrt(<span class="number">3</span>); <span class="comment">// 3 的平方根</span></span><br><span class="line"><span class="built_in">Math</span>.exp(<span class="number">3</span>); <span class="comment">// e 的 3 次幂</span></span><br><span class="line"><span class="built_in">Math</span>.log(<span class="number">10</span>); <span class="comment">// 10 的自然对数</span></span><br><span class="line"><span class="built_in">Math</span>.E; <span class="comment">// 自然对数的底数</span></span><br></pre></td></tr></table></figure><h2 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h2><p>当 JavaScript 解释器启动时，它将创建一个新的全局对象，并给它一组定义的初始属性。</p><ul><li>全局属性，如 undefined、Infinity 和 NaN;</li><li>全局函数，如：isNaN()、parseInt() 和 eval();</li><li>构造函数，如：Date()、RegExp()、String()、Object() 和 Array()</li><li>全局对象，如：Math 和 JSON;</li></ul><h2 id="包装对象"><a href="#包装对象" class="headerlink" title="包装对象"></a>包装对象</h2><ul><li>String()</li><li>Number()</li><li>Boolean()<br>字符串字面量、数字字面量、布尔字面量均可以使用”.”符号引用属性值，当属性值是一个函数时，称其为方法。只有对象有属性，JavaScript 在创建字符串、数字、布尔值时会自动的通过调用 new String(); new Number(); new Boolean() 的方式调用。</li></ul><h2 id="RegExp-对象"><a href="#RegExp-对象" class="headerlink" title="RegExp 对象"></a>RegExp 对象</h2><p><code>var expression = /pattern/flags;</code></p><p>pattern 是正则表达式，可以包含字符类，限定符，分组，向前查找以及反向查找。flag是标志，有 3 种：</p><ul><li>g: 全局(global)模式</li><li>i: 表示不区分大小写</li><li>m: 表示多行(multiline)模式</li></ul><p>RegExp 构造函数的模式参数是字符串，在某些情况下需要双重转义；</p><h3 id="RegExp-实例属性"><a href="#RegExp-实例属性" class="headerlink" title="RegExp 实例属性"></a>RegExp 实例属性</h3><ul><li>global 布尔值，是否设置了 g 标志</li><li>ignoreCase 布尔值，是否设置了 i 标志</li><li>lastIndex 整数，表示开始搜索下一个匹配项的字符位置，从 0 算起</li><li>multiline 布尔值，是否设置了 m 标志</li><li>source 正则表达式的字符串表示，按照字面量形式而非传入构造函数中的字符串模式返回；</li></ul><h3 id="RegExp-实例方法"><a href="#RegExp-实例方法" class="headerlink" title="RegExp 实例方法"></a>RegExp 实例方法</h3><ul><li>exec() ；<ul><li>接收一个参数，要引用匹配模式的字符串，返回包含第一个匹配项信息的数组；</li><li>没有匹配项的情况下返回 null</li><li>返回的数组虽然是 Array 的实例，但包含两个属性：index 和 input<ul><li>index 表示匹配项子在字符串中的位置</li><li>input 表示应用正则表达式的字符串</li></ul></li><li>exec() 方法在设置了全局标志的情况下，每次调用该方法都会在字符串中继续查找新匹配项。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">"mom and dad and baby"</span>;</span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/mom( and dad( and baby)?)?/gi</span>;</span><br><span class="line"><span class="keyword">var</span> mataches = pattern.exec(text);</span><br><span class="line"><span class="built_in">console</span>.log(matches.index); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(matches.input); <span class="comment">// "mom and dad and baby"</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]); <span class="comment">// "mom and dad and baby"</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">1</span>]); <span class="comment">// " and dad and baby"</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">2</span>]); <span class="comment">// " and baby"</span></span><br></pre></td></tr></table></figure><p>总之：正则分组之后匹配到的结果如果匹配成功则会得到数组，数组中第 0 项是与整个模式匹配的字符串，从第一项开始就是数正则表达式中的左括号就可以了，左括号是第几个，则解析出来的数据就是数组中下标为该数字的元素`</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;javaScript的几个内置对象&quot;&gt;&lt;a href=&quot;#javaScript的几个内置对象&quot; class=&quot;headerlink&quot; title=&quot;javaScript的几个内置对象&quot;&gt;&lt;/a&gt;javaScript的几个内置对象&lt;/h2&gt;&lt;h2 id=&quot;Date对象&quot;&gt;&lt;a href=&quot;#Date对象&quot; class=&quot;headerlink&quot; title=&quot;Date对象&quot;&gt;&lt;/a&gt;Date对象&lt;/h2&gt;&lt;p&gt;ECMAScript 5 提供了两个方法：Date.parase() 和 Date.UTC() 返回日期的毫秒数&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; now = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;();   &lt;span class=&quot;comment&quot;&gt;//创建对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;()); &lt;span class=&quot;comment&quot;&gt;//返回一个完整的日期时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(now.getDate()); &lt;span class=&quot;comment&quot;&gt;//返回从1开始计数的天数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(now.getDay()); &lt;span class=&quot;comment&quot;&gt;//返回当前周几&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(now.getFullYear()); &lt;span class=&quot;comment&quot;&gt;//返回当前年份&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(now.getMonth()+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;//返回当前月份&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(now.getHours());  &lt;span class=&quot;comment&quot;&gt;//当地时间的小时&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; then = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2011&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;// 2011年10月10日&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;日期格式化方法&quot;&gt;&lt;a href=&quot;#日期格式化方法&quot; class=&quot;headerlink&quot; title=&quot;日期格式化方法&quot;&gt;&lt;/a&gt;日期格式化方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;toDateString();&lt;/li&gt;
&lt;li&gt;toTimeString();&lt;/li&gt;
&lt;li&gt;toLocaleDateString();&lt;/li&gt;
&lt;li&gt;toLocalTimeString();&lt;/li&gt;
&lt;li&gt;toUTCString()&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JS系列" scheme="http://yoursite.com/categories/JS%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js表达式和运算符</title>
    <link href="http://yoursite.com/2015/06/06/js%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://yoursite.com/2015/06/06/js表达式和运算符/</id>
    <published>2015-06-05T16:00:00.000Z</published>
    <updated>2018-05-30T06:10:33.422Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript 解释器会将表达式计算出一个结果，程序中最常见的变量就是一种表达式。变量名也是一种表达式。复杂表达式是由简单表达式组成的，最常用的方法是使用运算符。</p><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><h3 id="原始表达式"><a href="#原始表达式" class="headerlink" title="原始表达式"></a>原始表达式</h3><p>原始表达式是表达式的最小单位，通常包含：</p><ul><li>常量</li><li>直接量</li><li>关键字</li><li>变量</li></ul><a id="more"></a><h4 id="对象和数组的初始化表达式"><a href="#对象和数组的初始化表达式" class="headerlink" title="对象和数组的初始化表达式"></a>对象和数组的初始化表达式</h4><ul><li>数组表达式<ul><li><code>[]</code></li><li><code>[1+2,3+1]</code></li><li><code>var matrix = [[1,2,3],[1,2,2],[2,3,1]];</code></li><li><code>[0,,,1]</code></li></ul></li><li>对象表达式<ul><li><code>var p = {name: &quot;Hiraku&quot;, age: 17};</code></li><li><code>var q = {};</code></li><li><code>q.x = 2.3</code></li><li><code>var data = {casData:{cas: canvas, ctx: context}, lineData{lineStyle:&quot;red&quot;,lineWidth:2}}</code></li></ul></li><li>函数定义表达式<ul><li><code>var square = function(x){ return x * x};</code></li></ul></li><li>访问对象属性的方式<ul><li>obj.key;</li><li>obj[key];</li></ul></li><li>调用表达式: 函数表达式开始，这个函数表达式指代了要调用的函数，函数表达式后是一对圆括号，括号内是以逗号隔开的参数；<ul><li><code>f(0);</code></li><li><code>Math.max(1,2,3);</code></li></ul></li><li>对象创建表达式<ul><li><code>new Object()</code></li><li><code>new Point(1,3)</code></li><li>无参数时()可以省略： <code>new Object</code></li></ul></li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>ECMAScript 描述了一组用于操作数组的操作符，分为算术操作符、位操作符、关系操作符合相等操作符。对于对象，相应的操作符通常都会调用对象的 valueOf() 方法或者 toString() 方法。</p><h3 id="比较、typeof、-、-、-、-、-、-、-、-、三元、逻辑运算符"><a href="#比较、typeof、-、-、-、-、-、-、-、-、三元、逻辑运算符" class="headerlink" title="比较、typeof、+、-、*、/、%、=、==、===、三元、逻辑运算符"></a>比较、typeof、+、-、*、/、%、=、==、===、三元、逻辑运算符</h3><ul><li><p>比较运算符</p><ul><li>&lt;</li><li><blockquote></blockquote></li><li><p>=</p></li><li><p>&lt;=</p></li><li>!=</li></ul></li><li>判断数据类型<ul><li>typeof(变量名);</li></ul></li><li>算术运算符<ul><li>加运算：<ul><li>两个数据类型都为数字类型变量相加，得到的是数字类型。</li><li>一个为数字类型的变量和一个为字符串类型的变量相加，得到的是一个字符串类型，加号起一个连接的作用。</li></ul></li><li>减运算<ul><li>如果两个变量都为数字类型相减，得到的是数字类型。</li><li>如果一个为数字类型的变量，一个为数字字符串，相减得到的是数字类型。</li><li>如果一个为数字类型的变量，一个为非数字字符串，相减得到的NaN,数字类型。</li></ul></li><li><code>*</code> 乘运算<ul><li>Inifinity 与 0 相乘， undefined。</li></ul></li><li><code>/</code> 除运算<ul><li>两个都为数字类型的变量，相除得到的是数字类型。</li><li>如果一个为数字类型的变量，一个为数字字符串变量，相除得到的是数字类型。</li><li>如果一个为数字类型的变量，一个为非数字字符串，相除得到的NaN,数字类型。</li><li>如果0作为除数，得到的是infinity(无限大)，是一个数字类型。</li><li>0 / 0 是 undefined。</li><li>Infinity / Infinity 结果是 NaN。</li></ul></li><li><code>%</code> 取余数</li></ul></li><li>()优先级<ul><li>先计算()括号里边的值。</li></ul></li><li>等号运算符<ul><li>“=” 赋值预算符</li><li>“==” 比较运算符: 只判断内容是否相同，不判断数据类型。</li><li>“===” 比较运算符: 不仅判断内容是否相同，还判断数据类型是否相同。</li><li>“!=” 不等于: 只判断内容是否不相同，不判断数据类型。</li><li>“!==” 不等于: 不仅判断内容是否不相同，还判断数据类型是否相同。</li></ul></li><li>三元运算符<ul><li>语法：<ul><li>表达式？如果表达式的值为true,执行表达式后边的代码，如果值为false,执行冒号后边的值。</li><li>三元运算符可以理解为if..else的另外一种写法。</li></ul></li></ul></li><li>逻辑运算符：逻辑运算的前提是参与运算的变量结果为Boolean类型。<ul><li>或（||）<ul><li>参与运算，只要满足一个为true,或运算最后的值为true.</li><li>参与运算的值都为false,或运算最后的值为false.</li></ul></li><li>且（&amp;&amp;）<ul><li>参与运算，只要满足一个为false,或运算最后的值为false.</li><li>参与运算，都为true的时候，且运算最后的值为true.</li></ul></li><li>非（!）<ul><li>如果运算结果为true,非运算结果为false</li><li>如果运算结果为false,非运算结果为true.</li></ul></li></ul></li></ul><h4 id="非"><a href="#非" class="headerlink" title="非"></a>非</h4><ul><li>如果操作数是一个对象，返回 false</li><li>如果操作数是一个空字符串，返回 true</li><li>如果操作数是一个非空字符串，返回 false</li><li>如果操作数是数值 0 ，返回 true</li><li>如果操作数是任意非 0 数值，包括 Infinity ，返回 true</li><li>如果操作数是 null ，返回 true</li><li>如果操作数是 NaN ，返回 true</li><li>如果操作数是 undefined ，返回 true<h4 id="与"><a href="#与" class="headerlink" title="与"></a>与</h4></li><li>如果第一个操作数是对象，返回第二个操作数；</li><li>如果第二个操作数是对象，只有第二个数求值结果为 true 是，返回该对象</li><li>如果两个都是对象，返回第二个；</li><li>如果有一个操作数是 null ，返回 null</li><li>如果有一个操作数是 NaN ，返回 NaN</li><li>如果有一个操作数是 undefined ，返回 undefined<h4 id="或"><a href="#或" class="headerlink" title="或"></a>或</h4></li><li>如果第一个操作数是对象，返回第一个；</li><li>如果第一个操作数求值结果 false ，返回第二个</li><li>如果两个都是对象，返回第一个；</li><li>如果两个操作数是 null ，返回 null</li><li>如果两个操作数是 NaN ，返回 NaN</li><li>如果两个操作数是 undefined ，返回 undefined</li></ul><p>总结逻辑运算符：</p><ol><li>&amp;&amp;和||都采取短路运算，即第一个能够决定结果就不再看第二个了</li><li>&amp;&amp; 的要求比较宽松 要两个都是true才是true 所以看到第一个是false就没有必要继续完后看了</li><li>|| 的要求比较严格，要两个都是false才是false，所以看到第一个是true就没有必要继续完后看了</li><li>&amp;&amp;和||不但可以操作布尔类型的值，对其他类型的值也可以进行操作，并返回可以决定表达式结果的那个值。</li></ol><h2 id="自增自减"><a href="#自增自减" class="headerlink" title="自增自减"></a>自增自减</h2><ul><li>++i，i++<ul><li>在没有参加运算的情况下，++i i++都是在变量的基础上加1。</li><li>在参加运算的情况下：</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n1=<span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> n2=n1++;  <span class="comment">// 先把n1的值赋给n2,然后n1执行加1的操作。</span></span><br><span class="line">Var n2=++n1;  <span class="comment">// 先执行n1加1的操作，再赋值给n2.</span></span><br></pre></td></tr></table></figure><p>总的来说：</p><ul><li>递增++ 递减–</li><li>a++ 先参与运算 后自加</li><li>++a 先自加 后参与运算</li></ul><p>注意：</p><ul><li>在应用于一个包含有效数字字符串是，先将其转换为数字值再执行加减1的操作。</li><li>在应用于一个不包含有效数字字符的字符串时，将变量的值设置为 NaN。</li><li>在应用于布尔值 false 时，先将其转换为 0 再执行加减 1 的操作。</li><li>在应用于布尔值 true 时，先将其转换为 1 再执行加减 1 的操作。</li><li>在应用于对象时，先抵用对象的 valueOf 方法以取得一个可供操作的值，然后对该值应用前面的规则。如果结果是NaN，则调用 toString() 方法后再应用前述的规则。</li></ul><h3 id="带操作的赋值运算符"><a href="#带操作的赋值运算符" class="headerlink" title="带操作的赋值运算符"></a>带操作的赋值运算符</h3><p><img src="/images/赋值运算符.png" alt="赋值运算符"></p><h2 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h2><p>0 正 1 负，最高位表示符号位。正数和负数都是以二进制码来存储，但负数使用的格式是二进制补码。计算过程如下：</p><ul><li>求这个数绝对值的二进制码；</li><li>求二进制反码；</li><li><p>得到的反码加 1。<br>ECMAScript 中，对 NaN, Infinity 值应用位操作时，这两个值都当做 0 来处理。</p></li><li><p>按位非(~)</p></li><li>按位与(&amp;)</li><li>按位或(|)</li><li>按位异或(^)</li><li>左移(&lt;&lt;)</li><li>有符号右移(&gt;&gt;)</li><li>无符号右移(&gt;&gt;&gt;)</li></ul><h2 id="instanceof-操作符"><a href="#instanceof-操作符" class="headerlink" title="instanceof 操作符"></a>instanceof 操作符</h2><p>测试对象类，左操作数是一个对象，右操作数是标识对象的类。如果左侧的对象是右侧类的实例，则表达式返回true，否则返回false。</p><h2 id="操作符优先级"><a href="#操作符优先级" class="headerlink" title="操作符优先级"></a>操作符优先级</h2><p><img src="/images/操作符优先级.jpg" alt="操作符优先级"></p><h2 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h2><p>eval() 是一个函数，但它已经被当做运算符来对待了。</p><h3 id="eval-1"><a href="#eval-1" class="headerlink" title="eval()"></a>eval()</h3><p>eval() 只有一个参数。如果传入的不是字符串，直接返回这个参数，如果是字符串，会把字符串当成 JavaScript 代码进行编译，如果便以失败抛出异常，编译成功则执行这段代码。返回字符串中最后一个表达式或语句的值，如果最后一个表达式中没有返回值，则返回 undefined。</p><p>eval() 它使用了调用它的变量作用域环境。它查找变量的值和定义新变量和函数的操作和局部作用域中的代码完全一样。</p><h3 id="全局的eval"><a href="#全局的eval" class="headerlink" title="全局的eval()"></a>全局的eval()</h3><p>eval() 具有改变局部变量的能力。当直接使用 “eval” 名称来调用 eval() 函数时，通常称为”直接 eval”.直接调用 eval() 时，它总是调用它的上下文作用域内执行。其它间接调用使用全局对象作为其上下文作用域，并且无法读、写、定义局部变量和函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> geval = <span class="built_in">eval</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="string">"global"</span>, y = <span class="string">"global"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="string">"local"</span>;</span><br><span class="line">  <span class="built_in">eval</span> (<span class="string">"x += 'changed'"</span>);</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> y = <span class="string">"local"</span>;</span><br><span class="line">  geval (<span class="string">"y += 'changed'"</span>);</span><br><span class="line">  <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(f(),x);</span><br><span class="line"><span class="built_in">console</span>.log(g(),y);</span><br></pre></td></tr></table></figure><h3 id="严格的eval"><a href="#严格的eval" class="headerlink" title="严格的eval()"></a>严格的eval()</h3><p>ECMAScript 5 严格模式中，eval() 是私有上下文环境中的局部 eval()，eval() 执行的代码段可以查询或更改局部变量，但不能在局部作用域中定义新变量。</p><h3 id="eval总结"><a href="#eval总结" class="headerlink" title="eval总结"></a>eval总结</h3><ul><li>函数是封装了一段可以重复执行的代码</li><li>eval方法的功能：执行一段JS代码(封装了代码)</li><li>在eval方法中没有作用域的概念（ES5严格模式有了独立的作用域）——&gt;声明的变量都是全局变量，函数都是全局函数</li></ul><p>eval和函数的比较</p><ol><li>eval封装了一段代码（只能执行一次）；函数封装了一段代码（可以重复执行）</li><li>eval中没有独立作用域的——&gt;声明的变量和函数都是全局的； 函数中是有独立作用域 ——&gt;函数内声明的变量和函数只能在当前函数内部所访问</li></ol><h2 id="delete运算符"><a href="#delete运算符" class="headerlink" title="delete运算符"></a>delete运算符</h2><p>delete 运算符时一元运算符，用来删除对象属性或者数组元素。删除属性或者删除数组元素不仅仅是设置了一个 undefined 的值。当删除一个属性时，这个属性将不再存在。读取一个不存在的属性将返回 undefined，但是可以通过 in 运算符来检测这个属性是否在对象中存在。</p><h2 id="void运算符"><a href="#void运算符" class="headerlink" title="void运算符"></a>void运算符</h2><p>void 运算符是一元运算符，在操作数之前，操作数可以使任意类型。通常用在客户端的URL–javascript: URL 中，在 URL 中可以写带有副作用的表达式，而 void 则让浏览器不比显示这个表达式的计算结果。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"javascript:void window.open();"</span>&gt;打开一个新窗口&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure><p>通过给 <code>&lt;a&gt;</code> 标签的onclick 绑定一个事件处理程序要比在 href 中写 “javascript:URL” 要更加清晰，这种情况下 void 可有可无。</p><h2 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h2><p>逗号运算符是二元操作符，操作数可以是任意类型，先计算左边操作数后计算右边操作数，最后返回右操作数的值。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript 解释器会将表达式计算出一个结果，程序中最常见的变量就是一种表达式。变量名也是一种表达式。复杂表达式是由简单表达式组成的，最常用的方法是使用运算符。&lt;/p&gt;
&lt;h2 id=&quot;表达式&quot;&gt;&lt;a href=&quot;#表达式&quot; class=&quot;headerlink&quot; title=&quot;表达式&quot;&gt;&lt;/a&gt;表达式&lt;/h2&gt;&lt;h3 id=&quot;原始表达式&quot;&gt;&lt;a href=&quot;#原始表达式&quot; class=&quot;headerlink&quot; title=&quot;原始表达式&quot;&gt;&lt;/a&gt;原始表达式&lt;/h3&gt;&lt;p&gt;原始表达式是表达式的最小单位，通常包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常量&lt;/li&gt;
&lt;li&gt;直接量&lt;/li&gt;
&lt;li&gt;关键字&lt;/li&gt;
&lt;li&gt;变量&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JS系列" scheme="http://yoursite.com/categories/JS%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js变量和数据类型</title>
    <link href="http://yoursite.com/2015/06/03/js%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2015/06/03/js变量和数据类型/</id>
    <published>2015-06-02T16:00:00.000Z</published>
    <updated>2018-05-30T03:24:56.410Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>JavaScript是弱类型的语言，变量是松散的。所谓松散是可以保存任何类型的变量。即声明不同数据类型的变量使用同一个关键字 <code>var</code>，变量就是变化的量，变量的作用就是用来装数据的容器。声明变量的时候不用考虑类型，但是处理和计算的时候要考虑类型.</p><a id="more"></a><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><p>定义变量使用关键字 <code>var</code>来定义变量名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在全局作用域下声明了变量 a</span></span><br><span class="line"><span class="keyword">var</span> a; </span><br><span class="line"><span class="comment">// 使用赋值运算符来给变量赋值</span></span><br><span class="line">a = <span class="string">"a此时是字符串"</span>;</span><br></pre></td></tr></table></figure><p>赋值：</p><ul><li>赋值运算符为“=”，这个等号不用判断两者是否相同。</li><li>如果判断是否相同，可使用==（===）。</li></ul><p>以上两步可简写为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"a此时是字符串"</span>;</span><br></pre></td></tr></table></figure><p>注意：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  msg = <span class="string">"我是函数内部定义的全局变量"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面例子省略了<code>var</code>操作符， msg 就变成了全局变量，函数外部也能访问到，但不要这样做！。</p><h3 id="变量命名规范"><a href="#变量命名规范" class="headerlink" title="变量命名规范"></a>变量命名规范</h3><ul><li>由字母、数字、下划线、$ 组成且开头不能是数字定义变量名。</li><li>不能使用特殊符号或者特殊符号开头来定义变量名（_除外）。</li><li>不能以关键字来定义变量名</li><li>变量的名称要有实际意义</li><li>规则中所说的字母包括ASCII和Unicode字母字符，如汉字，但不推荐使用</li><li><p>变量的命名遵守驼峰命名法，首字母小写,第二个单词的首字母大写 例如：userName</p><ul><li>关键字</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>        <span class="keyword">do</span>          <span class="keyword">instanceof</span>     <span class="keyword">typeof</span></span><br><span class="line"><span class="keyword">case</span>         <span class="keyword">else</span>        <span class="keyword">new</span>            <span class="keyword">var</span></span><br><span class="line"><span class="keyword">catch</span>        <span class="keyword">finally</span>     <span class="keyword">return</span>         <span class="keyword">void</span></span><br><span class="line"><span class="keyword">continue</span>     <span class="keyword">for</span>         <span class="keyword">switch</span>         <span class="keyword">while</span></span><br><span class="line"><span class="keyword">debugger</span>*    <span class="function"><span class="keyword">function</span>    <span class="title">this</span>           <span class="title">with</span></span></span><br><span class="line"><span class="function"><span class="title">default</span>      <span class="title">if</span>          <span class="title">throw</span></span></span><br><span class="line"><span class="function"><span class="title">delete</span>       <span class="title">in</span>          <span class="title">try</span></span></span><br></pre></td></tr></table></figure><ul><li>不能使用保留字来定义变量名 (保留字)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">abstract        enum         int           short</span><br><span class="line">boolean         <span class="keyword">export</span>       interface     <span class="keyword">static</span></span><br><span class="line">byte            extends      long          <span class="keyword">super</span></span><br><span class="line">char            final        native        synchronized</span><br><span class="line"><span class="class"><span class="keyword">class</span>           <span class="title">float</span>        <span class="title">package</span>       <span class="title">throws</span></span></span><br><span class="line"><span class="class"><span class="title">const</span>           <span class="title">goto</span>         <span class="title">private</span>       <span class="title">transient</span></span></span><br><span class="line"><span class="class"><span class="title">debugger</span>        <span class="title">implements</span>   <span class="title">protected</span>     <span class="title">volatile</span></span></span><br><span class="line"><span class="class"><span class="title">double</span>          <span class="title">import</span>       <span class="title">public</span></span></span><br></pre></td></tr></table></figure><p>注意：在JS中，是严格区分大小写的。</p><h3 id="执行环境和作用域"><a href="#执行环境和作用域" class="headerlink" title="执行环境和作用域"></a>执行环境和作用域</h3><p>执行环境是 JavaScript 中最为重要的一个概念。定义了变量或函数有权访问其它数据。每个环境中都有一个与之关联的变量对象，我们编写的代码无法访问，但是环境中定义的变量存放在这个对象中。</p><p>全局执行环境是最外围的一个执行环境。根据 ECMAScript 实现所在的宿主环境的不同，表示执行环境的对象也不一样。在 web 浏览器中，全局执行环境被认为是 window 对象，因此所有的全局变量和函数都是作为 window 对象的属性和方法创建的。某个环境中的代码全部执行完，该环境中的变量被销毁，保存在其中的所有的变量和函数定义也随之销毁。全局执行环境直到应用程序退出才销毁。</p><p>每个函数都有自己的执行环境。当代码在一个环境中执行时，会创建作用域链。作用域链式保证对执行环境有权访问的所有变量和函数的有序访问。作用域的前端始终都是当前执行的代码所在环境的变量对象。如果这个环境是函数，则将其活动对象作为变量对象。活动对象在最开始的时候只包含一个变量，即 arguments 对象。作用域中的下一个变量对象来说包含（外部的环境），而再下一个变量对象则来自下一个包含环境。这样，一直延续到全局执行环境，全局执行环境的变量对象始终都是作用域链中的最后一个对象。</p><p>一个变量的作用域是程序源代码中定义这个变量的区域。全局变量拥有全局作用域，在 JavaScript 代码中任何地方都是有定义的。而在函数内部声明的变量只有在函数体内有定义，它们是局部变量，作用域是局部的。</p><p>在函数体内部，局部变量的优先级高于同名的全局变量。</p><h4 id="函数作用域和声明提前"><a href="#函数作用域和声明提前" class="headerlink" title="函数作用域和声明提前"></a>函数作用域和声明提前</h4><p>块级作用域是指在一对花括号内的代码都具有各自的作用域，而且变量在声明它们的代码之外是不可见的。但是 JavaScript 没有块级作用域的概念。而是使用了函数作用域。JavaScript 的函数作用域是指函数内声明的所有变量在函数体内始终是可见的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>;                          <span class="comment">// i 在整个函数体内部有定义</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> o == <span class="string">'object'</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> j = <span class="number">0</span>;                        <span class="comment">// j 在函数体内有定义</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++)&#123;      <span class="comment">// k 在函数体内是有定义的，不仅仅是在循环内</span></span><br><span class="line">      <span class="built_in">console</span>.log(k);                 <span class="comment">// 输出 0~9</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(k);                   <span class="comment">// 输出 10</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(j);                     <span class="comment">// j 已经定义了，但是可能没有初始化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="作为属性的变量"><a href="#作为属性的变量" class="headerlink" title="作为属性的变量"></a>作为属性的变量</h4><p>当声明一个变量时，实际上是定义了一个全局对象的一个属性，当使用 var 声明变量时，创建的这个对象是不可配置的，也就是说这个变量不能通过 delete 操作符来删除。如果在非严格模式下，给一个未声明的全局变量赋值的话， JavaScript 会自动创建一个全局变量。以这种方式创建的变量是全局对象的正常的可配置属性，并且可以删除它们。</p><h4 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h4><p>嵌套的函数体内部，可以访问它上一级作用域中的变量。</p><p>延长作用域链：</p><ul><li>try-catch 语句</li><li>with 语句</li></ul><h2 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h2><ul><li>标记清除</li><li>引用计数</li><li>性能问题</li><li>管理内存</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>javaScript 数据类型有两类： 基本数据类型 和 复杂数据类型，其中基本数据类型（简单类型）有： Number/String/Boolean/Uundefined/Null一种复杂数据类型：object：Array/Date/Math/RegExp/</p><h3 id="typeof-操作符"><a href="#typeof-操作符" class="headerlink" title="typeof 操作符"></a>typeof 操作符</h3><ul><li>“undefined” –&gt; 这个值未定义</li><li>“boolean” –&gt; 这个值是布尔值</li><li>“string” –&gt; 这个只是字符串</li><li>“number” –&gt; 这个值是数值</li><li>“object” –&gt; 这个值是对象或null</li><li>“function” –&gt; 这个值是函数</li></ul><p>typeof 操作符号后面的操作数可以是变量，也可以是字面量；</p><p>typeof 误区：</p><ul><li>null 值返回 “object”;</li><li>Safari5 以及之前的版本、Chrome7 以及之前的版本对正则表达式调用返回”object”，</li><li>其他浏览器在这种情况下返回”object”</li><li>未初始化的变量和没有定义的变量操作符 typeof 都返回 “undefined”， 但它们有本质区别</li></ul><h3 id="Number-数据类型"><a href="#Number-数据类型" class="headerlink" title="Number 数据类型"></a>Number 数据类型</h3><p>字面量： var num = 数字;</p><p>包括正数，负数，小数</p><ul><li>取值范围：<ul><li>能表示的最大值是±1.7976931348623157乘以10的308次方</li><li>能表示的最小值是±5 乘以10的-324次方</li></ul></li><li>表示方式<ul><li>十进制</li><li>十六进制 以 0x 开头，从 0-9，a(A) 到 f（F）的范围。</li><li>八进制 以 0 开头，0-7 组成。</li></ul></li><li>NaN (not a number) 也是 number 类型，NaN 不等于自身</li><li><p>两个都为字符串的变量相减，得到的是NaN.</p></li><li><p>浮点数：</p><ul><li>计算浮点数时会丢失精度</li><li>通常用整数的计算来表示浮点数的计算</li><li>不要以两个浮点数是否相等作为条件判断的依据（判断范围还是可以的）</li></ul></li></ul><h2 id="String-字符串类型"><a href="#String-字符串类型" class="headerlink" title="String,字符串类型"></a>String,字符串类型</h2><p>字面量： var str = “字符串”;</p><p>字符串的长度： str.length;</p><ul><li>凡是用””或者’’引起来的全是字符串类型。</li></ul><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><ul><li>\” 转双引号</li><li>\’ 转单引</li><li>\r 回车</li><li>\n 换行</li><li>\t 制表符</li><li>\f 进纸</li><li>\xnn 以十六进制表示一个字符(n 是 0~F)</li><li>\unnnn 以十六进制代码nnnn表示一个 Unicode 字符 (n 是 0~F)</li></ul><h3 id="字符串的特点"><a href="#字符串的特点" class="headerlink" title="字符串的特点"></a>字符串的特点</h3><p>ECMAScript 中的字符串是不可变的，也就是说，字符串一旦创建，它们的直就不能改变。要改变某个变量保存的字符串，首先要销毁原来的字符串，然后再用另一个包含心智的字符串填充该变量。如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Java"</span>;</span><br><span class="line">str = str + <span class="string">"Script"</span>;</span><br></pre></td></tr></table></figure><h3 id="转换为字符串"><a href="#转换为字符串" class="headerlink" title="转换为字符串"></a>转换为字符串</h3><p>数值、布尔值、对象和字符串值都有 <code>toString()</code>方法, 但是 null 和 undefined 没用这个方法。</p><p>调用toString() 方法时，大多数情况下不传参数，但是如果传递了一个参数，输出数值的基数。默认情况下，toString() 方法以十进制格式返回数值字符串表示。而通过传递基数，可以输出对应的二进制、八进制、十六进制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(n.toString());   <span class="comment">// "10"</span></span><br><span class="line"><span class="built_in">console</span>.log(n.toString(<span class="number">2</span>));   <span class="comment">// "1010"</span></span><br><span class="line"><span class="built_in">console</span>.log(n.toString(<span class="number">8</span>));   <span class="comment">// "12"</span></span><br><span class="line"><span class="built_in">console</span>.log(n.toString(<span class="number">10</span>));   <span class="comment">// "10"</span></span><br><span class="line"><span class="built_in">console</span>.log(n.toString(<span class="number">16</span>));   <span class="comment">// "a"</span></span><br></pre></td></tr></table></figure><p>在不知道要转换的值是什么类型的时候，可以用 String() 函数，它可以将任意类型转成字符串。</p><h2 id="Boolean-布尔类型"><a href="#Boolean-布尔类型" class="headerlink" title="Boolean 布尔类型"></a>Boolean 布尔类型</h2><ul><li>布尔数据类型两个数据值: true/false</li><li>实际运算中，true 代表1, false代表0;</li></ul><h2 id="Undefined-表示声明但未赋值的变量"><a href="#Undefined-表示声明但未赋值的变量" class="headerlink" title="Undefined 表示声明但未赋值的变量"></a>Undefined 表示声明但未赋值的变量</h2><p>在 js 中，一下四种情况的返回值是 undefined</p><ul><li>变量声明了但没有赋值</li><li>函数没有返回值默认返回undefined</li><li>函数传递的实参个数少于形参个数时，未传递的参数值为undefined</li><li>对象没有定义的属性默认为undefined</li></ul><h2 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h2><p>用 <code>typeof</code>判断时值为 <code>object</code>(值为空)/引用为空，内存里找不到这个变量。</p><p>再如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> == <span class="literal">null</span>);  <span class="comment">// true 两等号判断，两边都转成false</span></span><br></pre></td></tr></table></figure><p>总的来说，只要意在保存对象的变量还没有真正保存对象，就应该让该变量保存 null 值，这样做体现了 null 作为空对象指针的惯例，也区分了 undefined 和 null。</p><h2 id="复杂类型（来自JavaScript高级程序设计）"><a href="#复杂类型（来自JavaScript高级程序设计）" class="headerlink" title="复杂类型（来自JavaScript高级程序设计）"></a>复杂类型（来自JavaScript高级程序设计）</h2><ul><li>object 对象</li></ul><p>ECMAScript 中的对象就是一组数据和功能的集合。可以通过 new 操作符后跟要创建的对象类型的名称来创建。而创建 Object 类型的实例并为其添加属性或方法，就可以创建自定义对象，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure><h3 id="Object的每个实例具有的属性和方法"><a href="#Object的每个实例具有的属性和方法" class="headerlink" title="Object的每个实例具有的属性和方法"></a>Object的每个实例具有的属性和方法</h3><ul><li>constructor： 保存着用于创建当前对象的函数，即构造函数。</li><li>hasOwnProperty(propertyName): 用于检查给定的属性在当前对象的实例中(而不是在原型中)存在；参数是字符串。</li><li>isPrototypeOf(object): 检查传入的对象是否是传入对象的原型。</li><li>propertyIsEnumerable(propertyName): 检查给定的属性是否能够使用 for-in 语言来枚举。参数是字符串。</li><li>toLocalString(): 返回对象的字符串表示，该字符串与执行环境的地区对应。</li><li>toString(): 返回对象的字符串表示。</li><li>valueOf(): 返回对象的字符串、数值、或布尔值表示。通常与 toString() 方法的返回值相同。</li></ul><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>隐式数据类型转换</p><p>变量参与到运算中，程序对变量进行的数据类型转换（不是程序员进行的数据类型）</p><p>强制数据类型转换</p><ul><li>将数字转换为字符串<ul><li>String</li><li>变量.toString ，注意：null 和 undefined 没有 toString() 方法</li></ul></li><li>将字符串转换为数字<ul><li>Number<ul><li>转换后保留原数据，不会对数据进行四舍五入。</li><li>非数字类型字符串转换后，比如 undefined，得到 NaN 。</li><li>如果字符串中包含有效的十六进制格式，则将其转换为相同大小的十进制整数值。</li></ul></li><li>parseInt<ul><li>对小数转换后保留的是整数部分，不会对数据进行四舍五入。</li><li>如果是数字后边有非数字字符串，转换后得到的是前边数字的整数部分。</li></ul></li><li>parseFloat<ul><li>转换为数字类型之后保留原数据，不进行四舍五入。</li><li>非数字类型字符串转换后，得到 NaN 。</li><li>如果是数字后边有非数字字符串，转换后得到的是前边数字的部分。</li></ul></li></ul></li><li>将其他类型转换为布尔类型：所有类型的值都可以转化成布尔值<ul><li>Boolean</li><li>会转化成false的值有：<ul><li>空字符串</li><li>数值零</li><li>NaN</li><li>undefined</li><li>null</li></ul></li></ul></li></ul><p>假值：空字符串””/数字0/null/undefined/false/NaN</p><h2 id="基本数据类型和复杂数据类型总结"><a href="#基本数据类型和复杂数据类型总结" class="headerlink" title="基本数据类型和复杂数据类型总结"></a>基本数据类型和复杂数据类型总结</h2><ul><li>基本类型—值类型— String Undefined Number Boolean Null</li><li><p>复杂类型—引用类型– Object 数组–Array,Date….</p></li><li><p>基本类型的值存储在—- 栈中</p></li><li><p>复杂类型的地址(引用)存储在栈中,—地址指向的空间中的对象(对象)—对象存储在堆中</p><ul><li>创建对象并返回对象—返回的是对象的地址(对象在堆空间中的地址)</li></ul></li><li><p>基本类型传值的时候，传递的是值</p></li><li><p>复杂类型(引用类型)传递的时候,传递的是:地址(引用)</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;p&gt;JavaScript是弱类型的语言，变量是松散的。所谓松散是可以保存任何类型的变量。即声明不同数据类型的变量使用同一个关键字 &lt;code&gt;var&lt;/code&gt;，变量就是变化的量，变量的作用就是用来装数据的容器。声明变量的时候不用考虑类型，但是处理和计算的时候要考虑类型.&lt;/p&gt;
    
    </summary>
    
      <category term="JS系列" scheme="http://yoursite.com/categories/JS%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js词法结构</title>
    <link href="http://yoursite.com/2015/06/01/js%E8%AF%8D%E6%B3%95%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2015/06/01/js词法结构/</id>
    <published>2015-05-31T16:00:00.000Z</published>
    <updated>2018-05-30T02:32:49.736Z</updated>
    
    <content type="html"><![CDATA[<p>js 的词法结构是一套基本规则，用来描述如何使用 js 编程。它规定了如何变量名长什么样，如何写注释以及程序语句之间如何分隔。</p><a id="more"></a><h2 id="字符集（JavaScript权威指南）"><a href="#字符集（JavaScript权威指南）" class="headerlink" title="字符集（JavaScript权威指南）"></a>字符集（JavaScript权威指南）</h2><h3 id="区分大小写"><a href="#区分大小写" class="headerlink" title="区分大小写"></a>区分大小写</h3><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>关键字、变量名、函数名、函数参数和所有标识符都是采用一致的大小写。</p><ul><li>第一个字符必须是一个字母、下划线(_)或一个美元符($)；</li><li>其它字符可以是字母、下划线、美元符号或者数字</li><li>驼峰命名法</li></ul><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>js 没有使用但保留的关键字</p><p><code>class const enum export extends import super</code></p><h3 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h3><ul><li>js已经使用的关键字</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>     <span class="keyword">delete</span>   <span class="function"><span class="keyword">function</span>    <span class="title">return</span>    <span class="title">typeof</span></span></span><br><span class="line"><span class="function"><span class="title">case</span>      <span class="title">do</span>       <span class="title">if</span>          <span class="title">switch</span>    <span class="title">var</span> </span></span><br><span class="line"><span class="function"><span class="title">catch</span>     <span class="title">else</span>     <span class="title">in</span>          <span class="title">this</span>      <span class="title">void</span> </span></span><br><span class="line"><span class="function"><span class="title">continue</span>  <span class="title">false</span>    <span class="title">instanceof</span>  <span class="title">throw</span>     <span class="title">while</span></span></span><br><span class="line"><span class="function"><span class="title">debugger</span>  <span class="title">finally</span>  <span class="title">new</span>         <span class="title">true</span>      <span class="title">with</span></span></span><br><span class="line"><span class="function"><span class="title">default</span>   <span class="title">for</span>      <span class="title">null</span>        <span class="title">try</span></span></span><br></pre></td></tr></table></figure><ul><li>严格模式下的保留字</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">implements <span class="keyword">let</span> private public <span class="keyword">yield</span></span><br><span class="line">interface  package protected <span class="keyword">static</span></span><br><span class="line"><span class="built_in">arguments</span> <span class="built_in">eval</span></span><br></pre></td></tr></table></figure><ul><li>js 尽量避免使用的标识符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">abstract  double   goto        native     atatic</span><br><span class="line">boolean   enum     implements  package    <span class="keyword">super</span></span><br><span class="line">byte      <span class="keyword">export</span>   <span class="keyword">import</span>      private    synchronized</span><br><span class="line">char      extends  int         protected  throws</span><br><span class="line"><span class="class"><span class="keyword">class</span>     <span class="title">final</span>    <span class="title">interface</span>   <span class="title">public</span>     <span class="title">transient</span></span></span><br><span class="line"><span class="class"><span class="title">const</span>     <span class="title">float</span>    <span class="title">long</span>        <span class="title">short</span>      <span class="title">volatiole</span></span></span><br></pre></td></tr></table></figure><ul><li>js 预定义的全局变量和函数名</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">arguments</span>           <span class="built_in">encodeURI</span>  <span class="literal">Infinity</span>  <span class="built_in">Number</span>          <span class="built_in">RegExp</span></span><br><span class="line">encodeURICompnent   <span class="built_in">Array</span>      <span class="built_in">isFinite</span>  <span class="built_in">Object</span>          <span class="built_in">String</span></span><br><span class="line"><span class="built_in">Boolean</span>             <span class="built_in">Error</span>      <span class="built_in">isNaN</span>     <span class="built_in">parseFloat</span>      <span class="built_in">SyntaxError</span> </span><br><span class="line"><span class="built_in">Date</span>                <span class="built_in">eval</span>       <span class="built_in">JSON</span>      <span class="built_in">parseInt</span>        <span class="built_in">TypeError</span></span><br><span class="line"><span class="built_in">decodeURI</span>           <span class="built_in">EvalError</span>  <span class="built_in">Math</span>      <span class="built_in">RangeError</span>      <span class="literal">undefined</span></span><br><span class="line"><span class="built_in">decodeURIComponent</span>  <span class="built_in">Function</span>   <span class="literal">NaN</span>       <span class="built_in">ReferenceError</span>  <span class="built_in">URIError</span></span><br></pre></td></tr></table></figure><h3 id="空格、换行符、格式控制"><a href="#空格、换行符、格式控制" class="headerlink" title="空格、换行符、格式控制"></a>空格、换行符、格式控制</h3><ul><li><code>\u0020</code> 空格符</li><li><code>\u0009</code> 水平制表符</li><li><code>\u000B</code> 垂直制表符</li><li><code>\u000C</code> 换页符</li><li><code>\u00A0</code> 不中断空白符</li><li><code>\uFEFF</code> 字节标记</li><li><code>\u000A</code> 换行符</li><li><code>\u000D</code> 回车符</li><li><code>\u2028</code> 行分隔符</li><li><code>\u2029</code> 段分隔符</li><li><code>\u200F</code> 格式控制符</li><li><code>\u200E</code> 格式控制符</li><li><code>\u200D</code> 零宽连接符</li><li><code>\uFEFF</code> 零宽非连接符<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2></li><li>单行注释</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单行注释</span></span><br></pre></td></tr></table></figure><ul><li>单行段落注释</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*这是一个段落注释*/</span></span><br></pre></td></tr></table></figure><ul><li>多行注释</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 多行注释</span></span><br><span class="line"><span class="comment">* 这里的注释可以连续写几行</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="直接量"><a href="#直接量" class="headerlink" title="直接量"></a>直接量</h2><p>直接量就是程序中直接使用的数据值，如：</p><ul><li>1.2 // 数字</li><li>“123” // 字符串</li><li>“string” // 字符串</li><li>true // 布尔值</li><li>/^/w+/g // 正则表达式直接量</li><li>null // 空</li><li><code>{name:&quot;Hiraku&quot;,age:12}</code> // 对象</li><li><code>[1,2,4]</code> // 数组</li></ul><h2 id="分号的问题"><a href="#分号的问题" class="headerlink" title="分号的问题"></a>分号的问题</h2><p>JavaScritp 使用分号(;)将语句和语句分开。JavaScript 并不是所有换行处都加分号，而是只有在缺少了分号就无法正确解析代码的时候，JavaScript才会填补分号。</p><p>如果当前语句和下一行语句无法合并解析，JavaScript 则在第一行后面填补分号，这是通用规则，但是有两个例外，一个是在涉及语句时，如果这三个关键字后紧跟着换行，JavaScript 则会在换行处填补分号。也就是说， return、break 和 continue 语句之后不能直接换行.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js 的词法结构是一套基本规则，用来描述如何使用 js 编程。它规定了如何变量名长什么样，如何写注释以及程序语句之间如何分隔。&lt;/p&gt;
    
    </summary>
    
      <category term="JS系列" scheme="http://yoursite.com/categories/JS%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js初识</title>
    <link href="http://yoursite.com/2015/05/30/js%E5%88%9D%E8%AF%86/"/>
    <id>http://yoursite.com/2015/05/30/js初识/</id>
    <published>2015-05-29T16:00:00.000Z</published>
    <updated>2018-05-30T02:33:14.061Z</updated>
    
    <content type="html"><![CDATA[<p>ECMAScript 是一种由 Ecma 国际前身为欧洲计算机制造商协会,英文名称是European Computer Manufacturers Association，制定的标准。 JavaScript 是由公司开发而成的，公司开发而成的一定是有一些问题，不便于其他的公司拓展和使用。所以欧洲的这个ECMA的组织，牵头制定 JavaScript 的标准，取名为 ECMAScript。简单来说 ECMAScript 不是一门语言，而是一个标准。符合这个标准的比较常见的有：JavaScript、Action Script（Flash中用的语言）。就是说，你JavaScript学完了，Flash中的程序也会写了。 ECMAScript 在 2015 年 6 月，发布了 ECMAScript 6 版本，语言的能力更强。</p><h2 id="javaScript概念、组成"><a href="#javaScript概念、组成" class="headerlink" title="javaScript概念、组成"></a>javaScript概念、组成</h2><p>概念：js是一门在客户端进行交互的网页编程语言.</p><p>一个完整的 JavaScript实现应该由下列三个部分组成：</p><ul><li>组成：<ul><li>ECMAScript js标准</li><li>Dom 可以利用JS操作网页元素</li><li>Bom 通过api来操作浏览器</li></ul></li></ul><a id="more"></a><h3 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h3><p>web 浏览器是 ECMAScript 实现可能的宿主环境之一，ECMAScript 规定了语言的的下列组成部分：</p><ul><li>语法</li><li>类型</li><li>语句</li><li>关键字</li><li>保留字</li><li>操作符</li><li>对象</li></ul><p>ECMAScript 就是对实现这个标准规定的各方面内容的语言描述。</p><h3 id="DOM-文档对象模型-简介"><a href="#DOM-文档对象模型-简介" class="headerlink" title="DOM 文档对象模型 简介"></a>DOM 文档对象模型 简介</h3><p>文档对象模型是针对 XML 但经过扩展用于 HTML 的应用程序编程接口。DOM 把整个页面映射为一个多层节点结构。HTML 或 XML 页面中的每个组成部分都是某种类型的节点，这些节点又包含不同的数据类型的数据。</p><h3 id="BOM-浏览器对象模型-简介"><a href="#BOM-浏览器对象模型-简介" class="headerlink" title="BOM 浏览器对象模型 简介"></a>BOM 浏览器对象模型 简介</h3><p>BOM 只处理浏览器窗口和框架，习惯上把所有针对浏览器的 JavaScrip 扩展算作 BOM 的一部分。如：</p><ul><li>弹出新浏览器窗口</li><li>移动、缩放和关闭浏览器窗口的功能</li><li>提供浏览器信息信息的 navigator 对象</li><li>提供浏览器所加载页面详细信息的 location 对象</li><li>提供用户显示器分辨率详细信息的 screen 对象</li><li>对 cookie 的支持</li><li>像 XMLHttpRequest 和 IE 的 ActiveXObject 这样的自定义对象</li></ul><p>由于没 BOM 统一标准，所以各个浏览器都有自己的实现功能，尽管各规定浏览器都实现 <code>window</code> 对象和 <code>navigator</code> 对象；</p><ul><li>JavaScript 的特点<ul><li>简单易用</li><li>基于对象</li><li>基于过程</li><li>解释执行：js引擎来执行源代码 ， node 平台</li></ul></li><li>编译执行类语言有：Java c# 源代码 ==&gt; 可执行文件.dll ==&gt; 电脑执行.dll课执行文件</li><li>使用范围：<ul><li>表单验证</li><li>轮播图特效</li><li>游戏开发</li></ul></li></ul><h2 id="lt-script-gt-lt-script-gt-元素"><a href="#lt-script-gt-lt-script-gt-元素" class="headerlink" title="&lt;script&gt;&lt;/script&gt;元素"></a><code>&lt;script&gt;&lt;/script&gt;</code>元素</h2><p><code>&lt;script&gt;&lt;/script&gt;</code> 定义了6个属性</p><ul><li>async: 可选。立即下载脚标，对页面中其他元素没有影响。只对外部脚标文件有效</li><li>charset: 可选。 表示通过 src 属性指定的代码的字符集。大多数浏览器会忽略其值，很少用</li><li>defer：可选。 表示脚本可以延迟到文档完全被解析和显示之后再执行。只对外部脚本有效</li><li>language: 已废弃。</li><li>src：可选。要执行的外部文件</li><li>type：可选。考虑到最大程度的兼容，使用 <code>&quot;text/javascript&quot;</code></li></ul><h3 id="js书写位置"><a href="#js书写位置" class="headerlink" title="js书写位置"></a>js书写位置</h3><ul><li>内嵌式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>js 书写位置<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  // js 代码段</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>外链式写法<ul><li>新建一个js文件</li><li>通过script标签里的src=”1.js”属性将JS文件调入到当前页面。</li></ul></li></ul><p>补充内嵌式写法：推荐Js代码最好放在body结束标签的后边。</p><h3 id="在XHTML中的用法"><a href="#在XHTML中的用法" class="headerlink" title="在XHTML中的用法"></a>在XHTML中的用法</h3><p>XHTML 即可扩展的超文本标记语言，是将 HTML 作为 XML 的应用重新定义的一个标准。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">// &lt;![CDATA[</span></span><br><span class="line"><span class="undefined">  funciton foo()&#123;</span></span><br><span class="line"><span class="undefined">    // 代码段</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">//]]&gt;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="文档模式"><a href="#文档模式" class="headerlink" title="文档模式"></a>文档模式</h2><p>doctype: 标准模式、混杂模式</p><p>严格模式开启：<code>use strict;</code></p><h2 id="页面中输出消息的几种方式"><a href="#页面中输出消息的几种方式" class="headerlink" title="页面中输出消息的几种方式"></a>页面中输出消息的几种方式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">"信息"</span>)   在页面出现一个弹出框，将信息弹出。</span><br><span class="line">confirm(<span class="string">"信息"</span>) 在页面出现一个弹出框，将信息显示，常与<span class="keyword">if</span>判断语句结合使用。</span><br><span class="line">prompt(<span class="string">"信息"</span>)  弹出一个文本框，可以在文本框接收内容。常用于接收信息。</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"信息"</span>)将信息输出到控制台，常用于代码调试。</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"信息"</span>) 直接在页面输出消息。</span><br></pre></td></tr></table></figure><p>注：document.write(“信息”)，不仅可以输出内容，还可以输出html标签。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ECMAScript 是一种由 Ecma 国际前身为欧洲计算机制造商协会,英文名称是European Computer Manufacturers Association，制定的标准。 JavaScript 是由公司开发而成的，公司开发而成的一定是有一些问题，不便于其他的公司拓展和使用。所以欧洲的这个ECMA的组织，牵头制定 JavaScript 的标准，取名为 ECMAScript。简单来说 ECMAScript 不是一门语言，而是一个标准。符合这个标准的比较常见的有：JavaScript、Action Script（Flash中用的语言）。就是说，你JavaScript学完了，Flash中的程序也会写了。 ECMAScript 在 2015 年 6 月，发布了 ECMAScript 6 版本，语言的能力更强。&lt;/p&gt;
&lt;h2 id=&quot;javaScript概念、组成&quot;&gt;&lt;a href=&quot;#javaScript概念、组成&quot; class=&quot;headerlink&quot; title=&quot;javaScript概念、组成&quot;&gt;&lt;/a&gt;javaScript概念、组成&lt;/h2&gt;&lt;p&gt;概念：js是一门在客户端进行交互的网页编程语言.&lt;/p&gt;
&lt;p&gt;一个完整的 JavaScript实现应该由下列三个部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;组成：&lt;ul&gt;
&lt;li&gt;ECMAScript js标准&lt;/li&gt;
&lt;li&gt;Dom 可以利用JS操作网页元素&lt;/li&gt;
&lt;li&gt;Bom 通过api来操作浏览器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JS系列" scheme="http://yoursite.com/categories/JS%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>HTML元素分类、伪类、背景图片</title>
    <link href="http://yoursite.com/2015/05/28/HTML%E5%85%83%E7%B4%A0%E5%88%86%E7%B1%BB%E3%80%81%E4%BC%AA%E7%B1%BB%E3%80%81%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/"/>
    <id>http://yoursite.com/2015/05/28/HTML元素分类、伪类、背景图片/</id>
    <published>2015-05-27T16:00:00.000Z</published>
    <updated>2018-05-30T01:59:36.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS-Cascading-style-sheets写法"><a href="#CSS-Cascading-style-sheets写法" class="headerlink" title="CSS Cascading style sheets写法"></a>CSS Cascading style sheets写法</h2><ul><li>内嵌式</li><li><p>外链式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"1.css"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>行内样式</p></li></ul><a id="more"></a><h3 id="三种样式写法的区别"><a href="#三种样式写法的区别" class="headerlink" title="三种样式写法的区别"></a>三种样式写法的区别</h3><ul><li>内嵌样式表：<ul><li>影响范围限于当前页面，其他页面无效，不能真正实现结构和表现解耦</li></ul></li><li>外链样式表<ul><li>影响范围大，是整个站点，实现真正的结构表现分离</li></ul></li><li>行内样式表：<ul><li>仅限于当前标签，作用范围小。结构和表现完全耦合</li></ul></li></ul><h3 id="link和-import区别"><a href="#link和-import区别" class="headerlink" title="link和@import区别"></a>link和@import区别</h3><ul><li>link属于HTML标签，而@import是CSS提供的</li><li>页面加载时，link会同时加载，而@import引入的CSS要等到页面中的所有元素加载完再加载</li><li>@import有兼容性，而link是HTML标签，无兼容性问题</li><li>link方式的样式的权重高于@import的权重</li><li>link引入的CSS支持js修改样式，而@import导入的CSS不能被js代码修改样式；</li></ul><h2 id="html分类（显示方式）"><a href="#html分类（显示方式）" class="headerlink" title="html分类（显示方式）"></a>html分类（显示方式）</h2><h3 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h3><p>最常用的有： <code>div</code>,<code>p</code>, <code>li</code>, <code>h1-h6</code></p><p>特点：</p><ul><li>独占一行</li><li>可以定义宽度和高度</li><li>包含关系的时候，父元素和子元素都为块元素的时候，子元素的宽度等于父元素的宽度</li></ul><h3 id="行内元素（内联元素）"><a href="#行内元素（内联元素）" class="headerlink" title="行内元素（内联元素）"></a>行内元素（内联元素）</h3><p>典型代表：strong span a em b del s ins i u</p><p>特点：</p><ul><li>不能设置宽高，</li><li>宽高度由内容撑开</li><li>在一行上显示</li></ul><h3 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h3><p>典型代表<code>img</code> <code>input</code></p><p>特点：</p><ul><li>在一行显示</li><li>可以定义宽高</li></ul><h3 id="元素之间的转换"><a href="#元素之间的转换" class="headerlink" title="元素之间的转换"></a>元素之间的转换</h3><ul><li>行内元素转成块级元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">display:block;</span><br></pre></td></tr></table></figure><ul><li>块级元素转成行内元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">display:inline-block;</span><br></pre></td></tr></table></figure><ul><li>块元素转成行内元素</li><li>块、行内元素转成行内块元素</li></ul><h2 id="css特性"><a href="#css特性" class="headerlink" title="css特性"></a>css特性</h2><h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><p>当样式属性冲突时，执行时是最后面样式。和标签调用顺序无关。</p><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><ul><li>条件：包含关系</li><li>普遍性：文本大小、字体、粗细、颜色、行高、风格样式被继承</li><li><p>特殊性：</p><ul><li>标题标签不会继承，但受父级元素的影响，文字大小。</li><li>a标签不会继承父元素的文字颜色。</li></ul></li><li><p>不可继承的：display、margin、border、padding、background、height、min-height、max-height、width、min-width、max-width、overflow、position、left、right、top、bottom、z-index、float、clear、table-layout、vertical-align、page-break-after、page-bread-before和unicode-bidi。</p></li><li><p>所有元素可继承：visibility和cursor。</p></li><li>内联元素可继承：letter-spacing、word-spacing、white-space、line-height、color、font、font-family、font-size、font-style、font-variant、font-weight、text-decoration、text-transform、direction。</li><li>终端块状元素可继承：text-indent和text-align。</li><li>列表元素可继承：list-style、list-style-type、list-style-position、list-style-image。</li><li>文字的所有属性可以继承，行高也可以继承, 但a标签不继承文字颜色</li></ul><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><ul><li>!important &gt; 行内样式 &gt; id选择器 &gt; 类选择器 &gt; 标签选择器 &gt; 默认</li><li>1000以上 1000 100 10 1 0</li></ul><p>继承的权重为0, 权重会叠加</p><h2 id="连接伪类"><a href="#连接伪类" class="headerlink" title="连接伪类"></a>连接伪类</h2><p><code>a:link{属性:值;}</code>, 没有点击时默认状态 a{属性:值;} 一般写这个</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">a:link&#123;</span><br><span class="line">  /*连接默认状态*/</span><br><span class="line">  属性:值;</span><br><span class="line">&#125;</span><br><span class="line">a:visited&#123;</span><br><span class="line">  /*连接访问之后的状态*/</span><br><span class="line">  属性:值;</span><br><span class="line">&#125;</span><br><span class="line">a:hover&#123;        </span><br><span class="line">  /*鼠标放上去显示的状态*/</span><br><span class="line">  属性:值;</span><br><span class="line">&#125;</span><br><span class="line">a:active&#123;</span><br><span class="line">  /*连接激活的状态*/</span><br><span class="line">  属性:值;</span><br><span class="line">&#125;</span><br><span class="line">a:focus&#123;</span><br><span class="line">  /*获取较大*/</span><br><span class="line">  属性:值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：连接伪类的顺序不能错；</p><ul><li>text-decoration 文本修饰</li><li>text-decoration: none; 去掉a标签的默认样式的下划线</li><li>text-decoration: underline; 加上下划线</li><li>text-decoration: line-through; 删除线</li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>background-color</li></ul><h3 id="background-image"><a href="#background-image" class="headerlink" title="background-image"></a>background-image</h3><ul><li>background-repeat 背景图片沿着x轴平铺</li><li>background-position left|right|top|bottom|center 背景定位写具体方位的时候，书写顺序没有限制</li><li>background-attchment scroll|fixed<ul><li>scroll 背景滚动 默认</li><li>fixed 背景固定</li></ul></li></ul><h3 id="背景属性连写"><a href="#背景属性连写" class="headerlink" title="背景属性连写"></a>背景属性连写</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background: color imge repeat position attachment</span><br></pre></td></tr></table></figure><p>特点：没有顺序要求</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CSS-Cascading-style-sheets写法&quot;&gt;&lt;a href=&quot;#CSS-Cascading-style-sheets写法&quot; class=&quot;headerlink&quot; title=&quot;CSS Cascading style sheets写法&quot;&gt;&lt;/a&gt;CSS Cascading style sheets写法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;内嵌式&lt;/li&gt;
&lt;li&gt;&lt;p&gt;外链式&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;1.css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;行内样式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="CSS系列" scheme="http://yoursite.com/categories/CSS%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS样式表、CSS选择器</title>
    <link href="http://yoursite.com/2015/05/26/CSS%E6%A0%B7%E5%BC%8F%E8%A1%A8%E3%80%81CSS%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>http://yoursite.com/2015/05/26/CSS样式表、CSS选择器/</id>
    <published>2015-05-25T16:00:00.000Z</published>
    <updated>2018-05-30T06:13:11.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="样式表的书写位置"><a href="#样式表的书写位置" class="headerlink" title="样式表的书写位置"></a>样式表的书写位置</h2><p>写在 <code>&lt;head&gt;&lt;/head&gt;</code> 中, 样式：选择器{属性:值;属性:值; }<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>样式表写法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"texr/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">     样式表内容</span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="样式表的常见属性"><a href="#样式表的常见属性" class="headerlink" title="样式表的常见属性"></a>样式表的常见属性</h3><ul><li>width 宽度 width:200px;</li><li>height 高度 height:200px;</li><li>background-color 背景色 background-color:red;</li><li>font-size 文字大小 font-size:20px;</li><li>color 文本颜色(前景色) color:yellow;</li><li>text-align 内容的水平对齐方式 text-align:left|center|right</li><li>text-indent 首行缩进 text-indent:2em;（2个汉字的大小）</li></ul><h4 id="常见属性表格"><a href="#常见属性表格" class="headerlink" title="常见属性表格"></a>常见属性表格</h4><table><thead><tr><th>属性</th><th style="text-align:right">值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td>width</td><td style="text-align:right">20px</td><td style="text-align:center">宽</td></tr><tr><td>height</td><td style="text-align:right">300px</td><td style="text-align:center">高</td></tr><tr><td>background-color</td><td style="text-align:right">red</td><td style="text-align:center">背景色</td></tr><tr><td>text-align</td><td style="text-align:right">left/center/right</td><td style="text-align:center">内容水平对齐方式</td></tr><tr><td>text-indent</td><td style="text-align:right">2em/px/%</td><td style="text-align:center">首行缩进</td></tr><tr><td>font-size</td><td style="text-align:right">normal/bold</td><td style="text-align:center">文本大小</td></tr><tr><td>font-weight</td><td style="text-align:right">100-900/bold</td><td style="text-align:center">文本粗细</td></tr><tr><td>font-style</td><td style="text-align:right">normal/italic</td><td style="text-align:center">文本风格</td></tr><tr><td>font-family</td><td style="text-align:right">宋体</td><td style="text-align:center">字体</td></tr><tr><td>line-height</td><td style="text-align:right">1.5/2em/px/%</td><td style="text-align:center">行高</td></tr></tbody></table><h4 id="行高"><a href="#行高" class="headerlink" title="行高"></a>行高</h4><p>行高 浏览器默认文字大小 div 1350px*18px</p><ul><li>行高=文本+上边距+下边距</li><li>默认文字大小是16px</li><li>默认行高大小是18px<br>一行文字，行高与父元素高度一致时，文本垂直居中对齐。</li></ul><p>行高的单位<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">行高值 文字大小  行高大小</span><br><span class="line">40px   20px      40px</span><br><span class="line">2em    20px      40px</span><br><span class="line">150%   20px      30px</span><br><span class="line">3      20px      60px</span><br></pre></td></tr></table></figure></p><p>总结：</p><p>当给父元素设置行高的时候，除了以px为单位以外，其他的值都与文字大小有关，是与文字大小的乘积, 行高是可以继承。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">父元素行高 父元素文字大小 子元素文字大小 子元素行高</span><br><span class="line">40px       20px           30px            40px</span><br><span class="line">2em        20px           30px            40px</span><br><span class="line">150%       20px           30px            30px</span><br><span class="line">3          20px           30px            90px</span><br></pre></td></tr></table></figure><h4 id="文本基线"><a href="#文本基线" class="headerlink" title="文本基线"></a>文本基线</h4><p><img src="/images/text-base.png" alt="文本基线"></p><h2 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h2><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><ul><li>写法：标签{属性值;}</li><li><p>特点：标签选择器定义之后，会将页面所有的元素都执行这个样式<br>颜色的显示方式：</p></li><li><p>直接写颜色名称： 如： “red”；</p></li><li>16进制显示 由0-9和a-ff一共16个值组成；#ff0000;<ul><li>#ff0000,前边2个数值对应的是红色,</li><li>#00ff00,中间2个对应的是绿色,</li><li>#0000ff,后边2个对应的是蓝色。</li></ul></li><li>RGB表示颜色<ul><li>如：span{color: rgb(23,23,23); }</li><li>r代表红色，g绿色 b蓝色</li></ul></li><li>rgba 表示不透明度<ul><li>如：h1{width: 500px; height: 400px; color: rgba(121,232,108,0.5); }</li><li>a代标alpha 0-1;</li></ul></li></ul><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><ul><li>写法：自定义类名{属性:值;}</li><li>特点：类选择器需要调用才能生效，谁调用谁生效<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;width: 200px; height: 40px; color: yellow; background-color: rgb(24,124,101); text-align: center; font-size: 24px; &#125;</span><br></pre></td></tr></table></figure></li></ul><p>多标签可以调用同一个类选择器<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box baby"</span>&gt;</span>加油努力奋斗<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>类选择器的命名规则</p><ul><li>不能使用纯数字和纯数字开头来定义类名</li><li>不建议使用中文</li><li>不能使用特殊符号来定义类名（“_”除外）</li><li>不建议使用标签名和属性名来定义类名</li></ul><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><ul><li><p>写法： #名称{属性:值}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#box&#123;width: 300px; height: 200px; background-color: pink; font-size: 20px; &#125;</span><br></pre></td></tr></table></figure></li><li><p>特点: id选择器需要调用才能生效，谁调用谁生效</p><ul><li>一个标签不能调用多个ID选择器</li><li>一个id选择器在一个页面内只能调用一次，多次调用不符合w3c规范，配合js使用，若出现多次js调用则会出错</li></ul></li></ul><h3 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h3><ul><li>写法：*{属性:值;}</li><li>特点：<ul><li>浏览器累死了，消耗服务器资源，不推荐使用；</li><li>会将所有的标签都执行这个通配符选择器</li></ul></li></ul><h2 id="文本介绍"><a href="#文本介绍" class="headerlink" title="文本介绍"></a>文本介绍</h2><h3 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h3><ul><li>文本属性<ul><li>font-size 文字大小</li><li>font-weight 文字的粗细 值从100-900; 700的值和bold大约一样(用700,不用bold)</li><li>font-style 文本风格： nomarl |italic</li><li>font-family 字体：宋体，微软雅黑，楷体</li><li>line-height 行高</li></ul></li></ul><h3 id="文本属性连写"><a href="#文本属性连写" class="headerlink" title="文本属性连写"></a>文本属性连写</h3><p>顺序：<code>font: font-style font-weight font-size/line-height font-family</code></p><p>注：按照顺序写，文字大小和字体在文字连写的时候为必须写的属性</p><h3 id="字体的表达方式"><a href="#字体的表达方式" class="headerlink" title="字体的表达方式"></a>字体的表达方式</h3><ul><li>直接写中文字体（宋体|微软雅黑）</li><li>直接写字体的英文名字（simsun|microsoft yahei|）</li><li>Unicode编码方式<ul><li>在浏览器中查找Unicode编码</li><li>chrome–&gt;f12–&gt;console–&gt;escape(“宋体”)–&gt;enter</li></ul></li></ul><h3 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h3><p>两个或两个以上的选择器通过不同的方式连接到一起</p><h4 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h4><ul><li>写法 <code>标签+类(id){属性:值}</code></li><li>特点：既…又的关系</li></ul><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><ul><li>写法： <code>选择器+空格+选择器+空格+选择器{属性:值;}</code></li><li>注意：后代选择器首先要满足包含（嵌套关系）。</li><li>特点：<ul><li>可以无限制隔代。</li><li>只要能代表父子关系，标签选择器、类选择器、id选择器可以任意组合</li><li>父级元素在前面，子级元素在后面</li></ul></li></ul><h4 id="子代选择器"><a href="#子代选择器" class="headerlink" title="子代选择器"></a>子代选择器</h4><ul><li>写法：选择器&gt;选择器{属性:值;}</li><li>特点：选中的是直接下一级</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">   div&gt;span&#123;</span></span><br><span class="line"><span class="undefined">     color: red;</span></span><br><span class="line"><span class="undefined">     font-size: 36px;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        愿使岁月静好，现世安稳。</span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>天才在左疯子在右<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h4><p>将不同选择器之间相同的样式写在一起，选择器之间通过逗号链接在一起。</p><ul><li>可能是包含关系，也可能是并列关系。</li><li>如果标签样式相同或者部分相同，可以用并集选择器，通过逗号连接在一起</li><li>选择器+,+选择器{属性:值;}</li><li>特点：并集选择器不一定是并列关系</li><li>标签选择器、类选择器、id选择器、复合选择器，可以通过逗号任意组合连接在一起</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.one,.one .two, .three, p&#123;font-size: 50px; font-weight: normal; &#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span>明媚的心<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>天才，和蠢材的差别是勤奋<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"three"</span>&gt;</span>美丽的人生要靠努力<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;样式表的书写位置&quot;&gt;&lt;a href=&quot;#样式表的书写位置&quot; class=&quot;headerlink&quot; title=&quot;样式表的书写位置&quot;&gt;&lt;/a&gt;样式表的书写位置&lt;/h2&gt;&lt;p&gt;写在 &lt;code&gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/code&gt; 中, 样式：选择器{属性:值;属性:值; }&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;样式表写法&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;texr/css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;     	样式表内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;  	 &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CSS系列" scheme="http://yoursite.com/categories/CSS%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
      <category term="CSS3" scheme="http://yoursite.com/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>HTML表格、表单、标签语义化</title>
    <link href="http://yoursite.com/2015/05/22/HTML%E8%A1%A8%E6%A0%BC%E3%80%81%E8%A1%A8%E5%8D%95%E3%80%81%E6%A0%87%E7%AD%BE%E8%AF%AD%E4%B9%89%E5%8C%96/"/>
    <id>http://yoursite.com/2015/05/22/HTML表格、表单、标签语义化/</id>
    <published>2015-05-21T16:00:00.000Z</published>
    <updated>2018-05-30T01:34:45.523Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML5标签结构"><a href="#HTML5标签结构" class="headerlink" title="HTML5标签结构"></a>HTML5标签结构</h2><p>sublime 快捷键 <code>!+Tab</code> 可以写成HTML5结构</p><h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><ul><li>ASCLL</li><li>ansi</li><li>unicode</li><li>GBK</li><li>GB2312(中文简体)</li><li>BIG5(只支持繁体字)</li><li>UTF-8(国际通用编码)</li></ul><a id="more"></a><h3 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">标签说明</span><br><span class="line">  <span class="comment">&lt;!--编码--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--关键字--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"java培训, ios"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--name 页面里面的关键词 content 里面是给SEO用的--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--网页描述--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"给搜索引擎看的，可以看得到的内容"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--网页重定向--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"5;http:www.itcast.com"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="link标签"><a href="#link标签" class="headerlink" title="link标签"></a>link标签</h3><p>调用外部样式表：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"1.css"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>ico小图标，在网页显示时的标题的前面：(必用)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"../favicom.ico"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="简单表格"><a href="#简单表格" class="headerlink" title="简单表格"></a>简单表格</h2><p>用来存放数据的，表格是对网页重构（css+div）一个有有益补充</p><ul><li>行 <code>tr</code></li><li>列 <code>td</code></li></ul><h3 id="简单结构（1行2列）"><a href="#简单结构（1行2列）" class="headerlink" title="简单结构（1行2列）"></a>简单结构（1行2列）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">cellpadding</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表格属性介绍"><a href="#表格属性介绍" class="headerlink" title="表格属性介绍"></a>表格属性介绍</h3><ul><li>边框 border=”1”</li><li>宽度 width=”300”</li><li>高度 height=”100”</li><li>单元格与单元格的距离 cellspacing=”2”，默认值2</li><li>内容到边框的距离cellpadding=”2” 默认值0</li><li>背景色 bgcolor=”yellow”</li><li>对齐方式 align left|center|right<ul><li>如果align放到tr或者td里面是内容的对齐方式</li><li>如果align放到table里面，是表格的对齐方式</li></ul></li><li>表格标题 用法和td一样</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">cellpadding</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">caption</span>&gt;</span>表头<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span> 表格的标题</span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表格的标准结构"><a href="#表格的标准结构" class="headerlink" title="表格的标准结构"></a>表格的标准结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">caption</span>&gt;</span><span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表格单元格的合并"><a href="#表格单元格的合并" class="headerlink" title="表格单元格的合并"></a>表格单元格的合并</h3><ul><li>在同一行上合并 colspan=”2”</li><li>在同一列上合并</li></ul><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><p>用来收集信息</p><ul><li>提示信息</li><li>表单控件<ul><li>action：用来处理信息（信息提交给谁，把文件提交给那个文件处理）</li><li>method：get|post 传递信息的方法</li></ul></li></ul><p>get 安全性很低，通过浏览器的地址栏传递信息，post 安全性高，通过action文件处理，它们的区别如下</p><p>1.GET没有请求主体，使用xhr.send(null)<br>2.GET可以通过在请求URL上添加请求参数<br>3.POST可以通过xhr.send(‘name=itcast&amp;age=10’)<br>4.POST需要设置<br>5.GET效率更好（应用多）<br>6.GET大小限制约4K，POST则没有限制</p><h3 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a>表单控件</h3><pre><code>1 &lt;form action=&quot;1.php&quot; method=&quot;post&quot;&gt;&lt;/form&gt;</code></pre><h4 id="单行文本输入框"><a href="#单行文本输入框" class="headerlink" title="单行文本输入框"></a>单行文本输入框</h4><pre><code>1 &lt;input type=&quot;text&quot; name=&quot;username&quot; value=&quot;Hiraku&quot; maxlength=&quot;16&quot; readonly=&quot;readonly&quot; &gt;</code></pre><ul><li>name 文本输入框的名字</li><li>value 接收的默认值 文本框的值</li><li>maxlength 输入的最大字符长度</li><li>readonly 输入框为只读状态</li><li>disabled 输入框为未激活状态</li></ul><h4 id="密码输入框"><a href="#密码输入框" class="headerlink" title="密码输入框"></a>密码输入框</h4><pre><code>1 &lt;input type=&quot;password&quot; name=&quot;密码输入框&quot;&gt; </code></pre><p>单行文本输入框的属性对密码输入框都适用</p><h4 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h4><pre><code>1 &lt;input type=&quot;radio&quot; name=&quot;gender&quot; checked=&quot;checked&quot;&gt;男2 &lt;input type=&quot;radio&quot; name=&quot;gender&quot;&gt;女</code></pre><p>当将单选框name值设置相同的时候才能实现单选效果, checked 设置默认选中项。</p><h4 id="下拉列表"><a href="#下拉列表" class="headerlink" title="下拉列表"></a>下拉列表</h4><p>下拉列表<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">”selected”</span>&gt;</span>下拉列表选项<span class="tag">&lt;/<span class="name">option</span>&gt;</span>   </span><br><span class="line">  <span class="comment">&lt;!--设置默认选项--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- multiple="mutiple" 下拉列表多选 设置下拉列表为多选项 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">"甘肃省"</span>&gt;</span>   对下拉列表进行分组</span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>定西市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>兰州市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>庆阳市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>天水市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>嘉峪关<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>酒泉市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="多选框"><a href="#多选框" class="headerlink" title="多选框"></a>多选框</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>&gt;</span>动漫</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span>电影</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span>电子竞技</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span>音乐</span><br></pre></td></tr></table></figure><p>checked 默认选项</p><h4 id="多文本输入框"><a href="#多文本输入框" class="headerlink" title="多文本输入框"></a>多文本输入框</h4><pre><code>1    &lt;textarea name=&quot;输入框&quot; id=&quot;&quot; cols=&quot;30&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt;</code></pre><ul><li>cols 输入字符的长度</li><li>rows 输入字符的行数</li></ul><h4 id="上传文件控件"><a href="#上传文件控件" class="headerlink" title="上传文件控件"></a>上传文件控件</h4><pre><code>1    &lt;input type=&quot;file&quot;&gt;</code></pre><h4 id="提交按钮"><a href="#提交按钮" class="headerlink" title="提交按钮"></a>提交按钮</h4><pre><code>1    &lt;input type=&quot;submit&quot;&gt;</code></pre><h4 id="普通按钮"><a href="#普通按钮" class="headerlink" title="普通按钮"></a>普通按钮</h4><pre><code>1    &lt;input type=&quot;button&quot; value=&quot;普通按钮&quot;&gt;</code></pre><p>普通按钮不能实现表单信息提交，常配合js使用</p><h4 id="图片按钮"><a href="#图片按钮" class="headerlink" title="图片按钮"></a>图片按钮</h4><pre><code>1    &lt;input type=&quot;image&quot; src=&quot;&quot;&gt;</code></pre><h4 id="表单信息分组"><a href="#表单信息分组" class="headerlink" title="表单信息分组"></a>表单信息分组</h4><pre><code>1    &lt;form&gt;2    &lt;fieldset&gt;3    &lt;legend&gt;注册信息&lt;/legend&gt;4    &lt;input&gt;5    &lt;/fieldset&gt;6    &lt;/form&gt;</code></pre><h4 id="重置按钮"><a href="#重置按钮" class="headerlink" title="重置按钮"></a>重置按钮</h4><pre><code>1    &lt;input type=”reset” value=”重置信息”&gt;</code></pre><h3 id="HTML5表单控件"><a href="#HTML5表单控件" class="headerlink" title="HTML5表单控件"></a>HTML5表单控件</h3><pre><code>1    &lt;form action=&quot;1.php&quot; method=&quot;post&quot;&gt;2        &lt;!-- 判断网址 --&gt;3        &lt;input type=&quot;url&quot;&gt;&lt;br/&gt;&lt;br/&gt;4        &lt;!-- 判断邮箱 --&gt;5        &lt;input type=&quot;email&quot;&gt;&lt;br/&gt;&lt;br/&gt;6        &lt;!-- 日期控件 --&gt;7        &lt;input type=&quot;date&quot;&gt;&lt;br/&gt;&lt;br/&gt;8        &lt;!-- 时间控件 --&gt;9        &lt;input type=&quot;time&quot;&gt;&lt;br/&gt;&lt;br/&gt;10        &lt;!-- 数字控件 --&gt;11        &lt;input type=&quot;number&quot;&gt;&lt;br/&gt;&lt;br/&gt;12        &lt;!-- 滑块控件 --&gt;13        &lt;input type=&quot;range&quot; max=&quot;150&quot; min=&quot;2&quot; step=&quot;5&quot;&gt;&lt;br/&gt;&lt;br/&gt;14        &lt;input type=&quot;submit&quot;&gt;15    &lt;/form&gt;</code></pre><h2 id="标签语义化"><a href="#标签语义化" class="headerlink" title="标签语义化"></a>标签语义化</h2><p>标签语义化即：根据内容的结构化（内容语义化），选择合适的标签</p><p>注意事项：</p><ul><li>尽可能少的使用无语义的标签div和span</li><li>在语义不明显是尽量用p,即可使用div也可使用p</li><li>不要使用纯样式标签:</li><li>需要强调的文本尽量用和</li></ul><p>好的标签语义化网站：去掉CSS，结构依然很清晰</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTML5标签结构&quot;&gt;&lt;a href=&quot;#HTML5标签结构&quot; class=&quot;headerlink&quot; title=&quot;HTML5标签结构&quot;&gt;&lt;/a&gt;HTML5标签结构&lt;/h2&gt;&lt;p&gt;sublime 快捷键 &lt;code&gt;!+Tab&lt;/code&gt; 可以写成HTML5结构&lt;/p&gt;
&lt;h3 id=&quot;字符编码&quot;&gt;&lt;a href=&quot;#字符编码&quot; class=&quot;headerlink&quot; title=&quot;字符编码&quot;&gt;&lt;/a&gt;字符编码&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ASCLL&lt;/li&gt;
&lt;li&gt;ansi&lt;/li&gt;
&lt;li&gt;unicode&lt;/li&gt;
&lt;li&gt;GBK&lt;/li&gt;
&lt;li&gt;GB2312(中文简体)&lt;/li&gt;
&lt;li&gt;BIG5(只支持繁体字)&lt;/li&gt;
&lt;li&gt;UTF-8(国际通用编码)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="HTML系列" scheme="http://yoursite.com/categories/HTML%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>初识HTML</title>
    <link href="http://yoursite.com/2015/05/20/%E5%88%9D%E8%AF%86HTML/"/>
    <id>http://yoursite.com/2015/05/20/初识HTML/</id>
    <published>2015-05-19T16:00:00.000Z</published>
    <updated>2018-05-30T01:34:19.190Z</updated>
    
    <content type="html"><![CDATA[<p>HTML基础</p><p>Hyper text markup language 超文本标记语言</p><ul><li>超文本：网页中可以包含图片、文字、视频、音频、文本框等元素;</li><li>标记（标签）：在网页中给网页元素做标记（右键，查看网页源代码）</li><li>超链接：实现页面之间的跳转</li></ul><h2 id="Sublime常用快捷键"><a href="#Sublime常用快捷键" class="headerlink" title="Sublime常用快捷键"></a>Sublime常用快捷键</h2><ul><li><code>windows+D</code> 返回桌面</li><li><code>windows+R</code> 运行dos</li><li><code>windows+E</code> 打开我的电脑</li><li><code>Alt+Tab</code> 切换软件</li><li><code>Ctrl+Tab</code> 软件内部文档间切换</li><li><code>F2</code> 重命名</li></ul><a id="more"></a><h2 id="Web标准"><a href="#Web标准" class="headerlink" title="Web标准"></a>Web标准</h2><ul><li>结构标准：<code>HTML</code> HyperText Mark Language 超文本标记语言</li><li>表现标准：<code>CSS</code> Casading Style Sheets 层次样式表</li><li>行为标准：<code>javaScript</code><ul><li>ECMAScript javaScript标准</li><li><code>DOM</code> Document Object Model 文档对象模型</li><li><code>BOM</code> Browser Object Model 浏览器对象模型</li></ul></li></ul><h2 id="浏览器简介"><a href="#浏览器简介" class="headerlink" title="浏览器简介"></a>浏览器简介</h2><p>浏览器涉及技术：浏览器内核，渲染引擎 <code>SEO</code>,Search Engine Optimization(搜索引擎优化)。</p><p>浏览器内核：分为两部分：渲染引擎和JS引擎，决定了浏览器如何显示网页的内容、页面格式等</p><ul><li>ie <code>trident</code></li><li>firefox <code>gecko</code></li><li>chrome/safari <code>webkit</code></li><li>chrome <code>blink</code></li><li>opera <code>persto</code></li></ul><h3 id="浏览器和服务器的那点事"><a href="#浏览器和服务器的那点事" class="headerlink" title="浏览器和服务器的那点事"></a>浏览器和服务器的那点事</h3><ul><li>http协议：超文本传输协议、浏览器和服务器之间的对话（通信的协议）。</li><li>https：加密的过程</li><li>url协议：规定url地址的格式</li><li>协议规定格式：scheme:定义因特网服务类型</li><li>host：定义域主机 端口：网页默认80端口</li><li>path：路径</li><li>filename： 文件名</li></ul><h2 id="HTML结构"><a href="#HTML结构" class="headerlink" title="HTML结构"></a>HTML结构</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!</span> <span class="attr">Doctype</span> <span class="attr">html</span>&gt;</span>   <span class="comment">&lt;!--声明文档类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span> <span class="comment">&lt;!--根标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> <span class="comment">&lt;!--头部标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span> <span class="comment">&lt;!--网页标题标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span>网页主体<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!--网页主体标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">解析：</span><br><span class="line">  <span class="tag">&lt;<span class="name">!</span> <span class="attr">Doctype</span> <span class="attr">html</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">html</span>&gt;</span>             </span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span>          </span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span>   </span><br><span class="line">  <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注：文档的后缀名只能决定打开方式，不能修改文档类型</p><h3 id="HTML标签的分类"><a href="#HTML标签的分类" class="headerlink" title="HTML标签的分类"></a>HTML标签的分类</h3><ul><li>单标签<ul><li><code>&lt;! Doctype html&gt;</code></li><li><code>&lt;img src=&quot;&quot; alt=&quot;&quot;/&gt;</code></li></ul></li><li>双标签<ul><li><code>&lt;html&gt;&lt;/html&gt;</code></li><li><code>&lt;head&gt;&lt;/head&gt;</code></li><li><code>&lt;title&gt;&lt;/title&gt;</code></li><li><code>&lt;body&gt;&lt;/body&gt;</code></li><li>…</li></ul></li></ul><h3 id="HTML关系"><a href="#HTML关系" class="headerlink" title="HTML关系"></a>HTML关系</h3><ul><li>并列关系（同级）<ul><li><code>&lt;head&gt;&lt;/head&gt;</code> 和 <code>&lt;body&gt;&lt;/body&gt;</code></li></ul></li><li>包含关系（嵌套）<ul><li><code>&lt;head&gt;&lt;title&gt;标题&lt;/title&gt;&lt;/head&gt;</code></li></ul></li></ul><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><ul><li><code>DreamWeaver</code>：很老的一个软件 偏设计师使用</li><li><code>Sublime</code>:轻量级的软件，有很多好用的插件</li><li><code>WebStorm</code>:重量级软件，功能强大</li></ul><h4 id="Sublime-常用的快捷键"><a href="#Sublime-常用的快捷键" class="headerlink" title="Sublime 常用的快捷键"></a>Sublime 常用的快捷键</h4><ul><li><code>html:xt + tab</code> html结构</li><li><code>html:5 + tab</code> html结构</li><li><code>Ctrl+shift+D</code> 快速复制</li><li><code>Ctrl+shift+K</code> 快速删除一行</li><li><code>Ctrl+shift+↑/↓</code> 快速上下移动一行</li><li><code>Tab</code> 补全标签</li><li><code>Ctrl+鼠标左键</code> 选中多行</li><li><code>Ctrl+L</code> 选中一行</li><li><code>Ctrl+H</code> 替换别的标签</li><li><code>Alt+shift+2</code> 查看布局</li><li><code>Alt+V</code> 显示/隐藏菜单栏</li><li><code>ctrl+shift+p</code> + <code>move</code>指令 移动文件</li></ul><h2 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h2><h3 id="单标签"><a href="#单标签" class="headerlink" title="单标签"></a>单标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1<span class="comment">&lt;!--注释: 快捷键Ctrl+/--&gt;</span> </span><br><span class="line">2<span class="tag">&lt;<span class="name">br</span>/&gt;</span>  换行</span><br><span class="line">3<span class="tag">&lt;<span class="name">hr</span>/&gt;</span>  水平线</span><br></pre></td></tr></table></figure><h3 id="双标签"><a href="#双标签" class="headerlink" title="双标签"></a>双标签</h3><ul><li>段落标签：<code>&lt;p&gt;&lt;/p&gt;</code></li><li>文本标签：<code>&lt;font&gt;&lt;/font&gt;</code></li><li>标题标签：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1<span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">2<span class="comment">&lt;!--h1只能出现一次，出现多了不利于搜索引擎--&gt;</span></span><br><span class="line">3<span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">4<span class="tag">&lt;<span class="name">h6</span>&gt;</span><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>标题系列取值只能取到h6</p><ul><li>文本格式化标签<ul><li>加粗 <strong></strong>, <b></b> 常用strong</li><li>倾斜 <em></em>, <i></i> 常用em</li><li>删除线标签 <del></del>, <s></s> 常用del</li><li>插入文本： <ins></ins>, <u></u> 常用ins</li><li>上下标标签：<sup></sup>, <sub></sub><br>注意：使用strong em del ins 更有意义</li></ul></li></ul><h3 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h3><p><code>&lt;img src=&quot;Legolas.jpg&quot; alt=&quot;我的男神&quot; title=&quot;legolas&quot; width=&quot;500&quot; /&gt;</code></p><p>仅指定宽或高时，等比例缩放。</p><ul><li><code>src</code> 图片来源（路径）, <code>alt</code> 替换文本.</li><li><code>title</code> 提示文本（鼠标放到图片上显示的文字;</li><li><code>width</code> 图片显示的宽度</li><li><code>height</code> 图片显示的高度</li></ul><p>相对路径和绝对路径（相对路径的可移植性好）</p><ul><li>相对路径：<ul><li>文档（html/图片）在同一个文件夹，直接写图片（文档）名字 <code>&lt;img src=&quot;Legolas.jpg&quot; alt=&quot;legolas&quot; height=&quot;300&quot; /&gt;</code></li><li>文档不在同一个文件夹，在上级文件中 <code>&lt;img src=&quot;../1.jpg&quot; alt=&quot;legolas&quot; height=&quot;300&quot; /&gt;</code></li><li>文档不在同一个文件夹，在上两级文件中 <code>&lt;img src=&quot;../../Hydrangeas.jpg&quot; alt=&quot;菊花&quot; height=&quot;300&quot; /&gt;</code></li><li>文档不在同一个文件夹，在下级文件中 <code>&lt;img src=&quot;pic/Koala.jpg&quot; alt=&quot;考拉&quot; height=&quot;300&quot; /&gt;</code></li><li>文档不在同一个文件夹，在下两级文件中 <code>&lt;img src=&quot;pic/photo/Penguins.jpg&quot; alt=&quot;企鹅&quot; height=&quot;300&quot; /&gt;</code></li></ul></li><li>绝对路径：<ul><li>本地电脑绝对路径 <code>&lt;img src=&quot;F:\pic\photo&quot; alt=&quot;企鹅&quot; /&gt;</code></li><li>互联网上的绝对路径： 网页中的图片来自服务器端传输过来的。</li></ul></li></ul><h3 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h3><p>超链接：<code>&lt;a href=&quot;06_test&quot; target=&quot;_blank&quot; title=&quot;气温高&quot;&gt;气温案例&lt;/a&gt;</code></p><ul><li><code>href</code> 去往的路径（连接的文档），必写属性。</li><li><code>target=” _self”</code> 关闭自身串口，打开新窗口</li><li><code>target=”_blank”</code> 自身窗口不关闭，打开新窗口</li><li><code>title</code> 提示文本，是非必须的</li><li><code>ctrl+shift+s:</code> 另存为 把文件复制并另存为</li></ul><p>超链接优化： <code>&lt;base target=”_blank”&gt;</code></p><ul><li>锚点：<ul><li>第一步：给标签加id</li><li>第二部：herf写上#+id名 <code>&lt;a href=&quot;#xd&quot;&gt;回到顶部&lt;/a&gt;</code></li></ul></li><li>压缩包：<code>&lt;a href=&quot;压缩包.rar&quot;&gt;压缩文件下载&lt;/a&gt;</code><ul><li>空连接：<code>&lt;a href=&quot;#&quot;&gt;此处有连接&lt;/a&gt;</code></li></ul></li></ul><h3 id="特殊字符：段落标签的写法"><a href="#特殊字符：段落标签的写法" class="headerlink" title="特殊字符：段落标签的写法"></a>特殊字符：段落标签的写法</h3><h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><ul><li>无序列表 <ul type="square"></ul><ul><li>square 实心方块</li><li>dick 默认实心小圆圈</li><li>circle 空心小圆圈</li></ul></li></ul><p>注意：ul标签里面只能放li标签，li里面可以放任何标签</p><ul><li>有序列表</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1<span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">2  <span class="tag">&lt;<span class="name">li</span>&gt;</span>打开冰箱门<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">3  <span class="tag">&lt;<span class="name">li</span>&gt;</span>把大象装在冰箱里<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">4  <span class="tag">&lt;<span class="name">li</span>&gt;</span>关上冰箱门<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">5<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">6<span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">"A"</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">7<span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">"1"</span> <span class="attr">start</span>=<span class="string">"4"</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>type 的取值可以是1，a，A，i，I</p><p><code>start 是开始的序号</code></p><ul><li>自定义列表</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1<span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">2  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">dt</span>&gt;</span>  <span class="comment">&lt;!--小标题--&gt;</span></span><br><span class="line">3  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>昌平区<span class="tag">&lt;/<span class="name">dd</span>&gt;</span>  <span class="tag">&lt;<span class="name">!—标题的解释--</span>&gt;</span></span><br><span class="line">4<span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="其他标签"><a href="#其他标签" class="headerlink" title="其他标签"></a>其他标签</h3><ul><li>音乐标签 embed 背景音乐 <code>&lt;embed src=&quot;BIGBANG - BAD BOY (Live).mp3&quot; hidden=&quot;false&quot; /&gt;</code><ul><li>hidden = “ture” 影藏，默认是false，播放器</li></ul></li><li>滚动标签 <code>&lt;marquee behavior=&quot;scroll&quot; direction=&quot;right&quot; width=&quot;500px&quot; height=&quot;100px&quot; bgcolor=&quot;blue&quot;&gt;我来也&lt;/marquee&gt;</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTML基础&lt;/p&gt;
&lt;p&gt;Hyper text markup language 超文本标记语言&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;超文本：网页中可以包含图片、文字、视频、音频、文本框等元素;&lt;/li&gt;
&lt;li&gt;标记（标签）：在网页中给网页元素做标记（右键，查看网页源代码）&lt;/li&gt;
&lt;li&gt;超链接：实现页面之间的跳转&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Sublime常用快捷键&quot;&gt;&lt;a href=&quot;#Sublime常用快捷键&quot; class=&quot;headerlink&quot; title=&quot;Sublime常用快捷键&quot;&gt;&lt;/a&gt;Sublime常用快捷键&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;windows+D&lt;/code&gt; 返回桌面&lt;/li&gt;
&lt;li&gt;&lt;code&gt;windows+R&lt;/code&gt; 运行dos&lt;/li&gt;
&lt;li&gt;&lt;code&gt;windows+E&lt;/code&gt; 打开我的电脑&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Alt+Tab&lt;/code&gt; 切换软件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl+Tab&lt;/code&gt; 软件内部文档间切换&lt;/li&gt;
&lt;li&gt;&lt;code&gt;F2&lt;/code&gt; 重命名&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="HTML系列" scheme="http://yoursite.com/categories/HTML%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
</feed>
