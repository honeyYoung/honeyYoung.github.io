<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Honey Young</title>
  
  <subtitle>小杨鹤</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-24T08:17:18.524Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>honey young</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>个人技能</title>
    <link href="http://yoursite.com/2018/05/23/%E4%B8%AA%E4%BA%BA%E6%A0%87%E7%AD%BE/"/>
    <id>http://yoursite.com/2018/05/23/个人标签/</id>
    <published>2018-05-23T07:23:29.000Z</published>
    <updated>2018-05-24T08:17:18.524Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="个人技能" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
      <category term="CSS3" scheme="http://yoursite.com/tags/CSS3/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="Ajax" scheme="http://yoursite.com/tags/Ajax/"/>
    
      <category term="AngularJS" scheme="http://yoursite.com/tags/AngularJS/"/>
    
      <category term="BOM" scheme="http://yoursite.com/tags/BOM/"/>
    
      <category term="Bower" scheme="http://yoursite.com/tags/Bower/"/>
    
      <category term="Cookie" scheme="http://yoursite.com/tags/Cookie/"/>
    
      <category term="DOM" scheme="http://yoursite.com/tags/DOM/"/>
    
      <category term="EJS" scheme="http://yoursite.com/tags/EJS/"/>
    
      <category term="Express" scheme="http://yoursite.com/tags/Express/"/>
    
      <category term="Gulp" scheme="http://yoursite.com/tags/Gulp/"/>
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
      <category term="JSON" scheme="http://yoursite.com/tags/JSON/"/>
    
      <category term="MongoDB" scheme="http://yoursite.com/tags/MongoDB/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="RequireJS" scheme="http://yoursite.com/tags/RequireJS/"/>
    
      <category term="SeaJs" scheme="http://yoursite.com/tags/SeaJs/"/>
    
      <category term="Session" scheme="http://yoursite.com/tags/Session/"/>
    
      <category term="Underscore" scheme="http://yoursite.com/tags/Underscore/"/>
    
      <category term="bolg" scheme="http://yoursite.com/tags/bolg/"/>
    
      <category term="browser" scheme="http://yoursite.com/tags/browser/"/>
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
      <category term="cordova" scheme="http://yoursite.com/tags/cordova/"/>
    
      <category term="eCharts" scheme="http://yoursite.com/tags/eCharts/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="ionic" scheme="http://yoursite.com/tags/ionic/"/>
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
      <category term="Grunt" scheme="http://yoursite.com/tags/Grunt/"/>
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
      <category term="mine" scheme="http://yoursite.com/tags/mine/"/>
    
      <category term="net" scheme="http://yoursite.com/tags/net/"/>
    
      <category term="network" scheme="http://yoursite.com/tags/network/"/>
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
      <category term="nrm" scheme="http://yoursite.com/tags/nrm/"/>
    
      <category term="nvm" scheme="http://yoursite.com/tags/nvm/"/>
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
      <category term="artTemplate" scheme="http://yoursite.com/tags/artTemplate/"/>
    
      <category term="ps" scheme="http://yoursite.com/tags/ps/"/>
    
      <category term="sublime" scheme="http://yoursite.com/tags/sublime/"/>
    
      <category term="webstorm" scheme="http://yoursite.com/tags/webstorm/"/>
    
      <category term="vs code" scheme="http://yoursite.com/tags/vs-code/"/>
    
      <category term="svn" scheme="http://yoursite.com/tags/svn/"/>
    
      <category term="eclipse" scheme="http://yoursite.com/tags/eclipse/"/>
    
      <category term="命令行" scheme="http://yoursite.com/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
      <category term="小项目" scheme="http://yoursite.com/tags/%E5%B0%8F%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="库" scheme="http://yoursite.com/tags/%E5%BA%93/"/>
    
      <category term="性能优化" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="框架" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="模块化" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
      <category term="正则" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99/"/>
    
      <category term="表单" scheme="http://yoursite.com/tags/%E8%A1%A8%E5%8D%95/"/>
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="交互" scheme="http://yoursite.com/tags/%E4%BA%A4%E4%BA%92/"/>
    
  </entry>
  
  <entry>
    <title>DOM-文档对象模型</title>
    <link href="http://yoursite.com/2015/10/08/DOM-%E6%96%87%E6%A1%A3%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2015/10/08/DOM-文档对象模型/</id>
    <published>2015-10-07T16:00:00.000Z</published>
    <updated>2018-05-31T03:54:08.450Z</updated>
    
    <content type="html"><![CDATA[<p>DOM 是针对 HTML 和 XML 文档的一个 API。 DOM 描绘了一个层次化的节点树。 HTML 文档的树形结构包含表示 HTML 标签或元素和表示文本字符串的节点，它也可能包括表示 HTML 注释节点。</p><h2 id="DOM基本概念"><a href="#DOM基本概念" class="headerlink" title="DOM基本概念"></a>DOM基本概念</h2><h3 id="DOM-描述"><a href="#DOM-描述" class="headerlink" title="DOM 描述"></a>DOM 描述</h3><ul><li>DOM Document Object Model 文档对象模型</li><li>就是把HTML文档模型化，当作对象来处理</li><li>DOM提供的一系列属性和方法可以视作一个工具箱，极大地方便了我们对文档的处理。</li></ul><h3 id="内容概念"><a href="#内容概念" class="headerlink" title="内容概念"></a>内容概念</h3><ul><li>文档(Document)：就是指HTML或者XML文件</li><li>节点(Node)：HTML文档中的所有内容都可以称之为节点，常见的节点有<ul><li>元素节点</li><li>属性节点</li><li>文本节点</li><li>注释节点</li></ul></li><li>元素(Element)<ul><li>HTML文档中的标签可以称为元素</li></ul></li></ul><h3 id="结构概念"><a href="#结构概念" class="headerlink" title="结构概念"></a>结构概念</h3><ul><li>父节点 当前节点的父级</li><li>子节点 当前节点的子级</li><li>兄弟节点 和当前节点同属一个父级的节点</li></ul><a id="more"></a><h2 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h2><p>DOM1 级定义了一个 Node 接口，该接口由 DOM 中的所有节点类型实现。这个 Node 接口在 JavaScript 中是作为 Node 类型事项的。JavaScript 中的所有节点类型都继承自 Node 类型。每个节点有一个 NodeType 属性，用于表明节点的类型。节点类型由在 Node 类型中定义的 12 个常量来表示：</p><ul><li>Node.ELEMENT_NODE(1); 表示元素节点</li><li>Node.ATTRIBUTE_NODE(2); 表示属性节点</li><li>Node.TEXT_NODE(3); 表示文本节点</li><li>Node.CDATA_SECTION_NODE(4);</li><li>Node.ENTITY_REFERENCE_NODE(5);</li><li>Node.ENTITY_NODE(6);</li><li>Node.PROCESSING_INSTRUCTION_NODE(7);</li><li>Node.COMMENT_NODE(8); 表示文本节点</li><li>Node.DOCUMENT_NODE(9); Document 节点</li><li>Node.DOCUMENT_TYPE_NODE(10);</li><li>Node.DOCUMENT_FRAGEMENT_NODE(11); DocumentFragment 是特殊的节点，作为其它节点的一个容器。</li><li>Node.NOTATION_NODE(12);</li></ul><p><code>someNode.nodeType</code> 兼容所有浏览器，IE 没有公开 Node 类型的构造函数。</p><h3 id="nodeName-和-nodeValue"><a href="#nodeName-和-nodeValue" class="headerlink" title="nodeName 和 nodeValue"></a>nodeName 和 nodeValue</h3><p>这两个属性了解节点的具体信息，对于节点类型为 1 的元素节点，nodeName 中保存的是元素标签名，nodeType 的值始终是 null。</p><h3 id="节点关系"><a href="#节点关系" class="headerlink" title="节点关系"></a>节点关系</h3><h4 id="作为元素树的文档节点"><a href="#作为元素树的文档节点" class="headerlink" title="作为元素树的文档节点"></a>作为元素树的文档节点</h4><ul><li>firstChild 指向 childNodes 列表中的第一个元素</li><li>lastChild 指向 childNodes 列表中的最后一个元素</li><li>childNodes 每个节点都有 childNodes 属性，保存了 NodeList 类数组对象。<ul><li>NodeList 是有生命、有呼吸的对象，DOM 结构的变化能够自动反映在 NodeList 对象中。</li><li>下面代码将 NodeList 对象转成真正的数组。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertToArray</span>(<span class="params">nodes</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> array = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    array = <span class="built_in">Array</span>.prototype.slice.call(nodes, <span class="number">0</span>);  <span class="comment">// 针对非 IE 浏览器</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    array = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = nodes.length; i &lt; len; i++) &#123;</span><br><span class="line">      array.push(nodes[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>parentNode 每个节点都有 parentNode 属性，指向文档树的根节点。</li><li>previousSibling 上一个同胞节点</li><li>nextSibling 下一个同胞节点</li></ul><h4 id="作为元素树的文档"><a href="#作为元素树的文档" class="headerlink" title="作为元素树的文档"></a>作为元素树的文档</h4><ul><li>firstElementChild 第一个子元素 有兼容性问题</li><li>lastElementChild 最后一个子元素 有兼容性问题</li><li>children 子元素 虽然不是早期DOM标准中的方法，但是所有浏览器都支持。</li><li>childElemntCount 子元素的数量。返回值和 childre.length 相等。</li><li>previousElementSibling 上一个兄弟元素 有兼容性问题</li><li>nextElementSibling 下一个兄弟元素 有兼容性问题</li></ul><p><code>haschildNodes()</code> 方法在节点包含一个或多个子节点的情况下返回 true。</p><h3 id="操作节点"><a href="#操作节点" class="headerlink" title="操作节点"></a>操作节点</h3><ul><li>appendChild() 向 childNodes 列表的末尾添加一个节点。<ul><li>添加节点后，childNodes 的新增节点、父节点以及以前的最后一个子节点的关系指针都会相应地得到更新。返回新增的节点。</li><li>如果传入的节点已经是文档的一部分了，那么就将该节点从原来的位置移动到新位置。</li></ul></li><li>insertBefore()<ul><li>接收两个参数：要插入的节点和作为参照的节点。</li><li>插入节点后，被插入的节点会变成参照节点的前一个同胞节点，同时被方法返回。</li><li>如果参照节点是空，则该方法和 appendChild() 执行相同的操作。</li></ul></li><li>replaceChild()<ul><li>接收两个参数：要插入的节点，要替换的节点。</li><li>要替换的节点被该方法返回，从文档树种移除，该节点所占位置被新的节点代替</li></ul></li><li>removeChild()<ul><li>接收一个参数，即要被移除的节点，返回这个节点。</li></ul></li></ul><p>以上几个方法是有父节点的子节点才具有的。下面两个方法所有类型的节点都有的。</p><ul><li>cloneNode()<ul><li>用于创建调用该方法的节点完全相同的节点。</li><li>该方法接收一个布尔值，表示是否深度克隆</li><li>参数为 true 时，克隆调用该方法的节点及其整个子节点树</li><li>参数为 false 时，只复制节点本身。</li><li>复制后返回的节点副本属于文档所有，但并没有为它指定父节点。</li><li>使用上面的 appendChild()、insertBefore()、replaceChild()方法添加的文档中。</li></ul></li><li>normalize()<ul><li>唯一作用是处理文档树中的文本节点。</li><li>调用该方法的节点，在其后代节点中查找空文本节点并删除。如果找到相邻文本节点，则合并</li></ul></li></ul><h2 id="Document-类型"><a href="#Document-类型" class="headerlink" title="Document 类型"></a>Document 类型</h2><p>在浏览器中，document 对象是 HTMLDocument (继承自 Document) 的一个实例，表示整个 HTML 页面。</p><p>特点：</p><ul><li>nodeType 为 9</li><li>nodeName 为 “#document”</li><li>nodeValue 为 “null”</li><li>parentNode 为 “null”</li><li>ownerDocument 为 “null”</li><li>子节点可能是 DocumentType(最多一个)、Element(最多一个)、Comment、ProcessingInstruction。</li></ul><h3 id="文档子节点"><a href="#文档子节点" class="headerlink" title="文档子节点"></a>文档子节点</h3><ul><li>documentElement 属性<ul><li>内置的访问子节点的方式 <code>document.documentElement</code> ， 返回值和 childNodes[0]、firstChlid 的值相同。</li></ul></li><li>body 属性<ul><li>直接指向 body 元素。</li></ul></li></ul><p>documentElement 和 body 属性所有浏览器都支持。</p><ul><li>doctype 属性<ul><li>IE8 以及之前的版本，如果存在文档声明，会错误的解释为 一个助手并当做 Comment 节点。返回 null。</li><li>IE9+ 以及 FF，如果存在文档声明，会将其作为文档的第一个子节点；document.doctype 是一个 DocmentType 节点。会出现在 document.childNodes 中。</li><li>Safari、Chrome 和 Opera，如果存在文档声明，将其解析，不作为文档的子节点。document.doctype 是一个 DocmentType 节点。不会出现在 document.childNodes 中。</li></ul></li></ul><p>浏览器对处理位于 <code>&lt;html&gt;</code> 外部的注释节点，也有差异</p><h3 id="文档信息"><a href="#文档信息" class="headerlink" title="文档信息"></a>文档信息</h3><ul><li>document.title<ul><li>获取 <title></title> 标签中的内容</li></ul></li></ul><h3 id="网页请求相关的属性"><a href="#网页请求相关的属性" class="headerlink" title="网页请求相关的属性"></a>网页请求相关的属性</h3><ul><li>document.URL<ul><li>包含网页完整的 URL</li></ul></li><li>document.domain<ul><li>包含页面的域名</li></ul></li><li>document.referrer<ul><li>保存着链接到当前页面的那个页面的 URL。</li></ul></li></ul><p>所有的这些信息保存在请求的 HTTP 头部。以上三个属性中只有 domain 属性是可以设置的。</p><p>当页面中包含来自其它子域的框架或者内嵌框架时候，能够设置 document.domain 就非常方便。由于跨域安全限制，来自不通子域的页面无法通过 JavaScript 通信。而通过将每个页面的 document.domain 设置为相同的值，这些页面就可以听歌互相访问对方包含的 JavaScript 对象了。</p><h3 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><ul><li><code>getElementById();</code><ul><li>该方法只能被document对象调用；</li><li>该方法接收一个参数，要获取元素的 ID ；</li><li>如果找到返回该 DOM 元素，否则返回 null。</li><li>IE7 以及较低版本会将表单元素 name 值为该方法中的 id 相同的元素返回。</li></ul></li><li><code>getElementsByTagName();</code><ul><li>该方法接收一个参数，标签名。还可以传入 “*”，表示获取文档中的所有元素。</li><li>通过标签名寻找一类元素（找到的是由元素对象组成的伪数组）。返回的是一个 HTMLCollection。</li><li>即可以被 document 调用，又可以被元素对象调用。</li><li>被元素对象调用时表示在该元素对象内部执行查找。</li></ul></li><li><code>getElementByName();</code><ul><li>只有 HTMLDocument 才有的方法。</li><li>返回带有给定 name 特性的所有元素。最常用于取得单选按钮。</li></ul></li></ul><p>可以使用方括号或者 item() 来访问 HTMLCollection 集合中的项。该对象还有一个 nameItem() 方法，可以通过元素的 name 特性取得集合中的项。</p><h3 id="特殊集合"><a href="#特殊集合" class="headerlink" title="特殊集合"></a>特殊集合</h3><ul><li>document.anchors 返回包含页面中所有带 name 特性的 <code>&lt;a&gt;</code>元素</li><li>document.applets 包含文档中所有的 <code>&lt;applet&gt;</code> 元素，这个已经不用了。</li><li>document.froms 包含文档中的所有的 <code>&lt;form&gt;</code> 元素。</li><li>document.images 包含文档中的所有的 <code>&lt;img&gt;</code> 元素。</li><li>document.links 包含文档中的所有带 herf 的 <code>&lt;a&gt;</code> 元素。</li></ul><h3 id="DOM-的一致性检测"><a href="#DOM-的一致性检测" class="headerlink" title="DOM 的一致性检测"></a>DOM 的一致性检测</h3><ul><li>document.implementation 属性<ul><li>该属性有个 hasFeature() 方法，接收两个参数：<ul><li>要检测的 DOM 功能的名称</li><li>要检测的 DOM 功能的版本号</li></ul></li></ul></li></ul><h3 id="文档写入"><a href="#文档写入" class="headerlink" title="文档写入"></a>文档写入</h3><p>将输出流写入到网页中。可以使用这些方法动态的给网页中添加内容。</p><ul><li>document.write()<ul><li>接收要写到输出流的文本</li></ul></li><li>document.writeln()<ul><li>接收要写到输出流的文本</li></ul></li><li>document.open()<ul><li>打开输出流</li></ul></li><li>document.close()<ul><li>关闭输出流</li></ul></li></ul><p>write() 和 writeln() 方法动态地包含外部资源。使用时不能直接包含字符串<code>&lt;/sript&gt;</code>，而是使用 <code>&lt;\/script&gt;</code> 进行转义。</p><h2 id="Element-类型"><a href="#Element-类型" class="headerlink" title="Element 类型"></a>Element 类型</h2><p>Element 提供了对元素标签名、子节点及其特性的访问。</p><p>特点：</p><ul><li>nodeType 为 1</li><li>nodeName 为 元素的标签名</li><li>nodeValue 为 “null”</li><li>parentNode 可能是 Document 或 element</li><li>子节点可能是 Element、Text、Comment、ProcessingInstruction、CDATASection 或 EntityReference</li></ul><p>要访问元素的标签名可以使用 nodeName 或 tagName 属性。DOM元素.tagName 输出的是大写。 在 HTML 中，标签名始终都是全部以大写标书；而在 XML 或 XHML 中标签名会与源码代码中保持一致。</p><h3 id="HTML-元素"><a href="#HTML-元素" class="headerlink" title="HTML 元素"></a>HTML 元素</h3><p>由 HTMLElement 类型表示。每个 HTML 元素的特性：</p><ul><li>id 元素在文档中的唯一标识符</li><li>title 有关元素的附加说明</li><li>lang 元素内容的语言代码，很少用</li><li>dir 语言的方向，值为 “ltr” (从左至右) 或 “rtr” (从右至左)，很少用</li><li>className，与元素的 class 相对应。</li></ul><h3 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h3><ul><li>getAttribute()<ul><li>传递的参数与实际的属性名相同。</li><li>可以获取自定义属性。</li></ul></li></ul><p>任何元素的所有特性，都可以通过 DOM 元素本身的属性来访问。只有非自定义的属性才会以属性的形式添加到 DOM 对象中。</p><p>有两类特殊的属性，虽然有对应的属性名，但是属性的值与通过 getAttribute() 返回的值并不相同。</p><ul><li>style, 用于通过 CSS 为元素指定样式；</li><li>事件处理程序。通过 getAttribute() 访问会返回相对应的代码字符串。</li></ul><h3 id="设置属性"><a href="#设置属性" class="headerlink" title="设置属性"></a>设置属性</h3><ul><li>setAttribute()<ul><li>接收两个参数：要设置的属性名，要设置的值</li><li>存在替换，不存在创建</li></ul></li><li><code>元素对象.属性名 = &quot;属性值&quot;;</code></li><li><code>&lt;标签 属性名=&quot;属性值&quot;&gt;</code></li></ul><h3 id="删除属性"><a href="#删除属性" class="headerlink" title="删除属性"></a>删除属性</h3><ul><li>removeAttribute()<ul><li>IE6 之前版本不支持。</li></ul></li></ul><h3 id="attribute-属性"><a href="#attribute-属性" class="headerlink" title="attribute 属性"></a>attribute 属性</h3><p>该属性有一下几种方法：</p><ul><li>getNamedItem(name)<ul><li>返回 nodeName 等于 name 的节点</li></ul></li><li>removeNamedItem(name)<ul><li>移除 nodeName 等于 name 的节点</li></ul></li><li>setNamedItem(node)<ul><li>向列表中添加节点</li></ul></li><li>item(pos)<ul><li>返回位于 pos 处的节点</li></ul></li></ul><h3 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h3><ul><li>document.createElement()<ul><li>接收的参数是要创建元素的标签名</li><li>HTML 中不区分大小写，XML 或 XHTML 中区分大小写</li><li>在 IE 中可以使用为该方法传入完整的元素标签的方式创建。</li></ul></li></ul><h3 id="元素的子节点"><a href="#元素的子节点" class="headerlink" title="元素的子节点"></a>元素的子节点</h3><p>元素可以任意多的子节点和后代节点。 childNodes 属性包含了所有的子节点。</p><h2 id="Text-类型"><a href="#Text-类型" class="headerlink" title="Text 类型"></a>Text 类型</h2><p>不包含 HTML 结构的纯文本</p><p>特点：</p><ul><li>nodeType 为 3</li><li>nodeName 为 “#text”</li><li>nodeValue 为 节点所包含的文本</li><li>parentNode 是 Element</li></ul><p>可以通过 nodeValue 属性或 data 属性访问 Text 节点中包含的文本。</p><ul><li>appendData(text): 将 text 添加到节点的末尾</li><li>deleteData(offset, count): 从 offset 指定的位置开始删除 count 个字符</li><li>insertData(offset, text): 从 offset 指定的位置开始插入 text</li><li>replaceData(offset, count, text): 用 text 替换 offset 指定的位置开始到 + offset+count 为止处的文本。</li><li>splitText(offset): 从 offset 指定的位置将当前文本分成两个文本节点</li><li>substringData(offset, count): 提取从 offset 指定的位置开始到 offset + count 为止处的字符串</li></ul><p>还有个 length 属性，保存着节点中字符的数目。</p><h3 id="创建文本节点"><a href="#创建文本节点" class="headerlink" title="创建文本节点"></a>创建文本节点</h3><ul><li>document.createTextNode()<ul><li>创建新文本节点</li><li>接受一个参数-要创建的文本</li></ul></li></ul><h3 id="规范化文本节点"><a href="#规范化文本节点" class="headerlink" title="规范化文本节点"></a>规范化文本节点</h3><ul><li>normalize()<ul><li>在包含两个或多个文本节点的父元素上调用此方法，则会将所有文本节点合并成一个节点。</li></ul></li></ul><h3 id="切割文本节点"><a href="#切割文本节点" class="headerlink" title="切割文本节点"></a>切割文本节点</h3><ul><li>splitText()<ul><li>将一个文本分隔成两个文本节点。</li></ul></li></ul><h2 id="Comment-类型"><a href="#Comment-类型" class="headerlink" title="Comment 类型"></a>Comment 类型</h2><p>特点：</p><ul><li>nodeType 为 8</li><li>nodeName 为 “#document”</li><li>nodeValue 为 注释内容</li><li>parentNode 是 Document 或 Element</li><li>无子节点</li></ul><h2 id="CDATASection-类型"><a href="#CDATASection-类型" class="headerlink" title="CDATASection 类型"></a>CDATASection 类型</h2><p>特点：</p><ul><li>nodeType 为 4</li><li>nodeName 为 “#cdata-section”</li><li>nodeValue 为 CDATA 区域中的内容</li><li>parentNode 是 Document 或 Element</li><li>无子节点</li></ul><h2 id="DocumentType-类型"><a href="#DocumentType-类型" class="headerlink" title="DocumentType 类型"></a>DocumentType 类型</h2><p>特点：</p><ul><li>nodeType 为 10</li><li>nodeName 为 doctype 的名称</li><li>nodeValue 为 null</li><li>parentNode 是 Document</li><li>无子节点</li></ul><h2 id="DocumentFragment-类型"><a href="#DocumentFragment-类型" class="headerlink" title="DocumentFragment 类型"></a>DocumentFragment 类型</h2><p>特点：</p><ul><li>nodeType 为 11</li><li>nodeName 为 “#document-fragment”</li><li>nodeValue 为 null</li><li>parentNode 是 null</li><li>子节点可以是 Element、ProcessingInstruction、Comment、Text、CDATASection 或 EntityReference</li></ul><p>使用 document.createDocumentFragment() 方法。可以通过 appendChild() 或 insertBefore() 将文档片段中内容添加到文档中。</p><h2 id="Attr-类型"><a href="#Attr-类型" class="headerlink" title="Attr 类型"></a>Attr 类型</h2><p>特点：</p><ul><li>nodeType 为 2</li><li>nodeName 为 属性名</li><li>nodeValue 为 特性的值</li><li>parentNode 是 null</li><li>HTML 中无子节点</li><li>XML 或 HTML 中子节点可以是 Text 或 EntityReference</li></ul><p>Attr 有 3 个属性：name、value 和 specified。</p><h2 id="操作表格"><a href="#操作表格" class="headerlink" title="操作表格"></a>操作表格</h2><ul><li>caption</li><li>tBodies</li><li>tFoot</li><li>tHead</li><li>rows</li><li>createHead()</li><li>createTFoot()</li><li>createCaption()</li><li>deleteRow(pos)</li><li>insertRow(pos)</li><li>cells</li><li>deleteCell(pos)</li><li>insertCell(pos)</li></ul><h2 id="DOM-扩展"><a href="#DOM-扩展" class="headerlink" title="DOM 扩展"></a>DOM 扩展</h2><p>对 DOM 的两个主要扩展是 Selectors API 和 HTML5。支持的浏览器： IE8+、FireFox 3.5+、Safari 3.1+、Chrome 和 Opera 10+。</p><h3 id="选择符-API"><a href="#选择符-API" class="headerlink" title="选择符 API"></a>选择符 API</h3><p>Selectors APILevel 1 的核心是两个方法：</p><ul><li>querySelector()<ul><li>接收一个 CSS 选择符，返回与该模式匹配的第一个元素，如果没有匹配到，返回 null。</li></ul></li><li>querySelectorAll()<ul><li>接收一个 CSS 选择符，返回一个 NodeList 对象。如果没有找到，NodeList 对象是空的。</li></ul></li></ul><p>Selectors APILevel 2 新增了一个 matchesSelector() 方法，接收一个参数，CSS 选择符，如果调用元素与该选择符匹配，返回 true，否则返回 false。</p><h3 id="元素遍历"><a href="#元素遍历" class="headerlink" title="元素遍历"></a>元素遍历</h3><ul><li>childElementCount: 返回不包括文本节点和注释的子元素个数；</li><li>firstElementChild: 指向一个子元素，firstChild 元素版</li><li>lastElementChild: 指向最后一个子元素，lastChild 元素版</li><li>previousElementChild: 指向前一个兄弟元素。 previousSibling 的元素版</li><li>nextElementChild: 指向下一个兄弟元素。 nextSibling 的元素版</li></ul><h3 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h3><h4 id="与类相关的扩充"><a href="#与类相关的扩充" class="headerlink" title="与类相关的扩充"></a>与类相关的扩充</h4><ul><li><code>getElementsByClassName();</code><ul><li>通过类名获取元素。</li><li>可以通过 document以及所有 HTML 元素调用该方法。</li><li>接收一个参数，即包含一或多个类名的字符串。</li><li>返回指定类型的所有 NodeList。</li></ul></li></ul><p>getElementsByClassName() 支持的浏览器有 IE9+、FireFox 3+、Safari 3.1+、Chrome 和 Opera 9.5+。</p><h4 id="classList-属性"><a href="#classList-属性" class="headerlink" title="classList 属性"></a>classList 属性</h4><p>HTML5 新增了一种操作类名的方式，就是为所有的元素添加 classList 属性。</p><ul><li>add(value): 给定的字符串值添加到列表中。如果值已经存在，就不添加了。</li><li>contains(value): 表示列表中是否存在给定的值，如果存在则返回 true，否则返回 false。</li><li>remove(value): 从列表中删除给定的字符串。</li><li>toggle(value): 如果列表中已存在给定的值，删除它；如果列表值没有给定的值，添加它。</li></ul><h4 id="焦点管理"><a href="#焦点管理" class="headerlink" title="焦点管理"></a>焦点管理</h4><ul><li>document.activeElement 属性<ul><li>始终会引用 DOM 中当前获得了焦点的元素。</li></ul></li><li>document.hasFocus() 方法<ul><li>用于确定文档是否获得了焦点</li></ul></li></ul><p>支持的浏览器有 IE4+、FireFox 3+、Safari 4+、Chrome 和 Opera 8+。</p><h4 id="HTMLDocument-的变化"><a href="#HTMLDocument-的变化" class="headerlink" title="HTMLDocument 的变化"></a>HTMLDocument 的变化</h4><h5 id="readyState-属性"><a href="#readyState-属性" class="headerlink" title="readyState 属性"></a>readyState 属性</h5><ul><li>loading， 正则加载文档</li><li>complete，已经加载完文档</li></ul><p>支持的浏览器有 IE4+、FireFox 3.6+、Safari、Chrome 和 Opera 9+。</p><h5 id="兼容模式"><a href="#兼容模式" class="headerlink" title="兼容模式"></a>兼容模式</h5><p>在标准模式下，document.compatMode 的值等于 “CSS1Compat”; 在混杂模式下，document.compatMode 的值等于 “BackCompat”。</p><p>支持的浏览器有 FireFox、Safari 3.1+、Chrome 和 Opera。</p><h5 id="head-属性"><a href="#head-属性" class="headerlink" title="head 属性"></a>head 属性</h5><p>document.head，引用文档的 <code>&lt;head&gt;</code> 元素。</p><p>支持的浏览器有 Safari 5、Chrome。</p><h4 id="字符集属性"><a href="#字符集属性" class="headerlink" title="字符集属性"></a>字符集属性</h4><ul><li>charset 属性表示文档中实际使用的字符集。默认是这个属性值是 “UTF-16”，可以通过 <code>&lt;meta&gt;</code> 元素、响应头部或者直接设置 charset 属性修改这个值。</li><li>defaultCharset，表示根据默认浏览器以及操作系统的设置。</li></ul><p>document.charset 支持的浏览器有 IE、Safari、Chrome 和 Opera。document.defaultCharset 支持的浏览器有 IE、Safari 和 Chrome。</p><h4 id="自定义数据属性"><a href="#自定义数据属性" class="headerlink" title="自定义数据属性"></a>自定义数据属性</h4><p>自定义数据属性是以 <code>data-</code> 开头的。这些属性可以任意添加、随便命名。</p><p>添加了自定义属性之后，可以通过元素的 dataset 属性来访问自定义属性的值。dataset 属性的值是 DOMStringMap 的一个实例，也就是键值对的映射。在这个映射中，每一个 data-name 形式的属性都会有一个对应的属性，只不过属性名没有 data- 前缀。</p><p>支持的浏览器有 FireFox 6+ 和 Chrome。</p><h4 id="插入标记"><a href="#插入标记" class="headerlink" title="插入标记"></a>插入标记</h4><ul><li>innerHTML 属性<ul><li>读模式下，innerHTML 属性返回与调用元素的所有子节点（包括元素、注释和文本节点）对应的 HTML 标记；</li><li>写模式下，innerHTML 会根据指定的值创建新的 DOM 树，然后用这个 DOM 树完全替换调用元素原先的所有子节点。</li><li>读模式返回的字符串内容各浏览器之间有差异</li><li>写模式 innerHTML 的值被认为是 HTML，如果是纯文本，则设置纯文本</li><li>innerHTML 中的 <code>&lt;script&gt;</code> 标签不会执行其中的脚本</li><li>并不是所有的元素都支持 innerHTML 属性。<ul><li><code>&lt;col&gt;、&lt;colgrounp&gt;、&lt;frameset&gt;、&lt;head&gt;、&lt;html&gt;、&lt;style&gt;、&lt;table&gt;、&lt;tbody&gt;、&lt;thead&gt;、&lt;tfoot&gt;、&lt;tr&gt;</code></li><li>IE8 以及之前的版本 <code>&lt;title&gt;</code> 没有 innerHTML 属性</li></ul></li></ul></li><li>outerHTML 属性<ul><li>读模式下，outerHTML 属性返回与调用元素的所有子节点的 HTML 标签；</li><li>写模式下，outerHTML 会根据指定的值创建新的 DOM 树，然后用这个 DOM 树完全替换调用元素。</li><li>支持的浏览器有 IE4+、Safari 4+、Chrome 和 Opera 8+。</li></ul></li><li>innerAdjacentHTML() 方法<ul><li>接收两个参数：插入位置和要插入的 HTML 文本，第一个参数必须是：<ul><li>“beforebegin” 在当前元素之前插入一个紧邻的兄弟元素</li><li>“afterbegin” 在当前元素之下插入一个新的子元素或在第一个子元素之前再插入新的子元素</li><li>“beforeend” 在当前元素之下插入一个新的子元素或在最后一个子元素之后再插入新的子元素</li><li>“afterend” 在当前元素之后插入一个紧邻的兄弟元素</li></ul></li></ul></li></ul><h4 id="内存与性能"><a href="#内存与性能" class="headerlink" title="内存与性能"></a>内存与性能</h4><p>在使用innerHTML、outerHTML、innerAdjacentHTML() 等时最好先把被替换元素上绑定的事件处理程序删除。</p><p>使用 innerHTML 方法时，首先拼串，然后在往 DOM 树中添加，提高性能。</p><h4 id="scrollIntoView-方法"><a href="#scrollIntoView-方法" class="headerlink" title="scrollIntoView() 方法"></a>scrollIntoView() 方法</h4><p>任何 HTML 元素都可以调用，通过滚动浏览器窗口或某个容器元素，调用元素就可以出现在时口中。</p><p>支持的浏览器有 IE、Safari、FireFox 和 Opera。</p><h3 id="专有扩展"><a href="#专有扩展" class="headerlink" title="专有扩展"></a>专有扩展</h3><h4 id="文档模式"><a href="#文档模式" class="headerlink" title="文档模式"></a>文档模式</h4><p>文档模式决定了页面可以使用什么功能。有混杂模式和标准模式。</p><p>通过 <code>document.documentMode</code> 属性可以指定给定页面使用的是什么样的文档模式。</p><h4 id="children-属性"><a href="#children-属性" class="headerlink" title="children 属性"></a>children 属性</h4><p>返回只包含元素中同样还是元素的子节点，与 childNodes 没区别。</p><h5 id="contains-方法"><a href="#contains-方法" class="headerlink" title="contains() 方法"></a>contains() 方法</h5><p>返回 true 或 false，如果传入的参数元素是调用元素的后代，则返回 true，否则返回 false。</p><h4 id="插入文本"><a href="#插入文本" class="headerlink" title="插入文本"></a>插入文本</h4><ul><li>innerText 属性<ul><li>可以操作元素中包含的所有文本内容</li><li>会按照由浅到深的顺序，将子文档树中的所有文本都拼接起来</li><li>会对文本中存在的 HTML 语法字符进行编码</li></ul></li></ul><p>支持 innerText 属性有 IE9+、Safari 3+、Chrome 和 Opera 8+。</p><ul><li>textContext 属性<ul><li>是 DOMLevel 3 规定的一个属性。</li></ul></li></ul><p>支持 textContext 属性有 IE9+、Safari 3+、Chrome、FireFox 和 Opera 10+。</p><ul><li>outerText<ul><li>它的读模式和 innerText 没区别</li><li>写模式：outerText 不只是替换调用它的子节点，而是会替换包括替换整个元素。</li></ul></li></ul><p>支持的浏览器有 IE4+、Safari3+、Chrome 和 Opera8+。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInnerText</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> element.innerText === <span class="string">"string"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> element.innerText;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> element.textContent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setInnerText</span>(<span class="params">element, content</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> element.innerText === <span class="string">"string"</span>) &#123;</span><br><span class="line">        element.innerText = content;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        element.textContent = content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="滚动"><a href="#滚动" class="headerlink" title="滚动"></a>滚动</h4><ul><li>scrollIntoViewIfNeeded(alignCenter): 只有当前元素在视口中不可见的情况下，才能滚动浏览器窗口或容器让其可见。</li><li>scrollByLines(lineCount): 将元素的内容滚动指定的行高；</li><li>scrollByPages(pageCount): 将元素的内容滚动指定页面的高度；</li></ul><p>支持的浏览器 Chrome 和 Safari。scrollIntoView() 是唯一个所有浏览器都支持的方法，所以比较常用。</p><h2 id="DOM2-和-DOM3"><a href="#DOM2-和-DOM3" class="headerlink" title="DOM2 和 DOM3"></a>DOM2 和 DOM3</h2><p>DOM1 级主要定义的是 HTML 和 XML 文档的底层结构。DOM2 和 DOM3 则在这个基础上引进了更多的交互能力。DOM2 和 DOM3 分为很多模块。如下：</p><ul><li>DOM2 级核心(DOM Level 2 Core)：为节点添加了更多的方法和属性</li><li>DOM2 级视图(DOM Level 2 Views)：为文档定义了基于样式基本信息的不同视图。</li><li>DOM2 级事件(DOM Level 2 Events): 说明了如何使用事件与 DOM 文档操作</li><li>DOM2 级样式(DOM Level 2 Style)：定义了如何通过编程方式操作 CSS 样式</li><li>DOM2 级遍历和范围(DOM Level 2 Trversal and Range): 引入了遍历 DOM 文档和选择其他特定部分的新接口。</li><li>DOM2 级 HTML(DOM Level 2 HTML)：在 1 级 HTML 基础上添加了更多的属性、方法和新接口</li></ul><h3 id="DOM-变化"><a href="#DOM-变化" class="headerlink" title="DOM 变化"></a>DOM 变化</h3><h4 id="针对-XML-命名空间的变化"><a href="#针对-XML-命名空间的变化" class="headerlink" title="针对 XML 命名空间的变化"></a>针对 XML 命名空间的变化</h4><p>HTML 不支持 XML 命名空间，XHTML 支持 XML 的命名空间。</p><p>命名空间使用 xmlns 特性来定义。</p><ul><li>Node 类型变化</li><li>Document 类型变化</li><li>Element 类型变化</li><li>NamedNodeMap 类型的变化</li><li>NamedNodeMap 类型的变化</li><li>Document 类型的变化</li><li>框架的变化</li></ul><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><h4 id="访问元素的样式"><a href="#访问元素的样式" class="headerlink" title="访问元素的样式"></a>访问元素的样式</h4><p>任何支持 style 特性的 HTML 元素在 JavaScript 中都有一个对应的 style 属性。在 style 特性指定的任何 CSS 属性都将表现为 style 对象的相应属性。对于使用短线分隔的 CSS 属性，将其转换成驼峰大小写的形式。</p><p>float 是 javascript 的保留字，不能用作属性名，其相应的属性名是 cssFloat，FireFox、Safari、Opera、Chrome 都支持；但是 IE 支持的是 styleFloat.</p><p>直接可以访问的样式：<code>widh; height; padding; margin; display;</code></p><h4 id="设置和获取样式"><a href="#设置和获取样式" class="headerlink" title="设置和获取样式"></a>设置和获取样式</h4><ul><li>通过对象的style属性只能设置和获取行内样式</li><li>获取样式的时候 如果行内没有该样式 输出空字符串</li><li>设置样式的时候 赋的值是一个字符串 如果这个属性有单位 一定要节点加单位</li></ul><h4 id="什么情况通过class控制样式-什么情况通过style控制样式"><a href="#什么情况通过class控制样式-什么情况通过style控制样式" class="headerlink" title="什么情况通过class控制样式 什么情况通过style控制样式"></a>什么情况通过class控制样式 什么情况通过style控制样式</h4><p>不严格的说：</p><ul><li>如果样式很多 通过 直接控制类名 的方式加样式</li><li>如果样式比较少 通过直接设置比较方便</li></ul><p>严格来说：</p><ul><li>从标准的角度讲 即使是样式比较少的时候 设置样式也要用类名</li><li>但是有一类情况 是无论如何也必须直接通过JS加的 那就是涉及到计算的时候</li></ul><h5 id="DOM-样式属性和方法"><a href="#DOM-样式属性和方法" class="headerlink" title="DOM 样式属性和方法"></a>DOM 样式属性和方法</h5><ul><li>cssText</li><li>length 应用给元素的 CSS 属性</li><li>parentRule</li><li>getPropertyCSSValue(propertyName)</li><li>getPropertyPriority(propertyName)</li><li>getPropertyValue(propertyName)</li><li>item(index) 返回给定位置的 CSS 属性名称。</li><li>removeProperty(propertyName)</li><li>setProperty(propertyName, value, priority)</li></ul><h5 id="计算的样式"><a href="#计算的样式" class="headerlink" title="计算的样式"></a>计算的样式</h5><ul><li>getComputedStyle()<ul><li>接收两个参数：要获取的计算样式的元素和一个伪元素字符串。第二个参数是可选的</li><li>在 IE 中不支持，而是有个 currentStyle 属性</li></ul></li><li>使用 document.defaulView.getComputedStyle(DOM元素, 伪元素/null)</li><li>返回 CSSStyleDeclaration 对象，包含当前元素的所有计算的样式。</li></ul><h5 id="操作样式表"><a href="#操作样式表" class="headerlink" title="操作样式表"></a>操作样式表</h5><ul><li>disabled</li><li>href</li><li>media</li><li>ownerNode</li><li>parentStyleSheet</li><li>title</li><li>type</li><li>cssRules</li><li>ownerRule</li><li>deleteRule(index)</li><li>inserRule(rule, index)</li></ul><p>应用于文档的所有样式表时通过 document.styleSheets 集合来表示的。IE 支持的是 styleSheet 属性 而其他浏览器都支持 sheet 属性。</p><h5 id="CSS-规则，CSSStyleRule-类型继承了-CSSRule，包含以下属性："><a href="#CSS-规则，CSSStyleRule-类型继承了-CSSRule，包含以下属性：" class="headerlink" title="CSS 规则，CSSStyleRule 类型继承了 CSSRule，包含以下属性："></a>CSS 规则，CSSStyleRule 类型继承了 CSSRule，包含以下属性：</h5><ul><li>CSSText</li><li>parentRule</li><li>parentStyleSheet</li><li>selectorText</li><li>style</li><li>type</li></ul><h5 id="创建规则"><a href="#创建规则" class="headerlink" title="创建规则"></a>创建规则</h5><ul><li>sheet.insertRule()<ul><li>接收两个参数：规则文本和在哪里插入规则的索引。</li><li>除了 IE 以外的其它四个浏览器支持</li></ul></li><li>sheet.addRule()<ul><li>接收两个必选参数一个可选参数：选择符文本和CSS样式信息，在哪里插入规则的索引。</li><li>IE 浏览器支持</li></ul></li></ul><h5 id="删除规则"><a href="#删除规则" class="headerlink" title="删除规则"></a>删除规则</h5><ul><li>sheet.deleteRule()<ul><li>接收一个参数：要删除规则的位置</li><li>除了 IE 以外的其它四个浏览器支持</li></ul></li><li>sheet.removeRule()<ul><li>接收一个参数：要删除规则的位置</li><li>IE 浏览器支持</li></ul></li></ul><h5 id="元素的大小"><a href="#元素的大小" class="headerlink" title="元素的大小"></a>元素的大小</h5><p>偏移量：包括元素在屏幕上占用的所有的可见的空间。由其高度、宽度来决定，包括内边距、滚动条和边框大小。</p><ul><li>偏移量<ul><li>offsetHeight</li><li>offsetWidth</li><li>offsetLeft</li><li>offsetTop</li></ul></li><li>客户区的大小：不包括边框，包括内边距<ul><li>clientWidth</li><li>clientHeight</li></ul></li><li>滚动大小：包含滚动内容的大小<ul><li>scrollHeight</li><li>scrollWidth</li><li>scrollLeft</li><li>scrollTop</li></ul></li><li>确定元素的大小<ul><li>getBoundingClientRect() 方法返回一个矩形对象，有四个属性：<ul><li>left、top、right、bottom</li><li>给出了元素在叶明中相对于视口的位置。</li></ul></li></ul></li></ul><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><h3 id="NodeIterator"><a href="#NodeIterator" class="headerlink" title="NodeIterator"></a>NodeIterator</h3><p>可以使用 document.createNodeIterator() 方法来创建 NodeIterator 的新实例，接收四个参数。</p><ul><li>root: 想要搜索的起始树中的节点</li><li>whatToShow: 要访问哪些节点的数字代码</li><li>filter: 是一个 NodeFilter 对象，表示应该接收还是拒绝某种特定的节点的函数</li><li>entityReferenceExpansion: 布尔值，是否要扩展引用。</li></ul><p>whatToShow 的参数在这里不再列出，需要的时候直接查找 JavaScript 高级程序设计；</p><h3 id="TreeWalker"><a href="#TreeWalker" class="headerlink" title="TreeWalker"></a>TreeWalker</h3><p>是 NodeIterator 的更高级版本。可以使用 document.createTreeWalker() 方法来创建 TreeWalker 的新实例，接收四个参数。</p><h3 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h3><p>有关范围的一些方法、属性此处不再列出。详细更多参见 《JavaScript 高级程序设计》</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>动态创建结构</p><ul><li>方式一：直接在文档中书写<ul><li>document.write(“内容”)</li></ul></li><li>方式二：改变元素对象内部的HTML<ul><li>innerHTML=”内容”</li></ul></li><li>方式三：创建或克隆节点并追加<ul><li>createElement();</li><li>cloneNode();</li><li>通过这两种方法创建出来的元素只是保存在内存中，必须放到页面上才行!</li></ul></li><li>动态创建结构（效率问题）<ul><li>把字符串变为文档对象</li><li>把当前对象挂接到DOM树上</li><li>渲染引擎根据新的DOM树重新渲染</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DOM 是针对 HTML 和 XML 文档的一个 API。 DOM 描绘了一个层次化的节点树。 HTML 文档的树形结构包含表示 HTML 标签或元素和表示文本字符串的节点，它也可能包括表示 HTML 注释节点。&lt;/p&gt;
&lt;h2 id=&quot;DOM基本概念&quot;&gt;&lt;a href=&quot;#DOM基本概念&quot; class=&quot;headerlink&quot; title=&quot;DOM基本概念&quot;&gt;&lt;/a&gt;DOM基本概念&lt;/h2&gt;&lt;h3 id=&quot;DOM-描述&quot;&gt;&lt;a href=&quot;#DOM-描述&quot; class=&quot;headerlink&quot; title=&quot;DOM 描述&quot;&gt;&lt;/a&gt;DOM 描述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;DOM Document Object Model 文档对象模型&lt;/li&gt;
&lt;li&gt;就是把HTML文档模型化，当作对象来处理&lt;/li&gt;
&lt;li&gt;DOM提供的一系列属性和方法可以视作一个工具箱，极大地方便了我们对文档的处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;内容概念&quot;&gt;&lt;a href=&quot;#内容概念&quot; class=&quot;headerlink&quot; title=&quot;内容概念&quot;&gt;&lt;/a&gt;内容概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;文档(Document)：就是指HTML或者XML文件&lt;/li&gt;
&lt;li&gt;节点(Node)：HTML文档中的所有内容都可以称之为节点，常见的节点有&lt;ul&gt;
&lt;li&gt;元素节点&lt;/li&gt;
&lt;li&gt;属性节点&lt;/li&gt;
&lt;li&gt;文本节点&lt;/li&gt;
&lt;li&gt;注释节点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;元素(Element)&lt;ul&gt;
&lt;li&gt;HTML文档中的标签可以称为元素&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;结构概念&quot;&gt;&lt;a href=&quot;#结构概念&quot; class=&quot;headerlink&quot; title=&quot;结构概念&quot;&gt;&lt;/a&gt;结构概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;父节点 当前节点的父级&lt;/li&gt;
&lt;li&gt;子节点 当前节点的子级&lt;/li&gt;
&lt;li&gt;兄弟节点 和当前节点同属一个父级的节点&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="DOM系列" scheme="http://yoursite.com/categories/DOM%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="DOM" scheme="http://yoursite.com/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>BOM-浏览器对象模型</title>
    <link href="http://yoursite.com/2015/09/28/BOM-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2015/09/28/BOM-浏览器对象模型/</id>
    <published>2015-09-27T16:00:00.000Z</published>
    <updated>2018-05-31T03:07:44.909Z</updated>
    
    <content type="html"><![CDATA[<p>DOM:中的顶级对象是document—-太监(大总管);BOM:中的顶级对象是window——皇上;整个浏览器就是window,页面中的document也属于window</p><ul><li>变量,函数,对象都属于window</li><li>但是:写代码的时候,window可以直接省略</li></ul><h2 id="window-对象"><a href="#window-对象" class="headerlink" title="window 对象"></a>window 对象</h2><p>BOM，即浏览器对象模型，核心是：window 对象</p><a id="more"></a><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>全局变量不能通过 delete 操作符删除。</p><h3 id="窗口关系及框架"><a href="#窗口关系及框架" class="headerlink" title="窗口关系及框架"></a>窗口关系及框架</h3><p>如果页面中包含框架，每个框架都有自己的 window 对象，并且保存在 frames 集合中。每一个 window 对象都有一个 name 属性，其中包含框架的名称。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Frameset Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">frameset</span> <span class="attr">rows</span>=<span class="string">"160, *"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"frame0.html"</span> <span class="attr">name</span> = <span class="string">"topFrame"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">"50%, 50%"</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"frame1.html"</span> <span class="attr">name</span> = <span class="string">"leftFrame"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"frame2.html"</span> <span class="attr">name</span> = <span class="string">"rightFrame"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">frameset</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>window.frames[0]</li><li>window.frames[“topFrame”]</li><li>top.frames[0]</li><li>top.frames[“topFrame”]</li><li>frames[0]</li><li>frames[“topFrame”]</li></ul><h3 id="窗口位置"><a href="#窗口位置" class="headerlink" title="窗口位置"></a>窗口位置</h3><p>IE、Safari、Opera、Chrome 支持</p><ul><li>screenLeft</li><li>screenTop</li></ul><p>FireFox 支持</p><ul><li>screenX</li><li>screenY</li></ul><p>窗口移动方法</p><ul><li>moveTo()</li><li>moveBy()</li></ul><h3 id="窗口大小"><a href="#窗口大小" class="headerlink" title="窗口大小"></a>窗口大小</h3><p>IE9+、Safari、Opera、FireFox、Chrome 支持</p><ul><li>innerWidth</li><li>innerHeight</li><li>outerWidth</li><li>outerHeight</li></ul><p>IE9+、Safari、FireFox 中 outer… 返回浏览器本身的尺寸(window 和 框架都是)。Opera 中则是页面视图容器大小。Chrome 中 两两都返回相同的值，即视口大小而非浏览器窗口大小。</p><p>在 IE9、Safari、Opera、FireFox、Chrome 中，document.documentElement.clientWidth 和 document.documentElement.clientHeight 保存了页面视口信息。在 IE 的标准模式下生效，而混杂模式使用的是： document.body 中的 clientHeight 和 clientWidth。而 Chrome 通过 document.body 和 document.documentElement 都可以获取到页面视图。</p><p>可以通过检查 document.compatMode 来检测浏览器是否处于标准模式。</p><h3 id="导航和打开窗口"><a href="#导航和打开窗口" class="headerlink" title="导航和打开窗口"></a>导航和打开窗口</h3><p>window.open() 方法，四个参数：要加载的 URL、窗口目标、一个特性字符串以及一个表示新页面是否取代浏览器历史记录中当前加载页面的布尔值。和 a 标签的 herf 属性一个功能。不怎么用。</p><h3 id="间歇调用和超时调用"><a href="#间歇调用和超时调用" class="headerlink" title="间歇调用和超时调用"></a>间歇调用和超时调用</h3><blockquote><p>超时调用</p></blockquote><ul><li>setTimeout() 方法<ul><li>两个参数，</li><li>一是要执行的回调函数或一个包含 JavaScript 代码的字符串</li><li>而是以毫秒值表示的时间。即在执行前需要等待的时间。</li><li>传递字符串消耗性能。</li><li>返回一个 ID</li><li>在非严格模式下，this 指向 window，严格模式下是 undefined。</li></ul></li><li>clearTimeout() 清除超时调用</li></ul><blockquote><p>间歇调用</p></blockquote><ul><li>setInterval() 方法<ul><li>参数同 setTimeout() 方法相同</li><li>返回也是一个 ID</li><li>间歇调用一直执行到页面卸载</li></ul></li><li>clearInterval()<ul><li>清除间歇调用</li></ul></li></ul><h3 id="系统对话框"><a href="#系统对话框" class="headerlink" title="系统对话框"></a>系统对话框</h3><ul><li>alert()</li><li>confirm()</li><li>prompt()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.confirm(<span class="string">"你确定要退出吗?"</span>)) &#123;</span><br><span class="line">    <span class="comment">//执行到这里,证明用户点击了确定按钮</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"点击了确定"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//证明了用户点击了取消的按钮</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"点击了取消"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.prompt(<span class="string">"请输入用户名"</span>);</span><br></pre></td></tr></table></figure><h2 id="location-对象"><a href="#location-对象" class="headerlink" title="location 对象"></a>location 对象</h2><p>属性有：</p><ul><li>hash 返回 URL 中的哈希值</li><li>hostname 返回服务器名称和端口号</li><li>herf 返回当前页面加载的完整的 URL。 location 对象的 toString() 方法也返回这个值。</li><li>pathname 返回 URL 中的目录（或）文件名</li><li>port 返回 URL 中指定的端口号</li><li>protocol 返回页面使用的协议</li><li>search 返回 URL 的查询字符串</li></ul><p>方法有：</p><ul><li>location.assign(“<a href="http://www.baidu.com“)" target="_blank" rel="noopener">http://www.baidu.com“)</a>;<ul><li>改变浏览器的位置</li></ul></li><li>location.replace(“<a href="http://www.baidu.com“)" target="_blank" rel="noopener">http://www.baidu.com“)</a>;<ul><li>地址不会记录到历时中—-后退点不了</li></ul></li><li>location.reload();<ul><li>刷新—一般情况在页面中用一个按钮点击刷新</li></ul></li></ul><h2 id="BOM的一些方法"><a href="#BOM的一些方法" class="headerlink" title="BOM的一些方法"></a>BOM的一些方法</h2><ul><li>win = window.open(“09test.html”,”_blank”,”width=200,height=200,top=100,left=100,resizable=no”);</li><li>win.close();//此时close方法 无论open中第一个参数是不是地址都可以关闭窗口</li><li>win.moveTo(300,300);//把新打开的窗口移动到距离左侧和上面300px</li><li>win.moveBy(20,20);//每次移动20px</li><li>win.resizeTo(400,400);//窗口的大小发生了改变</li><li>win.resizeBy(40,40);</li></ul><h2 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h2><p>属性或方法：</p><ul><li>appCodeName 浏览器名称</li><li>appMinorVersion 此版本信息</li><li>appName 完整浏览器名称</li><li>appVersion 浏览器版本</li><li>buildID</li><li>cookieEnabled</li><li>cpuClass</li><li>javaEnabled()</li><li>language</li><li>mimeType</li><li>onLine</li><li>opsProfile</li><li>oscpu</li><li>platform</li><li>plugins</li><li>preference()</li><li>product</li><li>productSub</li><li>register-ContentHandler()</li><li>register-ProtocalHandler()</li><li>securifyPolicy</li><li>systemLanguage</li><li>taintEnabled()</li><li>userAgent</li><li>userLanguage</li><li>userProfile</li><li>vendor</li><li>vendorSub</li></ul><h2 id="screen-对象"><a href="#screen-对象" class="headerlink" title="screen 对象"></a>screen 对象</h2><p>用处不大，此处不再详细说明。</p><h2 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h2><ul><li>window.history.forward();</li><li>window.history.back();//后退</li><li>window.history.go();</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DOM:中的顶级对象是document—-太监(大总管);BOM:中的顶级对象是window——皇上;整个浏览器就是window,页面中的document也属于window&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量,函数,对象都属于window&lt;/li&gt;
&lt;li&gt;但是:写代码的时候,window可以直接省略&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;window-对象&quot;&gt;&lt;a href=&quot;#window-对象&quot; class=&quot;headerlink&quot; title=&quot;window 对象&quot;&gt;&lt;/a&gt;window 对象&lt;/h2&gt;&lt;p&gt;BOM，即浏览器对象模型，核心是：window 对象&lt;/p&gt;
    
    </summary>
    
      <category term="BOM系列" scheme="http://yoursite.com/categories/BOM%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="BOM" scheme="http://yoursite.com/tags/BOM/"/>
    
  </entry>
  
  <entry>
    <title>js的正则表达式</title>
    <link href="http://yoursite.com/2015/09/16/js%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2015/09/16/js的正则表达式/</id>
    <published>2015-09-15T16:00:00.000Z</published>
    <updated>2018-05-31T02:56:25.490Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式是一个描述字符模式的对象。 JavaScript 的 RegExp 类表示正则表达式，String 和 RegExp 都定义了方法，后者使用正则表达式进行强大的模式匹配和文本检索与替换功能。</p><h2 id="正则表达式定义"><a href="#正则表达式定义" class="headerlink" title="正则表达式定义"></a>正则表达式定义</h2><p>正则表达式的直接量定义为包含在一对斜杠 (/) 之间的字符</p><p>如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/s$/</span>;</span><br></pre></td></tr></table></figure><h2 id="正则表达式中的基本元字符"><a href="#正则表达式中的基本元字符" class="headerlink" title="正则表达式中的基本元字符"></a>正则表达式中的基本元字符</h2><ul><li><code>.</code> 通配符（. 除了\n以外的任意一个内容）</li><li><code>[]</code> 表示的是范围:表示的是范围中的任意一个</li><li><code>[0-9]</code> 表示的是:0到9之间(包含)任意一个数字</li><li><code>[a-z]</code> 表示所有的小写字母中的一个</li><li><code>[A-Z]</code> 表示的是所有的大写字母中的任意一个</li><li><code>[a-zA-Z]</code> 表示的是所有的字母中的任意一个</li><li><code>[9]</code> 表示的就是9</li><li><code>[0-9a-zA-Z]</code> 表示的是任意的一个数字或者任意的一个字母</li><li><code>()</code>表示的是分组(为了更明确这个正则表达式的意思),提升优先级</li><li><code>|</code> 表示的是或者的意思</li><li><code>[0-9]|[a-z]</code> 0-9之间的任意一个数字或者是小写字母中的任意一个字母</li><li><code>*</code>表示的是该符号前面的表达式出现了0次到多次</li><li><code>+</code> 表示的是该符号前面的表达式出现了1次到多次</li><li><code>?</code> 表示的是该符号前面的表达式出现了0次到一次</li><li><code>{}</code> 表示的是前面的表达式出现了多少次,具体是多少次:大括号中的写法</li><li><code>{n,m}</code> 匹配前一项至少 n 次，但不超过 m 次</li><li><code>{n,}</code>匹配前一项 n 次或者更多次</li><li><code>{n}</code> 匹配前一项 0 次或多次，等价于 {0,}</li></ul><a id="more"></a><h2 id="数字、字母、特殊符号"><a href="#数字、字母、特殊符号" class="headerlink" title="数字、字母、特殊符号"></a>数字、字母、特殊符号</h2><ul><li>\d 表示的是任意的一个数字和 <code>[0-9]</code> 一样</li><li>\D 表示的是非数字，等价于 <code>[^0-9]</code></li><li>\s 空白符号</li><li>\S 非空白符号</li><li>\w 非特殊符号，等价于 <code>[a-zA-Z0-9]</code></li><li>\W 特殊符号，等价于 <code>[^a-zA-Z0-9]</code></li></ul><h2 id="之前的元字符、都是不严格的匹配字符串"><a href="#之前的元字符、都是不严格的匹配字符串" class="headerlink" title="之前的元字符、都是不严格的匹配字符串"></a>之前的元字符、都是不严格的匹配字符串</h2><ul><li><code>^</code><ul><li>(1)、以什么内容开头，必须以什么开始;</li><li>(2)、取反</li><li>用法:<ul><li><code>^[0-9]</code> 必须以数字开头</li><li><code>^[a-z0-9]</code> 必须以数字或者以小写字母开始</li><li><code>^[0-9a-zA-Z]</code>必须以数字或者是字母开头</li><li><code>^\d</code> 必须以数字开头</li><li><code>[^0-9]</code>取反 字母或者特殊符号</li><li><code>[^0-9a-zA-Z]</code> 特殊符号</li><li><code>$</code> 必须以什么内容结尾</li><li><code>[0-9]$</code> “hsgd7y273d9”</li><li><code>[a-zA-Z]$</code></li><li><code>^[0-9a-z][a-z]$</code></li></ul></li></ul></li></ul><h2 id="指定匹配位置"><a href="#指定匹配位置" class="headerlink" title="指定匹配位置"></a>指定匹配位置</h2><ul><li><code>^</code>匹配字符串的开头，在多行检索中，匹配一行的开头。</li><li><code>$</code> 匹配字符串的结尾，在多行检索中，匹配一行的结尾。</li><li><code>\b</code> 匹配一个单词的边界，就是位于 \w 和 \W 之间的位置，或位于字符 \w 和字符串的开头或者结尾之间的位置。</li><li><code>\B</code> 匹配非单词边界的位置</li></ul><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><ul><li><code>i</code> 执行不分区大小写的匹配；</li><li><code>g</code>执行一个全局匹配，简言之，即找到所有的匹配，而不是在找到第一个之后就停止；</li><li><code>m</code>多行匹配模式， <code>^</code> 匹配一行的开头和字符串的开头， <code>$</code>匹配行的结束和字符串的结束。</li></ul><h2 id="在js中正则表达式的写法-正则表达式"><a href="#在js中正则表达式的写法-正则表达式" class="headerlink" title="在js中正则表达式的写法: /正则表达式/"></a>在js中正则表达式的写法: /正则表达式/</h2><blockquote><p>创建正则表达式对象的方式:</p></blockquote><p>(1)、 var reg=new RegExp(/正则表达式/<br>(2)、 var reg=/正则表达式/; reg.test(“hello998”);<br>(3)、 /正则表达式/.方法名(参数);</p><h3 id="RegExp-属性"><a href="#RegExp-属性" class="headerlink" title="RegExp 属性"></a>RegExp 属性</h3><ul><li>source</li><li>global</li><li>ignoreCase</li><li>multiline</li><li>lastIndex</li></ul><h2 id="选择、分组和引用"><a href="#选择、分组和引用" class="headerlink" title="选择、分组和引用"></a>选择、分组和引用</h2><p>正则表达式的语法还包括指定选择项、子表达式分组和引用前一子表达式的特殊字符串。</p><ul><li>字符<code>|</code> 用来分隔供选择的字符。<ul><li>选择项的尝试匹配次序是从左至右，直到发现了匹配项。如果左边的选择项匹配，就忽略右边的匹配项，即使它产生更好的匹配。</li></ul></li><li>圆括号 <code>()</code><ul><li>圆括号的作用：一个作用是把单独的项组合成子表达式，以便可以处理像一个独立的单元那样用”|”、”*”、”+”、或者”?”等来对单元内的项进行处理。</li><li>另一个作用是在完整的模式中定义模式。当一个正则表达式成功地和目标字符串相匹配时，可以从目标串中抽出和圆括号中的子模式相匹配的部分。</li><li>允许在同一正则表达式的后部引用前面的子表达式。<ul><li>这是通过在字符 “\” 后加一位或多位数字来实现。这个数字指定了带圆括号的子表达式在正则表达式中的位置。</li></ul></li></ul></li></ul><h2 id="用于模式匹配的String方法的使用"><a href="#用于模式匹配的String方法的使用" class="headerlink" title="用于模式匹配的String方法的使用"></a>用于模式匹配的String方法的使用</h2><p><code>str=str.replace(/帅/g,&quot;呆&quot;);</code>g表示的是全局; i 表示的是小写的<br><code>str=str.replace(/^\s+|\s+$/g,&quot;&quot;);</code><br><code>while((index=reg.exec(str))!=null){console.log(index.index); }</code> // 如果结果为null没有匹配的<br><code>var result=str.match(/帅/g);</code> // match根据正则表达式匹配字符串中的内容,如果没有g,匹配的是第一个,如果有g匹配的是全局的</p><ul><li>search()<ul><li>参数是一个正则表达式；</li><li>返回第一个与之匹配的子串的起始位置；</li><li>找不到返回 -1。</li><li>如果参数不是正则表达式，则先通过 RegExp 构造函数将它转换成正则表达式；</li><li>search() 方法不支持全局检索，会忽略正则表达式参数中的修饰符 g。</li></ul></li><li>replace() 方法执行检索与替换操作：<ul><li>第一个参数是一个正则表达式；</li><li>第二个参数是要进行替换的字符串；</li><li>如果正则表达式中设置了修饰符 g，那么源字符串中所有与模式匹配的第一个字符串都将替换成第二个蚕食指定的字符串；</li><li>如果不带修饰符 g, 则只替换所匹配的第一个字符串。</li><li>如果第一个参数是字符串而不是正则表达式，则 replace() 方法将直接搜索这个字符串。</li><li>正则表达式如果使用了圆括号括起来的子表达式是带有从左到右的索引编号的，而且正则表达式会记忆与每个子表达式匹配的文本。如果在替换字符串中出现了 $ 加数字，将用于指定的子表达式相匹配的文本来替换这两个字符串。</li><li>replace() 方法的第二个参数还可以是函数，该函数能够动态的计算替换字符串。</li></ul></li><li>match() 是最常用的 String 正则表达式。<ul><li>唯一的参数是一个正则表达式，返回的是一个有匹配结果组成的数组。</li><li>如果正则表达式设置了修饰符 g, match() 方法返回的数组包含字符串中的所有匹配结果。</li><li>如果正则表达式没有设置修饰符，match() 方法就不会进行全局检索，它只检索第一个匹配。</li><li>即使不设置全局，还是返回一个数组。</li><li>该数组的第一个元素就是匹配的字符串，余下的元素则是正则表达式中用圆括号括起来的子表达式。因此，如果 match() 返回一个数组 a，那么 a[0] 存放的是完整的匹配，a[1] 存放的则是与第一个用圆括号起来的表达式相匹配的子串，依此类推。</li></ul></li><li>split()<ul><li>split() 方法用以调用它的字符串拆分为一个子串组成的数组，使用的分隔符是 split() 的参数。</li></ul></li></ul><h2 id="RegExp-的方法"><a href="#RegExp-的方法" class="headerlink" title="RegExp 的方法"></a>RegExp 的方法</h2><ul><li>exec() 方法返回一个数组<ul><li>exec() 方法对一个指定的字符串执行一个正则表达式，就是在一个字符串中执行匹配检索；</li><li>给字符串的 match() 传入一个非全局的正则表达式，和给这个正则表达式的 exec() 方法传入的字符串是一模一样的，返回一个数组，数组有两个属性：index 和 input。</li><li>第一个元素包含的是与正则表达式相匹配的字符串，余下的元素是与圆括号内的子表达式相匹配的子串。</li><li>属性 index 包含了发生匹配的字符位置，属性 input引用的是正在检索的字符串。</li><li>当调用 exec() 的正则表达式对象具有修饰符 g 时，它将当前正则表达式对象的 lastIndex 属性设置为紧挨着匹配子串的字符位置。当统一正则表达式第二次调用 exec() 时，它将从 lastIndex 属性所指示的字符处开始检索。如果没有匹配结果，会将 lastIndex 重置为 0；</li></ul></li><li>test() 方法<ul><li>参数是一个字符串</li><li>用 test() 对某个字符串进行检测，如果包含正则表达式的一个匹配结果，则返回 true；</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正则表达式是一个描述字符模式的对象。 JavaScript 的 RegExp 类表示正则表达式，String 和 RegExp 都定义了方法，后者使用正则表达式进行强大的模式匹配和文本检索与替换功能。&lt;/p&gt;
&lt;h2 id=&quot;正则表达式定义&quot;&gt;&lt;a href=&quot;#正则表达式定义&quot; class=&quot;headerlink&quot; title=&quot;正则表达式定义&quot;&gt;&lt;/a&gt;正则表达式定义&lt;/h2&gt;&lt;p&gt;正则表达式的直接量定义为包含在一对斜杠 (/) 之间的字符&lt;/p&gt;
&lt;p&gt;如：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pattern = &lt;span class=&quot;regexp&quot;&gt;/s$/&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;正则表达式中的基本元字符&quot;&gt;&lt;a href=&quot;#正则表达式中的基本元字符&quot; class=&quot;headerlink&quot; title=&quot;正则表达式中的基本元字符&quot;&gt;&lt;/a&gt;正则表达式中的基本元字符&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt; 通配符（. 除了\n以外的任意一个内容）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[]&lt;/code&gt; 表示的是范围:表示的是范围中的任意一个&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[0-9]&lt;/code&gt; 表示的是:0到9之间(包含)任意一个数字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[a-z]&lt;/code&gt; 表示所有的小写字母中的一个&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[A-Z]&lt;/code&gt; 表示的是所有的大写字母中的任意一个&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[a-zA-Z]&lt;/code&gt; 表示的是所有的字母中的任意一个&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[9]&lt;/code&gt; 表示的就是9&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[0-9a-zA-Z]&lt;/code&gt; 表示的是任意的一个数字或者任意的一个字母&lt;/li&gt;
&lt;li&gt;&lt;code&gt;()&lt;/code&gt;表示的是分组(为了更明确这个正则表达式的意思),提升优先级&lt;/li&gt;
&lt;li&gt;&lt;code&gt;|&lt;/code&gt; 表示的是或者的意思&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[0-9]|[a-z]&lt;/code&gt; 0-9之间的任意一个数字或者是小写字母中的任意一个字母&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;表示的是该符号前面的表达式出现了0次到多次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt; 表示的是该符号前面的表达式出现了1次到多次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt; 表示的是该符号前面的表达式出现了0次到一次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{}&lt;/code&gt; 表示的是前面的表达式出现了多少次,具体是多少次:大括号中的写法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{n,m}&lt;/code&gt; 匹配前一项至少 n 次，但不超过 m 次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{n,}&lt;/code&gt;匹配前一项 n 次或者更多次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{n}&lt;/code&gt; 匹配前一项 0 次或多次，等价于 {0,}&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="正则系列" scheme="http://yoursite.com/categories/%E6%AD%A3%E5%88%99%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="js，正则" scheme="http://yoursite.com/tags/js%EF%BC%8C%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>实现继承的几种方式</title>
    <link href="http://yoursite.com/2015/08/28/%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2015/08/28/实现继承的几种方式/</id>
    <published>2015-08-27T16:00:00.000Z</published>
    <updated>2018-05-31T02:42:57.793Z</updated>
    
    <content type="html"><![CDATA[<p>ECMAScript 中只支持实现继承，而且主要依靠的是原型链来实现。</p><h2 id="扩展原型对象实现继承"><a href="#扩展原型对象实现继承" class="headerlink" title="扩展原型对象实现继承"></a>扩展原型对象实现继承</h2><ul><li>描述：直接在构造函数的prototype属性上添加方法</li><li>解决的问题：解决了直接将方法设置在构造函数上时，实例化每个对象这些方法都会开辟新空间，造成内存严重浪费的问题</li><li>缺点：如果将所有的方法都直接设置到原型对象上，代码冗余</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 一、 扩展原型对象实现继承 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.personFn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"personFn is run..."</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">"z3"</span>, <span class="number">13</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"============== 一、 扩展原型对象实现继承 =================="</span>);</span><br><span class="line">p1.personFn();</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="替换原型对象实现继承"><a href="#替换原型对象实现继承" class="headerlink" title="替换原型对象实现继承"></a>替换原型对象实现继承</h2><ul><li>描述：将构造函数的原型对象用新对象替换，再往新的对象中添加新方法</li><li>解决的问题：扩展原型对象使得代码冗余</li><li>缺点：所有的方法和属性都被实例共享</li><li>注意：还原构造器</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 二、 替换原型对象实现继承 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params">color, type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">    <span class="keyword">this</span>.type = type;</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: Animal,</span><br><span class="line">    animalFn: function () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"animalFn is run..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> animal = <span class="keyword">new</span> Animal(<span class="string">"white"</span>, <span class="string">"cat"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"======================== 二、 替换原型对象实现继承 ========================="</span>);</span><br><span class="line">animal.animalFn();</span><br></pre></td></tr></table></figure><h2 id="另一种原型继承（动态原型模式）-特点：让代码封装到一起"><a href="#另一种原型继承（动态原型模式）-特点：让代码封装到一起" class="headerlink" title="另一种原型继承（动态原型模式） 特点：让代码封装到一起"></a>另一种原型继承（动态原型模式） 特点：让代码封装到一起</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 二、 另一种原型继承（动态原型模式） 特点：让代码封装到一起 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Paper</span>(<span class="params">color, size</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">    <span class="keyword">this</span>.size = size;</span><br><span class="line">    <span class="comment">// 动态原型方法</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span>.write !== <span class="string">"function"</span>)&#123;</span><br><span class="line">        Paper.prototype.write = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"color: "</span> + <span class="keyword">this</span>.color + <span class="string">", size: "</span> + <span class="keyword">this</span>.size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> paper = <span class="keyword">new</span> Paper(<span class="string">"orange"</span>, <span class="string">"16k"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"================= 二、另一种原型继承（动态原型模式）===================="</span>);</span><br><span class="line">paper.write();</span><br></pre></td></tr></table></figure><h2 id="混入继承：-已知两个对象，一个对象继承另一个对象的功能，for-in"><a href="#混入继承：-已知两个对象，一个对象继承另一个对象的功能，for-in" class="headerlink" title="混入继承： 已知两个对象，一个对象继承另一个对象的功能，for..in"></a>混入继承： 已知两个对象，一个对象继承另一个对象的功能，for..in</h2><ul><li>描述： jQuery的extend()方法原理是混入继承</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 三、 混入继承： 已知两个对象，一个对象继承另一个对象的功能，for..in */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mixin</span>(<span class="params">target, source</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        target[key] = source[key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    name: <span class="string">"Amiy"</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    pray: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"name: "</span> + <span class="keyword">this</span>.name + <span class="string">", age: "</span> + <span class="keyword">this</span>.age + <span class="string">", sex: "</span> + <span class="keyword">this</span>.sex + <span class="string">"; obj2.pray is run..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    sex: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line">mixin(obj2, obj1);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"=================== 三、 混入继承： 已知两个对象，一个对象继承另一个对象的功能，for..in ==================="</span>);</span><br><span class="line">obj2.pray();</span><br></pre></td></tr></table></figure><h2 id="原型-混入继承：混入继承的应用"><a href="#原型-混入继承：混入继承的应用" class="headerlink" title="原型+混入继承：混入继承的应用"></a>原型+混入继承：混入继承的应用</h2><ul><li>描述：在一个对象的原型对象上扩展另一个对象的属性和方法</li><li>jQuery.fn.extend() 利用的原理是原型+混入继承</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 四、 原型+混入继承：混入继承的应用 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="keyword">var</span> o2 = &#123;</span><br><span class="line">    o2Attr1: <span class="string">"o2Attr1"</span>,</span><br><span class="line">    o2Attr2: <span class="string">"o2Attr2"</span>,</span><br><span class="line">    o2Method1: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"o2Method1 is run..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">mixin(Cat.prototype, o2);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"======== 四、 原型+混入继承：混入继承的应用 ========="</span>);</span><br><span class="line">cat.o2Method1();</span><br></pre></td></tr></table></figure><h2 id="经典继承：已知一个对象knownObj，需要创建一个新对象，这个新对象继承自已知的对象knownObj"><a href="#经典继承：已知一个对象knownObj，需要创建一个新对象，这个新对象继承自已知的对象knownObj" class="headerlink" title="经典继承：已知一个对象knownObj，需要创建一个新对象，这个新对象继承自已知的对象knownObj"></a>经典继承：已知一个对象knownObj，需要创建一个新对象，这个新对象继承自已知的对象knownObj</h2><ul><li>注意： ES5 Object.create()方法的实现原理就是经典继承</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 五、 经典继承：已知一个对象knownObj，需要创建一个新对象，这个新对象继承自已知的对象knownObj */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myCreate</span>(<span class="params">knownObj</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    F.prototype = knownObj;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> knownObj = &#123;</span><br><span class="line">    knownObjAttr1: <span class="string">"knownObjAttr1"</span>,</span><br><span class="line">    knownObjMethod1: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"knownObjMethod1 is run..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> o = myCreate(knownObj);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"=============== 五、 经典继承：已知一个对象knownObj，需要创建一个新对象，这个新对象继承自已知的对象knownObj =================="</span>);</span><br><span class="line">o.knownObjMethod1();</span><br><span class="line"><span class="comment">/* 在旧浏览器下实现继承 */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Object</span>.create !== <span class="string">"function"</span>) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.create = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        F.prototype = obj;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="借用构造函数实现继承"><a href="#借用构造函数实现继承" class="headerlink" title="借用构造函数实现继承"></a>借用构造函数实现继承</h2><ul><li>特点： 不会继承原型对象上的方法，因为this的指向变了，原型对象上的方法只能通过构造函数的实例来访问</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 六： 借用构造函数实现继承 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Computer</span>(<span class="params">color, type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">    <span class="keyword">this</span>.type = type;</span><br><span class="line">    <span class="keyword">this</span>.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"run method is run... "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Computer.prototype.start = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Computer.prototype.start is run..."</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下面的借用构造函数实现继承就是对这段代码的优化</span></span><br><span class="line"><span class="comment"> * function LenovoNoteBook(color, type, interfaceCount) &#123;</span></span><br><span class="line"><span class="comment"> *     this.color = color;</span></span><br><span class="line"><span class="comment"> *     this.type = type;</span></span><br><span class="line"><span class="comment"> *     this.interfaceCount = interfaceCount;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LenovoNoteBook</span>(<span class="params">color, type, interfaceCount</span>) </span>&#123;</span><br><span class="line">    Computer.call(<span class="keyword">this</span>, color, type);</span><br><span class="line">    <span class="keyword">this</span>.interfaceCount = interfaceCount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> lenovo = <span class="keyword">new</span> LenovoNoteBook(<span class="string">"write"</span>, <span class="string">"Y470"</span>, <span class="number">8</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"========= 六： 借用构造函数实现继承 ========"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"color: "</span> + lenovo.color + <span class="string">", type: "</span> + lenovo.type + <span class="string">", interfaceCount: "</span> + lenovo.interfaceCount);</span><br><span class="line">lenovo.run();</span><br><span class="line"><span class="comment">// lenovo.start();</span></span><br></pre></td></tr></table></figure><h2 id="混合继承（经典继承-借用构造函数）"><a href="#混合继承（经典继承-借用构造函数）" class="headerlink" title="混合继承（经典继承+借用构造函数）"></a>混合继承（经典继承+借用构造函数）</h2><ul><li>特点：解决借用构造函数继承不能够继承原型对象上的方法的问题</li><li>缺点：继承了两次构造函数（模板）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 七、 混合继承（经典继承+借用构造函数）*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BaseCar</span>(<span class="params">type, modelNumber, color</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.type = type;</span><br><span class="line">    <span class="keyword">this</span>.modelNumber = modelNumber;</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型对象上的方法</span></span><br><span class="line">BaseCar.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: BaseCar,</span><br><span class="line">    canSell: function (price) &#123;</span><br><span class="line">        <span class="keyword">var</span> leastPrice = <span class="number">2500000</span>;</span><br><span class="line">        <span class="keyword">if</span> (leastPrice &lt;= price) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"恭喜恭喜，您可以卖车"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"您还差:"</span> + (leastPrice - price) + <span class="string">"元就可以买车了"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Car 构造函数，调用call()实现继承BaseCar中的方法</span></span><br><span class="line"><span class="comment"> * @param type</span></span><br><span class="line"><span class="comment"> * @param modelNumber</span></span><br><span class="line"><span class="comment"> * @param color</span></span><br><span class="line"><span class="comment"> * @constructor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">type, modelNumber, color</span>) </span>&#123;</span><br><span class="line">    BaseCar.call(<span class="keyword">this</span>, type, modelNumber);</span><br><span class="line">    <span class="keyword">this</span>.color = color;</span><br><span class="line">    <span class="keyword">this</span>.bmwStart = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Bmv car is starting..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 经典继承</span></span><br><span class="line">Car.prototype = <span class="keyword">new</span> BaseCar();</span><br><span class="line"><span class="keyword">var</span> bmwCar = <span class="keyword">new</span> Car(<span class="string">"Bmw"</span>, <span class="string">"B34212"</span>, <span class="string">"write"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"=================== 七、 混合继承（经典继承+借用构造函数） 白贺翔视频 ====================="</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bmwCar.canSell(<span class="number">2400000</span>));</span><br></pre></td></tr></table></figure><h2 id="解决混合继承的缺点"><a href="#解决混合继承的缺点" class="headerlink" title="解决混合继承的缺点"></a>解决混合继承的缺点</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 八、 解决混合继承的缺点 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"父的构造函数上的静态sayHello方法 运行"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">People.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: People,</span><br><span class="line">    sayHello: function () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"父的原型对象中的sayHello方法：name: "</span> + <span class="keyword">this</span>.name + <span class="string">", age: "</span> + <span class="keyword">this</span>.age + <span class="string">", sex: "</span> + <span class="keyword">this</span>.sex + <span class="string">", HelloWorld !!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Boy</span>(<span class="params">name, age, sex, studyNumber</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 子类中保存了父类的原型对象</span></span><br><span class="line">    <span class="comment">// 借用构造函数实现继承</span></span><br><span class="line">    Boy.superClass.constructor.call(<span class="keyword">this</span>, name, age, sex);</span><br><span class="line">    <span class="keyword">this</span>.studyNumber = studyNumber;</span><br><span class="line">&#125;</span><br><span class="line">myExtend(Boy, People);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myExtend</span>(<span class="params">subConstructor, supConstructor</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 用一个空函数进行中转</span></span><br><span class="line">    <span class="keyword">var</span> F = <span class="keyword">new</span> <span class="built_in">Function</span>();</span><br><span class="line">    <span class="comment">// 2. 保存父的原型对象</span></span><br><span class="line">    F.prototype = supConstructor.prototype;</span><br><span class="line">    <span class="comment">// 3. 实现经典继承</span></span><br><span class="line">    subConstructor.prototype = <span class="keyword">new</span> F();</span><br><span class="line">    <span class="comment">// 4. 还原子构造函数原型对象的构造器</span></span><br><span class="line">    subConstructor.prototype.constructor = subConstructor;</span><br><span class="line">    <span class="comment">// 5. 保存父的原型对象，一方面方便解耦，另一方面可以轻松获得原型对象（添加静态方法）</span></span><br><span class="line">    subConstructor.superClass = supConstructor.prototype;</span><br><span class="line">    <span class="comment">// 6. 判断父类型的原型对象构造器，加保险</span></span><br><span class="line">    <span class="keyword">if</span> (supConstructor.prototype.constructor !== supConstructor) &#123;</span><br><span class="line">        supConstructor.prototype.constructor = supConstructor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 7. 利用保存的父类原型对象实现父类子类有重载的方法</span></span><br><span class="line">Boy.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: Boy,</span><br><span class="line">    sayHello: function () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"子的原型对象中的sayHello方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 注意： 子类的原型对象上添加方法必须在实现继承之后</span></span><br><span class="line"><span class="keyword">var</span> boy = <span class="keyword">new</span> Boy(<span class="string">"Ping"</span>, <span class="number">22</span>, <span class="literal">true</span>, <span class="number">345234</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"================ 八、 解决混合继承的缺点，封装函数 ExtJs 底层 白贺翔 ==================="</span>);</span><br><span class="line">boy.sayHello();  <span class="comment">// 父的构造函数上的静态sayHello方法 运行</span></span><br><span class="line">Boy.prototype.sayHello();  <span class="comment">// 子的原型对象中的sayHello方法</span></span><br><span class="line">Boy.superClass.sayHello.call(boy); <span class="comment">// 父的原型对象中的sayHello方法：name: Ping, age: 22, sex: true, HelloWorld !!!</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ECMAScript 中只支持实现继承，而且主要依靠的是原型链来实现。&lt;/p&gt;
&lt;h2 id=&quot;扩展原型对象实现继承&quot;&gt;&lt;a href=&quot;#扩展原型对象实现继承&quot; class=&quot;headerlink&quot; title=&quot;扩展原型对象实现继承&quot;&gt;&lt;/a&gt;扩展原型对象实现继承&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;描述：直接在构造函数的prototype属性上添加方法&lt;/li&gt;
&lt;li&gt;解决的问题：解决了直接将方法设置在构造函数上时，实例化每个对象这些方法都会开辟新空间，造成内存严重浪费的问题&lt;/li&gt;
&lt;li&gt;缺点：如果将所有的方法都直接设置到原型对象上，代码冗余&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 一、 扩展原型对象实现继承 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name, age&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Person.prototype.personFn = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;personFn is run...&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&quot;z3&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;============== 一、 扩展原型对象实现继承 ==================&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p1.personFn();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="原型链系列" scheme="http://yoursite.com/categories/%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="原型链，继承" scheme="http://yoursite.com/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE%EF%BC%8C%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>原型链</title>
    <link href="http://yoursite.com/2015/08/08/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>http://yoursite.com/2015/08/08/原型链/</id>
    <published>2015-08-07T16:00:00.000Z</published>
    <updated>2018-05-31T02:24:09.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h2><p>原型对象：构造函数的prototype属性：随着实例化的次数增加，不同的对象他们拥有的say方法指向不同的内存，能相同，造成了内存的浪费,为了解决内存，将这个方法放在某个对象（原型对象）中.</p><p>结论1：给构造函数的prototype属性（对象）添加一个方法，这个方法就可以被构造函数的实例所共享<br>推论1：构造函数的prototype属性(对象)上面的属性、方法都可以被构造函数的实例所共享<br>推论2：Student.prototype.constructor===s1.constructor<br>结论2：构造函数的实例有一个<strong>proto</strong>指向的是构造函数的prototype属性(原型对象) s1.<strong>proto</strong>===Student.prototype</p><p>(1). 原型对象是构造函数的prototype属性<br>(2). 构造函数的实例的<strong>proto</strong>属性指向原型对象<br>(3). 原型对象有一个constructor属性指向构造函数本身</p><p><img src="/images/原型01.png" alt="原型图01"></p><a id="more"></a><h2 id="对象的属性的读取与设置"><a href="#对象的属性的读取与设置" class="headerlink" title="对象的属性的读取与设置"></a>对象的属性的读取与设置</h2><blockquote><p>查找一个对象上的是否存在某个属性的过程</p></blockquote><p>(1). 查找当前对象(s1)的内存中是否定义了该属性，找到就停止查找<br>(2). 去当前对象的proto属性（原型对象）中去查找是否定义了该属性，找到就停止查找<br>(3). 如果2中没找到，就去原型对象的原型对象中去查找是否定义了该属性<br>(4). <code>s1.__proto__.__proto__</code><br>……<br>(N). 找到某个对象（是没有原型对象的：没有proto属性），如果这个对象中还没有，确定了无法获取该属性</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>JavaScript 的对象组成，一个对象就有它的原型对象(<code>__proto__</code>)，原型对象也有它的原型对象，一直到原型链的顶端，这样构成了一个具有链条形状的结构，称之为原型链</p><ul><li><code>__proto__</code>该属性可以被修改，但是无法被删除</li></ul><p><strong>对象字面量的原型链</strong></p><p><img src="/images/原型02.png" alt="原型图02"></p><p><strong>构造函数创建对象的原型链</strong></p><p><img src="/images/原型03.png" alt="原型图03"></p><p><strong>数组对象的原型链</strong></p><p><img src="/images/原型04.png" alt="原型图04"></p><p><strong>一般来说，无论是对象字面量，还是构造函数创建的对象、内置对象，基本包装了类型的对象，2次原型查找（.proto）就可以找到</strong></p><h2 id="函数的原型链"><a href="#函数的原型链" class="headerlink" title="函数的原型链"></a>函数的原型链</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">f();<span class="comment">//f当成了普通函数来调用</span></span><br><span class="line"><span class="keyword">new</span> f();<span class="comment">//f当成了构造函数来调用</span></span><br></pre></td></tr></table></figure><p>一些结论：</p><ul><li>几乎所有函数都有prototype属性（Function.prototype这个函数上没有）</li><li>所有对象中都有proto属性（Object.prototype该属性的值null）</li></ul><p><code>—&gt; 几乎所有函数都有prototype/__proto__属性</code></p><ul><li>函数都是Function的实例（函数是通过Function创建出来的对象）<ul><li>——&gt; 自定义函数、Function、Array、RegExp、String、Boolean、Number、Object</li></ul></li><li>几乎所有函数都是继承自：Function.prototype（除了Function.prototype）<ul><li>——&gt; <code>函数.__proto__ === Function.prototype</code></li><li>——&gt; <code>Object.__proto__ === Function.prototype</code></li><li>——&gt; <code>Function.__proto__ === Function.prototype</code></li><li><code>Function.prototype.__proto__ === Object.prototype</code></li><li><code>String.prototype.__proto__ === Object.prototype</code></li><li><code>Array.prototype.__proto__ === Object.prototype</code></li><li><code>Boolean.prototype.__proto__ === Object.prototype</code></li><li><code>Number.prototype.__proto__ === Object.prototype</code></li><li><code>RegExp.prototype.__proto__ === Object.prototype</code></li></ul></li></ul><p><strong>练习</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="number">1</span>、<span class="built_in">console</span>.log(fn.constructor===<span class="built_in">Function</span>);<span class="comment">//true //查找fn的内存——&gt;查找fn.__proto__(Function.prototype)——&gt;Function</span></span><br><span class="line"><span class="number">2</span>、<span class="built_in">console</span>.log(fn.__proto__===_______);<span class="comment">//true //Function.prototype</span></span><br><span class="line"><span class="number">3</span>、<span class="built_in">console</span>.log(<span class="built_in">Object</span>.__proto__===______);<span class="comment">//true //Function.prototype</span></span><br><span class="line"><span class="number">4</span>、<span class="built_in">console</span>.log(<span class="built_in">Function</span>.prototype===______);<span class="comment">//true //Function.__proto__——&gt;fn.__proto__——&gt;Object.__proto__</span></span><br><span class="line"><span class="number">5</span>、<span class="built_in">console</span>.log(<span class="built_in">Object</span>.constructor); <span class="comment">//Function</span></span><br><span class="line"><span class="number">6</span>、<span class="built_in">console</span>.log(fn.prototype.constructor); <span class="comment">//fn</span></span><br><span class="line"><span class="number">7</span>、<span class="built_in">console</span>.log(<span class="built_in">Function</span>.prototype.__proto__.constructor); <span class="comment">//Object</span></span><br></pre></td></tr></table></figure><p><strong>原型链完整图</strong></p><p><img src="/images/原型05.png" alt="原型图05"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;原型对象&quot;&gt;&lt;a href=&quot;#原型对象&quot; class=&quot;headerlink&quot; title=&quot;原型对象&quot;&gt;&lt;/a&gt;原型对象&lt;/h2&gt;&lt;p&gt;原型对象：构造函数的prototype属性：随着实例化的次数增加，不同的对象他们拥有的say方法指向不同的内存，能相同，造成了内存的浪费,为了解决内存，将这个方法放在某个对象（原型对象）中.&lt;/p&gt;
&lt;p&gt;结论1：给构造函数的prototype属性（对象）添加一个方法，这个方法就可以被构造函数的实例所共享&lt;br&gt;推论1：构造函数的prototype属性(对象)上面的属性、方法都可以被构造函数的实例所共享&lt;br&gt;推论2：Student.prototype.constructor===s1.constructor&lt;br&gt;结论2：构造函数的实例有一个&lt;strong&gt;proto&lt;/strong&gt;指向的是构造函数的prototype属性(原型对象) s1.&lt;strong&gt;proto&lt;/strong&gt;===Student.prototype&lt;/p&gt;
&lt;p&gt;(1). 原型对象是构造函数的prototype属性&lt;br&gt;(2). 构造函数的实例的&lt;strong&gt;proto&lt;/strong&gt;属性指向原型对象&lt;br&gt;(3). 原型对象有一个constructor属性指向构造函数本身&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/原型01.png&quot; alt=&quot;原型图01&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="原型链系列" scheme="http://yoursite.com/categories/%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="面向对象，原型链" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>js String对象</title>
    <link href="http://yoursite.com/2015/07/18/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2015/07/18/面向对象的程序设计/</id>
    <published>2015-07-17T16:00:00.000Z</published>
    <updated>2018-05-31T02:16:57.558Z</updated>
    
    <content type="html"><![CDATA[<p>面向对象的语言的标志就是它们有类的概念，通过类可以创建任意多个具有相同属性和方法的对象。JavaScript 中的类的实现是基于其原型继承机制。如果两个实例都从同一个原型对象上继承了属性，就认为是同一个类的实例。</p><p>JavaScript 的对象是属性名以及与之对应的值的基本集合。集合是一种数据结构，泳衣表示非重复值的无序集合。</p><a id="more"></a><h2 id="理解对象"><a href="#理解对象" class="headerlink" title="理解对象"></a>理解对象</h2><p>JavaScript 是一门基于对象的多泛式语言。可以使用面向过程进行开发：</p><ul><li>获取元素，绑定事件、设置样式、完成动画。。。。。。</li></ul><p>可以使用面向对象的方式进行开发：</p><ul><li>面向（关注于）过程：基于函数，封装函数</li><li>面向对象：关注点变成了对象</li><li>对象的概念：数据集，功能集： 无序属性的集合，包含基本值，对象或者函数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CEO：安排一个任务给CTO(7天)，CTO又把任务给PM(5天)，PM又把任务给我了(3天)，我去开发这个页面</span></span><br><span class="line"><span class="keyword">var</span> ceo = &#123;</span><br><span class="line">    assignTaskToCTO: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">"安排一个任务给CTO"</span>); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> cto = &#123;</span><br><span class="line">    assignTaskToPM: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">"安排一个任务给PM"</span>);&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> pm = &#123;</span><br><span class="line">    assignTaskToMe: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">"安排一个任务给我"</span>); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> me = &#123;</span><br><span class="line">    developWeb:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">"我去开发这个页面"</span>); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//开发一个页面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleveWeb</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ceo.assignTaskToCTO();</span><br><span class="line">    cto.assignTaskToPM();</span><br><span class="line">    pm.assignTaskToMe();</span><br><span class="line">    me.developWeb();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个例子： 利用构造函数来定义 “范围类”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 构造函数初始化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Range</span>(<span class="params">from, to</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 存储起始位置和结束位置</span></span><br><span class="line">  <span class="keyword">this</span>.from = <span class="keyword">from</span>;</span><br><span class="line">  <span class="keyword">this</span>.to = to;</span><br><span class="line">&#125;</span><br><span class="line">Range.prototype = &#123;</span><br><span class="line">  <span class="comment">// constructor: Range,</span></span><br><span class="line">  <span class="comment">// 如果 x 在范围内，返回 true，否则返回 false</span></span><br><span class="line">  <span class="comment">// 这个方法可以比较数字范围，也可以比较字符串和日期范围</span></span><br><span class="line">  includes: <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.from &lt;= x &amp;&amp; x &lt;= <span class="keyword">this</span>.to&#125;,</span><br><span class="line">  <span class="comment">// 对于范围内的每一个整数调用函数 f</span></span><br><span class="line">  foreach: <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="built_in">Math</span>.ceil(<span class="keyword">this</span>.from); x &lt;= <span class="keyword">this</span>.to; x++) f(x);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 返回表示这个范围的字符串</span></span><br><span class="line">  toString: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">"("</span> + <span class="keyword">this</span>.from + <span class="string">"..."</span> + <span class="keyword">this</span>.to + <span class="string">")"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 举例</span></span><br><span class="line"><span class="keyword">var</span> r = <span class="keyword">new</span> Range(<span class="number">3</span>, <span class="number">5</span>); </span><br><span class="line"><span class="built_in">console</span>.log(r.includes(<span class="number">4</span>)); <span class="comment">// true</span></span><br><span class="line">r.foreach(<span class="built_in">console</span>.log); <span class="comment">// 3, 4, 5</span></span><br><span class="line"><span class="built_in">console</span>.log(r);  <span class="comment">// Range&#123;from:3, to:5&#125;</span></span><br></pre></td></tr></table></figure><h2 id="构造函数和类的标识"><a href="#构造函数和类的标识" class="headerlink" title="构造函数和类的标识"></a>构造函数和类的标识</h2><p>当且仅当两个对象继承自同一个原型对象时，它们才是属于同一个类的实例。初始化对象的状态的构造函数不能作为类的标识，两个构造函数的 prototype 属性可能指向同一个原型对象。那么这连个构造函数的实例是属于同一类型的。</p><p>可以使用<code>r instanceof Range</code>来判断一个实例是否继承自 Range.prototype。</p><h2 id="constructor-属性"><a href="#constructor-属性" class="headerlink" title="constructor 属性"></a>constructor 属性</h2><p>每一个 JavaScript 函数都自动拥有一个 prototype 属性，这个属性指向一个对象即称作原型对象，这个对象包含唯一一个不可枚举的属性 constructor。 constructor 的值是一个函数对象。</p><p>构造函数的原型中存在预先定义好的 constructor 属性，这意味着通常继承的 constructor 均指代它们的构造函数。</p><p>在上面定义的 Range 构造函数的原型由于被另一个对象替换了，所以重写了预定义的 Range.prototype 对象。 Range 的实例的 constructor 没有继承自 Range.prototype 的 constructor 属性。其值变成了 Object。</p><h2 id="创建对象的几种方式"><a href="#创建对象的几种方式" class="headerlink" title="创建对象的几种方式"></a>创建对象的几种方式</h2><p> 使用 Object 构造函数或对象字面量都可以用来创建单个对象，但这些方式有个明显的缺点： 使用一个接口创建很多对象会产生大量的重复代码。</p><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个包含所有必要信息的 Person 对象</span></span><br><span class="line"><span class="comment">// 可以无数次的调用这个函数，而且每次都会返回一个包含三个属性的方法的对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  o.name = name;</span><br><span class="line">  o.age = age;</span><br><span class="line">  o.job = job;</span><br><span class="line">  o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = createPerson(<span class="string">"Hiraku"</span>, <span class="number">23</span>, <span class="string">"JavaScript Engineer"</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = createPerson(<span class="string">"Wang"</span>, <span class="number">22</span>, <span class="string">"Java Engineer"</span>);</span><br><span class="line">p1.sayName();</span><br><span class="line">p2.sayName();</span><br></pre></td></tr></table></figure><p>问题： 并没有解决对象识别的问题（即怎样知道一个对象的类型）。</p><h3 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.job = job;</span><br><span class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">"Hiraku"</span>, <span class="number">23</span>, <span class="string">"JavaScript Engineer"</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">"Wang"</span>, <span class="number">22</span>, <span class="string">"Java Engineer"</span>);</span><br><span class="line">p1.sayName();</span><br><span class="line">p2.sayName();</span><br></pre></td></tr></table></figure><p>和工厂模式的区别：</p><ul><li>没有显式的创建对象；</li><li>直接将属性和方法赋值给了 this 对象</li><li>没有 return 语句</li><li>使用 new 关键字创建对象的实例</li><li>将构造函数的作用域赋值给新对象（因此 this 就指向了这个对象）</li><li>返回新对象</li><li>p1 和 p2 有继承自 Person.prototype 的属性 constructor，该属性指向 Person</li></ul><p>使用构造函数模式的缺点：每个方法都要在每个实例上创建一遍。如 p1 和 p2 都有一个名为 sayName() 方法，但是两个方法不是同一个 Function 的实例。创建两个完成相同任务的 Function 实例没有必要，这样会浪费内存。</p><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>原型对象的用途是包含可以由特定类型的所有实例共享的属性和方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">"Hiraku"</span>;</span><br><span class="line">Person.prototype.age = <span class="number">22</span>;</span><br><span class="line">Person.prototype.job = <span class="string">"JavaScript Engineer"</span>;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line">p1.sayName();</span><br></pre></td></tr></table></figure><p>好处：可以让所有对象实例共享它所包含的属性和方法。</p><p>当给对象的实例添加一个属性时，这个属性会屏蔽原型对象中保存的同名属性。</p><h4 id="更简单的原型语法"><a href="#更简单的原型语法" class="headerlink" title="更简单的原型语法"></a>更简单的原型语法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  name: <span class="string">"Hiraku"</span>,</span><br><span class="line">  age: <span class="number">23</span>,</span><br><span class="line">  job: <span class="string">"JavaScript Engineer"</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这时 constructor 属性不再指向 Person 了，constructor 变成了新对象的 constructor，是 Object 构造函数。</p><p>这时，需要还原构造器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: Person,</span><br><span class="line">  name: "Hiraku",</span><br><span class="line">  age: 23,</span><br><span class="line">  job: "JavaScript Engineer",</span><br><span class="line">  sayName: function() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注： 以上方式重置 constructor 属性会导致它的 [[enumerable]] 特性被设置为 true。 默认情况下，原生的 constructor 属性是不可枚举的，因此，可以使用 ECMAScript5 中的 Object.defineProperty() 方法来设置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(Person.prototype, <span class="string">"constructor"</span>, &#123;</span><br><span class="line">  enumerable: <span class="literal">false</span>,</span><br><span class="line">  value: Person</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="原型的动态特性"><a href="#原型的动态特性" class="headerlink" title="原型的动态特性"></a>原型的动态特性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Person() &#123;&#125;</span><br><span class="line">var friend = new Person();</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  name: &quot;Hiraku&quot;,</span><br><span class="line">  sayName: function() &#123;</span><br><span class="line">    console.log(this.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">friend.sayName();  // 报错</span><br></pre></td></tr></table></figure><p>原因是重写了原型对象，把原型对象修改为另一个对象就等于切断了构造函数与最初原型之间的联系。 实例中的指针仅仅指向原型，而不指向构造函数。</p><h4 id="原生的对象原型"><a href="#原生的对象原型" class="headerlink" title="原生的对象原型"></a>原生的对象原型</h4><p>原型模式不仅仅体现在创建自定义类型放没放，就连所有原生的引用类型，都采用这种模式创建的。所有原生原生引用类型都在其构造函数的原型上定义了方法。</p><p>通过原生原型对象，不仅可以取得默认方法的引用，而且还可以定义新方法。可以像修改自定义对象的原型一样修改原生对象的原型，因此可以随时添加方法。</p><p>但是，不建议在编程时修改原生对象的原型。</p><h4 id="原型模式的缺点"><a href="#原型模式的缺点" class="headerlink" title="原型模式的缺点"></a>原型模式的缺点</h4><p>省略了构造函数初始化，所有实例默认情况下都将取得相同的属性值。还有，原型模式的最大问题是由其共享的本性所导致。</p><h3 id="组合使用构造函数模式和原型模式"><a href="#组合使用构造函数模式和原型模式" class="headerlink" title="组合使用构造函数模式和原型模式"></a>组合使用构造函数模式和原型模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.job = job;</span><br><span class="line">  <span class="keyword">this</span>.friends = [<span class="string">"Herschal"</span>, <span class="string">"Camile"</span>];</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: Person,</span><br><span class="line">  sayName: function() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">"Hiraku"</span>, <span class="number">23</span>, <span class="string">"JavaScript Engineer"</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">"Wang"</span>, <span class="number">22</span>, <span class="string">"Java Engineer"</span>);</span><br><span class="line">p1.friends.push(<span class="string">"Van"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p1.friends);  <span class="comment">// "Herschal, Camile, Van"</span></span><br><span class="line"><span class="built_in">console</span>.log(p2.friends);  <span class="comment">// "Herschal, Camile"</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.friends === p2.friends);  <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.sayName === p2.sayName);  <span class="comment">// true</span></span><br><span class="line">p1.sayName();</span><br><span class="line">p2.sayName();</span><br></pre></td></tr></table></figure><p>这种方式是使用最广泛的。</p><h3 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a>动态原型模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.job = job;</span><br><span class="line">  <span class="keyword">this</span>.friends = [<span class="string">"Herschal"</span>, <span class="string">"Camile"</span>];</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.sayName != <span class="string">"function"</span>) &#123;</span><br><span class="line">    Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">"Hiraku"</span>, <span class="number">23</span>, <span class="string">"JavaScript Engineer"</span>);</span><br><span class="line">p1.sayName();</span><br></pre></td></tr></table></figure><p>这里在对原型做的修改，能立即在所有实例中得到反映。</p><h3 id="寄生构造函数模式"><a href="#寄生构造函数模式" class="headerlink" title="寄生构造函数模式"></a>寄生构造函数模式</h3><p>基本思路是创建一个函数，该函数的作用仅仅是封装创建对象的代码，然后再返回创建的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  o.name = name;</span><br><span class="line">  o.age = age;</span><br><span class="line">  o.job = job;</span><br><span class="line">  o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">"Hiraku"</span>, <span class="number">23</span>, <span class="string">"JavaScript Engineer"</span>);</span><br><span class="line">p1.sayName();</span><br></pre></td></tr></table></figure><p>关于寄生构造模式，首先，返回对象与构造函数或者构造函数的原型属性之间没有关系。也就是说，构造函数返回到对象与在构造函数外部创建的对象没有什么不同。不能依赖 instanceof 操作符来确定对象的类型。</p><h3 id="稳妥构造函数模式"><a href="#稳妥构造函数模式" class="headerlink" title="稳妥构造函数模式"></a>稳妥构造函数模式</h3><p>首先介绍稳妥对象，稳妥对象是指没有公共属性，而且其它方法也不引用 this 的对象。稳妥模式适合在一些安全的环境中，或者在防止数据被其它应用程序改动时使用。稳妥模式遵循寄生模式，但有两点不同。</p><ul><li>新创建对象的实例方法不引用 this；</li><li>不使用 new 操作符来调用构造函数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = Person(<span class="string">"Hiraku"</span>, <span class="number">23</span>, <span class="string">"JavaScript Engineer"</span>);</span><br><span class="line">p1.sayName();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面向对象的语言的标志就是它们有类的概念，通过类可以创建任意多个具有相同属性和方法的对象。JavaScript 中的类的实现是基于其原型继承机制。如果两个实例都从同一个原型对象上继承了属性，就认为是同一个类的实例。&lt;/p&gt;
&lt;p&gt;JavaScript 的对象是属性名以及与之对应的值的基本集合。集合是一种数据结构，泳衣表示非重复值的无序集合。&lt;/p&gt;
    
    </summary>
    
      <category term="面向对象系列" scheme="http://yoursite.com/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="面向对象，js" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%8Cjs/"/>
    
  </entry>
  
  <entry>
    <title>js String对象</title>
    <link href="http://yoursite.com/2015/07/06/js%E7%9A%84%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2015/07/06/js的函数/</id>
    <published>2015-07-05T16:00:00.000Z</published>
    <updated>2018-05-31T01:57:03.308Z</updated>
    
    <content type="html"><![CDATA[<p>js 高程中这样定义函数：函数是这样一段 JavaScript 代码，只定义一次，但可以被执行任意多次。JavaScript 的函数是参数化的：函数的定义会包括一个称为形参和标识符列表，这些参数在函数体中就像局部变量一样工作。函数的调用会为形参提供实参的值。函数使用它们实参的值来计算返回值，成为该函数调用表达式的值。出来实参之外，每次调用还会拥有另一个值-本次调用的上下文-这就是 <code>this</code> 关键字的值。</p><p>如果函数挂载在一个对象上，作为对象的一个方法调用，就称之为 <code>对象的方法</code>。当通过这个对象来调用函数时，该对象就是此次调用的上下文，也就是该函数的 this 的值。</p><p>用于初始化一个新建的对象的函数成为<code>构造函数</code>。</p><p>在 JavaScript 里，函数即对象。可以把函数赋值给变量，或者作为参数传递给其他函数。</p><p>JavaScript 的函数可以嵌套在其他函数中定义，这样就可以访问它们被定义时所处的作用域中的任何变量。这意味着 JavaScript 函数构成了一个闭包。</p><a id="more"></a><h2 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h2><h3 id="函数定义方式一：-函数声明"><a href="#函数定义方式一：-函数声明" class="headerlink" title="函数定义方式一： 函数声明"></a>函数定义方式一： 函数声明</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params">arg0, arg1, ...</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数的组成：</p><ul><li>function 关键字</li><li>函数名标识符：是函数声明语句的必要组成</li><li>一对圆括号：其中包含有 0 个或多个逗号分隔的标识符组成的列表，表示函数的参数</li><li>一对花括号</li></ul><h3 id="函数的定义方式二：-函数表达式"><a href="#函数的定义方式二：-函数表达式" class="headerlink" title="函数的定义方式二： 函数表达式"></a>函数的定义方式二： 函数表达式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> functionName = <span class="function"><span class="keyword">function</span>(<span class="params">arg0, arg1, ...</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//函数体</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> functionName = <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">arg0, arg1, ...</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以函数表达式定义的函数，函数名称是可选的。一条语句实际上声明了一个变量，并把一个函数对象赋值给它。函数表达式定义函数通常不加函数名，图特别适合仅调用一次的函数。</p><h3 id="函数的嵌套"><a href="#函数的嵌套" class="headerlink" title="函数的嵌套"></a>函数的嵌套</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hypotenuse</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x * x; &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(square(a) + square(b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数调用、this指向、返回值"><a href="#函数调用、this指向、返回值" class="headerlink" title="函数调用、this指向、返回值"></a>函数调用、this指向、返回值</h2><p>一个函数最终产生什么样的结构，跟如何调用这个函数息息相关：函数的四种调用模式</p><h3 id="函数的4种调用模式"><a href="#函数的4种调用模式" class="headerlink" title="函数的4种调用模式"></a>函数的4种调用模式</h3><ol><li>第一种模式：函数调用模式，也就是写一个函数，然后调用一下</li><li>第二种模式：方法调用模式，也就是将函数成为对象的一个方法，然后通过对象来调用</li><li>第三种模式：构造函数调用模式，也就是将函数当成构造函数来调用</li><li>第四种调用模式：上下文调用模式，根据调用方式的不同可以产生不同的结果</li></ol><p>第四种函数调用的实现方式</p><ul><li>实现方式：call/apply (apply 和 call 的唯一区别是第二个参数是数组，将实参值一一传到数组中。fn.call (函数内部的 this 的值,实参1，实参2…))</li></ul><h3 id="不同调用模式中的this的值"><a href="#不同调用模式中的this的值" class="headerlink" title="不同调用模式中的this的值"></a>不同调用模式中的this的值</h3><ol><li>函数调用模式中 this 指向：window</li><li>方法调用模式中 this 指向：调用的对象</li><li>构造函数调用模式中 this 指向：构造函数的实例</li><li>上下文调用模式中 this 指向：</li></ol><ul><li>(1) 如果 call 方法的第一个参数是一个对象，则 fn 函数内部的 this 的值指向该对象</li><li>(2) 如果 call 方法的第一个参数是一个字符串、数字、布尔值，则 fn 函数内部的 this 的值会转换为该类型所对应的基本包装类型的对象</li><li>(3) 如果 call 方法的第一个参数是 null ，则 fn 函数内部的 this 的值是 window ——&gt; 就相当于是一次函数调用模式</li></ul><h3 id="调用模式中的返回值"><a href="#调用模式中的返回值" class="headerlink" title="调用模式中的返回值"></a>调用模式中的返回值</h3><ol><li>函数调用模式中返回值：由 return 语句决定</li><li>方法调用模式中返回值：由 return 语句决定</li><li>构造函数调用模式中的返回值：</li></ol><ul><li>(1). 如果构造函数没有手动设置返回值，那么会返回构造函数的实例</li><li>(2). 如果手动给构造函数添加了返回值，有以下2种情况：<ul><li>(a). 返回值是值类型：最终的返回值还是构造函数的实例</li><li>(b). 返回值是引用类型(对象)：最终的返回值就是该对象</li></ul></li></ul><ol><li>上下文调用模式中的返回值：由 return 语句决定</li></ol><h2 id="函数的实参和形参"><a href="#函数的实参和形参" class="headerlink" title="函数的实参和形参"></a>函数的实参和形参</h2><h3 id="函数的可选形参"><a href="#函数的可选形参" class="headerlink" title="函数的可选形参"></a>函数的可选形参</h3><p>当调用函数的时候传入的实参比函数声明时指定的形参个数要少，剩下的形参都将设置为 undefined 值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPropertyName</span>(<span class="params">o, <span class="regexp">/*可选的*/</span> a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a === <span class="literal">undefined</span>) a = [];  <span class="comment">// 如果未定义，赋值一个新数组</span></span><br><span class="line">  <span class="comment">// 上面这句代码可以替换成 a = a || []; // 这才是习惯写法</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> property <span class="keyword">in</span> a) a.push(property);</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = getPropertyName(o);</span><br><span class="line">getPropertyNames(o, p); <span class="comment">// 将 ｐ 的属性追加到数组 a 中</span></span><br></pre></td></tr></table></figure><p>注意： 需要定义可选的实参来实现函数时，需要将可选的实参放在实参列表的最后。</p><h3 id="可变长的实参列表、实参对象"><a href="#可变长的实参列表、实参对象" class="headerlink" title="可变长的实参列表、实参对象"></a>可变长的实参列表、实参对象</h3><p>当调用函数时传入的实参个数超过函数定义时的形参个数时，没有办法直接获得未命名值的引用。函数的参数对象解决了这个问题。</p><p>在函数体内部， 标识符 arguments 指向实参对象的引用，实参对象包含一个 length 属性，是一个伪数组。、</p><p>实参的重要用途是可以操作任意数量的实参。</p><p>在非严格模式下，当一个函数包含若干个形参，实参对象的数组元素是函数形参所对应实参的别名，实参对象中以数字索引，并且形参名称可以认为是相同变量的不同命名。</p><p>严格模式下，arguments 对象变成了一个保留字，不能给其赋值，也不能使用 arguments 作为形参名或者局部变量名，也不能给 arguments 赋值。</p><h3 id="callee-和-caller-属性"><a href="#callee-和-caller-属性" class="headerlink" title="callee 和 caller 属性"></a>callee 和 caller 属性</h3><p>callee 指向当前正在执行的函数。</p><p>caller 是非标准的，但大多数函数实现了这个属性。指的是调用当前正在执行的函数的函数。</p><h3 id="将对象的属性作为实参"><a href="#将对象的属性作为实参" class="headerlink" title="将对象的属性作为实参"></a>将对象的属性作为实参</h3><p>JavaScript 中，可以通过 <code>键/值</code> 对的形式来传入参数，这样当一个函数中的参数有很多的时候，不需要记住传入的顺序。</p><p>这种风格调用的函数，传入的实参都写进一个单独的对象中，在调用的时候传入一个对象，对象中的 <code>键/值</code>对是真正需要的实参数据。如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将原始数组中的 length 元素复制到目标数组中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arraycopy</span>(<span class="params"><span class="regexp">/* array */</span> from, </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="regexp">/* index */</span> form_start, </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="regexp">/* array */</span> to, </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="regexp">/* index */</span> to_start, </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="regexp">/* integer */</span> length</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 代码段</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 这种方式效率较低，但不必记住参数顺序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">easycopy</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">    arraycopy(args.from,</span><br><span class="line">        args.from_start || <span class="number">0</span>,</span><br><span class="line">        args.to,</span><br><span class="line">        args.to_start || <span class="number">0</span>,</span><br><span class="line">        args.length );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用 easycopy 方法</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], b = [];</span><br><span class="line">easycopy(&#123;<span class="attr">from</span>: a, <span class="attr">to</span>: b, <span class="attr">length</span>: <span class="number">4</span>&#125;);</span><br></pre></td></tr></table></figure><p>可以使用以上这种代码来适当使用文档说明自己的函数的参数</p><h3 id="实参类型"><a href="#实参类型" class="headerlink" title="实参类型"></a>实参类型</h3><p>JavaScript 方法的形参并未声明类型，在形参传入函数之前没有做任何类型检测。在定义函数的时候，需要添加类型判断。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArrayLike</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o &amp;&amp; <span class="keyword">typeof</span> o === <span class="string">"object"</span> </span><br><span class="line">    &amp;&amp; <span class="built_in">isFinite</span>(o.length)</span><br><span class="line">    &amp;&amp; o.length &gt;=<span class="number">0</span> </span><br><span class="line">    &amp;&amp; o.length === <span class="built_in">Math</span>.floor(o.length)</span><br><span class="line">    &amp;&amp; o.length &lt; <span class="number">4294967296</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; argument.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> element = <span class="built_in">arguments</span>[i], n;</span><br><span class="line">        <span class="keyword">if</span> (element == <span class="literal">null</span>) <span class="keyword">continue</span>;          <span class="comment">// 忽略 null 和 undefined 实参</span></span><br><span class="line">        <span class="keyword">if</span> (isArray(element))                   <span class="comment">// 如果实参是数组</span></span><br><span class="line">            n = sum.apply(<span class="keyword">this</span>, element);       <span class="comment">// 递归地计算累加...</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> element === <span class="string">'function'</span>) <span class="comment">// 是函数</span></span><br><span class="line">            n = <span class="built_in">Number</span>(element());              <span class="comment">// 调用并做类型转换</span></span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            n = <span class="built_in">Number</span>(element);                <span class="comment">// 否则直接做类型转换         </span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isNaN</span>(n))                           <span class="comment">// 如果无法转换为数字，抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">"sum(): can't convert "</span> + element + <span class="string">" to number"</span>);</span><br><span class="line">        total += n; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="作为值的函数"><a href="#作为值的函数" class="headerlink" title="作为值的函数"></a>作为值的函数</h2><p>JavaScript 中的函数不仅仅是一种语法，也是值，可以将函数赋值给变量，也可以存储在对象的属性或数组的元素中，还可以作为参数传入另外一个函数等。</p><p>比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x*x;&#125;, <span class="number">20</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="number">0</span>](a[<span class="number">2</span>]));  <span class="comment">// =&gt; 400</span></span><br></pre></td></tr></table></figure><h3 id="自定义函数的属性"><a href="#自定义函数的属性" class="headerlink" title="自定义函数的属性"></a>自定义函数的属性</h3><p>JavaScript 中的函数并不是原始值，而是一个种特殊的对象，也就是说，函数可以拥有属性。当函数需要一个”静态” 变量来在调用时保持某个值不变，最方便的方式就是给函数定义属性，而不是定义全局变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">uniquInteger.counter = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniquInteger</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> uniquInteger.counter++; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算阶乘的函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isFinite</span>(n) &amp;&amp; n &gt; <span class="number">0</span> &amp;&amp; n == <span class="built_in">Math</span>.round(n)) &#123; <span class="comment">// 有限的正整数</span></span><br><span class="line">        <span class="keyword">if</span> (!(n <span class="keyword">in</span> factorial)) </span><br><span class="line">            factorial[n] = n * factorial(n<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> factorial[n]; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">NaN</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(factorial[<span class="number">1</span>]); <span class="comment">// 初始化</span></span><br></pre></td></tr></table></figure><h2 id="作为命名空间的函数"><a href="#作为命名空间的函数" class="headerlink" title="作为命名空间的函数"></a>作为命名空间的函数</h2><p>命名空间内定义的变量不会污染全局变量，这就解决环境中变量冲突问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 模块代码段</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个用来将第二个以及后续参数复制至第一个参数</span></span><br><span class="line"><span class="comment">// 如果 o 的属性拥有了一个不可枚举的同名属性，则 for/in 循环</span></span><br><span class="line"><span class="comment">// 不会枚举对象 o 的可枚举属性</span></span><br><span class="line"><span class="keyword">var</span> extend = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 在修复之前，先检测 bug 是否存在</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> &#123;<span class="attr">toString</span>: <span class="literal">null</span>&#125;) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 代码执行到这里，for/in 循环会正确工作并返回</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> source = <span class="built_in">arguments</span>[i];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> source) o[prop] = source[prop];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 代码执行到这里，说明 for/in 不会枚举测试对象的 toString 属性</span></span><br><span class="line">    <span class="comment">// 如果返回的另一个版本的 extend() 函数，这个函数是显式测试 Object.prototype中的不可枚举属性</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">patched_extend</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> source = <span class="built_in">arguments</span>[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> source) o[prop] = source[prop];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; protoprops.length; i++) &#123;</span><br><span class="line">                prop = protoprops[j];</span><br><span class="line">                <span class="keyword">if</span> (source.hasOwnProperty(prop)) o[prop] = source[prop];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 列出了需要检测的特殊属性</span></span><br><span class="line">    <span class="keyword">var</span> protoprops = [<span class="string">"toString"</span>, <span class="string">"valueOf"</span>, <span class="string">"constructor"</span>, <span class="string">"hasOwnProperty"</span>,</span><br><span class="line">        <span class="string">"isPrototypeOf"</span>, <span class="string">"propertyIsEnumerable"</span>, <span class="string">"toLocaleString"</span></span><br><span class="line">    ];</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><h2 id="js-词法分析"><a href="#js-词法分析" class="headerlink" title="js 词法分析"></a>js 词法分析</h2><h3 id="程序执行过程"><a href="#程序执行过程" class="headerlink" title="程序执行过程"></a>程序执行过程</h3><ol><li>读取代码，主关注声明的部分：var</li><li>判断var后面的名字是否已经被标记，如果没有被标记过，就标记</li><li>读取完毕后，代码从上往下，从左往右依次执行</li></ol><h3 id="词法作用域（作用域：变量可以使用到不能使用的范围）"><a href="#词法作用域（作用域：变量可以使用到不能使用的范围）" class="headerlink" title="词法作用域（作用域：变量可以使用到不能使用的范围）"></a>词法作用域（作用域：变量可以使用到不能使用的范围）</h3><blockquote><p>词法作用域就是描述变量的访问范围：</p></blockquote><ol><li>在代码中只有函数可以限定作用范围，允许函数访问外部的变量</li><li>在函数内优先访问内部声明的变量，如果没有才会访问外部的</li><li>所有变量的访问规则，按照预解析规则来访问</li></ol><p>作用域链：</p><p>每一个函数具有独立作用域，由于函数内可以套函数，所以在函数内部访问变量的时候，需要一级一级的往上查找该变量，这样就好像构成了一个链式结构，把它称之为作用域链。</p><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>开启严格模式：”use strict”;</p><ol><li>严格模式中禁止给一个未声明的变量赋值：</li><li>严格模式中eval具有了独立作用域——&gt;在eval中声明的变量和函数都是局部变量</li><li>严格模式中禁止使用arguments.callee进行递归调用</li></ol><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>JavaScript 函数的执行依赖于变量作用域，这个作用域在函数定义时决定的，而不是函数调用的时候决定的。为了实现这种词法作用域, JavaScript 函数对象的内部状态不仅仅包含函数的代码逻辑，还必须引用当前的作用域， JavaScript 函数对象的内部状态不仅包含函数代码逻辑，还必须引用当前的作用域链。函数对象可以通过作用域链相互关联起来，函数体内部的变量都可以保存在函数作用域内，这种特性称闭包。</p><p>函数定义时的定义作用域链到函数执行时依然有效。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用闭包实现的私有属性存取器方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addPrivateProperty</span> (<span class="params">o, name, predicate</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value;</span><br><span class="line">    o[<span class="string">"get"</span> + name] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> value; &#125;;</span><br><span class="line">    o[<span class="string">"set"</span> + name] = <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (predicate &amp;&amp; !predicate(v))</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">"set"</span> + name + <span class="string">": invalid value "</span> + v);</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            value = v;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">addPrivateProperty(o, <span class="string">"Name"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">typeof</span> x == <span class="string">"string"</span>&#125;);</span><br><span class="line">o.setName(<span class="string">"Hiraku"</span>);  <span class="comment">// 设置属性值</span></span><br><span class="line"><span class="built_in">console</span>.log(o.getName); <span class="comment">// 获取属性值</span></span><br><span class="line">o.setName(<span class="number">0</span>);  <span class="comment">// 试图设置一个错误的值</span></span><br></pre></td></tr></table></figure><p>闭包的一个应用: 模块化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//面向对象——&gt;模块化</span></span><br><span class="line"><span class="keyword">var</span> SongManager2=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f3</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">SongManager</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    SongManager.prototype=&#123; <span class="comment">//原型对象</span></span><br><span class="line">        init:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            f1();</span><br><span class="line">            f2();</span><br><span class="line">            f3();<span class="comment">//这3个功能：如果业务逻辑非常复杂，需要把这些方法拆分掉，</span></span><br><span class="line">            <span class="comment">//     并且这些方法不能让用户随便调用，用一些函数封装一下</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//原型对象中的方法对于子对象是完全公开的，对象可以随意调用</span></span><br><span class="line">        init1:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">        init2:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> SongManager;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><h3 id="闭包实现思路：外层函数，内层函数"><a href="#闭包实现思路：外层函数，内层函数" class="headerlink" title="闭包实现思路：外层函数，内层函数"></a>闭包实现思路：外层函数，内层函数</h3><ul><li>通常设置外层函数的返回值就是内层函数</li><li>也可以让外层函数的返回值是一个对象（方法)</li><li>如果需要保存一个数据(外层函数的同一个变量)，让内层函数调用多次，该变量的值都是共享的</li><li>如果需要保存多个数据(外层函数的同一个变量)，让外层函数调用多次</li></ul><h2 id="函数的属性、方法和构造函数"><a href="#函数的属性、方法和构造函数" class="headerlink" title="函数的属性、方法和构造函数"></a>函数的属性、方法和构造函数</h2><p>JavaScript 中的函数是值， 使用 typeof 方法得到的结果是 “function”，但是函数是 JavaScript 中的特殊的对象，也可以拥有属性和方法。甚至可以用 Function()构造函数来创建新的函数对象。</p><h3 id="length-属性"><a href="#length-属性" class="headerlink" title="length 属性"></a>length 属性</h3><p>在函数体里， arguments.length 表示传入函数的实参的个数。而函数本事的 length 属性是只读的，它代表函数形参数量，即函数定义时时给出的实参个数，通常也是函数在调用时期望传入的个数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断所传入的实参个数是否正确</span></span><br><span class="line"><span class="comment">// 该函数使用 arguments.callee 不能在严格模式下调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> actual = args.length;</span><br><span class="line">    <span class="keyword">var</span> expected = args.callee.length;</span><br><span class="line">    <span class="keyword">if</span> (actural !== expected) </span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">"Expected "</span> + expected + <span class="string">"args; got "</span> + actual);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">    check(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="prototype-属性"><a href="#prototype-属性" class="headerlink" title="prototype 属性"></a>prototype 属性</h3><p>每一个函数都包含一个 prototype 属性，该属性指向一个对象的引用，这个对象称为原型对象。下一篇文章将深入分析。</p><h3 id="call-方法和-apply-方法"><a href="#call-方法和-apply-方法" class="headerlink" title="call() 方法和 apply() 方法"></a>call() 方法和 apply() 方法</h3><p>call() 和 apply() 的第一个实参是要调用函数的母体对象，它是调用上下文，在函数体内通过 this 来获得对它的引用。</p><p>在严格模式中，call() 和 apply() 的第一个实参都会变成 this 的值，哪怕传入的是 null 或 undefined。在严格模式下，传入 null 或 undefined 的时候都会被全局对象代替。</p><h3 id="call-apply区别"><a href="#call-apply区别" class="headerlink" title="call/apply区别"></a>call/apply区别</h3><ol><li><p>相同点：</p><ul><li>(1) 都是Function.prototype对象中定义的方法</li><li>(2) 第一个参数都是表示函数内部的this的值</li></ul></li><li><p>不同点：</p></li></ol><ul><li>如果需要给函数传递参数的时候:<ul><li>利用call方法，将函数的参数从第二个参数开始依次排开</li><li>apply方法的第二个参数是一个数组对象，数组的第一个参数表示函数的第一个实参，依次以此类推</li></ul></li></ul><h3 id="apply的一个漂亮的应用"><a href="#apply的一个漂亮的应用" class="headerlink" title="apply的一个漂亮的应用"></a>apply的一个漂亮的应用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> points = [</span><br><span class="line">        &#123; <span class="attr">x</span>: <span class="number">110</span>, <span class="attr">y</span>: <span class="number">50</span>&#125;, &#123; <span class="attr">x</span>: <span class="number">130</span>, <span class="attr">y</span>: <span class="number">60</span> &#125;, &#123; <span class="attr">x</span>: <span class="number">20</span>, <span class="attr">y</span>: <span class="number">70</span> &#125;, &#123; <span class="attr">x</span>: <span class="number">60</span>, <span class="attr">y</span>: <span class="number">50</span> &#125;</span><br><span class="line">    ];</span><br><span class="line"><span class="keyword">var</span> maxX = <span class="built_in">Math</span>.max.apply( <span class="literal">null</span>, points.map(<span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123; <span class="keyword">return</span> v.x; &#125;));</span><br></pre></td></tr></table></figure><p>以上代码中借用Math对的max方法，利用arr.map()方法中返回的是数组这一特性得到了数组中对象的某个属性的最大值。</p><h3 id="将当前函数的-arguments-数组直接传入-apply-来调用另一个函数"><a href="#将当前函数的-arguments-数组直接传入-apply-来调用另一个函数" class="headerlink" title="将当前函数的 arguments 数组直接传入 apply() 来调用另一个函数"></a>将当前函数的 arguments 数组直接传入 apply() 来调用另一个函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将对象 o 中的方法替换为另一个方法</span></span><br><span class="line"><span class="comment">// 可以在调用原始方法之前和之后记录日志消息</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trace</span>(<span class="params">o, m</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> original = o[m]; <span class="comment">// 在闭包中保存原有方法</span></span><br><span class="line">    o[m] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 定义新方法</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="string">"Entering:"</span>, m); <span class="comment">// 输出日志消息</span></span><br><span class="line">      <span class="keyword">var</span> result = original.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>); <span class="comment">// 调用原始函数</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="string">"Exiting:"</span>, m); <span class="comment">// 输出日志消息</span></span><br><span class="line">      <span class="keyword">return</span> result; <span class="comment">// 返回结果</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>trace 方法接收两个参数，一个对象和一个方法名，它将制定的方法替换为一个新的方法。</p><h3 id="bind-方法"><a href="#bind-方法" class="headerlink" title="bind() 方法"></a>bind() 方法</h3><p>bind() 方法在 Function 的原型对象上</p><p>bind 方法是 ECMAScript 5 的新方法，用途是将函数绑定到某个对象。当函数 f() 上调用 bind 方法并传入一个对象 o 作为参数，这个方法返回一个新的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">y</span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.x + y; &#125;; </span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> g = f.bind(o);</span><br><span class="line"><span class="built_in">console</span>.log(g(<span class="number">2</span>));  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>bind() 简单绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回一个函数，通过调用它来调用 o 中的方法 f(), 传递它所有的实参</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">f, o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (f.bind) <span class="keyword">return</span> f.bind(o);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> f.apply(o, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ECMAScript 5 的 bind() 方法不仅仅是将函数绑定到一个对象，它还可以附带一些其它应用：除了第一个参数外，传入 bind() 的实参也会绑定到 this。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123; <span class="keyword">return</span> x + y; &#125;;</span><br><span class="line"><span class="comment">// 创建一个类似 sum 的函数，但 this 的值绑定到 null</span></span><br><span class="line"><span class="comment">// 并且第一个参数绑定到 1，这个新的函数期望只传入一个实参</span></span><br><span class="line"><span class="keyword">var</span> succ = sum.bind(<span class="literal">null</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(succ(<span class="number">2</span>));  <span class="comment">// 3: x 绑定到 1， 并传入 2 作为实参 y</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">y,z</span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.x + y + z &#125;;</span><br><span class="line"><span class="keyword">var</span> g = f.bind(&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(g(<span class="number">3</span>));  <span class="comment">// 6: this.x 绑定到 1，y 绑定到 2， z 绑定到 3</span></span><br></pre></td></tr></table></figure><h3 id="bind-的兼容方法"><a href="#bind-的兼容方法" class="headerlink" title="bind() 的兼容方法"></a>bind() 的兼容方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Function</span>.prototype.bind) &#123;</span><br><span class="line">    <span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span> (<span class="params">o <span class="regexp">/*, args*/</span></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 将 this 和 arguments 的值保存到变量中</span></span><br><span class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>, boundArgs = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> args = [], i;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; boundArgs.length; i++) args.push(boundArgs[i]);</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) args.push(<span class="built_in">arguments</span>[i]);</span><br><span class="line">            <span class="keyword">return</span> self.apply(o, args);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ECMAScript 5 的 bind() 方法返回的函数不包含 prototype 属性，并且将这些绑定的函数用作构造函数时所创建的对象从原始的未绑定的构造函数中继承 prototype 。</p><h3 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString() 方法"></a>toString() 方法</h3><p>函数也有 toString() 方法，大多数函数的 toString() 方法返回包含函数体本身的字符串。</p><h3 id="静态属性和实例属性"><a href="#静态属性和实例属性" class="headerlink" title="静态属性和实例属性"></a>静态属性和实例属性</h3><ol><li>给函数添加一个属性（静态属性——&gt;函数对象自身的属性）</li><li>给某个构造函数的实例添加的属性：实例属性</li></ol><h3 id="所有的函数对象都共有的一些静态属性"><a href="#所有的函数对象都共有的一些静态属性" class="headerlink" title="所有的函数对象都共有的一些静态属性"></a>所有的函数对象都共有的一些静态属性</h3><ol><li>name：获取函数的名称</li><li>length：表示函数形参的个数</li><li>caller：表示当前函数调用是在哪个函数内</li></ol><h3 id="Function-构造函数"><a href="#Function-构造函数" class="headerlink" title="Function() 构造函数"></a>Function() 构造函数</h3><p>Function() 构造函数可以传入任意数量的字符串实参，最后一个实参所表示的文本就是函数体，它可以包含任意的 JavaScript 语句，每两条语句之间用分号分隔。传入构造函数的其它所有字符串是指定函数的形参名字的字符串。如果定义的函数不包含任何参数，只需要给构造函数简单的传入一个字符串，即函数体。</p><p>注： Function() 构造函数并不需要通过传入实参以指定函数名。就像函数的直接量一样，Function() 构造函数创建一个匿名函数。</p><ul><li>Function() 构造函数允许 JavaScript 在运行时动态地创建并编译函数</li><li>每次调用 Function() 构造函数都会解析函数体，并创建函数对象</li><li>Function() 构造函数创建的函数并不使用词法作用域，函数体代码的编译总是会在顶层函数执行。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">"global"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">constructFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> scope = <span class="string">"local"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"return scope"</span>);  <span class="comment">// 这里无法使用局部作用域的变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过 Function() 构造函数定义的函数使用的不是局部作用域</span></span><br><span class="line"><span class="built_in">console</span>.log(constructFunction()());   <span class="comment">// "golobal"</span></span><br></pre></td></tr></table></figure><p>可以认为 Function() 构造函数是在全局作用域中执行的 eval(); eval() 可以在自己的私有作用域内定义新变量和函数。 Function() 很少用到。</p><h3 id="可调用的对象"><a href="#可调用的对象" class="headerlink" title="可调用的对象"></a>可调用的对象</h3><p>类似于 所有的”伪数组”，对于函数也存在类似的情况。”可调用对象” 是一个对象，可以在函数调用表达式中调用这个对象。所有的函数都是可调用的，但并非所有的可调用对象都是函数。</p><p>可调用对象在两个 JavaScript 实现中不能算作函数。首先，IE Web 浏览器实现了客户端方法，比如 Window.alert(), Document.getElementById(), 使用了可调用的宿主对象，而不是内置函数对象。</p><p>另一个可调用对象是 RegExp 对象，可以直接调用 RegExp 对象，这比调用它的 exec() 方法更快一些。这是 JavaScript 中的一个非标准特性，使用typeof 运算的结果并不统一。</p><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><h3 id="使用函数处理数组"><a href="#使用函数处理数组" class="headerlink" title="使用函数处理数组"></a>使用函数处理数组</h3><p>ECMAScript 3 中没有数组的 map() 和 reduce() 函数，封装兼容的 map() 和 reduce()。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于数组的每个元素调用函数，返回一个数组</span></span><br><span class="line"><span class="keyword">var</span> map = <span class="built_in">Array</span>.prototype.map </span><br><span class="line">  ? <span class="function"><span class="keyword">function</span>(<span class="params">a, callback</span>) </span>&#123; <span class="keyword">return</span> a.map(callback); &#125; </span><br><span class="line">  : <span class="function"><span class="keyword">function</span>(<span class="params">a, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> results = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = a.length; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i <span class="keyword">in</span> a) results[i] = callback.call(<span class="literal">null</span>, a[i], i, a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="comment">// 如果函数 callback 和可选的初始值将数组 a 减至一个值</span></span><br><span class="line"><span class="keyword">var</span> reduce = <span class="built_in">Array</span>.prototype.reduce</span><br><span class="line">  ? <span class="function"><span class="keyword">function</span>(<span class="params">a, callback, initial</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">2</span>) </span><br><span class="line">      <span class="keyword">return</span> a.reduce(callback, initial);   <span class="comment">// 如果传入了一个初始值</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.reduce(callback); <span class="comment">// 否则没有初始值</span></span><br><span class="line">  &#125;</span><br><span class="line">  : funciton(a, callback, initial) &#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>, len = a.length, accumulator;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &gt; <span class="number">2</span>) accumulator = initial;</span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="comment">// 找到数组中已定义的索引</span></span><br><span class="line">      <span class="keyword">if</span> (len == <span class="number">0</span>) <span class="keyword">throw</span> <span class="built_in">TypeError</span>();</span><br><span class="line">      <span class="keyword">while</span>(i &lt; len) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i <span class="keyword">in</span> a) &#123;</span><br><span class="line">          accumulator = a[i++];</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> i++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (i == len) <span class="keyword">throw</span> <span class="built_in">TypeError</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对数组剩余的元素依次调用 callback</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i <span class="keyword">in</span> a)</span><br><span class="line">        accumulator = callback.call(<span class="literal">undefined</span>, accumulator, a[i], i, a);</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> accumulator;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h2 id="递归：函数自己调用自己"><a href="#递归：函数自己调用自己" class="headerlink" title="递归：函数自己调用自己"></a>递归：函数自己调用自己</h2><h3 id="计算斐波那契数列第n项的值：1-1-2-3-5-8-13…"><a href="#计算斐波那契数列第n项的值：1-1-2-3-5-8-13…" class="headerlink" title="计算斐波那契数列第n项的值：1,1,2,3,5,8,13…"></a>计算斐波那契数列第n项的值：1,1,2,3,5,8,13…</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span> || n==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> fibonacci(n<span class="number">-1</span>)+fibonacci(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123; <span class="built_in">console</span>.log(fibonacci(i+<span class="number">1</span>)); &#125;</span><br></pre></td></tr></table></figure><h3 id="递归计算阶乘"><a href="#递归计算阶乘" class="headerlink" title="递归计算阶乘"></a>递归计算阶乘</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//为了防止报错</span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//递归的结束条件：0的阶乘为1</span></span><br><span class="line">    <span class="keyword">return</span> factorial(n<span class="number">-1</span>)*n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123; <span class="built_in">console</span>.log(<span class="string">"数字："</span>+i); <span class="built_in">console</span>.log(factorial(i));&#125;</span><br></pre></td></tr></table></figure><h3 id="m的n次方"><a href="#m的n次方" class="headerlink" title="m的n次方"></a>m的n次方</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pow</span>(<span class="params">n, m</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (m === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (m &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> / (pow(n, -(m + <span class="number">1</span>)) * n);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (m &gt; <span class="number">0</span>) <span class="keyword">return</span> pow(n, m - <span class="number">1</span>) * n;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">-2</span>; i &lt;= <span class="number">0</span>; i++) &#123; <span class="built_in">console</span>.log(pow(<span class="number">2</span>, i)); &#125;</span><br></pre></td></tr></table></figure><h3 id="递归查找父元素"><a href="#递归查找父元素" class="headerlink" title="递归查找父元素"></a>递归查找父元素</h3><p>需求：要判断一个div是否在另一个div的下面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params">child,parent</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//实现思路：由子元素一级一级的查找父元素</span></span><br><span class="line">    <span class="comment">//递归的结束条件：查到了文档的根节点、找到了父元素</span></span><br><span class="line">    <span class="keyword">if</span>(child.parentNode===parent) <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//说明已经找到了符合条件的父元素</span></span><br><span class="line">    <span class="keyword">if</span>(child.parentNode===<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//说明已经查找到了文档的根节点</span></span><br><span class="line">    <span class="keyword">return</span> find(child.parentNode,parent);</span><br><span class="line">    <span class="comment">//第1次执行find——&gt;child.parentNode===parent</span></span><br><span class="line">    <span class="comment">//第2次执行find——&gt;child.parentNode.parentNode===parent</span></span><br><span class="line">    <span class="comment">//第3次执行find——&gt;child.parentNode.parentNode.parentNode===parent</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(find(d3,d10));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(find(d3,d1));<span class="comment">//true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js 高程中这样定义函数：函数是这样一段 JavaScript 代码，只定义一次，但可以被执行任意多次。JavaScript 的函数是参数化的：函数的定义会包括一个称为形参和标识符列表，这些参数在函数体中就像局部变量一样工作。函数的调用会为形参提供实参的值。函数使用它们实参的值来计算返回值，成为该函数调用表达式的值。出来实参之外，每次调用还会拥有另一个值-本次调用的上下文-这就是 &lt;code&gt;this&lt;/code&gt; 关键字的值。&lt;/p&gt;
&lt;p&gt;如果函数挂载在一个对象上，作为对象的一个方法调用，就称之为 &lt;code&gt;对象的方法&lt;/code&gt;。当通过这个对象来调用函数时，该对象就是此次调用的上下文，也就是该函数的 this 的值。&lt;/p&gt;
&lt;p&gt;用于初始化一个新建的对象的函数成为&lt;code&gt;构造函数&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在 JavaScript 里，函数即对象。可以把函数赋值给变量，或者作为参数传递给其他函数。&lt;/p&gt;
&lt;p&gt;JavaScript 的函数可以嵌套在其他函数中定义，这样就可以访问它们被定义时所处的作用域中的任何变量。这意味着 JavaScript 函数构成了一个闭包。&lt;/p&gt;
    
    </summary>
    
      <category term="JS系列" scheme="http://yoursite.com/categories/JS%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js String对象</title>
    <link href="http://yoursite.com/2015/06/28/js%20String%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2015/06/28/js String对象/</id>
    <published>2015-06-27T16:00:00.000Z</published>
    <updated>2018-05-31T01:32:43.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h2><p>String 类型是字符串的对象包装类型。创建方式有两种：</p><ul><li>var strObject = new String(“abc”);</li><li>var strValue = “abc”;<br>其中，继承的 valueOf()，toLocaleString()，toString() 方法，都返回对象所表示的基本字符串值。</li></ul><p>String 类型的实例都有一个 length 属性，表示包含多少个字符，可以用来获取字符串的长度。</p><a id="more"></a><h2 id="字符方法"><a href="#字符方法" class="headerlink" title="字符方法:"></a>字符方法:</h2><h3 id="charAt-和-charCodeAt"><a href="#charAt-和-charCodeAt" class="headerlink" title="charAt() 和 charCodeAt()"></a>charAt() 和 charCodeAt()</h3><ul><li>charAt(下标);获取该下标位置的字符串</li><li>charCodeAt(下标);获取对应下标字符串的ASCII的码值<ul><li>charAt() 和 charCodeAt() 方法接收一个参数，即基于 0 的字符位置</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abc"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">1</span>));  <span class="comment">// "a"</span></span><br></pre></td></tr></table></figure><ul><li>concat(字符串);<ul><li>拼接字符串，用于将一个或多个字符串拼接起来，得到新串</li><li>concat 可以接收任意多个参数</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abc"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.concat(<span class="string">"de"</span>, <span class="string">"fgh"</span>)); <span class="comment">// "abcdefgh"</span></span><br></pre></td></tr></table></figure><h3 id="slice-、substring-和-substr"><a href="#slice-、substring-和-substr" class="headerlink" title="slice()、substring() 和 substr()"></a>slice()、substring() 和 substr()</h3><ul><li>slice(开始下标,结束下标);截取一段字符串的</li><li>substring(开始的下标,结束的下标);截取指定部分的字符串</li><li>substr(开始的下标，截取的个数);截取指定长度的字符串<ul><li>slice(), substring(), substr() 这三个方法都会返回被操作字符串的一个子串</li><li>都接受一个或两个参数</li><li>第二个参数表示子字符串到哪里结束</li><li>slice() 和 substring() 第二个参数是子字符串最后一个字符后面的位置</li><li>substr() 的第二个参数是指返回的字符个数</li><li>如果没有给这三个方法指定第二个参数，则将字符串的长度作为结束位置。</li><li>这几个方法都返回新字符串，不影响原字符串.</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;Hello World&quot;;</span><br><span class="line">console.log(str.slice(3));  // &quot;Hello World&quot;</span><br><span class="line">console.log(str.substring(3)); // &quot;Hello World&quot;</span><br><span class="line">console.log(str.substr(3)); // &quot;Hello World&quot;</span><br><span class="line">console.log(str.slice(3, 7)); // &quot;lo W&quot;</span><br><span class="line">console.log(str.subtring(3, 7)); // &quot;lo W&quot;</span><br><span class="line">console.log(str.subtr(3, 7)); // &quot;lo Worl&quot;</span><br></pre></td></tr></table></figure><ul><li>传入负值时，slice() 方法会将传入的负值与字符串的长度相加</li><li>substr() 方法将负的第一个参数加载字符串的长度，而将负的第二个参数转为 0</li><li>substring() 方法会把所有负值参数都转换为 0 。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Hello World"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">-3</span>));  <span class="comment">// "rld"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">-3</span>)); <span class="comment">// "Hello World"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substr(<span class="number">-3</span>)); <span class="comment">// "rld"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">3</span>, <span class="number">-4</span>)); <span class="comment">// "lo W" 会将传入的负值与字符串的长度相加，第二个值转成了7</span></span><br><span class="line"><span class="built_in">console</span>.log(str.subtring(<span class="number">3</span>, <span class="number">-4</span>)); <span class="comment">// "Hel", 会将较小的数作为起始位置，将较大的说作为结束位置</span></span><br><span class="line"><span class="built_in">console</span>.log(str.subtr(<span class="number">3</span>, <span class="number">-4</span>)); <span class="comment">// ""</span></span><br></pre></td></tr></table></figure><h3 id="toLocaleUpperCase-、toUpperCase-、toLocaleLowerCase-、toLowerCase"><a href="#toLocaleUpperCase-、toUpperCase-、toLocaleLowerCase-、toLowerCase" class="headerlink" title="toLocaleUpperCase()、toUpperCase()、toLocaleLowerCase()、toLowerCase()"></a>toLocaleUpperCase()、toUpperCase()、toLocaleLowerCase()、toLowerCase()</h3><ul><li>toLocaleUpperCase 字符串转大写, 针对特定地区</li><li>toUpperCase 字符串转大写</li><li>toLocaleLowerCase 字符串转小写, 针对特定地区</li><li>toLowerCase 字符串转小写</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Hello World"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.toLocaleUpperCase());  <span class="comment">// "HELLO WORLD"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toUpperCase());  <span class="comment">// "HELLO WORLD"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toLocaleLowerCase());  <span class="comment">// "hello world"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toLowerCase());  <span class="comment">// "hello world"</span></span><br></pre></td></tr></table></figure><h3 id="indexOf-和-lastIndexOf"><a href="#indexOf-和-lastIndexOf" class="headerlink" title="indexOf() 和 lastIndexOf()"></a>indexOf() 和 lastIndexOf()</h3><ul><li>indexOf 查找指定的字符串，找到则返回下标，找不到返回-1</li><li>lastIndexOf 从后面向前面找指定的字符串，找不到也是返回的是-1<ul><li>indexOf() 和 lastIndexOf() 方法都是从一个字符串中搜索给定的子字符串，</li><li>返回子字符串的位置</li><li>找不到则返回 -1</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Hello World"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"o"</span>));  <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">"o"</span>));  <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><ul><li>indexOf() 和 lastIndexOf() 方法都可以接收第二个参数，表示从字符串中的哪个位置开始搜索</li><li>indexOf() 会从指定位置向后搜索，忽略指定位置之前的</li><li>lastIndexOf() 会从指定位置向前搜索，忽略指定位置之后的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Hello World"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">"o"</span>, <span class="number">6</span>));  <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">"o"</span>, <span class="number">6</span>));  <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>查找某个元素在字符串中出现的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Spell at all costs， to rush you in the future。"</span>,</span><br><span class="line">    position = [],</span><br><span class="line">    pos = str.indexOf(<span class="string">"t"</span>);</span><br><span class="line"><span class="keyword">while</span>( pos &gt; <span class="number">-1</span> )&#123;</span><br><span class="line">  position.push(pos);</span><br><span class="line">  pos = str.indexOf(<span class="string">"t"</span>, pos + <span class="number">1</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(position); <span class="comment">// [7, 16, 20, 35, 41]</span></span><br></pre></td></tr></table></figure><ul><li>trim 切掉字符串前面和后面的空格<ul><li>创建一个字符串的副本，删除前置以及后缀空格，然后返回结果</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"    Hello World   "</span>;</span><br><span class="line"><span class="keyword">var</span> strTrim = str.trim();</span><br><span class="line"><span class="built_in">console</span>.log(str);  <span class="comment">// "    Hello World   "</span></span><br><span class="line"><span class="built_in">console</span>.log(strTrim);  <span class="comment">// "Hello World"</span></span><br></pre></td></tr></table></figure><h3 id="字符串匹配模式方法"><a href="#字符串匹配模式方法" class="headerlink" title="字符串匹配模式方法"></a>字符串匹配模式方法</h3><p>match() 直接受一个参数，要么是一个正则表达式，要么是一个 RegExp 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"cat, bat, sat, fat"</span>;</span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/.at/</span>;</span><br><span class="line"><span class="comment">// 与 pattern.exec() 方法相同</span></span><br><span class="line"><span class="keyword">var</span> matches = str.match(pattern);</span><br><span class="line"><span class="built_in">console</span>.log(matches.index);  <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]);  <span class="comment">// "cat"</span></span><br><span class="line"><span class="built_in">console</span>.log(matches);  <span class="comment">// ["cat", index: 0, input: "cat, bat, sat, fat"]</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern.lastIndex);  <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>以上的实例中 match 方法返回了一个数组； 如果是调用 RegExp 对象的 exec() 方法并,传递本例中的字符串作为参数，那么也会得到与此相同的数组：数组的第一项是与整个模式匹配的字符串，之后的每一项（如果有）保存着与正则表达式中的捕获组匹配的字符串；</p><ul><li>search() 方法<ul><li>唯一参数与 match() 方法的相同：</li><li>由字符串或 RegExp 对象指定的一个正则表达式。</li><li>该方法返回字符串中第一个匹配项的索引；</li><li>如果没有找到返回 -1</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"cat, bat, sat, fat"</span>;</span><br><span class="line"><span class="keyword">var</span> pos = str.search(<span class="regexp">/at/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(pos);  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><ul><li>replace() 方法<ul><li>两个参数：<ul><li>第一个可以是一个 RegExp 对象或者一个字符串（这个字符串不会被转成正则表示）</li><li>第二个参数可以是一个字符串或者一个函数</li></ul></li><li>如果第一个参数是字符串，只会替换第一个字符串</li><li>要替换所有，指定正则表达式，指定 g 标志</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"cat, bat, sat, fat"</span>;</span><br><span class="line"><span class="keyword">var</span> res1 = str.replace(<span class="string">"at"</span>, <span class="string">"ond"</span>);</span><br><span class="line"><span class="keyword">var</span> res2 = str.replace(<span class="regexp">/at/g</span>, <span class="string">"ond"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res1);  <span class="comment">// "cond, bat, sat, fat"</span></span><br><span class="line"><span class="built_in">console</span>.log(res2);  <span class="comment">// "cond, bond, sond, fond"</span></span><br></pre></td></tr></table></figure><ul><li>replace() 方法的第二个参数可以是函数。<ul><li>在只有一个匹配项（即与模式匹配的字符串）的情况下，会向函数传递三个参数</li><li>模式匹配项、模式匹配项在字符串中的位置和原始字符串。</li><li>在正则表达式定义了多个捕获组的情况下，</li><li>传递给函数的参数一次是模式的匹配项、第一个捕获组的匹配项、第二个捕获组的匹配项……</li><li>最后两个参数依然分别是模式匹配项在字符串中的位置和原始字符串。</li><li>函数返回一个字符串，表示应该被替换的匹配项。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlEscape</span>(<span class="params">text</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> text.replace(<span class="regexp">/[&lt;&gt;"&amp;]/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">match, pos, orginText</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(match)&#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"&lt;"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&amp;lt;"</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"&gt;"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&amp;gt;"</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"&amp;"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&amp;amp;"</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"\""</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&amp;quot;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(htmlEscape(<span class="string">"&lt;p class=\"greeting\"&gt;Hello World!&lt;/p&gt;"</span>));</span><br><span class="line"><span class="comment">// &amp;lt;p class=&amp;quot;greeting&amp;quot;&amp;gt;Hello World!&amp;lt;/p&amp;gt;</span></span><br></pre></td></tr></table></figure><ul><li>split 切割指定的字符串的，返回的是一个数组<ul><li>基于指定的分隔符将一个字符串分隔成多个子字符串，并将结果放在数组中</li><li>分隔符可以是一个 RegExp 对象。</li><li>可接受第二个可选的参数，指定数组中大小。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="string">"red,green,yellow,blue"</span>;</span><br><span class="line"><span class="keyword">var</span> colors1 = color.split(<span class="string">","</span>);</span><br><span class="line"><span class="built_in">console</span>.log(colors1);  <span class="comment">// ["red", "green", "yellow", "blue"]</span></span><br><span class="line"><span class="keyword">var</span> colors2 = color.split(<span class="string">","</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(colors2);  <span class="comment">// ["red", "green"]</span></span><br><span class="line"><span class="keyword">var</span> colors3 = color.split(<span class="regexp">/[^\,]+/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(colors3);  <span class="comment">//["", ",", ",", ",", ""]</span></span><br></pre></td></tr></table></figure><h3 id="localCompare"><a href="#localCompare" class="headerlink" title="localCompare()"></a>localCompare()</h3><p>此方法比较两个字符串，并返回：</p><ul><li>若字符串再字母表中排在字符串参数之前，返回一个负数，大多数情况下为 -1</li><li>若字符串邓毅字符串参数，返回 0</li><li>若字符串再字母表中排在字符串参数之后，返回一个正数，大多数情况下为 1</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"yellow"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.localCompare(<span class="string">"brick"</span>));  <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(str.localCompare(<span class="string">"yellow"</span>));  <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(str.localCompare(<span class="string">"zoo"</span>));  <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h3 id="fromCharCode"><a href="#fromCharCode" class="headerlink" title="fromCharCode()"></a>fromCharCode()</h3><p>这个方法是 String 构造函数的静态方法，接收一个多字符编码，转化为一个字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="number">104</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>)); <span class="comment">// "hello"</span></span><br></pre></td></tr></table></figure><h3 id="HTML-方法"><a href="#HTML-方法" class="headerlink" title="HTML 方法"></a>HTML 方法</h3><ul><li>anchor() <code>&lt;a name=&quot;name&quot;&gt;string&lt;/a&gt;</code></li><li>big() <code>&lt;big&gt;string&lt;/big&gt;</code></li><li>bold() <code>&lt;b&gt;string&lt;/b&gt;</code></li><li>fixd() <code>&lt;tt&gt;string&lt;/tt&gt;</code></li><li>fontcolor(color) <code>&lt;font color=&quot;color&quot;&gt;string&lt;/font&gt;</code></li><li>fontsize(size) <code>&lt;font size=&quot;size&quot;&gt;string&lt;/font&gt;</code></li><li>italics() <code>&lt;i&gt;string&lt;/i&gt;</code></li><li>link(url) <code>&lt;a href=&quot;url&quot;&gt;string&lt;/a&gt;</code></li><li>small() <code>&lt;small&gt;string&lt;/small&gt;</code></li><li>strike() <code>&lt;strike&gt;string&lt;/strike&gt;</code></li><li>sub() <code>&lt;sub&gt;string&lt;/sub&gt;</code></li><li>sup() <code>&lt;sup&gt;string&lt;/sup&gt;</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;String类型&quot;&gt;&lt;a href=&quot;#String类型&quot; class=&quot;headerlink&quot; title=&quot;String类型&quot;&gt;&lt;/a&gt;String类型&lt;/h2&gt;&lt;p&gt;String 类型是字符串的对象包装类型。创建方式有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;var strObject = new String(“abc”);&lt;/li&gt;
&lt;li&gt;var strValue = “abc”;&lt;br&gt;其中，继承的 valueOf()，toLocaleString()，toString() 方法，都返回对象所表示的基本字符串值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;String 类型的实例都有一个 length 属性，表示包含多少个字符，可以用来获取字符串的长度。&lt;/p&gt;
    
    </summary>
    
      <category term="JS系列" scheme="http://yoursite.com/categories/JS%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js的数组</title>
    <link href="http://yoursite.com/2015/06/22/js%E7%9A%84%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2015/06/22/js的数组/</id>
    <published>2015-06-21T16:00:00.000Z</published>
    <updated>2018-05-30T07:27:46.349Z</updated>
    
    <content type="html"><![CDATA[<p>数组是表示集合的值，每一个值是一个元素，每一个元素在数组中有一个位置，以数字表示，叫索引。数组继承自 Array.prototype.</p><h2 id="js的内置对象：数组Array"><a href="#js的内置对象：数组Array" class="headerlink" title="js的内置对象：数组Array"></a>js的内置对象：数组Array</h2><h2 id="数组声明"><a href="#数组声明" class="headerlink" title="数组声明"></a>数组声明</h2><ul><li>直接量方式创建数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> empty = []; <span class="comment">// 没有元素的空数组</span></span><br><span class="line"><span class="keyword">var</span> num = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>]; <span class="comment">// 有5个元素的数组</span></span><br><span class="line"><span class="keyword">var</span> misc = [<span class="number">1</span>, <span class="literal">true</span>, <span class="string">"a"</span>, ]; <span class="comment">// 有不同数据类型元素的数组</span></span><br><span class="line"><span class="keyword">var</span> misc2 = [[<span class="number">1</span>], &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;,[<span class="number">2</span>, &#123;<span class="attr">x</span>:<span class="number">2</span>, <span class="attr">y</span>: <span class="number">1</span>&#125;]];</span><br></pre></td></tr></table></figure><p>数组直接量中可以是任意的表达式。</p><ul><li>使用构造函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();<span class="comment">// 数组的构造函数 创建的是一个空数组</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"4"</span>);<span class="comment">// 只有传入一个数值的时候 才表示数组元素的个数</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>, <span class="number">4</span>, <span class="string">"abc"</span>); <span class="comment">// 显示的指定两个或多个数组元素或者数组的一个非数值元素</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="数组元素的读和写"><a href="#数组元素的读和写" class="headerlink" title="数组元素的读和写"></a>数组元素的读和写</h2><h3 id="数组的合法表达式"><a href="#数组的合法表达式" class="headerlink" title="数组的合法表达式"></a>数组的合法表达式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">"world"</span>]; </span><br><span class="line"><span class="keyword">var</span> value = a[<span class="number">0</span>]; <span class="comment">// 读取第 0 个元素</span></span><br><span class="line">a[<span class="number">1</span>] = <span class="number">10</span>; <span class="comment">// 设置值</span></span><br><span class="line"><span class="keyword">var</span> b = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">  a[length++] = i;  <span class="comment">// 将 0 - 4 的数值装到数组中</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> j = <span class="number">2</span>;</span><br><span class="line">a[j] = <span class="number">3</span>;  <span class="comment">// 写第二个元素</span></span><br><span class="line">a[j+<span class="number">1</span>] = <span class="string">"abc"</span>; <span class="comment">// 写第三个元素</span></span><br><span class="line">a[a[j]] = a[<span class="number">0</span>];  <span class="comment">// 读第 0 个元素和第 2 个元素，写第 3 个元素</span></span><br></pre></td></tr></table></figure><h3 id="数组索引和对象属性"><a href="#数组索引和对象属性" class="headerlink" title="数组索引和对象属性"></a>数组索引和对象属性</h3><p>数组是对象的特殊形式。 常规的对象如：<code>o = {}; o[1] = &quot;one&quot;; // 可以用一个整数来访问。</code>数组的索引只能是 0 ~ 2的32次幂 - 2 之间的整数，所有的索引是属性名。负数和浮点数也可以来索引数组。这种情况下转成字符串当成常规对象的属性，而非负整数字符串被使用了： <code>arr[&quot;99&quot;]</code>, 当做数组的索引，而非对象的属性。数组的索引是属性的特殊类型，因此数组的索引找不到值时不会报错，而是 undefined。</p><h2 id="数组的长度"><a href="#数组的长度" class="headerlink" title="数组的长度"></a>数组的长度</h2><p>每一个数组都有一个 length 属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="built_in">console</span>.log(arr.lengh); <span class="comment">//获取数组元素的个数</span></span><br><span class="line"><span class="comment">// length属性是动态改变的 通过arr.length可以动态追加</span></span><br></pre></td></tr></table></figure><p>可以将数组的长度设置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.length = [<span class="number">1</span>]; <span class="comment">// arr 现在为 [1];</span></span><br><span class="line">arr.length = []; <span class="comment">// 删除 arr 中的元素</span></span><br><span class="line">arr.length = <span class="number">5</span>; <span class="comment">// 长度为 4，但没有元素，相当于 new Array(5);</span></span><br></pre></td></tr></table></figure><p>ECMAScript 5，可以使用 Object.defineProperty() 来设置数组的 length 为只读的。</p><h2 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h2><p>稀疏数组是包含从 0 开始的不连续索引的数组。可以使用 Array() 构造函数或简单指定数组索引大于当前数组的长度来定义稀疏数组。还可以使用 delete 操作符来创建稀疏数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> arr[<span class="number">99</span>] = <span class="number">1</span>; <span class="comment">// 赋值添加一个元素1，length 变为 100</span></span><br><span class="line"><span class="keyword">var</span> a2 = [];</span><br><span class="line"><span class="keyword">var</span> a3 = [,]; <span class="comment">// 此时数组没有元素，长度是 1；也是稀疏数组</span></span><br></pre></td></tr></table></figure><p>注：当给直接量中省略值时不会创建稀疏数组。因为省略的值是 undefined 类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a5 = [,,,]; <span class="comment">// 不是稀疏数组</span></span><br><span class="line"><span class="keyword">var</span> a4 = [<span class="literal">undefined</span>]; <span class="comment">// 此时数组包含一个数值 undefined 类型。</span></span><br></pre></td></tr></table></figure><h2 id="数组冒泡排序"><a href="#数组冒泡排序" class="headerlink" title="数组冒泡排序"></a>数组冒泡排序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr17 = [<span class="number">56</span>,<span class="number">45</span>,<span class="number">23</span>,<span class="number">78</span>,<span class="number">67</span>,<span class="number">34</span>,<span class="number">96</span>,<span class="number">39</span>,<span class="number">44</span>,<span class="number">23</span>,<span class="number">45</span>,<span class="number">37</span>,<span class="number">85</span>];</span><br><span class="line"><span class="keyword">var</span> outer = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> inner = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr17.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span> ; j &lt; arr17.length - <span class="number">1</span> - i; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr17[j] &gt; arr17[j+<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">var</span> tempValue = arr17[j+<span class="number">1</span>];</span><br><span class="line">            arr17[j+<span class="number">1</span>] = arr17[j];</span><br><span class="line">            arr17[j] = tempValue;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        inner++;</span><br><span class="line">    &#125;</span><br><span class="line">    outer++;</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a>数组的方法</h2><ul><li>push();<ul><li>尾部追加一个或多个元素，push 一个元素与给数组 a[a.length] 赋值一样；</li><li>返回新数组长度</li><li>操作原数组，末尾追加</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line">a.push(<span class="string">"ab"</span>);</span><br><span class="line">a.push(<span class="string">"bc"</span>,<span class="string">"cd"</span>);  <span class="comment">// a = ["ab","bc","cd"];</span></span><br><span class="line">a.push(<span class="string">"123"</span>,[<span class="string">"e"</span>,<span class="string">"f"</span>]);  <span class="comment">// a = ["ab","bc","cd","123",["e","f"]];</span></span><br></pre></td></tr></table></figure><ul><li>pop();<ul><li>删除数组中最后一个元素，</li><li>返回值是被删除的这个元素</li><li>操作原数组</li></ul></li><li>shift();<ul><li>删除数组中的第一个元素，</li><li>返回值是被删除的元素</li></ul></li><li>unshift();<ul><li>向数组中第一个元素之前插入一个或多个新的元素</li><li>返回值是新数组的长度</li></ul></li><li>concat(); Array.concat() 方法创建并返回新数组<ul><li>新的数组和旧的数组拼接，产生一个新的数组</li><li>不修改原数组</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line">arr.concat([<span class="number">3</span>,<span class="number">4</span>]);  <span class="comment">// 返回 [1,2,3,4]</span></span><br><span class="line">arr.concat(<span class="number">3</span>,[<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>]]); <span class="comment">// 返回 [1,2,3,4,[5,6]]</span></span><br></pre></td></tr></table></figure><ul><li>slice(); Array.slice()方法返回指定数组的一个片段或子数组<ul><li>两个参数： 开始索引，结束索引，返回包含开始索引，不包含结束索引位置之间的所有数组元素；</li><li>指定一个参数，返回包含开始位置到数组结尾的所有元素</li><li>参数是负数，相对于最后一个位置的。如参数 -1 指定了最后一个元素，-2 是倒数第二个</li><li>从原来的数组中截取出来指定的一部分元素，产生新的数组</li><li>不操作原数组</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">a.slice (<span class="number">0</span>,<span class="number">3</span>); <span class="comment">// [0,1,2];</span></span><br><span class="line">a.slice(<span class="number">3</span>); <span class="comment">// [3,4,5]</span></span><br><span class="line">a.slice(<span class="number">1</span>,<span class="number">-1</span>); <span class="comment">// [1,2,3,4];</span></span><br><span class="line">a.slice(<span class="number">-3</span>,<span class="number">-2</span>); <span class="comment">// [3]</span></span><br></pre></td></tr></table></figure><ul><li>splice(); Array.splice()是数组中插入或删除元素的方法。<ul><li>会修改调用数组，</li><li>第一个参数是开始的下标,第二个参数是指定了删除原数组元素的个数；</li><li>如果省略了第二个参数，从开始索引位置后的元素都被删除；</li><li>可以有第三个参数，第四个参数…跟在第二个参数后的任意多个参数是需要插入原数组中的元素，从第一个参数指定的索引位置插入；</li><li>该方法返回的是删除元素组成的数组,如果没有替换则返回空数组。</li></ul></li><li>join(); 将数组中的所有元素都转化成字符串并连接到一起<ul><li>返回最终生成的字符串</li><li>是 String.split() 方法的逆向操作。String.split() 是将字符串分隔成分隔，返回数组；</li></ul></li><li>reverse();<ul><li>反转数组</li><li>操作原数组</li><li>返回操作后的逆向数组</li></ul></li><li>sort(); Array.sort() 方法将数组中的元素排序并返回排序后的数组<ul><li>操作原数组；</li><li>返回排序后的数组</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">arr, fn</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">              <span class="keyword">if</span> (fn(arr[j], arr[j + <span class="number">1</span>]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">                  arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                  arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                  flag = <span class="literal">false</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>toString()<ul><li>和不使用任何参数调用 join() 方法返回的字符串是一样的。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>].toString();  <span class="comment">// "1,2"</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,<span class="string">"c"</span>,<span class="number">5</span>]].toString(); <span class="comment">// "1,2,3,c,5"</span></span><br></pre></td></tr></table></figure><ul><li>toLocalString() 方法是 toString() 方法的本地化版本，使用本地化分隔符将这些字符串连接起来生成最终字符串。</li></ul><h2 id="ECMAScript-5-中的数组方法"><a href="#ECMAScript-5-中的数组方法" class="headerlink" title="ECMAScript 5 中的数组方法"></a>ECMAScript 5 中的数组方法</h2><p>ECMAScript 5 定义了 9 个新的数组方法来遍历、映射、过滤、检测、简化和搜索数组；大多数 ECMAScript 5 数组方法的第一个参数是一个函数，第二个参数是可选的，如果有第二个参数，则调用的函数被看做是第二个参数的方法。即在调用函数时传递的第二个参数作为它的 this 关键字的值来使用。ECMAScript 5 中的数组方法都不会修改原始数组。</p><ul><li>indexOf()和lastIndexOf(); 搜索整个数组中具有给定值的元素<ul><li>查找某个元素，</li><li>第一个参数是要查找的元素,</li><li>第二个参数是开始查找的下标,</li><li>找到则返回找到的第一个元素的索引，找不到则返回-1</li></ul></li><li>lastIndexOf();<ul><li>这个方法也是查找元素,从后面向前面找,找到则返回对应的下标,找不到则返回-1；</li><li>第二个元素可以是负数，代表相对数组末尾的偏移量；</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findall</span>(<span class="params">a, x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> results = [],</span><br><span class="line">      len = a.length,</span><br><span class="line">      index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(index &lt; len)&#123;</span><br><span class="line">    index = a.indexOf(x, index);</span><br><span class="line">    <span class="keyword">if</span> (pos === <span class="number">-1</span>) <span class="keyword">break</span>;  <span class="comment">// 未找到，完成搜索</span></span><br><span class="line">    results.push(index); <span class="comment">// 否则在数组中存储索引</span></span><br><span class="line">    index = index + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  returen results;  <span class="comment">// 返回包含索引的数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>every() 和 some(); 数组的逻辑判定，传入一个函数,判断每个数组中的元素是否满足条件；<ul><li>every() 方法针对所有的元素判断调用函数返回全为 true，则返回true；</li><li>every() 方法有一个不满足条件的则返回 false</li><li>some() 方法所有的元素判断调用函数有一个满足条件的则返回 true</li><li>some() 方法全为 false, 则返回 false</li></ul></li><li>map() 方法，将调用的数组的每个元素传递给指定的函数，并返回一个包含该函数的数组。<ul><li>返回新数组</li><li>不修改原数组</li><li>稀疏数组调用返回的还是稀疏数组<ul><li>一个例子：arr.map(Math.sqrt);<ul><li>map这个方法可以传入一个回调函数,</li><li>直接传入了一个Math.sqrt方法,sqrt方法是为某个数字开平方的</li><li>调用map方法传入Math.sqrt的时候,去掉了括号,也没有传入参数</li><li>map方法内部帮我们遍历并且传入数组的每个元素</li></ul></li></ul></li></ul></li><li>filter() 方法，返回的是调用的数组的一个子集，传递的回调函数用来逻辑判断，该函数的返回值是布尔值；<ul><li>压缩空缺或并删除 undefined 和 null 元素，也可以使用 filter();</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = a.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x !== <span class="literal">undefined</span> &amp;&amp; x !== <span class="literal">null</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="检测数组"><a href="#检测数组" class="headerlink" title="检测数组"></a>检测数组</h2><ul><li>instanceof</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Array</span>; <span class="comment">// true</span></span><br><span class="line">&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Array</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>但是在web浏览器多窗口或窗体存在时，每个全局对象有自己的一组构造函数。一个窗体中的对象不可能是另外一个窗体中构造函数和实例。因此，instanceof 操作符不能视为一个可靠的数组检测方法。</p><ul><li>isArray(); ECMAScript 5 中给出的检测数组类型的方法；<ul><li>这个方法是判断变量是不是数组</li></ul></li></ul><p>因此，封装检测数组的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isArray = <span class="built_in">Function</span>.isArray || <span class="function"><span class="keyword">function</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> o === <span class="string">"object"</span> &amp;&amp; <span class="built_in">Object</span>.prototype.toString.call(o) === <span class="string">"[object Array]"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>forEach 方法，从头至尾遍历数组，为每个元素调用指定的函数；<ul><li>三个参数，数值元素、数组索引、数组本身</li><li>无法再所有元素传递完调用函数之前终止遍历</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="comment">// 计算数组元素和值</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">  sum += v;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(sum);  <span class="comment">// sum =&gt; 15</span></span><br><span class="line">data.forEach(funciton (v,i,a) &#123;</span><br><span class="line">  a[i] = v + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(data); <span class="comment">// [2,3,4,5,6];</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 终止 forEach 循环</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foreach</span> (<span class="params">a, f, t</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123; a.forEach (f, t)&#125;</span><br><span class="line">  <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e === foreach.break) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">throw</span> e;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">foreach.break = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"StopIteration"</span>);</span><br></pre></td></tr></table></figure><ul><li>reduce()和 reduceRight()<ul><li>reduce() 和 reduceRight() 方法使用指定的函数将数组元素进行组合，生成单个值。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> sum = a.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;); <span class="comment">// 求和</span></span><br><span class="line"><span class="keyword">var</span> max = a.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (x&gt;y)?x:y;</span><br><span class="line">&#125;);  <span class="comment">// 求最大值</span></span><br></pre></td></tr></table></figure><ul><li>reduce() 两个参数：<ul><li>第一个是执行简化操作的函数。化简函数的任务就是用某种方法把两个值组合和化简为一个值，并返回简化后的值。</li><li>第二个参数是可选参数</li></ul></li><li>reduceRight() 的工作原理和 reduce() 一样，不同的是它按照数组索引从高到低处理数组；</li></ul><p>reduce() 和 reduceRight() 都能接收一个可选的参数，它指定了化简函数调用时的 this 关键值。</p><p>计算两个对象的并集，返回一个新对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [union description] 如果有重名属性，使用 p 中的属性</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; o [description]</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; p [description]</span></span><br><span class="line"><span class="comment"> * @return &#123;[type]&#125;   [description] 返回一个新对象这个对象同时拥有 o 的属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">union</span> (<span class="params">o, p</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> extend (extend(&#123;&#125;, o), p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> objs = [&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;, &#123;<span class="attr">y</span>:<span class="number">2</span>&#125;, &#123;<span class="attr">z</span>:<span class="number">3</span>&#125;];</span><br><span class="line"><span class="keyword">var</span> merged = objs.reduce(union);  <span class="comment">// &#123;x:1, y:2, z:3&#125;</span></span><br></pre></td></tr></table></figure><p>拥有同名属性时，reduce() 和 reduceRight() 方法返回值不同；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objs = [&#123;<span class="attr">x</span>:<span class="number">1</span>, <span class="attr">a</span>:<span class="number">1</span>&#125;, &#123;<span class="attr">y</span>:<span class="number">2</span>, <span class="attr">a</span>:<span class="number">2</span>&#125;, &#123;<span class="attr">z</span>:<span class="number">3</span>, <span class="attr">a</span>:<span class="number">3</span>&#125;];</span><br><span class="line"><span class="keyword">var</span> lUnion = objs.reduce(union);  <span class="comment">// &#123;x:1, y:2, z:3, a:1&#125;</span></span><br><span class="line"><span class="keyword">var</span> lUnion = objs.reduceRight(union);  <span class="comment">// &#123;x:1, y:2, z:3, a:3&#125;</span></span><br></pre></td></tr></table></figure><h2 id="ECMAScript-6-中数组新方法"><a href="#ECMAScript-6-中数组新方法" class="headerlink" title="ECMAScript 6 中数组新方法"></a>ECMAScript 6 中数组新方法</h2><ul><li>Array.prototype.find 方法用于找出第一个符合条件的数组成员。<ul><li>参数是一个回调函数，找到第一个返回 true 的数组项，然后返回该数组项；</li><li>找不到返回undefined；</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">123</span>,<span class="number">23</span>];</span><br><span class="line">arr.find(functiton(num)&#123;</span><br><span class="line">  <span class="keyword">return</span> num === <span class="number">123</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>两个静态方法<ul><li>Array.from<ul><li>将一个伪数组转成正真的数组</li></ul></li><li>Array.of<ul><li>将方法中参数都添加到一个数组中</li></ul></li></ul></li><li>操作、填充和过滤数组的方法<ul><li>Array.prototype.copyWidthin</li><li>Array.prototype.fill</li><li>Array.prototype.find<ul><li>接收一个回调函数，每一项执行调用它</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> users = [</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">'bb'</span>, <span class="attr">age</span>:<span class="number">24</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">'cc'</span>, <span class="attr">age</span>:<span class="number">32</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">'dd'</span>, <span class="attr">age</span>:<span class="number">12</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">'aa'</span>, <span class="attr">age</span>:<span class="number">16</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">'ed'</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">'aa'</span>, <span class="attr">age</span>:<span class="number">29</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="built_in">console</span>.log(users.find(<span class="function"><span class="params">u</span> =&gt;</span> u.name === <span class="string">'aa'</span>)); <span class="comment">// &#123;name: 'aa', age:16&#125;</span></span><br></pre></td></tr></table></figure><ul><li>Array.prototype.findIndex<ul><li>有关数组迭代的方法</li></ul></li><li>Array.prototype.keys</li><li>Array.prototype.values</li><li>Array.prototype.entries</li><li>Array.prototype[Symbol.iterator]</li></ul><h2 id="类数组对象-伪数组"><a href="#类数组对象-伪数组" class="headerlink" title="类数组对象(伪数组)"></a>类数组对象(伪数组)</h2><p>JavaScript 的类数组对象：把拥有数组 length 属性和对应非负整数属性的对象看着一种类型的数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">  a[i] = i * i;</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br><span class="line">a.length = i;</span><br><span class="line"><span class="comment">// 那么可以当成真正的数组遍历</span></span><br><span class="line"><span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; a.length; j++)&#123;</span><br><span class="line">  total += a[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断是否是伪数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArrayLike</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (o &amp;&amp; <span class="keyword">typeof</span> o === <span class="string">"object"</span> </span><br><span class="line">  &amp;&amp; <span class="built_in">isFinite</span>(o.length)</span><br><span class="line">  &amp;&amp; o.length &gt;=<span class="number">0</span> </span><br><span class="line">  &amp;&amp; o.length === <span class="built_in">Math</span>.floor(o.length)</span><br><span class="line">  &amp;&amp; o.length &lt; <span class="number">4294967296</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="作为数组的字符串"><a href="#作为数组的字符串" class="headerlink" title="作为数组的字符串"></a>作为数组的字符串</h2><p>ECMAScript 5 中的字符串除了用 charAt() 访问单个元素之外，还可以使用方括号：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"string"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">1</span>));  <span class="comment">// =&gt; "t";</span></span><br><span class="line"><span class="built_in">console</span>.log(s[<span class="number">1</span>]);  <span class="comment">// =&gt; "t";</span></span><br></pre></td></tr></table></figure><p>数组方法总结：</p><ul><li>push();<ul><li>尾部追加一个或多个元素，push 一个元素与给数组 a[a.length] 赋值一样；</li><li>返回新数组长度</li><li>操作原数组，末尾追加</li></ul></li><li>pop();<ul><li>删除数组中最后一个元素，</li><li>返回值是被删除的这个元素</li><li>操作原数组</li></ul></li><li>shift();<ul><li>删除数组中的第一个元素，</li><li>返回值是被删除的元素</li></ul></li><li>unshift();<ul><li>向数组中第一个元素之前插入一个或多个新的元素</li><li>返回值是新数组的长度</li></ul></li><li>concat(); Array.concat() 方法创建并返回新数组<ul><li>新的数组和旧的数组拼接，产生一个新的数组</li><li>不修改原数组</li></ul></li><li>slice(); Array.slice()方法返回指定数组的一个片段或子数组<ul><li>两个参数： 开始索引，结束索引，返回包含开始索引，不包含结束索引位置之间的所有数组元素；</li><li>指定一个参数，返回包含开始位置到数组结尾的所有元素</li><li>参数是负数，相对于最后一个位置的。如参数 -1 指定了最后一个元素，-2 是倒数第二个</li><li>从原来的数组中截取出来指定的一部分元素，产生新的数组</li><li>不操作原数组</li></ul></li><li>splice(); Array.splice()是数组中插入或删除元素的方法。<ul><li>会修改调用数组，</li><li>第一个参数是开始的下标,第二个参数是指定了删除原数组元素的个数；</li><li>如果省略了第二个参数，从开始索引位置后的元素都被删除；</li><li>可以有第三个参数，第四个参数…跟在第二个参数后的任意多个参数是需要插入原数组中的元素，从第一个参数指定的索引位置插入；</li><li>该方法返回的是删除元素组成的数组,如果没有替换则返回空数组。</li></ul></li><li>join(); 将数组中的所有元素都转化成字符串并连接到一起<ul><li>返回最终生成的字符串</li><li>是 String.split() 方法的逆向操作。String.split() 是将字符串分隔成分隔，返回数组；</li></ul></li><li>reverse();<ul><li>反转数组</li><li>操作原数组</li><li>返回操作后的逆向数组</li></ul></li><li>sort(); Array.sort() 方法将数组中的元素排序并返回排序后的数组<ul><li>操作原数组；</li><li>返回排序后的数组</li></ul></li><li>toString()<ul><li>和不使用任何参数调用 join() 方法返回的字符串是一样的。</li></ul></li><li>toLocalString() 方法是 toString() 方法的本地化版本，使用本地化分隔符将这些字符串连接起来生成最终字符串。</li><li>indexOf()和lastIndexOf(); 搜索整个数组中具有给定值的元素<ul><li>查找某个元素，</li><li>第一个参数是要查找的元素,</li><li>第二个参数是开始查找的下标,</li><li>找到则返回找到的第一个元素的索引，找不到则返回-1</li></ul></li><li>lastIndexOf();<ul><li>这个方法也是查找元素,从后面向前面找,找到则返回对应的下标,找不到则返回-1；</li><li>第二个元素可以是负数，代表相对数组末尾的偏移量；</li></ul></li><li>every() 和 some(); 数组的逻辑判定，传入一个函数,判断每个数组中的元素是否满足条件；<ul><li>every() 方法针对所有的元素判断调用函数返回全为 true，则返回true；</li><li>every() 方法有一个不满足条件的则返回 false</li><li>some() 方法所有的元素判断调用函数有一个满足条件的则返回 true</li><li>some() 方法全为 false, 则返回 false</li></ul></li><li>map() 方法，将调用的数组的每个元素传递给指定的函数，并返回一个包含该函数的数组。<ul><li>返回新数组</li><li>不修改原数组</li><li>稀疏数组调用返回的还是稀疏数组<ul><li>一个例子：arr.map(Math.sqrt);<ul><li>map这个方法可以传入一个回调函数,</li><li>直接传入了一个Math.sqrt方法,sqrt方法是为某个数字开平方的</li><li>调用map方法传入Math.sqrt的时候,去掉了括号,也没有传入参数</li><li>map方法内部帮我们遍历并且传入数组的每个元素</li></ul></li></ul></li></ul></li><li>filter() 方法，返回的是调用的数组的一个子集，传递的回调函数用来逻辑判断，该函数的返回值是布尔值；<ul><li>压缩空缺或并删除 undefined 和 null 元素，也可以使用 filter();</li></ul></li><li>instanceof</li><li>isArray(); ECMAScript 5 中给出的检测数组类型的方法；<ul><li>这个方法是判断变量是不是数组</li></ul></li><li>forEach 方法，从头至尾遍历数组，为每个元素调用指定的函数；<ul><li>三个参数，数值元素、数组索引、数组本身</li><li>无法再所有元素传递完调用函数之前终止遍历</li></ul></li><li>reduce()和 reduceRight()<ul><li>reduce() 和 reduceRight() 方法使用指定的函数将数组元素进行组合，生成单个值。</li><li>reduce() 两个参数：<ul><li>第一个是执行简化操作的函数。化简函数的任务就是用某种方法把两个值组合和化简为一个值，并返回简化后的值。</li><li>第二个参数是可选参数</li></ul></li><li>reduceRight() 的工作原理和 reduce() 一样，不同的是它按照数组索引从高到低处理数组；</li></ul></li></ul><p>本文参考自：《JavaScript 权威指南》</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数组是表示集合的值，每一个值是一个元素，每一个元素在数组中有一个位置，以数字表示，叫索引。数组继承自 Array.prototype.&lt;/p&gt;
&lt;h2 id=&quot;js的内置对象：数组Array&quot;&gt;&lt;a href=&quot;#js的内置对象：数组Array&quot; class=&quot;headerlink&quot; title=&quot;js的内置对象：数组Array&quot;&gt;&lt;/a&gt;js的内置对象：数组Array&lt;/h2&gt;&lt;h2 id=&quot;数组声明&quot;&gt;&lt;a href=&quot;#数组声明&quot; class=&quot;headerlink&quot; title=&quot;数组声明&quot;&gt;&lt;/a&gt;数组声明&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;直接量方式创建数组&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; empty = []; &lt;span class=&quot;comment&quot;&gt;// 没有元素的空数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]; &lt;span class=&quot;comment&quot;&gt;// 有5个元素的数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; misc = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;, ]; &lt;span class=&quot;comment&quot;&gt;// 有不同数据类型元素的数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; misc2 = [[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], &amp;#123;&lt;span class=&quot;attr&quot;&gt;x&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;,[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &amp;#123;&lt;span class=&quot;attr&quot;&gt;x&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;y&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;]];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;数组直接量中可以是任意的表达式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用构造函数&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;();&lt;span class=&quot;comment&quot;&gt;// 数组的构造函数 创建的是一个空数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;4&quot;&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;// 只有传入一个数值的时候 才表示数组元素的个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;abc&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 显示的指定两个或多个数组元素或者数组的一个非数值元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JS系列" scheme="http://yoursite.com/categories/JS%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js的对象</title>
    <link href="http://yoursite.com/2015/06/18/js%E7%9A%84%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2015/06/18/js的对象/</id>
    <published>2015-06-17T16:00:00.000Z</published>
    <updated>2018-05-30T06:51:19.712Z</updated>
    
    <content type="html"><![CDATA[<p>除了字符串、数字、true、false、null 和 undefined 之外，JavaScript 中的值都是对象。引用类型的值（对象）是引用类型的一个实例。在 ECMAScript 中，引用类型是一种数据结构，用于将数据和功能组织在一起。</p><p>从宏观的角度讲，对象是对客观事物的抽象，事物的特征可以用属性表示，事物的行为可以用方法表示；</p><p>从微观的角度讲，对象就是一种数据类型，通过对象可以方便地对变量和函数进行管理。</p><h2 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h2><p>JavaScript 对象的创建有三种方式：直接量，new 关键字 和 Object.creat() 方来创建。</p><a id="more"></a><h3 id="对象直接量"><a href="#对象直接量" class="headerlink" title="对象直接量"></a>对象直接量</h3><p>对象的直接量就是由若干兼职对组成的映射表，键和值之间用 “:” 分隔，键值对之间用 “,” 分隔，整个映射表用一对花括号包裹，比如通过字面量声明（更加简便）<code>var obj= {};</code></p><h4 id="键值对"><a href="#键值对" class="headerlink" title="键值对"></a>键值对</h4><p>键值对就是一种对应关系，通过键能够方便地找到值</p><p>键:值 <code>key:value</code>  <code>k:v</code></p><h4 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> emptyObj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> pointObj = &#123;<span class="attr">x</span>:<span class="number">0</span>, <span class="attr">y</span>:<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> pointObj2 = &#123;<span class="attr">x</span>: pointObj.x, <span class="attr">y</span>: pointObj.y&#125;;</span><br><span class="line"><span class="keyword">var</span> books = &#123;</span><br><span class="line">  <span class="string">"main title"</span>: <span class="string">"JavaScript"</span>,   <span class="comment">// 属性名中有空格时，必须用字符串</span></span><br><span class="line">  <span class="string">'sub-title'</span>: <span class="string">"The Definitive Guide"</span>,   <span class="comment">// 属性名中有连字符，必须用字符串</span></span><br><span class="line">  <span class="string">"for"</span>: <span class="string">"all audiences"</span>,   <span class="comment">// "for" 是保留字，必须用引号</span></span><br><span class="line">  author: &#123;     <span class="comment">// 这里的属性名没有引号</span></span><br><span class="line">    firstname: <span class="string">"Hiraku"</span>,</span><br><span class="line">    surname: <span class="string">"Hongqin"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对象的字面量是一个表达式，这个表达式的每次运算都创建并初始化一个新对象。每次计算对象直接量的时候，也会计算它的每个属性的值。也就是说，如果在一个重复调用的函数中的循环体内使用对象直接量，它将创建很多新对象，并且每次创建的对象的属性值可有可能不同。</p><h2 id="通过-new-关键字创建对象"><a href="#通过-new-关键字创建对象" class="headerlink" title="通过 new 关键字创建对象"></a>通过 new 关键字创建对象</h2><p>new 运算符创建并初始化一个新对象。n关键字 new 后面跟随一个函数调用。</p><p>通过构造函数声明（更加通用）var obj= new Object(); // 创建一个空对象，和 {} 一样</p><p>对象具有属性和方法</p><ul><li>属性 用来描述对象的特征 一般是名词 对应变量</li><li>方法 用来描述对象的行为 一般是动词 对应函数</li></ul><h2 id="原型初识"><a href="#原型初识" class="headerlink" title="原型初识"></a>原型初识</h2><p>除了 null 以外的每一个 JavaScript 对象都和 <code>原型</code> 相关联。所有通过对象直接量创建的对象对具有同一个原型对象，可通过 Object.prototype 获得对原型对象的引用。通过 new 关键字和构造函数调用创建的对象的原型就是构造函数的 prototype 属性的值。因此，和使用 {} 创建对象一样，通过 new Object() 创建的对象也继承自 Object.prototype。</p><p>没有原型的对象有 Object.prototype，它不继承任何属性。其他对象都是普通对象，都有原型。所有的内置构造函数比如：Array(), Date() 都具有一个继承自 Object.prototype 的原型。</p><h2 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h2><p>ECMAScript 5 定义了一个名为 Object.create() 方法，是一个静态函数，可以用来创建对象。有两个参数：第一个参数是对象，第二个参数可选，用于对属性进行详细描述。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// o1 继承了属性 x 和 y</span></span><br><span class="line"><span class="keyword">var</span> o1 = <span class="built_in">Object</span>.create(&#123;<span class="attr">x</span>:<span class="number">1</span>, <span class="attr">y</span>:<span class="number">1</span>&#125;);  </span><br><span class="line"><span class="comment">// o2 不继承任何属性和方法，没有原型，不能和 + 运算符一起工作</span></span><br><span class="line"><span class="keyword">var</span> o2 = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">// o3 创建一个普通的空对象</span></span><br><span class="line"><span class="keyword">var</span> o3 = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.prototype);</span><br></pre></td></tr></table></figure><p>可以通过任意原型对象创建新对象，即可以使任意对象继承。</p><p>例子： 返回一个继承自原型对象 p 的属性的新对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">p</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (p == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="built_in">TypeError</span>();            <span class="comment">// p 是一个对象</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.create) <span class="keyword">return</span> <span class="built_in">Object</span>.create(p);  <span class="comment">// 如果存在 Object.create，直接使用它来创建</span></span><br><span class="line">  <span class="keyword">var</span> t = <span class="keyword">typeof</span> p;  <span class="comment">// 否则进一步检测</span></span><br><span class="line">  <span class="keyword">if</span> (t !== <span class="string">"object"</span> &amp;&amp; t !== <span class="string">"function"</span>) <span class="keyword">throw</span> <span class="built_in">TypeError</span>();</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// 创建一个空构造函数</span></span><br><span class="line">  f.prototype = p; <span class="comment">// 将其原型属性设置为 p</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> f(); <span class="comment">// 使用 f() 创建 p 的继承对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="属性和方法的查询和设置"><a href="#属性和方法的查询和设置" class="headerlink" title="属性和方法的查询和设置"></a>属性和方法的查询和设置</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li>属性的定义<ul><li>对象.属性名 = 值；</li><li>对象[“属性名”] = 值;</li></ul></li><li>属性的调用<ul><li>对象.属性名;</li><li>对象[“属性名”];</li></ul></li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li>方法的定义<ul><li>对象.方法名 = function() { //函数体 };</li><li>对象[“方法名”] = function() { //函数体 };</li></ul></li><li>方法的调用<ul><li>对象.方法名();</li><li>对象[“方法名”];</li></ul></li></ul><h3 id="作为关联数组的对象"><a href="#作为关联数组的对象" class="headerlink" title="作为关联数组的对象"></a>作为关联数组的对象</h3><p>对象属性和方法的第二种设置和访问用了 “[]”，只是利用的不是索引访问，而是字符串。这种数据就是关联数组，也叫散列、映射或者字典。</p><p>当我们通过 [] 来访问对象的属性时，在程序运行是可以设置和修改或者创建它们。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>对象具有自有属性（own property），也有一些属性是从原型对象上继承来的。</p><p>还是这个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">p</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (p == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="built_in">TypeError</span>();            <span class="comment">// p 是一个对象</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.create) <span class="keyword">return</span> <span class="built_in">Object</span>.create(p);  <span class="comment">// 如果存在 Object.create，直接使用它来创建</span></span><br><span class="line">  <span class="keyword">var</span> t = <span class="keyword">typeof</span> p;  <span class="comment">// 否则进一步检测</span></span><br><span class="line">  <span class="keyword">if</span> (t !== <span class="string">"object"</span> &amp;&amp; t !== <span class="string">"function"</span>) <span class="keyword">throw</span> <span class="built_in">TypeError</span>();</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// 创建一个空构造函数</span></span><br><span class="line">  f.prototype = p; <span class="comment">// 将其原型属性设置为 p</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> f(); <span class="comment">// 使用 f() 创建 p 的继承对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">o.x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> p = inherit(o);  <span class="comment">// p 继承自对象 o 和 Object.prototype</span></span><br><span class="line">p.y = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> q = inherit(p);  <span class="comment">// q 继承自对象 p、 o 和 Object.prototype</span></span><br><span class="line">q.z = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> s = q.toString();</span><br><span class="line"><span class="built_in">console</span>.log(s);  <span class="comment">// "[object object]"</span></span><br><span class="line"><span class="built_in">console</span>.log(q.x + q.y + q.z); <span class="comment">// 6 属性 x 和 y 分别继承自 o 和 p</span></span><br></pre></td></tr></table></figure><h3 id="属性访问错误"><a href="#属性访问错误" class="headerlink" title="属性访问错误"></a>属性访问错误</h3><ul><li>JavaScript 中，属性访问时，并不总是会话或者设置。</li><li>在查询不存在的属性时不会报错，而返回 undefined。</li><li>内置构造函数的原型是只读的。</li></ul><h2 id="删除属性"><a href="#删除属性" class="headerlink" title="删除属性"></a>删除属性</h2><p>delete 运算符可以删除对象的属性。delete 只是断开属性和宿主对象的联系，而不会操作属性中的属性。</p><p>delete 只能删除自有属性，不能删除继承属性。</p><p>delete 不能删除可配置属性。</p><p>在非严格模式下，删除全局独享的可配置属性时，可以省略对全局对象的引用，直接在 delete 操作符后跟要删除的属性名即可。</p><p>在严格模式下，delete x; 报错， delete this.x; 正常运行</p><h2 id="属性检测"><a href="#属性检测" class="headerlink" title="属性检测"></a>属性检测</h2><p>通过 in 运算符、hasOwnProperty()、propertyIsEnumerable() 方法；</p><ul><li>in 运算符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="string">"x"</span> <span class="keyword">in</span> o;  <span class="comment">// true "x" 是 o 的属性</span></span><br></pre></td></tr></table></figure><ul><li>hasOwnProperty() 方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;</span><br><span class="line">o.hasOwnProperty(x);  <span class="comment">// true "x" 是 o 的自有属性</span></span><br><span class="line">o.hasOwnProperty(<span class="keyword">constructor</span>);  // false <span class="keyword">constructor</span> 是原型中的属性</span><br></pre></td></tr></table></figure><ul><li>propertyIsEnumerable() 方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">p</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (p == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="built_in">TypeError</span>();            <span class="comment">// p 是一个对象</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.create) <span class="keyword">return</span> <span class="built_in">Object</span>.create(p);  <span class="comment">// 如果存在 Object.create，直接使用它来创建</span></span><br><span class="line">  <span class="keyword">var</span> t = <span class="keyword">typeof</span> p;  <span class="comment">// 否则进一步检测</span></span><br><span class="line">  <span class="keyword">if</span> (t !== <span class="string">"object"</span> &amp;&amp; t !== <span class="string">"function"</span>) <span class="keyword">throw</span> <span class="built_in">TypeError</span>();</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// 创建一个空构造函数</span></span><br><span class="line">  f.prototype = p; <span class="comment">// 将其原型属性设置为 p</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> f(); <span class="comment">// 使用 f() 创建 p 的继承对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o = interit(&#123;<span class="attr">x</span>: <span class="number">1</span>&#125;);</span><br><span class="line">o.y = <span class="number">1</span>;  </span><br><span class="line">o.propertyIsEnumerable(<span class="string">"x"</span>); <span class="comment">// false "x" 属性是继承的，不能被枚举</span></span><br><span class="line">o.propertyIsEnumerable(<span class="string">"y"</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>除了 in 以外， 另一种简单的判断一个属性是否是 “undefined” 使用 “!==”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;</span><br><span class="line">o.x !== <span class="literal">undefined</span>;   <span class="comment">// true</span></span><br><span class="line">o.y !== <span class="literal">undefined</span>;   <span class="comment">// false;</span></span><br><span class="line">o.toString !== <span class="literal">undefined</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>但 in 可以区分不存在的属性和存在但值为 undefined 类型的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">x</span>: <span class="literal">undefined</span>&#125;;</span><br><span class="line">o.x !== <span class="literal">undefined</span>;   <span class="comment">// false  属性存在，但是值为 undefined</span></span><br><span class="line">o.y !== <span class="literal">undefined</span>;   <span class="comment">// false  属性不存在</span></span><br><span class="line"><span class="string">"x"</span> <span class="keyword">in</span> o; <span class="comment">// true 属性存在</span></span><br><span class="line"><span class="string">"y"</span> <span class="keyword">in</span> o; <span class="comment">// false 属性不存在</span></span><br><span class="line"><span class="keyword">delete</span> o.x;  <span class="comment">// 删除了属性 x</span></span><br><span class="line"><span class="string">"x"</span> <span class="keyword">in</span> o; <span class="comment">// false 属性不再存在</span></span><br></pre></td></tr></table></figure><h2 id="对象的枚举属性"><a href="#对象的枚举属性" class="headerlink" title="对象的枚举属性"></a>对象的枚举属性</h2><p>除了检测对象的属性，我们经常需要遍历对象的属性，通常使用 for-in 遍历;</p><p>ECMAScript 5 提供了 Object.keys() 方法，返回值是一个数组，这个数组由对象中可枚举的自有属性的名称组成。</p><p>ECMASciript 5 提供的另一种枚举属性的方法是 Object.getOwnPropertyNames(), 和 Object.keys() 类似，只是它返回对象的所有自有属性的名称，而不仅仅是可以枚举的属性。</p><h3 id="用来枚举对象属性的工具函数"><a href="#用来枚举对象属性的工具函数" class="headerlink" title="用来枚举对象属性的工具函数"></a>用来枚举对象属性的工具函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [extend description] 把 P 中的可枚举属性复制到 o 中，</span></span><br><span class="line"><span class="comment"> * 如果有同名属性，则覆盖 o 中的属性 </span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; o [description]</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; p [description]</span></span><br><span class="line"><span class="comment"> * @return &#123;[type]&#125;   [description]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">o, p</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> p) &#123;</span><br><span class="line">    o[prop] = p [prop];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [merge description] 把 P 中的可枚举属性复制到 o 中，</span></span><br><span class="line"><span class="comment"> * 如果有同名属性, o 中的属性不受影响 </span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; o [description]</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; p [description]</span></span><br><span class="line"><span class="comment"> * @return &#123;[type]&#125;   [description]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span> (<span class="params">o, p</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> p) &#123;</span><br><span class="line">    <span class="keyword">if</span> (o.hasOwnProperty[prop]) <span class="keyword">continue</span>;</span><br><span class="line">    o[prop] = p [prop];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [restrict description] 如果 o 中的属性没有同名属性，则从 o 中删除这个属性</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; o [description]</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; p [description]</span></span><br><span class="line"><span class="comment"> * @return &#123;[type]&#125;   [description] 返回 o </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">restrict</span> (<span class="params">o, p</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> p) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(prop <span class="keyword">in</span> p)) <span class="keyword">delete</span> o[prop];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [substract description] 如果 o 中存在同名属性，则删除这个属性</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; o [description]</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; p [description]</span></span><br><span class="line"><span class="comment"> * @return &#123;[type]&#125;   [description]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">substract</span>(<span class="params">o, p</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> p) &#123;</span><br><span class="line">    <span class="keyword">delete</span> o[prop];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [union description] 如果有重名属性，使用 p 中的属性</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; o [description]</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; p [description]</span></span><br><span class="line"><span class="comment"> * @return &#123;[type]&#125;   [description] 返回一个新对象这个对象同时拥有 o 的属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">union</span> (<span class="params">o, p</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> extend (extend(&#123;&#125;, o), p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [keys description] 返回的数组中包含的是 o 中可枚举的自有属性的名字</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; o [description]</span></span><br><span class="line"><span class="comment"> * @return &#123;[type]&#125;   [description] 返回一个数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keys</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> o !== <span class="string">"object"</span>) <span class="keyword">throw</span> <span class="built_in">TypeError</span>();</span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> o)&#123;</span><br><span class="line">    <span class="keyword">if</span> (o.hasOwnProperty(prop)) result.push(prop);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="属性-getter-和-setter"><a href="#属性-getter-和-setter" class="headerlink" title="属性 getter 和 setter"></a>属性 getter 和 setter</h2><p>当程序执行查询存储属性的值的时候，JavaScript 调用 getter 方法(无参数)，当设置属性值的时候，调用的是 setter 方法。</p><h2 id="属性的特性"><a href="#属性的特性" class="headerlink" title="属性的特性"></a>属性的特性</h2><p>属性包含一个属性名和4个特性：</p><ul><li>value 属性值</li><li>writable 可写性</li><li>enumerable 可枚举性</li><li>configurable 可配置性<br>存取器属性不具有值 value 和 可写性</li></ul><p>ECMAScript 5 中定义了属性描述符 Object.getOwnPropertyDesctiptor() 获取某个对象特定的属性，这个方法只能得到自有属性的特性。</p><p>让新建的属性具有某种特性，需要调用 Object.definePeoperty() 方法；传入要修改的对象，要创建或修改的属性的名称以及属性描述符对象；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;&#125;;  <span class="comment">// 创建一个空对象</span></span><br><span class="line"><span class="comment">// 插入一个不可枚举的数据属性 x, 并赋值为 1；</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"x"</span>, &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line">  writable: <span class="literal">true</span>,</span><br><span class="line">  enumerable: <span class="literal">false</span>,</span><br><span class="line">  configurable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line">o.x;   <span class="comment">// --&gt; 1</span></span><br><span class="line"><span class="built_in">Object</span>.keys(o); <span class="comment">// --&gt; []</span></span><br><span class="line"><span class="comment">// 对属性 x 做修改变为只读</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"x"</span>, &#123;<span class="attr">writable</span>: <span class="literal">false</span>&#125;);</span><br><span class="line"><span class="comment">// 试图更改这个属性值</span></span><br><span class="line">o.x = <span class="number">2</span>; <span class="comment">// 更改操作失败，在严格模式中抛出异常</span></span><br><span class="line">o.x;  <span class="comment">// =&gt; 1;</span></span><br><span class="line"><span class="comment">// 属性依然是可配置的，因此可以通过这种方式对它进行修改</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"x"</span>, &#123;<span class="attr">value</span>: <span class="number">2</span>&#125;);</span><br><span class="line">o.x; <span class="comment">// =&gt; 2</span></span><br><span class="line"><span class="comment">// 现在讲 x 从数据属性修改为存储器属性</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"x"</span>, &#123;</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">o.x; <span class="comment">// =&gt; 0</span></span><br></pre></td></tr></table></figure><p>需要同时修改多个属性，使用 Object.defineProperties(),它返回修改后的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 复制属性的特性</span></span><br><span class="line"><span class="comment"> * 给 Object.prototype 上添加一个不可枚举的extend() 方法</span></span><br><span class="line"><span class="comment"> * 这个方法继承自它的调用对象，将作为参数传入的对象的属性以一幅字</span></span><br><span class="line"><span class="comment"> * 除了值之外也赋值属性所有的特性，除非在目标对象中存在同名的属性。</span></span><br><span class="line"><span class="comment"> * 参数对象的所有自有属性（包括不可枚举的属性）也会一一复制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(object.prototype, <span class="string">"extend"</span>, &#123; <span class="comment">// 定义 Object.prototype.extend</span></span><br><span class="line">  writable: <span class="literal">true</span>,</span><br><span class="line">  enumerable: <span class="literal">false</span>,  <span class="comment">// 将其定义为不可枚举的</span></span><br><span class="line">  configurable: <span class="literal">true</span>,</span><br><span class="line">  value: <span class="function"><span class="keyword">function</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 得到所有的自有属性，包括不可枚举属性</span></span><br><span class="line">    <span class="keyword">var</span> names = <span class="built_in">Object</span>.getOwnPropertyNames(o);</span><br><span class="line">    <span class="comment">// 遍历它们</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; names.length; i++)&#123;</span><br><span class="line">      <span class="comment">// 如果属性已经存在，则跳过</span></span><br><span class="line">      <span class="keyword">if</span> (names[i] <span class="keyword">in</span> <span class="keyword">this</span>) <span class="keyword">continue</span>;</span><br><span class="line">      <span class="comment">// 获取 o 中的属性描述符</span></span><br><span class="line">      <span class="keyword">var</span> desc = <span class="built_in">Object</span>.getOwnPropertyDescriptor(o, names[i])</span><br><span class="line">      <span class="comment">// 用它给 this 创建一个属性</span></span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, names[i], desc)</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="对象的三个属性"><a href="#对象的三个属性" class="headerlink" title="对象的三个属性"></a>对象的三个属性</h2><p>每一个对象都有与之相关联的原型 (prototype)、类 (class) 和可扩展性 (extensible attribute)。</p><h3 id="原型属性"><a href="#原型属性" class="headerlink" title="原型属性"></a>原型属性</h3><p>通过直接量创建的对象使用 Object.prototype 作为它们的原型，而使用 new 创建的对象使用 构造函数的 prototype 属性作为它们的原型。而通过 Object.create() 创建的对象使用第一个参数作为它们的原型，也可以是 null .</p><p>ECMAScript 5 中将对象作为参数传入 Object.getPrototypeOf() 方法中可以查询它的原型。</p><p>要检测一个对象是否是另一个对象的原型（或处于原型链中），用 isPrototypeOf() 方法。</p><h3 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h3><p>对象的类属性是一个字符串，用以表示对象的类型信息。只有一种间接的方法可以访问，即toString() 方法。默认的 toString() 方法继承自 Object.prototype，返回 <code>[object class]</code> 格式的字符串。</p><p>如何获得对象的类？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * classof() 函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">classof</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (o === <span class="literal">null</span> ) <span class="keyword">return</span> <span class="string">"null"</span>;</span><br><span class="line">  <span class="keyword">if</span> (o === <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="string">"undefined"</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(o).slice(<span class="number">8</span>,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数可以传入任意的参数。</p><h3 id="对象的可扩展性"><a href="#对象的可扩展性" class="headerlink" title="对象的可扩展性"></a>对象的可扩展性</h3><p>ECMAScript 5 的 Object.preventExtensions() 方法将对象转为不可扩展的，Object.seal() 还可以设置对象的属性不可配置。</p><h2 id="序列化对象（JSON-对象表示法）"><a href="#序列化对象（JSON-对象表示法）" class="headerlink" title="序列化对象（JSON 对象表示法）"></a>序列化对象（JSON 对象表示法）</h2><p>是指将对象的状态转为字符串，也可以将字符串还原为对象。</p><p>ECMAScript 5 提供了内置函数 JSON.stringify() 和 JSON.parse() 用来序列化和还原JavaScript对象。这两个方法使用 JSON 数据格式。</p><p>JSON, 即 <code>JavaScript Object Notation</code>（ JavaScript 对象表示法）是仿照JS中对象字面量的格式去书写的一串用来记录对象数据的字符串，可以用于数据传输。 即 JSON</p><p>注意：函数、RegExp、Error 对象和 undefined 值不能序列化和还原</p><ul><li>JSON 转字符串 序列化 JSON.stringfy();</li><li>字符串转 JSON 反序列化 JSON.parse();</li></ul><h3 id="遍历的-JSON-两种方式"><a href="#遍历的-JSON-两种方式" class="headerlink" title="遍历的 JSON 两种方式"></a>遍历的 JSON 两种方式</h3><p>通过for可以对集合进行有序的遍历for(var k in json) { 语句 }; k变量代表的是json中的各个属性（key）和 var i = 0中的i是一个意思,名字不同而已</p><h2 id="对象的方法"><a href="#对象的方法" class="headerlink" title="对象的方法"></a>对象的方法</h2><ul><li>toString() 方法</li><li>toLocalString() 方法</li><li>toJSON() 方法</li><li>valueOf() 方法</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;除了字符串、数字、true、false、null 和 undefined 之外，JavaScript 中的值都是对象。引用类型的值（对象）是引用类型的一个实例。在 ECMAScript 中，引用类型是一种数据结构，用于将数据和功能组织在一起。&lt;/p&gt;
&lt;p&gt;从宏观的角度讲，对象是对客观事物的抽象，事物的特征可以用属性表示，事物的行为可以用方法表示；&lt;/p&gt;
&lt;p&gt;从微观的角度讲，对象就是一种数据类型，通过对象可以方便地对变量和函数进行管理。&lt;/p&gt;
&lt;h2 id=&quot;对象的创建&quot;&gt;&lt;a href=&quot;#对象的创建&quot; class=&quot;headerlink&quot; title=&quot;对象的创建&quot;&gt;&lt;/a&gt;对象的创建&lt;/h2&gt;&lt;p&gt;JavaScript 对象的创建有三种方式：直接量，new 关键字 和 Object.creat() 方来创建。&lt;/p&gt;
    
    </summary>
    
      <category term="JS系列" scheme="http://yoursite.com/categories/JS%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js语句</title>
    <link href="http://yoursite.com/2015/06/15/js%E8%AF%AD%E5%8F%A5/"/>
    <id>http://yoursite.com/2015/06/15/js语句/</id>
    <published>2015-06-14T16:00:00.000Z</published>
    <updated>2018-05-30T06:37:26.527Z</updated>
    
    <content type="html"><![CDATA[<p>ECMAScript 语法定义的语句通常使用一个或多个关键字来完成给定的任务。</p><h2 id="条件判断结构-if-if…else-if…else-嵌套"><a href="#条件判断结构-if-if…else-if…else-嵌套" class="headerlink" title="条件判断结构 if/ if…else/ if…else 嵌套"></a>条件判断结构 if/ if…else/ if…else 嵌套</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">  <span class="comment">// 如果条件表达式为true，执行该处代码</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="comment">// 如果条件表达式为false,执行该处代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>条件判断的嵌套</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式）&#123;</span><br><span class="line">  <span class="comment">//如果条件表达式结果为true,执行该语句，下边语句不执行。</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">  <span class="comment">// 如果条件表达式结果为true,执行该语句，下边语句不执行。</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">  <span class="comment">// 如果条件表达式结果为true,执行该语句，下边语句不执行。</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 如果以上语句都为false,执行该语句。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Switch语句"><a href="#Switch语句" class="headerlink" title="Switch语句"></a>Switch语句</h2><p>写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mon=prompt(<span class="string">"请输入月份"</span>);</span><br><span class="line"><span class="keyword">switch</span>(mon)&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"3"</span>: <span class="keyword">case</span> <span class="string">"4"</span>:  <span class="keyword">case</span> <span class="string">"5"</span>:</span><br><span class="line">  alert(<span class="string">"春季"</span>);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"6"</span>: <span class="keyword">case</span> <span class="string">"7"</span>:  <span class="keyword">case</span> <span class="string">"8"</span>:</span><br><span class="line">  alert(<span class="string">"夏季"</span>);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"9"</span>: <span class="keyword">case</span> <span class="string">"10"</span>:  <span class="keyword">case</span> <span class="string">"11"</span>:</span><br><span class="line">  alert(<span class="string">"秋季"</span>);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"12"</span>: <span class="keyword">case</span> <span class="string">"1"</span>:  <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">  alert(<span class="string">"冬季"</span>);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">  alert(<span class="string">"请输入正确月份"</span>);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:switch后边的变量和case后边值的数据类型必须保持一致。</p><h2 id="While循环语句"><a href="#While循环语句" class="headerlink" title="While循环语句"></a>While循环语句</h2><p>语法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n1;</span><br><span class="line">While(条件表达式)&#123;</span><br><span class="line">  <span class="comment">// 循环语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果while后边的条件表达式为true,循环语句一直执行，直到while后边的条件表达式为false, 循环终止（跳出循环）,使用while语句的时候，需在外边定义一个变量。</p><h2 id="Do-while-语句"><a href="#Do-while-语句" class="headerlink" title="Do while 语句"></a>Do while 语句</h2><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">  <span class="comment">// 循环语句</span></span><br><span class="line">&#125;<span class="keyword">while</span>(条件表达式)</span><br></pre></td></tr></table></figure><p>先执行do里循环代码，再和while后边的条件表达式进行判断，如果结果为true,继续执行do里的循环，结果为false，循环终止。比while多执行一次循环。</p><p>while语句 先判断后执行do while 语句 先执行后判断</p><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">100</span>; i++)&#123;</span><br><span class="line">  <span class="comment">//循环代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h2><p>单独使用 break 语句的作用是立即退出最内层的循环或 switch 语句。</p><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>()&#123;</span><br><span class="line">  <span class="comment">// 循环语句</span></span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Break是跳出当前循环体；</p><h2 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h2><p>跳出循环一次。后边的代码不继续执行。</p><h3 id="break-和-continue-的区别"><a href="#break-和-continue-的区别" class="headerlink" title="break 和 continue 的区别"></a>break 和 continue 的区别</h3><ul><li>break跳出当前循环，执行循环后的语句</li><li>continue跳出当前循环，继续执行循环</li></ul><h2 id="for-in-属性枚举语句"><a href="#for-in-属性枚举语句" class="headerlink" title="for-in 属性枚举语句"></a>for-in 属性枚举语句</h2><p><code>for-in</code> 语句用来枚举对象的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(variable <span class="keyword">in</span> object)&#123;</span><br><span class="line">  <span class="comment">// 代码段</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>variable 是一个变量名，也可以是一个可以产生左值表达式或者一个通过 var 语句声明的变量，每次循环都会计算 variable 这个表达式，也就是说每次循环它的值可能不同。for/in 循环并不会遍历对象的所有属性，只有”可枚举”的属性才会遍历到。内置对象的方法就是不可枚举的</p><h2 id="label-（标签）语句"><a href="#label-（标签）语句" class="headerlink" title="label （标签）语句"></a>label （标签）语句</h2><p>label 语句可以在代码中添加标签，以便将来使用。通过给语句定义标签，就可以在程序的任何地方通过标签名引用这条语句。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start: <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="with-语句"><a href="#with-语句" class="headerlink" title="with 语句"></a>with 语句</h2><p>with 语句的作用是将作用域设置到一个特定的对象中。如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> qs = location.search.substring();</span><br><span class="line"><span class="keyword">var</span> hostName = location.hostname();</span><br><span class="line"><span class="keyword">var</span> utl = location.href();</span><br><span class="line"><span class="comment">// 以上代码可以写成下面的方式, 严格模式下不允许使用 with</span></span><br><span class="line"><span class="keyword">with</span>(location)&#123;</span><br><span class="line">  <span class="keyword">var</span> qs = search.substring();</span><br><span class="line">  <span class="keyword">var</span> hostName = hostname();</span><br><span class="line">  <span class="keyword">var</span> utl = href();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="return-语句"><a href="#return-语句" class="headerlink" title="return 语句"></a>return 语句</h2><p>函数是一种表达式，所有的表达式都有值。函数中国的 return 语句既是指定函数调用后的返回值。因此，return 语句只能在函数体内部出现，而且 return 语句经常作为函数的最后一条语句出现，但并不是说一定要放在函数体的最后，即使在执行 return 语句的时候还有很多后续代码没有执行，这是函数也还会返回调用程序。</p><h2 id="throw-语句"><a href="#throw-语句" class="headerlink" title="throw 语句"></a>throw 语句</h2><p>异常是指程序在程序在运行时发生的异常情况或错误时产生的一个信号。在 JavaScript 中，当产生运行时错误或者程序使用 throw 语句时就会显式的抛出异常。</p><h2 id="try-catch-finally-语句"><a href="#try-catch-finally-语句" class="headerlink" title="try/catch/finally 语句"></a>try/catch/finally 语句</h2><p>try/catch/finally 是 JavaScript 的异常处理机制。其中 try 从句中定义了需要处理的异常所在代码块，catch 从句跟在 try 后，当 try 块内发生了异常时，调用 catch 内的代码逻辑。catch 从句后跟随 finally 块，后者中国放置清理代码，不管是 try 块中是否产生异常，finally 块内的逻辑总是会执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 需要捕获异常的代码块</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="comment">// try 代码块抛出异常才会执行此代码块中的逻辑</span></span><br><span class="line">  <span class="comment">// 还可以通过 throw 语句来再次抛出异常</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="comment">// 不管异常有没有发生，这个代码块中的逻辑都会执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其它语句"><a href="#其它语句" class="headerlink" title="其它语句"></a>其它语句</h2><h3 id="debugger-语句"><a href="#debugger-语句" class="headerlink" title="debugger 语句"></a>debugger 语句</h3><h3 id="“use-strict”"><a href="#“use-strict”" class="headerlink" title="“use strict”"></a>“use strict”</h3><p>开启 ECMAScript 5 引入的一条命令，开启严格模式。说明后续的所有 JavaScript 代码都在严格模式下执行。</p><ul><li>严格模式下禁止使用 with 语句</li><li>在严格模式下，所有的变量都要先声明；</li><li>严格模式中，调用的函数中的一个 this 值是 undefined ；<ul><li>可以利用这种方式判断 JavaScript 实现是否支持严格模式</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hasStrictMode = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">  "use strict"</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span> === <span class="literal">undefined</span>;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><ul><li>在严格模式中，当通过 call() 或 apply() 来调用函数时，其中 this 值就是通过 call() 或 apply() 传入的第一个参数；<br>+（在非严格模式中，null 和 undefined 值被全局对象和转换为对象的费对象值所替代）</li><li>在严格模式，给只读属性和给不可扩展的对象创建新成员都抛出一个类型错误异常。<br>+（在非严格模式中，这些操作只是简单地操作失败，不会报错）</li><li>在严格模式下，传入 eval() 的代码不能在调用程序锁在的上下文中声明变量或定义函数<ul><li>在非严格模式中是可以这样做的。</li></ul></li><li>严格模式下，函数里的 arguments 对象拥有传入函数值的静态副本。</li><li>严格模式下，delete 运算符后跟随非法的标识符会抛出异常</li><li>严格模式下，试图删除一个不可配置的属性将抛出一个类型错误异常</li><li>严格模式下，在一个对象直接量中定义两个或多个同名属性将会产生一个语法错误</li><li>严格模式下是不允许使用八进制整数直接量</li><li>严格模式下标识符 eval() 和 arguments 当做关键字，它们的值是不能更改的。不能给这些标识符赋值。</li><li>严格模式中限制了对调用栈的检测能力，在严格模式的函数中，arguments.caller 和 arguments.callee 都会抛出一个类型错误异常。<ul><li>严格模式的函数同样具有 caller 和 arguments 属性，当访问这两个属性时将会抛出类型错误异常。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ECMAScript 语法定义的语句通常使用一个或多个关键字来完成给定的任务。&lt;/p&gt;
&lt;h2 id=&quot;条件判断结构-if-if…else-if…else-嵌套&quot;&gt;&lt;a href=&quot;#条件判断结构-if-if…else-if…else-嵌套&quot; class=&quot;headerlink&quot; title=&quot;条件判断结构 if/ if…else/ if…else 嵌套&quot;&gt;&lt;/a&gt;条件判断结构 if/ if…else/ if…else 嵌套&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(条件表达式)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 如果条件表达式为true，执行该处代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 如果条件表达式为false,执行该处代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JS系列" scheme="http://yoursite.com/categories/JS%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js Date、Math、包装对象、RegExp</title>
    <link href="http://yoursite.com/2015/06/08/js%20Date%E3%80%81Math%E3%80%81%E5%8C%85%E8%A3%85%E5%AF%B9%E8%B1%A1%E3%80%81RegExp/"/>
    <id>http://yoursite.com/2015/06/08/js Date、Math、包装对象、RegExp/</id>
    <published>2015-06-07T16:00:00.000Z</published>
    <updated>2018-05-30T06:24:00.674Z</updated>
    
    <content type="html"><![CDATA[<h2 id="javaScript的几个内置对象"><a href="#javaScript的几个内置对象" class="headerlink" title="javaScript的几个内置对象"></a>javaScript的几个内置对象</h2><h2 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h2><p>ECMAScript 5 提供了两个方法：Date.parase() 和 Date.UTC() 返回日期的毫秒数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();   <span class="comment">//创建对象</span></span><br><span class="line">alert(<span class="built_in">Date</span>()); <span class="comment">//返回一个完整的日期时间</span></span><br><span class="line">alert(now.getDate()); <span class="comment">//返回从1开始计数的天数</span></span><br><span class="line">alert(now.getDay()); <span class="comment">//返回当前周几</span></span><br><span class="line">alert(now.getFullYear()); <span class="comment">//返回当前年份</span></span><br><span class="line">alert(now.getMonth()+<span class="number">1</span>);  <span class="comment">//返回当前月份</span></span><br><span class="line">alert(now.getHours());  <span class="comment">//当地时间的小时</span></span><br><span class="line"><span class="keyword">var</span> then = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2011</span>, <span class="number">10</span>, <span class="number">10</span>);  <span class="comment">// 2011年10月10日</span></span><br></pre></td></tr></table></figure><h3 id="日期格式化方法"><a href="#日期格式化方法" class="headerlink" title="日期格式化方法"></a>日期格式化方法</h3><ul><li>toDateString();</li><li>toTimeString();</li><li>toLocaleDateString();</li><li>toLocalTimeString();</li><li>toUTCString()</li></ul><a id="more"></a><h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 控制台输出</span></span><br><span class="line"><span class="built_in">Math</span>.max(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);<span class="comment">//这些数字中的最大值</span></span><br><span class="line"><span class="built_in">Math</span>.min(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);<span class="comment">//返回多个数中的最小值</span></span><br><span class="line"><span class="built_in">Math</span>.floor(<span class="number">45.84334</span>);<span class="comment">//向下取整</span></span><br><span class="line"><span class="built_in">Math</span>.ceil(<span class="number">5.4443</span>);<span class="comment">//向上取整</span></span><br><span class="line"><span class="built_in">Math</span>.round(<span class="number">67.55</span>);<span class="comment">//四舍五入</span></span><br><span class="line"><span class="built_in">Math</span>.random();<span class="comment">//随机数 0-1 </span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*<span class="number">10</span>+<span class="number">1</span>); <span class="comment">//随机数 1-10</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*<span class="number">100</span>+<span class="number">1</span>); <span class="comment">//随机数 1-100</span></span><br><span class="line"><span class="built_in">Math</span>.abs(<span class="number">-100</span>);<span class="comment">//返回绝对值       </span></span><br><span class="line"><span class="built_in">Math</span>.pow(<span class="number">4</span>,<span class="number">3</span>); <span class="comment">//4 的 3 次幂  </span></span><br><span class="line"><span class="built_in">Math</span>.sqrt(<span class="number">16</span>); <span class="comment">//开平方</span></span><br><span class="line"><span class="built_in">Math</span>.sin(<span class="number">4</span>);<span class="comment">//返回正弦值</span></span><br><span class="line"><span class="built_in">Math</span>.PI; <span class="comment">// π 圆周率</span></span><br><span class="line"><span class="built_in">Math</span>.sqrt(<span class="number">3</span>); <span class="comment">// 3 的平方根</span></span><br><span class="line"><span class="built_in">Math</span>.exp(<span class="number">3</span>); <span class="comment">// e 的 3 次幂</span></span><br><span class="line"><span class="built_in">Math</span>.log(<span class="number">10</span>); <span class="comment">// 10 的自然对数</span></span><br><span class="line"><span class="built_in">Math</span>.E; <span class="comment">// 自然对数的底数</span></span><br></pre></td></tr></table></figure><h2 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h2><p>当 JavaScript 解释器启动时，它将创建一个新的全局对象，并给它一组定义的初始属性。</p><ul><li>全局属性，如 undefined、Infinity 和 NaN;</li><li>全局函数，如：isNaN()、parseInt() 和 eval();</li><li>构造函数，如：Date()、RegExp()、String()、Object() 和 Array()</li><li>全局对象，如：Math 和 JSON;</li></ul><h2 id="包装对象"><a href="#包装对象" class="headerlink" title="包装对象"></a>包装对象</h2><ul><li>String()</li><li>Number()</li><li>Boolean()<br>字符串字面量、数字字面量、布尔字面量均可以使用”.”符号引用属性值，当属性值是一个函数时，称其为方法。只有对象有属性，JavaScript 在创建字符串、数字、布尔值时会自动的通过调用 new String(); new Number(); new Boolean() 的方式调用。</li></ul><h2 id="RegExp-对象"><a href="#RegExp-对象" class="headerlink" title="RegExp 对象"></a>RegExp 对象</h2><p><code>var expression = /pattern/flags;</code></p><p>pattern 是正则表达式，可以包含字符类，限定符，分组，向前查找以及反向查找。flag是标志，有 3 种：</p><ul><li>g: 全局(global)模式</li><li>i: 表示不区分大小写</li><li>m: 表示多行(multiline)模式</li></ul><p>RegExp 构造函数的模式参数是字符串，在某些情况下需要双重转义；</p><h3 id="RegExp-实例属性"><a href="#RegExp-实例属性" class="headerlink" title="RegExp 实例属性"></a>RegExp 实例属性</h3><ul><li>global 布尔值，是否设置了 g 标志</li><li>ignoreCase 布尔值，是否设置了 i 标志</li><li>lastIndex 整数，表示开始搜索下一个匹配项的字符位置，从 0 算起</li><li>multiline 布尔值，是否设置了 m 标志</li><li>source 正则表达式的字符串表示，按照字面量形式而非传入构造函数中的字符串模式返回；</li></ul><h3 id="RegExp-实例方法"><a href="#RegExp-实例方法" class="headerlink" title="RegExp 实例方法"></a>RegExp 实例方法</h3><ul><li>exec() ；<ul><li>接收一个参数，要引用匹配模式的字符串，返回包含第一个匹配项信息的数组；</li><li>没有匹配项的情况下返回 null</li><li>返回的数组虽然是 Array 的实例，但包含两个属性：index 和 input<ul><li>index 表示匹配项子在字符串中的位置</li><li>input 表示应用正则表达式的字符串</li></ul></li><li>exec() 方法在设置了全局标志的情况下，每次调用该方法都会在字符串中继续查找新匹配项。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">"mom and dad and baby"</span>;</span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/mom( and dad( and baby)?)?/gi</span>;</span><br><span class="line"><span class="keyword">var</span> mataches = pattern.exec(text);</span><br><span class="line"><span class="built_in">console</span>.log(matches.index); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(matches.input); <span class="comment">// "mom and dad and baby"</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">0</span>]); <span class="comment">// "mom and dad and baby"</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">1</span>]); <span class="comment">// " and dad and baby"</span></span><br><span class="line"><span class="built_in">console</span>.log(matches[<span class="number">2</span>]); <span class="comment">// " and baby"</span></span><br></pre></td></tr></table></figure><p>总之：正则分组之后匹配到的结果如果匹配成功则会得到数组，数组中第 0 项是与整个模式匹配的字符串，从第一项开始就是数正则表达式中的左括号就可以了，左括号是第几个，则解析出来的数据就是数组中下标为该数字的元素`</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;javaScript的几个内置对象&quot;&gt;&lt;a href=&quot;#javaScript的几个内置对象&quot; class=&quot;headerlink&quot; title=&quot;javaScript的几个内置对象&quot;&gt;&lt;/a&gt;javaScript的几个内置对象&lt;/h2&gt;&lt;h2 id=&quot;Date对象&quot;&gt;&lt;a href=&quot;#Date对象&quot; class=&quot;headerlink&quot; title=&quot;Date对象&quot;&gt;&lt;/a&gt;Date对象&lt;/h2&gt;&lt;p&gt;ECMAScript 5 提供了两个方法：Date.parase() 和 Date.UTC() 返回日期的毫秒数&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; now = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;();   &lt;span class=&quot;comment&quot;&gt;//创建对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;()); &lt;span class=&quot;comment&quot;&gt;//返回一个完整的日期时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(now.getDate()); &lt;span class=&quot;comment&quot;&gt;//返回从1开始计数的天数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(now.getDay()); &lt;span class=&quot;comment&quot;&gt;//返回当前周几&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(now.getFullYear()); &lt;span class=&quot;comment&quot;&gt;//返回当前年份&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(now.getMonth()+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;//返回当前月份&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(now.getHours());  &lt;span class=&quot;comment&quot;&gt;//当地时间的小时&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; then = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2011&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;// 2011年10月10日&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;日期格式化方法&quot;&gt;&lt;a href=&quot;#日期格式化方法&quot; class=&quot;headerlink&quot; title=&quot;日期格式化方法&quot;&gt;&lt;/a&gt;日期格式化方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;toDateString();&lt;/li&gt;
&lt;li&gt;toTimeString();&lt;/li&gt;
&lt;li&gt;toLocaleDateString();&lt;/li&gt;
&lt;li&gt;toLocalTimeString();&lt;/li&gt;
&lt;li&gt;toUTCString()&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JS系列" scheme="http://yoursite.com/categories/JS%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js表达式和运算符</title>
    <link href="http://yoursite.com/2015/06/06/js%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://yoursite.com/2015/06/06/js表达式和运算符/</id>
    <published>2015-06-05T16:00:00.000Z</published>
    <updated>2018-05-30T06:10:33.422Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript 解释器会将表达式计算出一个结果，程序中最常见的变量就是一种表达式。变量名也是一种表达式。复杂表达式是由简单表达式组成的，最常用的方法是使用运算符。</p><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><h3 id="原始表达式"><a href="#原始表达式" class="headerlink" title="原始表达式"></a>原始表达式</h3><p>原始表达式是表达式的最小单位，通常包含：</p><ul><li>常量</li><li>直接量</li><li>关键字</li><li>变量</li></ul><a id="more"></a><h4 id="对象和数组的初始化表达式"><a href="#对象和数组的初始化表达式" class="headerlink" title="对象和数组的初始化表达式"></a>对象和数组的初始化表达式</h4><ul><li>数组表达式<ul><li><code>[]</code></li><li><code>[1+2,3+1]</code></li><li><code>var matrix = [[1,2,3],[1,2,2],[2,3,1]];</code></li><li><code>[0,,,1]</code></li></ul></li><li>对象表达式<ul><li><code>var p = {name: &quot;Hiraku&quot;, age: 17};</code></li><li><code>var q = {};</code></li><li><code>q.x = 2.3</code></li><li><code>var data = {casData:{cas: canvas, ctx: context}, lineData{lineStyle:&quot;red&quot;,lineWidth:2}}</code></li></ul></li><li>函数定义表达式<ul><li><code>var square = function(x){ return x * x};</code></li></ul></li><li>访问对象属性的方式<ul><li>obj.key;</li><li>obj[key];</li></ul></li><li>调用表达式: 函数表达式开始，这个函数表达式指代了要调用的函数，函数表达式后是一对圆括号，括号内是以逗号隔开的参数；<ul><li><code>f(0);</code></li><li><code>Math.max(1,2,3);</code></li></ul></li><li>对象创建表达式<ul><li><code>new Object()</code></li><li><code>new Point(1,3)</code></li><li>无参数时()可以省略： <code>new Object</code></li></ul></li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>ECMAScript 描述了一组用于操作数组的操作符，分为算术操作符、位操作符、关系操作符合相等操作符。对于对象，相应的操作符通常都会调用对象的 valueOf() 方法或者 toString() 方法。</p><h3 id="比较、typeof、-、-、-、-、-、-、-、-、三元、逻辑运算符"><a href="#比较、typeof、-、-、-、-、-、-、-、-、三元、逻辑运算符" class="headerlink" title="比较、typeof、+、-、*、/、%、=、==、===、三元、逻辑运算符"></a>比较、typeof、+、-、*、/、%、=、==、===、三元、逻辑运算符</h3><ul><li><p>比较运算符</p><ul><li>&lt;</li><li><blockquote></blockquote></li><li><p>=</p></li><li><p>&lt;=</p></li><li>!=</li></ul></li><li>判断数据类型<ul><li>typeof(变量名);</li></ul></li><li>算术运算符<ul><li>加运算：<ul><li>两个数据类型都为数字类型变量相加，得到的是数字类型。</li><li>一个为数字类型的变量和一个为字符串类型的变量相加，得到的是一个字符串类型，加号起一个连接的作用。</li></ul></li><li>减运算<ul><li>如果两个变量都为数字类型相减，得到的是数字类型。</li><li>如果一个为数字类型的变量，一个为数字字符串，相减得到的是数字类型。</li><li>如果一个为数字类型的变量，一个为非数字字符串，相减得到的NaN,数字类型。</li></ul></li><li><code>*</code> 乘运算<ul><li>Inifinity 与 0 相乘， undefined。</li></ul></li><li><code>/</code> 除运算<ul><li>两个都为数字类型的变量，相除得到的是数字类型。</li><li>如果一个为数字类型的变量，一个为数字字符串变量，相除得到的是数字类型。</li><li>如果一个为数字类型的变量，一个为非数字字符串，相除得到的NaN,数字类型。</li><li>如果0作为除数，得到的是infinity(无限大)，是一个数字类型。</li><li>0 / 0 是 undefined。</li><li>Infinity / Infinity 结果是 NaN。</li></ul></li><li><code>%</code> 取余数</li></ul></li><li>()优先级<ul><li>先计算()括号里边的值。</li></ul></li><li>等号运算符<ul><li>“=” 赋值预算符</li><li>“==” 比较运算符: 只判断内容是否相同，不判断数据类型。</li><li>“===” 比较运算符: 不仅判断内容是否相同，还判断数据类型是否相同。</li><li>“!=” 不等于: 只判断内容是否不相同，不判断数据类型。</li><li>“!==” 不等于: 不仅判断内容是否不相同，还判断数据类型是否相同。</li></ul></li><li>三元运算符<ul><li>语法：<ul><li>表达式？如果表达式的值为true,执行表达式后边的代码，如果值为false,执行冒号后边的值。</li><li>三元运算符可以理解为if..else的另外一种写法。</li></ul></li></ul></li><li>逻辑运算符：逻辑运算的前提是参与运算的变量结果为Boolean类型。<ul><li>或（||）<ul><li>参与运算，只要满足一个为true,或运算最后的值为true.</li><li>参与运算的值都为false,或运算最后的值为false.</li></ul></li><li>且（&amp;&amp;）<ul><li>参与运算，只要满足一个为false,或运算最后的值为false.</li><li>参与运算，都为true的时候，且运算最后的值为true.</li></ul></li><li>非（!）<ul><li>如果运算结果为true,非运算结果为false</li><li>如果运算结果为false,非运算结果为true.</li></ul></li></ul></li></ul><h4 id="非"><a href="#非" class="headerlink" title="非"></a>非</h4><ul><li>如果操作数是一个对象，返回 false</li><li>如果操作数是一个空字符串，返回 true</li><li>如果操作数是一个非空字符串，返回 false</li><li>如果操作数是数值 0 ，返回 true</li><li>如果操作数是任意非 0 数值，包括 Infinity ，返回 true</li><li>如果操作数是 null ，返回 true</li><li>如果操作数是 NaN ，返回 true</li><li>如果操作数是 undefined ，返回 true<h4 id="与"><a href="#与" class="headerlink" title="与"></a>与</h4></li><li>如果第一个操作数是对象，返回第二个操作数；</li><li>如果第二个操作数是对象，只有第二个数求值结果为 true 是，返回该对象</li><li>如果两个都是对象，返回第二个；</li><li>如果有一个操作数是 null ，返回 null</li><li>如果有一个操作数是 NaN ，返回 NaN</li><li>如果有一个操作数是 undefined ，返回 undefined<h4 id="或"><a href="#或" class="headerlink" title="或"></a>或</h4></li><li>如果第一个操作数是对象，返回第一个；</li><li>如果第一个操作数求值结果 false ，返回第二个</li><li>如果两个都是对象，返回第一个；</li><li>如果两个操作数是 null ，返回 null</li><li>如果两个操作数是 NaN ，返回 NaN</li><li>如果两个操作数是 undefined ，返回 undefined</li></ul><p>总结逻辑运算符：</p><ol><li>&amp;&amp;和||都采取短路运算，即第一个能够决定结果就不再看第二个了</li><li>&amp;&amp; 的要求比较宽松 要两个都是true才是true 所以看到第一个是false就没有必要继续完后看了</li><li>|| 的要求比较严格，要两个都是false才是false，所以看到第一个是true就没有必要继续完后看了</li><li>&amp;&amp;和||不但可以操作布尔类型的值，对其他类型的值也可以进行操作，并返回可以决定表达式结果的那个值。</li></ol><h2 id="自增自减"><a href="#自增自减" class="headerlink" title="自增自减"></a>自增自减</h2><ul><li>++i，i++<ul><li>在没有参加运算的情况下，++i i++都是在变量的基础上加1。</li><li>在参加运算的情况下：</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n1=<span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> n2=n1++;  <span class="comment">// 先把n1的值赋给n2,然后n1执行加1的操作。</span></span><br><span class="line">Var n2=++n1;  <span class="comment">// 先执行n1加1的操作，再赋值给n2.</span></span><br></pre></td></tr></table></figure><p>总的来说：</p><ul><li>递增++ 递减–</li><li>a++ 先参与运算 后自加</li><li>++a 先自加 后参与运算</li></ul><p>注意：</p><ul><li>在应用于一个包含有效数字字符串是，先将其转换为数字值再执行加减1的操作。</li><li>在应用于一个不包含有效数字字符的字符串时，将变量的值设置为 NaN。</li><li>在应用于布尔值 false 时，先将其转换为 0 再执行加减 1 的操作。</li><li>在应用于布尔值 true 时，先将其转换为 1 再执行加减 1 的操作。</li><li>在应用于对象时，先抵用对象的 valueOf 方法以取得一个可供操作的值，然后对该值应用前面的规则。如果结果是NaN，则调用 toString() 方法后再应用前述的规则。</li></ul><h3 id="带操作的赋值运算符"><a href="#带操作的赋值运算符" class="headerlink" title="带操作的赋值运算符"></a>带操作的赋值运算符</h3><p><img src="/images/赋值运算符.png" alt="赋值运算符"></p><h2 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h2><p>0 正 1 负，最高位表示符号位。正数和负数都是以二进制码来存储，但负数使用的格式是二进制补码。计算过程如下：</p><ul><li>求这个数绝对值的二进制码；</li><li>求二进制反码；</li><li><p>得到的反码加 1。<br>ECMAScript 中，对 NaN, Infinity 值应用位操作时，这两个值都当做 0 来处理。</p></li><li><p>按位非(~)</p></li><li>按位与(&amp;)</li><li>按位或(|)</li><li>按位异或(^)</li><li>左移(&lt;&lt;)</li><li>有符号右移(&gt;&gt;)</li><li>无符号右移(&gt;&gt;&gt;)</li></ul><h2 id="instanceof-操作符"><a href="#instanceof-操作符" class="headerlink" title="instanceof 操作符"></a>instanceof 操作符</h2><p>测试对象类，左操作数是一个对象，右操作数是标识对象的类。如果左侧的对象是右侧类的实例，则表达式返回true，否则返回false。</p><h2 id="操作符优先级"><a href="#操作符优先级" class="headerlink" title="操作符优先级"></a>操作符优先级</h2><p><img src="/images/操作符优先级.jpg" alt="操作符优先级"></p><h2 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h2><p>eval() 是一个函数，但它已经被当做运算符来对待了。</p><h3 id="eval-1"><a href="#eval-1" class="headerlink" title="eval()"></a>eval()</h3><p>eval() 只有一个参数。如果传入的不是字符串，直接返回这个参数，如果是字符串，会把字符串当成 JavaScript 代码进行编译，如果便以失败抛出异常，编译成功则执行这段代码。返回字符串中最后一个表达式或语句的值，如果最后一个表达式中没有返回值，则返回 undefined。</p><p>eval() 它使用了调用它的变量作用域环境。它查找变量的值和定义新变量和函数的操作和局部作用域中的代码完全一样。</p><h3 id="全局的eval"><a href="#全局的eval" class="headerlink" title="全局的eval()"></a>全局的eval()</h3><p>eval() 具有改变局部变量的能力。当直接使用 “eval” 名称来调用 eval() 函数时，通常称为”直接 eval”.直接调用 eval() 时，它总是调用它的上下文作用域内执行。其它间接调用使用全局对象作为其上下文作用域，并且无法读、写、定义局部变量和函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> geval = <span class="built_in">eval</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="string">"global"</span>, y = <span class="string">"global"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="string">"local"</span>;</span><br><span class="line">  <span class="built_in">eval</span> (<span class="string">"x += 'changed'"</span>);</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> y = <span class="string">"local"</span>;</span><br><span class="line">  geval (<span class="string">"y += 'changed'"</span>);</span><br><span class="line">  <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(f(),x);</span><br><span class="line"><span class="built_in">console</span>.log(g(),y);</span><br></pre></td></tr></table></figure><h3 id="严格的eval"><a href="#严格的eval" class="headerlink" title="严格的eval()"></a>严格的eval()</h3><p>ECMAScript 5 严格模式中，eval() 是私有上下文环境中的局部 eval()，eval() 执行的代码段可以查询或更改局部变量，但不能在局部作用域中定义新变量。</p><h3 id="eval总结"><a href="#eval总结" class="headerlink" title="eval总结"></a>eval总结</h3><ul><li>函数是封装了一段可以重复执行的代码</li><li>eval方法的功能：执行一段JS代码(封装了代码)</li><li>在eval方法中没有作用域的概念（ES5严格模式有了独立的作用域）——&gt;声明的变量都是全局变量，函数都是全局函数</li></ul><p>eval和函数的比较</p><ol><li>eval封装了一段代码（只能执行一次）；函数封装了一段代码（可以重复执行）</li><li>eval中没有独立作用域的——&gt;声明的变量和函数都是全局的； 函数中是有独立作用域 ——&gt;函数内声明的变量和函数只能在当前函数内部所访问</li></ol><h2 id="delete运算符"><a href="#delete运算符" class="headerlink" title="delete运算符"></a>delete运算符</h2><p>delete 运算符时一元运算符，用来删除对象属性或者数组元素。删除属性或者删除数组元素不仅仅是设置了一个 undefined 的值。当删除一个属性时，这个属性将不再存在。读取一个不存在的属性将返回 undefined，但是可以通过 in 运算符来检测这个属性是否在对象中存在。</p><h2 id="void运算符"><a href="#void运算符" class="headerlink" title="void运算符"></a>void运算符</h2><p>void 运算符是一元运算符，在操作数之前，操作数可以使任意类型。通常用在客户端的URL–javascript: URL 中，在 URL 中可以写带有副作用的表达式，而 void 则让浏览器不比显示这个表达式的计算结果。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"javascript:void window.open();"</span>&gt;打开一个新窗口&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure><p>通过给 <code>&lt;a&gt;</code> 标签的onclick 绑定一个事件处理程序要比在 href 中写 “javascript:URL” 要更加清晰，这种情况下 void 可有可无。</p><h2 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符"></a>逗号运算符</h2><p>逗号运算符是二元操作符，操作数可以是任意类型，先计算左边操作数后计算右边操作数，最后返回右操作数的值。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript 解释器会将表达式计算出一个结果，程序中最常见的变量就是一种表达式。变量名也是一种表达式。复杂表达式是由简单表达式组成的，最常用的方法是使用运算符。&lt;/p&gt;
&lt;h2 id=&quot;表达式&quot;&gt;&lt;a href=&quot;#表达式&quot; class=&quot;headerlink&quot; title=&quot;表达式&quot;&gt;&lt;/a&gt;表达式&lt;/h2&gt;&lt;h3 id=&quot;原始表达式&quot;&gt;&lt;a href=&quot;#原始表达式&quot; class=&quot;headerlink&quot; title=&quot;原始表达式&quot;&gt;&lt;/a&gt;原始表达式&lt;/h3&gt;&lt;p&gt;原始表达式是表达式的最小单位，通常包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常量&lt;/li&gt;
&lt;li&gt;直接量&lt;/li&gt;
&lt;li&gt;关键字&lt;/li&gt;
&lt;li&gt;变量&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JS系列" scheme="http://yoursite.com/categories/JS%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js变量和数据类型</title>
    <link href="http://yoursite.com/2015/06/03/js%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2015/06/03/js变量和数据类型/</id>
    <published>2015-06-02T16:00:00.000Z</published>
    <updated>2018-05-30T03:24:56.410Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>JavaScript是弱类型的语言，变量是松散的。所谓松散是可以保存任何类型的变量。即声明不同数据类型的变量使用同一个关键字 <code>var</code>，变量就是变化的量，变量的作用就是用来装数据的容器。声明变量的时候不用考虑类型，但是处理和计算的时候要考虑类型.</p><a id="more"></a><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><p>定义变量使用关键字 <code>var</code>来定义变量名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在全局作用域下声明了变量 a</span></span><br><span class="line"><span class="keyword">var</span> a; </span><br><span class="line"><span class="comment">// 使用赋值运算符来给变量赋值</span></span><br><span class="line">a = <span class="string">"a此时是字符串"</span>;</span><br></pre></td></tr></table></figure><p>赋值：</p><ul><li>赋值运算符为“=”，这个等号不用判断两者是否相同。</li><li>如果判断是否相同，可使用==（===）。</li></ul><p>以上两步可简写为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"a此时是字符串"</span>;</span><br></pre></td></tr></table></figure><p>注意：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  msg = <span class="string">"我是函数内部定义的全局变量"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面例子省略了<code>var</code>操作符， msg 就变成了全局变量，函数外部也能访问到，但不要这样做！。</p><h3 id="变量命名规范"><a href="#变量命名规范" class="headerlink" title="变量命名规范"></a>变量命名规范</h3><ul><li>由字母、数字、下划线、$ 组成且开头不能是数字定义变量名。</li><li>不能使用特殊符号或者特殊符号开头来定义变量名（_除外）。</li><li>不能以关键字来定义变量名</li><li>变量的名称要有实际意义</li><li>规则中所说的字母包括ASCII和Unicode字母字符，如汉字，但不推荐使用</li><li><p>变量的命名遵守驼峰命名法，首字母小写,第二个单词的首字母大写 例如：userName</p><ul><li>关键字</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>        <span class="keyword">do</span>          <span class="keyword">instanceof</span>     <span class="keyword">typeof</span></span><br><span class="line"><span class="keyword">case</span>         <span class="keyword">else</span>        <span class="keyword">new</span>            <span class="keyword">var</span></span><br><span class="line"><span class="keyword">catch</span>        <span class="keyword">finally</span>     <span class="keyword">return</span>         <span class="keyword">void</span></span><br><span class="line"><span class="keyword">continue</span>     <span class="keyword">for</span>         <span class="keyword">switch</span>         <span class="keyword">while</span></span><br><span class="line"><span class="keyword">debugger</span>*    <span class="function"><span class="keyword">function</span>    <span class="title">this</span>           <span class="title">with</span></span></span><br><span class="line"><span class="function"><span class="title">default</span>      <span class="title">if</span>          <span class="title">throw</span></span></span><br><span class="line"><span class="function"><span class="title">delete</span>       <span class="title">in</span>          <span class="title">try</span></span></span><br></pre></td></tr></table></figure><ul><li>不能使用保留字来定义变量名 (保留字)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">abstract        enum         int           short</span><br><span class="line">boolean         <span class="keyword">export</span>       interface     <span class="keyword">static</span></span><br><span class="line">byte            extends      long          <span class="keyword">super</span></span><br><span class="line">char            final        native        synchronized</span><br><span class="line"><span class="class"><span class="keyword">class</span>           <span class="title">float</span>        <span class="title">package</span>       <span class="title">throws</span></span></span><br><span class="line"><span class="class"><span class="title">const</span>           <span class="title">goto</span>         <span class="title">private</span>       <span class="title">transient</span></span></span><br><span class="line"><span class="class"><span class="title">debugger</span>        <span class="title">implements</span>   <span class="title">protected</span>     <span class="title">volatile</span></span></span><br><span class="line"><span class="class"><span class="title">double</span>          <span class="title">import</span>       <span class="title">public</span></span></span><br></pre></td></tr></table></figure><p>注意：在JS中，是严格区分大小写的。</p><h3 id="执行环境和作用域"><a href="#执行环境和作用域" class="headerlink" title="执行环境和作用域"></a>执行环境和作用域</h3><p>执行环境是 JavaScript 中最为重要的一个概念。定义了变量或函数有权访问其它数据。每个环境中都有一个与之关联的变量对象，我们编写的代码无法访问，但是环境中定义的变量存放在这个对象中。</p><p>全局执行环境是最外围的一个执行环境。根据 ECMAScript 实现所在的宿主环境的不同，表示执行环境的对象也不一样。在 web 浏览器中，全局执行环境被认为是 window 对象，因此所有的全局变量和函数都是作为 window 对象的属性和方法创建的。某个环境中的代码全部执行完，该环境中的变量被销毁，保存在其中的所有的变量和函数定义也随之销毁。全局执行环境直到应用程序退出才销毁。</p><p>每个函数都有自己的执行环境。当代码在一个环境中执行时，会创建作用域链。作用域链式保证对执行环境有权访问的所有变量和函数的有序访问。作用域的前端始终都是当前执行的代码所在环境的变量对象。如果这个环境是函数，则将其活动对象作为变量对象。活动对象在最开始的时候只包含一个变量，即 arguments 对象。作用域中的下一个变量对象来说包含（外部的环境），而再下一个变量对象则来自下一个包含环境。这样，一直延续到全局执行环境，全局执行环境的变量对象始终都是作用域链中的最后一个对象。</p><p>一个变量的作用域是程序源代码中定义这个变量的区域。全局变量拥有全局作用域，在 JavaScript 代码中任何地方都是有定义的。而在函数内部声明的变量只有在函数体内有定义，它们是局部变量，作用域是局部的。</p><p>在函数体内部，局部变量的优先级高于同名的全局变量。</p><h4 id="函数作用域和声明提前"><a href="#函数作用域和声明提前" class="headerlink" title="函数作用域和声明提前"></a>函数作用域和声明提前</h4><p>块级作用域是指在一对花括号内的代码都具有各自的作用域，而且变量在声明它们的代码之外是不可见的。但是 JavaScript 没有块级作用域的概念。而是使用了函数作用域。JavaScript 的函数作用域是指函数内声明的所有变量在函数体内始终是可见的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>;                          <span class="comment">// i 在整个函数体内部有定义</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> o == <span class="string">'object'</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> j = <span class="number">0</span>;                        <span class="comment">// j 在函数体内有定义</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; <span class="number">10</span>; k++)&#123;      <span class="comment">// k 在函数体内是有定义的，不仅仅是在循环内</span></span><br><span class="line">      <span class="built_in">console</span>.log(k);                 <span class="comment">// 输出 0~9</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(k);                   <span class="comment">// 输出 10</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(j);                     <span class="comment">// j 已经定义了，但是可能没有初始化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="作为属性的变量"><a href="#作为属性的变量" class="headerlink" title="作为属性的变量"></a>作为属性的变量</h4><p>当声明一个变量时，实际上是定义了一个全局对象的一个属性，当使用 var 声明变量时，创建的这个对象是不可配置的，也就是说这个变量不能通过 delete 操作符来删除。如果在非严格模式下，给一个未声明的全局变量赋值的话， JavaScript 会自动创建一个全局变量。以这种方式创建的变量是全局对象的正常的可配置属性，并且可以删除它们。</p><h4 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h4><p>嵌套的函数体内部，可以访问它上一级作用域中的变量。</p><p>延长作用域链：</p><ul><li>try-catch 语句</li><li>with 语句</li></ul><h2 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h2><ul><li>标记清除</li><li>引用计数</li><li>性能问题</li><li>管理内存</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>javaScript 数据类型有两类： 基本数据类型 和 复杂数据类型，其中基本数据类型（简单类型）有： Number/String/Boolean/Uundefined/Null一种复杂数据类型：object：Array/Date/Math/RegExp/</p><h3 id="typeof-操作符"><a href="#typeof-操作符" class="headerlink" title="typeof 操作符"></a>typeof 操作符</h3><ul><li>“undefined” –&gt; 这个值未定义</li><li>“boolean” –&gt; 这个值是布尔值</li><li>“string” –&gt; 这个只是字符串</li><li>“number” –&gt; 这个值是数值</li><li>“object” –&gt; 这个值是对象或null</li><li>“function” –&gt; 这个值是函数</li></ul><p>typeof 操作符号后面的操作数可以是变量，也可以是字面量；</p><p>typeof 误区：</p><ul><li>null 值返回 “object”;</li><li>Safari5 以及之前的版本、Chrome7 以及之前的版本对正则表达式调用返回”object”，</li><li>其他浏览器在这种情况下返回”object”</li><li>未初始化的变量和没有定义的变量操作符 typeof 都返回 “undefined”， 但它们有本质区别</li></ul><h3 id="Number-数据类型"><a href="#Number-数据类型" class="headerlink" title="Number 数据类型"></a>Number 数据类型</h3><p>字面量： var num = 数字;</p><p>包括正数，负数，小数</p><ul><li>取值范围：<ul><li>能表示的最大值是±1.7976931348623157乘以10的308次方</li><li>能表示的最小值是±5 乘以10的-324次方</li></ul></li><li>表示方式<ul><li>十进制</li><li>十六进制 以 0x 开头，从 0-9，a(A) 到 f（F）的范围。</li><li>八进制 以 0 开头，0-7 组成。</li></ul></li><li>NaN (not a number) 也是 number 类型，NaN 不等于自身</li><li><p>两个都为字符串的变量相减，得到的是NaN.</p></li><li><p>浮点数：</p><ul><li>计算浮点数时会丢失精度</li><li>通常用整数的计算来表示浮点数的计算</li><li>不要以两个浮点数是否相等作为条件判断的依据（判断范围还是可以的）</li></ul></li></ul><h2 id="String-字符串类型"><a href="#String-字符串类型" class="headerlink" title="String,字符串类型"></a>String,字符串类型</h2><p>字面量： var str = “字符串”;</p><p>字符串的长度： str.length;</p><ul><li>凡是用””或者’’引起来的全是字符串类型。</li></ul><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><ul><li>\” 转双引号</li><li>\’ 转单引</li><li>\r 回车</li><li>\n 换行</li><li>\t 制表符</li><li>\f 进纸</li><li>\xnn 以十六进制表示一个字符(n 是 0~F)</li><li>\unnnn 以十六进制代码nnnn表示一个 Unicode 字符 (n 是 0~F)</li></ul><h3 id="字符串的特点"><a href="#字符串的特点" class="headerlink" title="字符串的特点"></a>字符串的特点</h3><p>ECMAScript 中的字符串是不可变的，也就是说，字符串一旦创建，它们的直就不能改变。要改变某个变量保存的字符串，首先要销毁原来的字符串，然后再用另一个包含心智的字符串填充该变量。如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Java"</span>;</span><br><span class="line">str = str + <span class="string">"Script"</span>;</span><br></pre></td></tr></table></figure><h3 id="转换为字符串"><a href="#转换为字符串" class="headerlink" title="转换为字符串"></a>转换为字符串</h3><p>数值、布尔值、对象和字符串值都有 <code>toString()</code>方法, 但是 null 和 undefined 没用这个方法。</p><p>调用toString() 方法时，大多数情况下不传参数，但是如果传递了一个参数，输出数值的基数。默认情况下，toString() 方法以十进制格式返回数值字符串表示。而通过传递基数，可以输出对应的二进制、八进制、十六进制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(n.toString());   <span class="comment">// "10"</span></span><br><span class="line"><span class="built_in">console</span>.log(n.toString(<span class="number">2</span>));   <span class="comment">// "1010"</span></span><br><span class="line"><span class="built_in">console</span>.log(n.toString(<span class="number">8</span>));   <span class="comment">// "12"</span></span><br><span class="line"><span class="built_in">console</span>.log(n.toString(<span class="number">10</span>));   <span class="comment">// "10"</span></span><br><span class="line"><span class="built_in">console</span>.log(n.toString(<span class="number">16</span>));   <span class="comment">// "a"</span></span><br></pre></td></tr></table></figure><p>在不知道要转换的值是什么类型的时候，可以用 String() 函数，它可以将任意类型转成字符串。</p><h2 id="Boolean-布尔类型"><a href="#Boolean-布尔类型" class="headerlink" title="Boolean 布尔类型"></a>Boolean 布尔类型</h2><ul><li>布尔数据类型两个数据值: true/false</li><li>实际运算中，true 代表1, false代表0;</li></ul><h2 id="Undefined-表示声明但未赋值的变量"><a href="#Undefined-表示声明但未赋值的变量" class="headerlink" title="Undefined 表示声明但未赋值的变量"></a>Undefined 表示声明但未赋值的变量</h2><p>在 js 中，一下四种情况的返回值是 undefined</p><ul><li>变量声明了但没有赋值</li><li>函数没有返回值默认返回undefined</li><li>函数传递的实参个数少于形参个数时，未传递的参数值为undefined</li><li>对象没有定义的属性默认为undefined</li></ul><h2 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h2><p>用 <code>typeof</code>判断时值为 <code>object</code>(值为空)/引用为空，内存里找不到这个变量。</p><p>再如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> == <span class="literal">null</span>);  <span class="comment">// true 两等号判断，两边都转成false</span></span><br></pre></td></tr></table></figure><p>总的来说，只要意在保存对象的变量还没有真正保存对象，就应该让该变量保存 null 值，这样做体现了 null 作为空对象指针的惯例，也区分了 undefined 和 null。</p><h2 id="复杂类型（来自JavaScript高级程序设计）"><a href="#复杂类型（来自JavaScript高级程序设计）" class="headerlink" title="复杂类型（来自JavaScript高级程序设计）"></a>复杂类型（来自JavaScript高级程序设计）</h2><ul><li>object 对象</li></ul><p>ECMAScript 中的对象就是一组数据和功能的集合。可以通过 new 操作符后跟要创建的对象类型的名称来创建。而创建 Object 类型的实例并为其添加属性或方法，就可以创建自定义对象，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure><h3 id="Object的每个实例具有的属性和方法"><a href="#Object的每个实例具有的属性和方法" class="headerlink" title="Object的每个实例具有的属性和方法"></a>Object的每个实例具有的属性和方法</h3><ul><li>constructor： 保存着用于创建当前对象的函数，即构造函数。</li><li>hasOwnProperty(propertyName): 用于检查给定的属性在当前对象的实例中(而不是在原型中)存在；参数是字符串。</li><li>isPrototypeOf(object): 检查传入的对象是否是传入对象的原型。</li><li>propertyIsEnumerable(propertyName): 检查给定的属性是否能够使用 for-in 语言来枚举。参数是字符串。</li><li>toLocalString(): 返回对象的字符串表示，该字符串与执行环境的地区对应。</li><li>toString(): 返回对象的字符串表示。</li><li>valueOf(): 返回对象的字符串、数值、或布尔值表示。通常与 toString() 方法的返回值相同。</li></ul><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>隐式数据类型转换</p><p>变量参与到运算中，程序对变量进行的数据类型转换（不是程序员进行的数据类型）</p><p>强制数据类型转换</p><ul><li>将数字转换为字符串<ul><li>String</li><li>变量.toString ，注意：null 和 undefined 没有 toString() 方法</li></ul></li><li>将字符串转换为数字<ul><li>Number<ul><li>转换后保留原数据，不会对数据进行四舍五入。</li><li>非数字类型字符串转换后，比如 undefined，得到 NaN 。</li><li>如果字符串中包含有效的十六进制格式，则将其转换为相同大小的十进制整数值。</li></ul></li><li>parseInt<ul><li>对小数转换后保留的是整数部分，不会对数据进行四舍五入。</li><li>如果是数字后边有非数字字符串，转换后得到的是前边数字的整数部分。</li></ul></li><li>parseFloat<ul><li>转换为数字类型之后保留原数据，不进行四舍五入。</li><li>非数字类型字符串转换后，得到 NaN 。</li><li>如果是数字后边有非数字字符串，转换后得到的是前边数字的部分。</li></ul></li></ul></li><li>将其他类型转换为布尔类型：所有类型的值都可以转化成布尔值<ul><li>Boolean</li><li>会转化成false的值有：<ul><li>空字符串</li><li>数值零</li><li>NaN</li><li>undefined</li><li>null</li></ul></li></ul></li></ul><p>假值：空字符串””/数字0/null/undefined/false/NaN</p><h2 id="基本数据类型和复杂数据类型总结"><a href="#基本数据类型和复杂数据类型总结" class="headerlink" title="基本数据类型和复杂数据类型总结"></a>基本数据类型和复杂数据类型总结</h2><ul><li>基本类型—值类型— String Undefined Number Boolean Null</li><li><p>复杂类型—引用类型– Object 数组–Array,Date….</p></li><li><p>基本类型的值存储在—- 栈中</p></li><li><p>复杂类型的地址(引用)存储在栈中,—地址指向的空间中的对象(对象)—对象存储在堆中</p><ul><li>创建对象并返回对象—返回的是对象的地址(对象在堆空间中的地址)</li></ul></li><li><p>基本类型传值的时候，传递的是值</p></li><li><p>复杂类型(引用类型)传递的时候,传递的是:地址(引用)</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;p&gt;JavaScript是弱类型的语言，变量是松散的。所谓松散是可以保存任何类型的变量。即声明不同数据类型的变量使用同一个关键字 &lt;code&gt;var&lt;/code&gt;，变量就是变化的量，变量的作用就是用来装数据的容器。声明变量的时候不用考虑类型，但是处理和计算的时候要考虑类型.&lt;/p&gt;
    
    </summary>
    
      <category term="JS系列" scheme="http://yoursite.com/categories/JS%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js词法结构</title>
    <link href="http://yoursite.com/2015/06/01/js%E8%AF%8D%E6%B3%95%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2015/06/01/js词法结构/</id>
    <published>2015-05-31T16:00:00.000Z</published>
    <updated>2018-05-30T02:32:49.736Z</updated>
    
    <content type="html"><![CDATA[<p>js 的词法结构是一套基本规则，用来描述如何使用 js 编程。它规定了如何变量名长什么样，如何写注释以及程序语句之间如何分隔。</p><a id="more"></a><h2 id="字符集（JavaScript权威指南）"><a href="#字符集（JavaScript权威指南）" class="headerlink" title="字符集（JavaScript权威指南）"></a>字符集（JavaScript权威指南）</h2><h3 id="区分大小写"><a href="#区分大小写" class="headerlink" title="区分大小写"></a>区分大小写</h3><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>关键字、变量名、函数名、函数参数和所有标识符都是采用一致的大小写。</p><ul><li>第一个字符必须是一个字母、下划线(_)或一个美元符($)；</li><li>其它字符可以是字母、下划线、美元符号或者数字</li><li>驼峰命名法</li></ul><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>js 没有使用但保留的关键字</p><p><code>class const enum export extends import super</code></p><h3 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h3><ul><li>js已经使用的关键字</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>     <span class="keyword">delete</span>   <span class="function"><span class="keyword">function</span>    <span class="title">return</span>    <span class="title">typeof</span></span></span><br><span class="line"><span class="function"><span class="title">case</span>      <span class="title">do</span>       <span class="title">if</span>          <span class="title">switch</span>    <span class="title">var</span> </span></span><br><span class="line"><span class="function"><span class="title">catch</span>     <span class="title">else</span>     <span class="title">in</span>          <span class="title">this</span>      <span class="title">void</span> </span></span><br><span class="line"><span class="function"><span class="title">continue</span>  <span class="title">false</span>    <span class="title">instanceof</span>  <span class="title">throw</span>     <span class="title">while</span></span></span><br><span class="line"><span class="function"><span class="title">debugger</span>  <span class="title">finally</span>  <span class="title">new</span>         <span class="title">true</span>      <span class="title">with</span></span></span><br><span class="line"><span class="function"><span class="title">default</span>   <span class="title">for</span>      <span class="title">null</span>        <span class="title">try</span></span></span><br></pre></td></tr></table></figure><ul><li>严格模式下的保留字</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">implements <span class="keyword">let</span> private public <span class="keyword">yield</span></span><br><span class="line">interface  package protected <span class="keyword">static</span></span><br><span class="line"><span class="built_in">arguments</span> <span class="built_in">eval</span></span><br></pre></td></tr></table></figure><ul><li>js 尽量避免使用的标识符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">abstract  double   goto        native     atatic</span><br><span class="line">boolean   enum     implements  package    <span class="keyword">super</span></span><br><span class="line">byte      <span class="keyword">export</span>   <span class="keyword">import</span>      private    synchronized</span><br><span class="line">char      extends  int         protected  throws</span><br><span class="line"><span class="class"><span class="keyword">class</span>     <span class="title">final</span>    <span class="title">interface</span>   <span class="title">public</span>     <span class="title">transient</span></span></span><br><span class="line"><span class="class"><span class="title">const</span>     <span class="title">float</span>    <span class="title">long</span>        <span class="title">short</span>      <span class="title">volatiole</span></span></span><br></pre></td></tr></table></figure><ul><li>js 预定义的全局变量和函数名</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">arguments</span>           <span class="built_in">encodeURI</span>  <span class="literal">Infinity</span>  <span class="built_in">Number</span>          <span class="built_in">RegExp</span></span><br><span class="line">encodeURICompnent   <span class="built_in">Array</span>      <span class="built_in">isFinite</span>  <span class="built_in">Object</span>          <span class="built_in">String</span></span><br><span class="line"><span class="built_in">Boolean</span>             <span class="built_in">Error</span>      <span class="built_in">isNaN</span>     <span class="built_in">parseFloat</span>      <span class="built_in">SyntaxError</span> </span><br><span class="line"><span class="built_in">Date</span>                <span class="built_in">eval</span>       <span class="built_in">JSON</span>      <span class="built_in">parseInt</span>        <span class="built_in">TypeError</span></span><br><span class="line"><span class="built_in">decodeURI</span>           <span class="built_in">EvalError</span>  <span class="built_in">Math</span>      <span class="built_in">RangeError</span>      <span class="literal">undefined</span></span><br><span class="line"><span class="built_in">decodeURIComponent</span>  <span class="built_in">Function</span>   <span class="literal">NaN</span>       <span class="built_in">ReferenceError</span>  <span class="built_in">URIError</span></span><br></pre></td></tr></table></figure><h3 id="空格、换行符、格式控制"><a href="#空格、换行符、格式控制" class="headerlink" title="空格、换行符、格式控制"></a>空格、换行符、格式控制</h3><ul><li><code>\u0020</code> 空格符</li><li><code>\u0009</code> 水平制表符</li><li><code>\u000B</code> 垂直制表符</li><li><code>\u000C</code> 换页符</li><li><code>\u00A0</code> 不中断空白符</li><li><code>\uFEFF</code> 字节标记</li><li><code>\u000A</code> 换行符</li><li><code>\u000D</code> 回车符</li><li><code>\u2028</code> 行分隔符</li><li><code>\u2029</code> 段分隔符</li><li><code>\u200F</code> 格式控制符</li><li><code>\u200E</code> 格式控制符</li><li><code>\u200D</code> 零宽连接符</li><li><code>\uFEFF</code> 零宽非连接符<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2></li><li>单行注释</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单行注释</span></span><br></pre></td></tr></table></figure><ul><li>单行段落注释</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*这是一个段落注释*/</span></span><br></pre></td></tr></table></figure><ul><li>多行注释</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 多行注释</span></span><br><span class="line"><span class="comment">* 这里的注释可以连续写几行</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="直接量"><a href="#直接量" class="headerlink" title="直接量"></a>直接量</h2><p>直接量就是程序中直接使用的数据值，如：</p><ul><li>1.2 // 数字</li><li>“123” // 字符串</li><li>“string” // 字符串</li><li>true // 布尔值</li><li>/^/w+/g // 正则表达式直接量</li><li>null // 空</li><li><code>{name:&quot;Hiraku&quot;,age:12}</code> // 对象</li><li><code>[1,2,4]</code> // 数组</li></ul><h2 id="分号的问题"><a href="#分号的问题" class="headerlink" title="分号的问题"></a>分号的问题</h2><p>JavaScritp 使用分号(;)将语句和语句分开。JavaScript 并不是所有换行处都加分号，而是只有在缺少了分号就无法正确解析代码的时候，JavaScript才会填补分号。</p><p>如果当前语句和下一行语句无法合并解析，JavaScript 则在第一行后面填补分号，这是通用规则，但是有两个例外，一个是在涉及语句时，如果这三个关键字后紧跟着换行，JavaScript 则会在换行处填补分号。也就是说， return、break 和 continue 语句之后不能直接换行.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js 的词法结构是一套基本规则，用来描述如何使用 js 编程。它规定了如何变量名长什么样，如何写注释以及程序语句之间如何分隔。&lt;/p&gt;
    
    </summary>
    
      <category term="JS系列" scheme="http://yoursite.com/categories/JS%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js初识</title>
    <link href="http://yoursite.com/2015/05/30/js%E5%88%9D%E8%AF%86/"/>
    <id>http://yoursite.com/2015/05/30/js初识/</id>
    <published>2015-05-29T16:00:00.000Z</published>
    <updated>2018-05-30T02:33:14.061Z</updated>
    
    <content type="html"><![CDATA[<p>ECMAScript 是一种由 Ecma 国际前身为欧洲计算机制造商协会,英文名称是European Computer Manufacturers Association，制定的标准。 JavaScript 是由公司开发而成的，公司开发而成的一定是有一些问题，不便于其他的公司拓展和使用。所以欧洲的这个ECMA的组织，牵头制定 JavaScript 的标准，取名为 ECMAScript。简单来说 ECMAScript 不是一门语言，而是一个标准。符合这个标准的比较常见的有：JavaScript、Action Script（Flash中用的语言）。就是说，你JavaScript学完了，Flash中的程序也会写了。 ECMAScript 在 2015 年 6 月，发布了 ECMAScript 6 版本，语言的能力更强。</p><h2 id="javaScript概念、组成"><a href="#javaScript概念、组成" class="headerlink" title="javaScript概念、组成"></a>javaScript概念、组成</h2><p>概念：js是一门在客户端进行交互的网页编程语言.</p><p>一个完整的 JavaScript实现应该由下列三个部分组成：</p><ul><li>组成：<ul><li>ECMAScript js标准</li><li>Dom 可以利用JS操作网页元素</li><li>Bom 通过api来操作浏览器</li></ul></li></ul><a id="more"></a><h3 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h3><p>web 浏览器是 ECMAScript 实现可能的宿主环境之一，ECMAScript 规定了语言的的下列组成部分：</p><ul><li>语法</li><li>类型</li><li>语句</li><li>关键字</li><li>保留字</li><li>操作符</li><li>对象</li></ul><p>ECMAScript 就是对实现这个标准规定的各方面内容的语言描述。</p><h3 id="DOM-文档对象模型-简介"><a href="#DOM-文档对象模型-简介" class="headerlink" title="DOM 文档对象模型 简介"></a>DOM 文档对象模型 简介</h3><p>文档对象模型是针对 XML 但经过扩展用于 HTML 的应用程序编程接口。DOM 把整个页面映射为一个多层节点结构。HTML 或 XML 页面中的每个组成部分都是某种类型的节点，这些节点又包含不同的数据类型的数据。</p><h3 id="BOM-浏览器对象模型-简介"><a href="#BOM-浏览器对象模型-简介" class="headerlink" title="BOM 浏览器对象模型 简介"></a>BOM 浏览器对象模型 简介</h3><p>BOM 只处理浏览器窗口和框架，习惯上把所有针对浏览器的 JavaScrip 扩展算作 BOM 的一部分。如：</p><ul><li>弹出新浏览器窗口</li><li>移动、缩放和关闭浏览器窗口的功能</li><li>提供浏览器信息信息的 navigator 对象</li><li>提供浏览器所加载页面详细信息的 location 对象</li><li>提供用户显示器分辨率详细信息的 screen 对象</li><li>对 cookie 的支持</li><li>像 XMLHttpRequest 和 IE 的 ActiveXObject 这样的自定义对象</li></ul><p>由于没 BOM 统一标准，所以各个浏览器都有自己的实现功能，尽管各规定浏览器都实现 <code>window</code> 对象和 <code>navigator</code> 对象；</p><ul><li>JavaScript 的特点<ul><li>简单易用</li><li>基于对象</li><li>基于过程</li><li>解释执行：js引擎来执行源代码 ， node 平台</li></ul></li><li>编译执行类语言有：Java c# 源代码 ==&gt; 可执行文件.dll ==&gt; 电脑执行.dll课执行文件</li><li>使用范围：<ul><li>表单验证</li><li>轮播图特效</li><li>游戏开发</li></ul></li></ul><h2 id="lt-script-gt-lt-script-gt-元素"><a href="#lt-script-gt-lt-script-gt-元素" class="headerlink" title="&lt;script&gt;&lt;/script&gt;元素"></a><code>&lt;script&gt;&lt;/script&gt;</code>元素</h2><p><code>&lt;script&gt;&lt;/script&gt;</code> 定义了6个属性</p><ul><li>async: 可选。立即下载脚标，对页面中其他元素没有影响。只对外部脚标文件有效</li><li>charset: 可选。 表示通过 src 属性指定的代码的字符集。大多数浏览器会忽略其值，很少用</li><li>defer：可选。 表示脚本可以延迟到文档完全被解析和显示之后再执行。只对外部脚本有效</li><li>language: 已废弃。</li><li>src：可选。要执行的外部文件</li><li>type：可选。考虑到最大程度的兼容，使用 <code>&quot;text/javascript&quot;</code></li></ul><h3 id="js书写位置"><a href="#js书写位置" class="headerlink" title="js书写位置"></a>js书写位置</h3><ul><li>内嵌式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>js 书写位置<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// js 代码段</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>外链式写法<ul><li>新建一个js文件</li><li>通过script标签里的src=”1.js”属性将JS文件调入到当前页面。</li></ul></li></ul><p>补充内嵌式写法：推荐Js代码最好放在body结束标签的后边。</p><h3 id="在XHTML中的用法"><a href="#在XHTML中的用法" class="headerlink" title="在XHTML中的用法"></a>在XHTML中的用法</h3><p>XHTML 即可扩展的超文本标记语言，是将 HTML 作为 XML 的应用重新定义的一个标准。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// &lt;![CDATA[</span></span></span><br><span class="line"><span class="undefined">  funciton foo()&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 代码段</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="javascript"><span class="comment">//]]&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="文档模式"><a href="#文档模式" class="headerlink" title="文档模式"></a>文档模式</h2><p>doctype: 标准模式、混杂模式</p><p>严格模式开启：<code>use strict;</code></p><h2 id="页面中输出消息的几种方式"><a href="#页面中输出消息的几种方式" class="headerlink" title="页面中输出消息的几种方式"></a>页面中输出消息的几种方式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">"信息"</span>)   在页面出现一个弹出框，将信息弹出。</span><br><span class="line">confirm(<span class="string">"信息"</span>) 在页面出现一个弹出框，将信息显示，常与<span class="keyword">if</span>判断语句结合使用。</span><br><span class="line">prompt(<span class="string">"信息"</span>)  弹出一个文本框，可以在文本框接收内容。常用于接收信息。</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"信息"</span>)将信息输出到控制台，常用于代码调试。</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"信息"</span>) 直接在页面输出消息。</span><br></pre></td></tr></table></figure><p>注：document.write(“信息”)，不仅可以输出内容，还可以输出html标签。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ECMAScript 是一种由 Ecma 国际前身为欧洲计算机制造商协会,英文名称是European Computer Manufacturers Association，制定的标准。 JavaScript 是由公司开发而成的，公司开发而成的一定是有一些问题，不便于其他的公司拓展和使用。所以欧洲的这个ECMA的组织，牵头制定 JavaScript 的标准，取名为 ECMAScript。简单来说 ECMAScript 不是一门语言，而是一个标准。符合这个标准的比较常见的有：JavaScript、Action Script（Flash中用的语言）。就是说，你JavaScript学完了，Flash中的程序也会写了。 ECMAScript 在 2015 年 6 月，发布了 ECMAScript 6 版本，语言的能力更强。&lt;/p&gt;
&lt;h2 id=&quot;javaScript概念、组成&quot;&gt;&lt;a href=&quot;#javaScript概念、组成&quot; class=&quot;headerlink&quot; title=&quot;javaScript概念、组成&quot;&gt;&lt;/a&gt;javaScript概念、组成&lt;/h2&gt;&lt;p&gt;概念：js是一门在客户端进行交互的网页编程语言.&lt;/p&gt;
&lt;p&gt;一个完整的 JavaScript实现应该由下列三个部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;组成：&lt;ul&gt;
&lt;li&gt;ECMAScript js标准&lt;/li&gt;
&lt;li&gt;Dom 可以利用JS操作网页元素&lt;/li&gt;
&lt;li&gt;Bom 通过api来操作浏览器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JS系列" scheme="http://yoursite.com/categories/JS%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>HTML元素分类、伪类、背景图片</title>
    <link href="http://yoursite.com/2015/05/28/HTML%E5%85%83%E7%B4%A0%E5%88%86%E7%B1%BB%E3%80%81%E4%BC%AA%E7%B1%BB%E3%80%81%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/"/>
    <id>http://yoursite.com/2015/05/28/HTML元素分类、伪类、背景图片/</id>
    <published>2015-05-27T16:00:00.000Z</published>
    <updated>2018-05-30T01:59:36.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS-Cascading-style-sheets写法"><a href="#CSS-Cascading-style-sheets写法" class="headerlink" title="CSS Cascading style sheets写法"></a>CSS Cascading style sheets写法</h2><ul><li>内嵌式</li><li><p>外链式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"1.css"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>行内样式</p></li></ul><a id="more"></a><h3 id="三种样式写法的区别"><a href="#三种样式写法的区别" class="headerlink" title="三种样式写法的区别"></a>三种样式写法的区别</h3><ul><li>内嵌样式表：<ul><li>影响范围限于当前页面，其他页面无效，不能真正实现结构和表现解耦</li></ul></li><li>外链样式表<ul><li>影响范围大，是整个站点，实现真正的结构表现分离</li></ul></li><li>行内样式表：<ul><li>仅限于当前标签，作用范围小。结构和表现完全耦合</li></ul></li></ul><h3 id="link和-import区别"><a href="#link和-import区别" class="headerlink" title="link和@import区别"></a>link和@import区别</h3><ul><li>link属于HTML标签，而@import是CSS提供的</li><li>页面加载时，link会同时加载，而@import引入的CSS要等到页面中的所有元素加载完再加载</li><li>@import有兼容性，而link是HTML标签，无兼容性问题</li><li>link方式的样式的权重高于@import的权重</li><li>link引入的CSS支持js修改样式，而@import导入的CSS不能被js代码修改样式；</li></ul><h2 id="html分类（显示方式）"><a href="#html分类（显示方式）" class="headerlink" title="html分类（显示方式）"></a>html分类（显示方式）</h2><h3 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h3><p>最常用的有： <code>div</code>,<code>p</code>, <code>li</code>, <code>h1-h6</code></p><p>特点：</p><ul><li>独占一行</li><li>可以定义宽度和高度</li><li>包含关系的时候，父元素和子元素都为块元素的时候，子元素的宽度等于父元素的宽度</li></ul><h3 id="行内元素（内联元素）"><a href="#行内元素（内联元素）" class="headerlink" title="行内元素（内联元素）"></a>行内元素（内联元素）</h3><p>典型代表：strong span a em b del s ins i u</p><p>特点：</p><ul><li>不能设置宽高，</li><li>宽高度由内容撑开</li><li>在一行上显示</li></ul><h3 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h3><p>典型代表<code>img</code> <code>input</code></p><p>特点：</p><ul><li>在一行显示</li><li>可以定义宽高</li></ul><h3 id="元素之间的转换"><a href="#元素之间的转换" class="headerlink" title="元素之间的转换"></a>元素之间的转换</h3><ul><li>行内元素转成块级元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">display:block;</span><br></pre></td></tr></table></figure><ul><li>块级元素转成行内元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">display:inline-block;</span><br></pre></td></tr></table></figure><ul><li>块元素转成行内元素</li><li>块、行内元素转成行内块元素</li></ul><h2 id="css特性"><a href="#css特性" class="headerlink" title="css特性"></a>css特性</h2><h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><p>当样式属性冲突时，执行时是最后面样式。和标签调用顺序无关。</p><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><ul><li>条件：包含关系</li><li>普遍性：文本大小、字体、粗细、颜色、行高、风格样式被继承</li><li><p>特殊性：</p><ul><li>标题标签不会继承，但受父级元素的影响，文字大小。</li><li>a标签不会继承父元素的文字颜色。</li></ul></li><li><p>不可继承的：display、margin、border、padding、background、height、min-height、max-height、width、min-width、max-width、overflow、position、left、right、top、bottom、z-index、float、clear、table-layout、vertical-align、page-break-after、page-bread-before和unicode-bidi。</p></li><li><p>所有元素可继承：visibility和cursor。</p></li><li>内联元素可继承：letter-spacing、word-spacing、white-space、line-height、color、font、font-family、font-size、font-style、font-variant、font-weight、text-decoration、text-transform、direction。</li><li>终端块状元素可继承：text-indent和text-align。</li><li>列表元素可继承：list-style、list-style-type、list-style-position、list-style-image。</li><li>文字的所有属性可以继承，行高也可以继承, 但a标签不继承文字颜色</li></ul><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><ul><li>!important &gt; 行内样式 &gt; id选择器 &gt; 类选择器 &gt; 标签选择器 &gt; 默认</li><li>1000以上 1000 100 10 1 0</li></ul><p>继承的权重为0, 权重会叠加</p><h2 id="连接伪类"><a href="#连接伪类" class="headerlink" title="连接伪类"></a>连接伪类</h2><p><code>a:link{属性:值;}</code>, 没有点击时默认状态 a{属性:值;} 一般写这个</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">a:link&#123;</span><br><span class="line">  /*连接默认状态*/</span><br><span class="line">  属性:值;</span><br><span class="line">&#125;</span><br><span class="line">a:visited&#123;</span><br><span class="line">  /*连接访问之后的状态*/</span><br><span class="line">  属性:值;</span><br><span class="line">&#125;</span><br><span class="line">a:hover&#123;        </span><br><span class="line">  /*鼠标放上去显示的状态*/</span><br><span class="line">  属性:值;</span><br><span class="line">&#125;</span><br><span class="line">a:active&#123;</span><br><span class="line">  /*连接激活的状态*/</span><br><span class="line">  属性:值;</span><br><span class="line">&#125;</span><br><span class="line">a:focus&#123;</span><br><span class="line">  /*获取较大*/</span><br><span class="line">  属性:值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：连接伪类的顺序不能错；</p><ul><li>text-decoration 文本修饰</li><li>text-decoration: none; 去掉a标签的默认样式的下划线</li><li>text-decoration: underline; 加上下划线</li><li>text-decoration: line-through; 删除线</li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ul><li>background-color</li></ul><h3 id="background-image"><a href="#background-image" class="headerlink" title="background-image"></a>background-image</h3><ul><li>background-repeat 背景图片沿着x轴平铺</li><li>background-position left|right|top|bottom|center 背景定位写具体方位的时候，书写顺序没有限制</li><li>background-attchment scroll|fixed<ul><li>scroll 背景滚动 默认</li><li>fixed 背景固定</li></ul></li></ul><h3 id="背景属性连写"><a href="#背景属性连写" class="headerlink" title="背景属性连写"></a>背景属性连写</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background: color imge repeat position attachment</span><br></pre></td></tr></table></figure><p>特点：没有顺序要求</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CSS-Cascading-style-sheets写法&quot;&gt;&lt;a href=&quot;#CSS-Cascading-style-sheets写法&quot; class=&quot;headerlink&quot; title=&quot;CSS Cascading style sheets写法&quot;&gt;&lt;/a&gt;CSS Cascading style sheets写法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;内嵌式&lt;/li&gt;
&lt;li&gt;&lt;p&gt;外链式&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;1.css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;行内样式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="CSS系列" scheme="http://yoursite.com/categories/CSS%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS样式表、CSS选择器</title>
    <link href="http://yoursite.com/2015/05/26/CSS%E6%A0%B7%E5%BC%8F%E8%A1%A8%E3%80%81CSS%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>http://yoursite.com/2015/05/26/CSS样式表、CSS选择器/</id>
    <published>2015-05-25T16:00:00.000Z</published>
    <updated>2018-05-30T06:13:11.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="样式表的书写位置"><a href="#样式表的书写位置" class="headerlink" title="样式表的书写位置"></a>样式表的书写位置</h2><p>写在 <code>&lt;head&gt;&lt;/head&gt;</code> 中, 样式：选择器{属性:值;属性:值; }<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>样式表写法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"texr/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">     样式表内容</span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="样式表的常见属性"><a href="#样式表的常见属性" class="headerlink" title="样式表的常见属性"></a>样式表的常见属性</h3><ul><li>width 宽度 width:200px;</li><li>height 高度 height:200px;</li><li>background-color 背景色 background-color:red;</li><li>font-size 文字大小 font-size:20px;</li><li>color 文本颜色(前景色) color:yellow;</li><li>text-align 内容的水平对齐方式 text-align:left|center|right</li><li>text-indent 首行缩进 text-indent:2em;（2个汉字的大小）</li></ul><h4 id="常见属性表格"><a href="#常见属性表格" class="headerlink" title="常见属性表格"></a>常见属性表格</h4><table><thead><tr><th>属性</th><th style="text-align:right">值</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td>width</td><td style="text-align:right">20px</td><td style="text-align:center">宽</td></tr><tr><td>height</td><td style="text-align:right">300px</td><td style="text-align:center">高</td></tr><tr><td>background-color</td><td style="text-align:right">red</td><td style="text-align:center">背景色</td></tr><tr><td>text-align</td><td style="text-align:right">left/center/right</td><td style="text-align:center">内容水平对齐方式</td></tr><tr><td>text-indent</td><td style="text-align:right">2em/px/%</td><td style="text-align:center">首行缩进</td></tr><tr><td>font-size</td><td style="text-align:right">normal/bold</td><td style="text-align:center">文本大小</td></tr><tr><td>font-weight</td><td style="text-align:right">100-900/bold</td><td style="text-align:center">文本粗细</td></tr><tr><td>font-style</td><td style="text-align:right">normal/italic</td><td style="text-align:center">文本风格</td></tr><tr><td>font-family</td><td style="text-align:right">宋体</td><td style="text-align:center">字体</td></tr><tr><td>line-height</td><td style="text-align:right">1.5/2em/px/%</td><td style="text-align:center">行高</td></tr></tbody></table><h4 id="行高"><a href="#行高" class="headerlink" title="行高"></a>行高</h4><p>行高 浏览器默认文字大小 div 1350px*18px</p><ul><li>行高=文本+上边距+下边距</li><li>默认文字大小是16px</li><li>默认行高大小是18px<br>一行文字，行高与父元素高度一致时，文本垂直居中对齐。</li></ul><p>行高的单位<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">行高值 文字大小  行高大小</span><br><span class="line">40px   20px      40px</span><br><span class="line">2em    20px      40px</span><br><span class="line">150%   20px      30px</span><br><span class="line">3      20px      60px</span><br></pre></td></tr></table></figure></p><p>总结：</p><p>当给父元素设置行高的时候，除了以px为单位以外，其他的值都与文字大小有关，是与文字大小的乘积, 行高是可以继承。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">父元素行高 父元素文字大小 子元素文字大小 子元素行高</span><br><span class="line">40px       20px           30px            40px</span><br><span class="line">2em        20px           30px            40px</span><br><span class="line">150%       20px           30px            30px</span><br><span class="line">3          20px           30px            90px</span><br></pre></td></tr></table></figure><h4 id="文本基线"><a href="#文本基线" class="headerlink" title="文本基线"></a>文本基线</h4><p><img src="/images/text-base.png" alt="文本基线"></p><h2 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h2><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><ul><li>写法：标签{属性值;}</li><li><p>特点：标签选择器定义之后，会将页面所有的元素都执行这个样式<br>颜色的显示方式：</p></li><li><p>直接写颜色名称： 如： “red”；</p></li><li>16进制显示 由0-9和a-ff一共16个值组成；#ff0000;<ul><li>#ff0000,前边2个数值对应的是红色,</li><li>#00ff00,中间2个对应的是绿色,</li><li>#0000ff,后边2个对应的是蓝色。</li></ul></li><li>RGB表示颜色<ul><li>如：span{color: rgb(23,23,23); }</li><li>r代表红色，g绿色 b蓝色</li></ul></li><li>rgba 表示不透明度<ul><li>如：h1{width: 500px; height: 400px; color: rgba(121,232,108,0.5); }</li><li>a代标alpha 0-1;</li></ul></li></ul><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><ul><li>写法：自定义类名{属性:值;}</li><li>特点：类选择器需要调用才能生效，谁调用谁生效<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;width: 200px; height: 40px; color: yellow; background-color: rgb(24,124,101); text-align: center; font-size: 24px; &#125;</span><br></pre></td></tr></table></figure></li></ul><p>多标签可以调用同一个类选择器<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box baby"</span>&gt;</span>加油努力奋斗<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>类选择器的命名规则</p><ul><li>不能使用纯数字和纯数字开头来定义类名</li><li>不建议使用中文</li><li>不能使用特殊符号来定义类名（“_”除外）</li><li>不建议使用标签名和属性名来定义类名</li></ul><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><ul><li><p>写法： #名称{属性:值}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#box&#123;width: 300px; height: 200px; background-color: pink; font-size: 20px; &#125;</span><br></pre></td></tr></table></figure></li><li><p>特点: id选择器需要调用才能生效，谁调用谁生效</p><ul><li>一个标签不能调用多个ID选择器</li><li>一个id选择器在一个页面内只能调用一次，多次调用不符合w3c规范，配合js使用，若出现多次js调用则会出错</li></ul></li></ul><h3 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h3><ul><li>写法：*{属性:值;}</li><li>特点：<ul><li>浏览器累死了，消耗服务器资源，不推荐使用；</li><li>会将所有的标签都执行这个通配符选择器</li></ul></li></ul><h2 id="文本介绍"><a href="#文本介绍" class="headerlink" title="文本介绍"></a>文本介绍</h2><h3 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h3><ul><li>文本属性<ul><li>font-size 文字大小</li><li>font-weight 文字的粗细 值从100-900; 700的值和bold大约一样(用700,不用bold)</li><li>font-style 文本风格： nomarl |italic</li><li>font-family 字体：宋体，微软雅黑，楷体</li><li>line-height 行高</li></ul></li></ul><h3 id="文本属性连写"><a href="#文本属性连写" class="headerlink" title="文本属性连写"></a>文本属性连写</h3><p>顺序：<code>font: font-style font-weight font-size/line-height font-family</code></p><p>注：按照顺序写，文字大小和字体在文字连写的时候为必须写的属性</p><h3 id="字体的表达方式"><a href="#字体的表达方式" class="headerlink" title="字体的表达方式"></a>字体的表达方式</h3><ul><li>直接写中文字体（宋体|微软雅黑）</li><li>直接写字体的英文名字（simsun|microsoft yahei|）</li><li>Unicode编码方式<ul><li>在浏览器中查找Unicode编码</li><li>chrome–&gt;f12–&gt;console–&gt;escape(“宋体”)–&gt;enter</li></ul></li></ul><h3 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h3><p>两个或两个以上的选择器通过不同的方式连接到一起</p><h4 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h4><ul><li>写法 <code>标签+类(id){属性:值}</code></li><li>特点：既…又的关系</li></ul><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><ul><li>写法： <code>选择器+空格+选择器+空格+选择器{属性:值;}</code></li><li>注意：后代选择器首先要满足包含（嵌套关系）。</li><li>特点：<ul><li>可以无限制隔代。</li><li>只要能代表父子关系，标签选择器、类选择器、id选择器可以任意组合</li><li>父级元素在前面，子级元素在后面</li></ul></li></ul><h4 id="子代选择器"><a href="#子代选择器" class="headerlink" title="子代选择器"></a>子代选择器</h4><ul><li>写法：选择器&gt;选择器{属性:值;}</li><li>特点：选中的是直接下一级</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">   div&gt;span&#123;</span></span><br><span class="line"><span class="undefined">     color: red;</span></span><br><span class="line"><span class="undefined">     font-size: 36px;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        愿使岁月静好，现世安稳。</span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>天才在左疯子在右<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h4><p>将不同选择器之间相同的样式写在一起，选择器之间通过逗号链接在一起。</p><ul><li>可能是包含关系，也可能是并列关系。</li><li>如果标签样式相同或者部分相同，可以用并集选择器，通过逗号连接在一起</li><li>选择器+,+选择器{属性:值;}</li><li>特点：并集选择器不一定是并列关系</li><li>标签选择器、类选择器、id选择器、复合选择器，可以通过逗号任意组合连接在一起</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.one,.one .two, .three, p&#123;font-size: 50px; font-weight: normal; &#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span>明媚的心<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>天才，和蠢材的差别是勤奋<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"three"</span>&gt;</span>美丽的人生要靠努力<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;样式表的书写位置&quot;&gt;&lt;a href=&quot;#样式表的书写位置&quot; class=&quot;headerlink&quot; title=&quot;样式表的书写位置&quot;&gt;&lt;/a&gt;样式表的书写位置&lt;/h2&gt;&lt;p&gt;写在 &lt;code&gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/code&gt; 中, 样式：选择器{属性:值;属性:值; }&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;样式表写法&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;texr/css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;     	样式表内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;  	 &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CSS系列" scheme="http://yoursite.com/categories/CSS%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
      <category term="CSS3" scheme="http://yoursite.com/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>HTML表格、表单、标签语义化</title>
    <link href="http://yoursite.com/2015/05/22/HTML%E8%A1%A8%E6%A0%BC%E3%80%81%E8%A1%A8%E5%8D%95%E3%80%81%E6%A0%87%E7%AD%BE%E8%AF%AD%E4%B9%89%E5%8C%96/"/>
    <id>http://yoursite.com/2015/05/22/HTML表格、表单、标签语义化/</id>
    <published>2015-05-21T16:00:00.000Z</published>
    <updated>2018-05-30T01:34:45.523Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML5标签结构"><a href="#HTML5标签结构" class="headerlink" title="HTML5标签结构"></a>HTML5标签结构</h2><p>sublime 快捷键 <code>!+Tab</code> 可以写成HTML5结构</p><h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><ul><li>ASCLL</li><li>ansi</li><li>unicode</li><li>GBK</li><li>GB2312(中文简体)</li><li>BIG5(只支持繁体字)</li><li>UTF-8(国际通用编码)</li></ul><a id="more"></a><h3 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">标签说明</span><br><span class="line">  <span class="comment">&lt;!--编码--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--关键字--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"java培训, ios"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--name 页面里面的关键词 content 里面是给SEO用的--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--网页描述--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"给搜索引擎看的，可以看得到的内容"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--网页重定向--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"5;http:www.itcast.com"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="link标签"><a href="#link标签" class="headerlink" title="link标签"></a>link标签</h3><p>调用外部样式表：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"1.css"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>ico小图标，在网页显示时的标题的前面：(必用)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"../favicom.ico"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="简单表格"><a href="#简单表格" class="headerlink" title="简单表格"></a>简单表格</h2><p>用来存放数据的，表格是对网页重构（css+div）一个有有益补充</p><ul><li>行 <code>tr</code></li><li>列 <code>td</code></li></ul><h3 id="简单结构（1行2列）"><a href="#简单结构（1行2列）" class="headerlink" title="简单结构（1行2列）"></a>简单结构（1行2列）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">cellpadding</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表格属性介绍"><a href="#表格属性介绍" class="headerlink" title="表格属性介绍"></a>表格属性介绍</h3><ul><li>边框 border=”1”</li><li>宽度 width=”300”</li><li>高度 height=”100”</li><li>单元格与单元格的距离 cellspacing=”2”，默认值2</li><li>内容到边框的距离cellpadding=”2” 默认值0</li><li>背景色 bgcolor=”yellow”</li><li>对齐方式 align left|center|right<ul><li>如果align放到tr或者td里面是内容的对齐方式</li><li>如果align放到table里面，是表格的对齐方式</li></ul></li><li>表格标题 用法和td一样</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">cellpadding</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">caption</span>&gt;</span>表头<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span> 表格的标题</span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表格的标准结构"><a href="#表格的标准结构" class="headerlink" title="表格的标准结构"></a>表格的标准结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">caption</span>&gt;</span><span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表格单元格的合并"><a href="#表格单元格的合并" class="headerlink" title="表格单元格的合并"></a>表格单元格的合并</h3><ul><li>在同一行上合并 colspan=”2”</li><li>在同一列上合并</li></ul><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><p>用来收集信息</p><ul><li>提示信息</li><li>表单控件<ul><li>action：用来处理信息（信息提交给谁，把文件提交给那个文件处理）</li><li>method：get|post 传递信息的方法</li></ul></li></ul><p>get 安全性很低，通过浏览器的地址栏传递信息，post 安全性高，通过action文件处理，它们的区别如下</p><p>1.GET没有请求主体，使用xhr.send(null)<br>2.GET可以通过在请求URL上添加请求参数<br>3.POST可以通过xhr.send(‘name=itcast&amp;age=10’)<br>4.POST需要设置<br>5.GET效率更好（应用多）<br>6.GET大小限制约4K，POST则没有限制</p><h3 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a>表单控件</h3><pre><code>1 &lt;form action=&quot;1.php&quot; method=&quot;post&quot;&gt;&lt;/form&gt;</code></pre><h4 id="单行文本输入框"><a href="#单行文本输入框" class="headerlink" title="单行文本输入框"></a>单行文本输入框</h4><pre><code>1 &lt;input type=&quot;text&quot; name=&quot;username&quot; value=&quot;Hiraku&quot; maxlength=&quot;16&quot; readonly=&quot;readonly&quot; &gt;</code></pre><ul><li>name 文本输入框的名字</li><li>value 接收的默认值 文本框的值</li><li>maxlength 输入的最大字符长度</li><li>readonly 输入框为只读状态</li><li>disabled 输入框为未激活状态</li></ul><h4 id="密码输入框"><a href="#密码输入框" class="headerlink" title="密码输入框"></a>密码输入框</h4><pre><code>1 &lt;input type=&quot;password&quot; name=&quot;密码输入框&quot;&gt; </code></pre><p>单行文本输入框的属性对密码输入框都适用</p><h4 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h4><pre><code>1 &lt;input type=&quot;radio&quot; name=&quot;gender&quot; checked=&quot;checked&quot;&gt;男2 &lt;input type=&quot;radio&quot; name=&quot;gender&quot;&gt;女</code></pre><p>当将单选框name值设置相同的时候才能实现单选效果, checked 设置默认选中项。</p><h4 id="下拉列表"><a href="#下拉列表" class="headerlink" title="下拉列表"></a>下拉列表</h4><p>下拉列表<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>=<span class="string">”selected”</span>&gt;</span>下拉列表选项<span class="tag">&lt;/<span class="name">option</span>&gt;</span>   </span><br><span class="line">  <span class="comment">&lt;!--设置默认选项--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- multiple="mutiple" 下拉列表多选 设置下拉列表为多选项 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">"甘肃省"</span>&gt;</span>   对下拉列表进行分组</span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>定西市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>兰州市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>庆阳市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>天水市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>嘉峪关<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>酒泉市<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="多选框"><a href="#多选框" class="headerlink" title="多选框"></a>多选框</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>&gt;</span>动漫</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span>电影</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span>电子竞技</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span>音乐</span><br></pre></td></tr></table></figure><p>checked 默认选项</p><h4 id="多文本输入框"><a href="#多文本输入框" class="headerlink" title="多文本输入框"></a>多文本输入框</h4><pre><code>1    &lt;textarea name=&quot;输入框&quot; id=&quot;&quot; cols=&quot;30&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt;</code></pre><ul><li>cols 输入字符的长度</li><li>rows 输入字符的行数</li></ul><h4 id="上传文件控件"><a href="#上传文件控件" class="headerlink" title="上传文件控件"></a>上传文件控件</h4><pre><code>1    &lt;input type=&quot;file&quot;&gt;</code></pre><h4 id="提交按钮"><a href="#提交按钮" class="headerlink" title="提交按钮"></a>提交按钮</h4><pre><code>1    &lt;input type=&quot;submit&quot;&gt;</code></pre><h4 id="普通按钮"><a href="#普通按钮" class="headerlink" title="普通按钮"></a>普通按钮</h4><pre><code>1    &lt;input type=&quot;button&quot; value=&quot;普通按钮&quot;&gt;</code></pre><p>普通按钮不能实现表单信息提交，常配合js使用</p><h4 id="图片按钮"><a href="#图片按钮" class="headerlink" title="图片按钮"></a>图片按钮</h4><pre><code>1    &lt;input type=&quot;image&quot; src=&quot;&quot;&gt;</code></pre><h4 id="表单信息分组"><a href="#表单信息分组" class="headerlink" title="表单信息分组"></a>表单信息分组</h4><pre><code>1    &lt;form&gt;2    &lt;fieldset&gt;3    &lt;legend&gt;注册信息&lt;/legend&gt;4    &lt;input&gt;5    &lt;/fieldset&gt;6    &lt;/form&gt;</code></pre><h4 id="重置按钮"><a href="#重置按钮" class="headerlink" title="重置按钮"></a>重置按钮</h4><pre><code>1    &lt;input type=”reset” value=”重置信息”&gt;</code></pre><h3 id="HTML5表单控件"><a href="#HTML5表单控件" class="headerlink" title="HTML5表单控件"></a>HTML5表单控件</h3><pre><code>1    &lt;form action=&quot;1.php&quot; method=&quot;post&quot;&gt;2        &lt;!-- 判断网址 --&gt;3        &lt;input type=&quot;url&quot;&gt;&lt;br/&gt;&lt;br/&gt;4        &lt;!-- 判断邮箱 --&gt;5        &lt;input type=&quot;email&quot;&gt;&lt;br/&gt;&lt;br/&gt;6        &lt;!-- 日期控件 --&gt;7        &lt;input type=&quot;date&quot;&gt;&lt;br/&gt;&lt;br/&gt;8        &lt;!-- 时间控件 --&gt;9        &lt;input type=&quot;time&quot;&gt;&lt;br/&gt;&lt;br/&gt;10        &lt;!-- 数字控件 --&gt;11        &lt;input type=&quot;number&quot;&gt;&lt;br/&gt;&lt;br/&gt;12        &lt;!-- 滑块控件 --&gt;13        &lt;input type=&quot;range&quot; max=&quot;150&quot; min=&quot;2&quot; step=&quot;5&quot;&gt;&lt;br/&gt;&lt;br/&gt;14        &lt;input type=&quot;submit&quot;&gt;15    &lt;/form&gt;</code></pre><h2 id="标签语义化"><a href="#标签语义化" class="headerlink" title="标签语义化"></a>标签语义化</h2><p>标签语义化即：根据内容的结构化（内容语义化），选择合适的标签</p><p>注意事项：</p><ul><li>尽可能少的使用无语义的标签div和span</li><li>在语义不明显是尽量用p,即可使用div也可使用p</li><li>不要使用纯样式标签:</li><li>需要强调的文本尽量用和</li></ul><p>好的标签语义化网站：去掉CSS，结构依然很清晰</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTML5标签结构&quot;&gt;&lt;a href=&quot;#HTML5标签结构&quot; class=&quot;headerlink&quot; title=&quot;HTML5标签结构&quot;&gt;&lt;/a&gt;HTML5标签结构&lt;/h2&gt;&lt;p&gt;sublime 快捷键 &lt;code&gt;!+Tab&lt;/code&gt; 可以写成HTML5结构&lt;/p&gt;
&lt;h3 id=&quot;字符编码&quot;&gt;&lt;a href=&quot;#字符编码&quot; class=&quot;headerlink&quot; title=&quot;字符编码&quot;&gt;&lt;/a&gt;字符编码&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;ASCLL&lt;/li&gt;
&lt;li&gt;ansi&lt;/li&gt;
&lt;li&gt;unicode&lt;/li&gt;
&lt;li&gt;GBK&lt;/li&gt;
&lt;li&gt;GB2312(中文简体)&lt;/li&gt;
&lt;li&gt;BIG5(只支持繁体字)&lt;/li&gt;
&lt;li&gt;UTF-8(国际通用编码)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="HTML系列" scheme="http://yoursite.com/categories/HTML%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
</feed>
