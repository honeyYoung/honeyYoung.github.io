<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Honey Young</title>
  
  <subtitle>小杨鹤</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-01T07:20:46.208Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>honey young</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>个人技能</title>
    <link href="http://yoursite.com/2018/05/23/%E4%B8%AA%E4%BA%BA%E6%A0%87%E7%AD%BE/"/>
    <id>http://yoursite.com/2018/05/23/个人标签/</id>
    <published>2018-05-23T07:23:29.000Z</published>
    <updated>2018-06-01T07:20:46.208Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="个人技能" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
      <category term="CSS3" scheme="http://yoursite.com/tags/CSS3/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="Ajax" scheme="http://yoursite.com/tags/Ajax/"/>
    
      <category term="AngularJS" scheme="http://yoursite.com/tags/AngularJS/"/>
    
      <category term="BOM" scheme="http://yoursite.com/tags/BOM/"/>
    
      <category term="Bower" scheme="http://yoursite.com/tags/Bower/"/>
    
      <category term="Cookie" scheme="http://yoursite.com/tags/Cookie/"/>
    
      <category term="DOM" scheme="http://yoursite.com/tags/DOM/"/>
    
      <category term="EJS" scheme="http://yoursite.com/tags/EJS/"/>
    
      <category term="Express" scheme="http://yoursite.com/tags/Express/"/>
    
      <category term="Gulp" scheme="http://yoursite.com/tags/Gulp/"/>
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
      <category term="JSON" scheme="http://yoursite.com/tags/JSON/"/>
    
      <category term="MongoDB" scheme="http://yoursite.com/tags/MongoDB/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="RequireJS" scheme="http://yoursite.com/tags/RequireJS/"/>
    
      <category term="SeaJs" scheme="http://yoursite.com/tags/SeaJs/"/>
    
      <category term="Session" scheme="http://yoursite.com/tags/Session/"/>
    
      <category term="Underscore" scheme="http://yoursite.com/tags/Underscore/"/>
    
      <category term="browser" scheme="http://yoursite.com/tags/browser/"/>
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
      <category term="cordova" scheme="http://yoursite.com/tags/cordova/"/>
    
      <category term="eCharts" scheme="http://yoursite.com/tags/eCharts/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="ionic" scheme="http://yoursite.com/tags/ionic/"/>
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
      <category term="Grunt" scheme="http://yoursite.com/tags/Grunt/"/>
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
      <category term="mine" scheme="http://yoursite.com/tags/mine/"/>
    
      <category term="net" scheme="http://yoursite.com/tags/net/"/>
    
      <category term="network" scheme="http://yoursite.com/tags/network/"/>
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
      <category term="nrm" scheme="http://yoursite.com/tags/nrm/"/>
    
      <category term="nvm" scheme="http://yoursite.com/tags/nvm/"/>
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
      <category term="artTemplate" scheme="http://yoursite.com/tags/artTemplate/"/>
    
      <category term="ps" scheme="http://yoursite.com/tags/ps/"/>
    
      <category term="sublime" scheme="http://yoursite.com/tags/sublime/"/>
    
      <category term="webstorm" scheme="http://yoursite.com/tags/webstorm/"/>
    
      <category term="vs code" scheme="http://yoursite.com/tags/vs-code/"/>
    
      <category term="svn" scheme="http://yoursite.com/tags/svn/"/>
    
      <category term="eclipse" scheme="http://yoursite.com/tags/eclipse/"/>
    
      <category term="命令行" scheme="http://yoursite.com/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
      <category term="小项目" scheme="http://yoursite.com/tags/%E5%B0%8F%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="库" scheme="http://yoursite.com/tags/%E5%BA%93/"/>
    
      <category term="性能优化" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="框架" scheme="http://yoursite.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="模块化" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
      <category term="正则" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99/"/>
    
      <category term="表单" scheme="http://yoursite.com/tags/%E8%A1%A8%E5%8D%95/"/>
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="交互" scheme="http://yoursite.com/tags/%E4%BA%A4%E4%BA%92/"/>
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>ionic js笔记</title>
    <link href="http://yoursite.com/2017/09/09/ionic%20js%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/09/09/ionic js笔记/</id>
    <published>2017-09-08T16:00:00.000Z</published>
    <updated>2018-06-07T07:42:46.543Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-Ionic-JS"><a href="#什么是-Ionic-JS" class="headerlink" title="什么是 Ionic JS"></a>什么是 Ionic JS</h2><p>ionic 对 AngularJS 进行了扩展，主要就是将移动端开发中常见的 UI 组件抽象成 AngularJS 的指令，便于我们在开发中快速构建应用界面。</p><p><img src="/images/ionic17.png" alt="Ionic JS"></p><a id="more"></a><h2 id="视图导航"><a href="#视图导航" class="headerlink" title="视图导航"></a>视图导航</h2><h3 id="ion-nav-view"><a href="#ion-nav-view" class="headerlink" title="ion-nav-view"></a>ion-nav-view</h3><p>在 ionic 里，我们使用 ion-nav-view 指令代替 AngularUI Route 中的 ui-view 指令，来进行模板的渲染：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;ion-nav-view&gt;</span><br><span class="line">&lt;<span class="regexp">/ion-nav-view&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ion-view"><a href="#ion-view" class="headerlink" title="ion-view"></a>ion-view</h3><p>相当于一个 div 里面多了很多属性。</p><p>cache-view - 是否对这个模板视图进行缓存</p><p>允许值为：true | false，默认为true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ion-view&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;<span class="regexp">/ion-view&gt;</span></span><br></pre></td></tr></table></figure><h2 id="基本布局"><a href="#基本布局" class="headerlink" title="基本布局"></a>基本布局</h2><h3 id="Ion-header-bar"><a href="#Ion-header-bar" class="headerlink" title="Ion-header-bar"></a>Ion-header-bar</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-header-bar</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>头部区域<span class="tag">&lt;/<span class="name">ion-header-bar</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-content</span>&gt;</span>内容区域<span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-footer-bar</span>&gt;</span>底部<span class="tag">&lt;/<span class="name">ion-footer-bar</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ion-header-bar 指令有两个可选的属性：</p><blockquote><p>align-title - 设置标题文字的对齐方式。允许值：left | right | center，默认 center。<br>no-tap-scroll - 当点击标题时是否将内容区域自动滚动到最开始。允许值：true | false，默认为 true。</p></blockquote><h3 id="ion-footer-bar"><a href="#ion-footer-bar" class="headerlink" title="ion-footer-bar"></a>ion-footer-bar</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-footer-bar</span>&gt;</span>...<span class="tag">&lt;/<span class="name">ion-footer-bar</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ion-footer-bar指令有一个可选的属性：</p><blockquote><p>align-title - 设置标题文本的对齐方式。允许值：left | right | center 。</p></blockquote><h3 id="ion-content"><a href="#ion-content" class="headerlink" title="ion-content"></a>ion-content</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-content</span>&gt;</span>...<span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>ion-content占据 header 和 footer 以外的剩余区域。当内容超过可视区域时，ion-content 可以滚动以显示被隐藏的部分。<br>默认 ionic 自定制的滚动视图，可以使用 overflow-scroll 属性设置使用系统内置的滚动条。</p></blockquote><h2 id="选项卡"><a href="#选项卡" class="headerlink" title="选项卡"></a>选项卡</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-tabs</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-tab</span> <span class="attr">title</span>=<span class="string">"..."</span>&gt;</span>...<span class="tag">&lt;/<span class="name">ion-tab</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-tab</span> <span class="attr">title</span>=<span class="string">"..."</span>&gt;</span>...<span class="tag">&lt;/<span class="name">ion-tab</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-tabs</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：</p><blockquote><p>不要把 ion-tabs 指令放在 ion-content 之内<br>ion-tab 的内容应当放入 ion-view 指令内，否则 ionic 在计算布局时可能出错</p></blockquote><p><img src="/images/ionic18.png" alt="选项卡"></p><h3 id="脚本接口：-ionicTabsDelegate"><a href="#脚本接口：-ionicTabsDelegate" class="headerlink" title="脚本接口：$ionicTabsDelegate"></a>脚本接口：$ionicTabsDelegate</h3><blockquote><p>select(index) - 选中指定的选项页</p></blockquote><p>index参数从0开始，第一个选项页的index为0，第二个为1，依次类推。</p><blockquote><p>selectedIndex() - 返回当前选中选项页的索引号</p></blockquote><p>如果当前没有选中的选项页，则返回 -1。</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><p>列表是常用的信息组织方式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-item</span>&gt;</span>...<span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-item</span>&gt;</span>...<span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-list</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><blockquote><p>type - 列表种类</p></blockquote><p>type 属性是可选的，可用来设置列表的种类： list-inset | card。这两种列表都产生内嵌的效果，区别在于card列表有边框的阴影效果。</p><blockquote><p>show-delete - 是否显示成员内的delete按钮</p></blockquote><p>show-delete 属性是可选的。如果在成员内有 delete 按钮（ion-delete-button），使用这个属性来通知列表是否显示元素删除按钮。允许的值为：true | false。</p><blockquote><p>show-reorder - 是否显示成员内的reorder按钮</p></blockquote><p>show-reorder 属性是可选的。如果在成员内有reorder按钮（ion-reorder-button），使用这个属性来通知列表是否显示元素重排序按钮。允许的值为：true | false</p><blockquote><p>can-swipe - 是否支持滑动方式显示成员option按钮</p></blockquote><p>can-swipe 属性是可选的。如果在成员内有option按钮（ion-option-button），使用这个属性来允许或禁止通过向左滑动成员来打开option按钮。允许的值为：true | false ，默认为true。</p><h3 id="成员按钮"><a href="#成员按钮" class="headerlink" title="成员按钮"></a>成员按钮</h3><blockquote><p>ion-option-button - 选项按钮。</p></blockquote><p>一个ion-item内可以包含多个选项按钮。选项按钮是隐藏的，需要用户向左 滑动成员，以显示选项按钮。可以使用ion-tabs的can-swipe属性允许或禁止 滑动开启选项按钮。</p><blockquote><p>ion-delete-button - 删除按钮</p></blockquote><p>一个ion-item内最多有一个删除按钮。删除按钮在显示时总是位于成员的最 左端。可以使用ion-tabs的show-delete属性显示或隐藏删除按钮</p><blockquote><p>ion-reorder-button - 重排按钮</p></blockquote><p>一个ion-item内最多有一个重排按钮。重排按钮在显示时总是位于成员的最 右端。可以使用ion-tabs的show-reorder属性显示或隐藏重排按钮</p><h3 id="API-ionicListDelegate"><a href="#API-ionicListDelegate" class="headerlink" title="API : $ionicListDelegate"></a>API : $ionicListDelegate</h3><p>如果需要从脚本中控制列表元素，可以使用$ionicListDelegate服务：</p><blockquote><p>showReorder([showReorder]) - 显示/关闭排序按钮</p></blockquote><p>showReorder的允许值为：true | false。可以使用一个作用域上的表达式</p><blockquote><p>showDelete([showDelete]) - 显示/关闭删除按钮</p></blockquote><p>showDelete的允许值为： true | false。可以使用一个作用域上的表达式</p><blockquote><p>canSwipeItems([canSwipeItems]) - 是否允许通过滑动方式来显示成员选项按钮</p></blockquote><p>canSwipeItems的允许值为：true | false。可以使用一个作用域上的表达式</p><blockquote><p>closeOptionButtons() - 关闭所有选项按钮</p></blockquote><h2 id="表单输入"><a href="#表单输入" class="headerlink" title="表单输入"></a>表单输入</h2><h3 id="复选按钮-ion-checkbox"><a href="#复选按钮-ion-checkbox" class="headerlink" title="复选按钮: ion-checkbox"></a>复选按钮: ion-checkbox</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-checkbox</span>&gt;</span>...<span class="tag">&lt;/<span class="name">ion-checkbox</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1、使用 ion-checkbox 指令声明复选按钮元素：</p><blockquote><p>与标准的checkbox相比，使用ionic的ion-checkbox有几个优势：<br>样式更美观，与移动端的UI更匹配<br>支持数据绑定。使用可选的ng-model属性，可以直接将选中状态绑定到作用域上的变量<br>直接使用文本子元素作为标签</p></blockquote><p>2、也可以使用 ng-checked 进行手动的状态选定</p><h3 id="单选按钮-ion-radio"><a href="#单选按钮-ion-radio" class="headerlink" title="单选按钮:ion-radio"></a>单选按钮:ion-radio</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-radio</span>&gt;</span>...<span class="tag">&lt;/<span class="name">ion-radio</span>&gt;</span></span><br></pre></td></tr></table></figure><p>和 HTML 的 radio 相比，ion-radio 的改进也是明显的：</p><blockquote><p>1、与移动端的 UI 更匹配<br>2、使用可选的 ng-model 属性，实现与作用域变量的数据绑定<br>3、使用可选的 ng-value 属性，可以使用作用域变量设置单选按钮对应的值</p></blockquote><h3 id="开关按钮-ion-toggle"><a href="#开关按钮-ion-toggle" class="headerlink" title="开关按钮:ion-toggle"></a>开关按钮:ion-toggle</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-toggle</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-toggle</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ion-toggle 有两个可选的属性：</p><blockquote><p>ng-model - 模型变量</p></blockquote><p>和复选按钮一样，开关按钮也可以使用可选的ng-model属性实现与作用域变量 的双向绑定。</p><blockquote><p>toggle-class - 样式类</p></blockquote><p>可以使用可选的 toggle-class 属性为开关按钮声明额外的样式。比如：toggle-{color} 用来声明配色方案。</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/images/ionic19.png" alt="效果图"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>controller.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$scope.select = &#123;</span><br><span class="line">  select: <span class="string">''</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>html 页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-header-bar</span> <span class="attr">align-title</span>=<span class="string">"center"</span> <span class="attr">class</span>=<span class="string">"royal-bg bar bar-header "</span>&gt;</span>头部区域<span class="tag">&lt;/<span class="name">ion-header-bar</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-content</span> <span class="attr">class</span>=<span class="string">"light-bg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-item</span>&gt;</span></span><br><span class="line">        类似于 QQ 的功能</span><br><span class="line">        <span class="tag">&lt;<span class="name">ion-option-button</span> <span class="attr">class</span>=<span class="string">"assertive-bg"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">ion-option-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ion-option-button</span> <span class="attr">class</span>=<span class="string">"balanced-bg"</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">ion-option-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-item</span>&gt;</span>复选按钮的状态是：&#123;&#123;ck&#125;&#125; <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ion-checkbox</span> <span class="attr">ng-model</span>=<span class="string">"ck"</span>&gt;</span>复选按钮<span class="tag">&lt;/<span class="name">ion-checkbox</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-item</span>&gt;</span>开关的状态是：&#123;&#123;tg&#125;&#125; <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ion-toggle</span> <span class="attr">ng-model</span>=<span class="string">"tg"</span>&gt;</span>开关<span class="tag">&lt;/<span class="name">ion-toggle</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-item</span>&gt;</span>单选按钮的选中值是：&#123;&#123;select.select&#125;&#125; <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ion-radio</span> <span class="attr">ng-repeat</span>=<span class="string">"item in data"</span> <span class="attr">ng-model</span>=<span class="string">"select.select"</span> <span class="attr">ng-value</span>=<span class="string">"item.value"</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">ion-radio</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ion-item</span>&gt;</span>列表4<span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-footer-bar</span> <span class="attr">class</span>=<span class="string">"dark-bg"</span>&gt;</span>底部<span class="tag">&lt;/<span class="name">ion-footer-bar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-view</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="幻灯片"><a href="#幻灯片" class="headerlink" title="幻灯片"></a>幻灯片</h2><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-slide-box</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-slide</span>&gt;</span>...<span class="tag">&lt;/<span class="name">ion-slide</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-slide</span>&gt;</span>...<span class="tag">&lt;/<span class="name">ion-slide</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-slide-box</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><blockquote><p>does-continue - 是否循环切换</p></blockquote><p>开头的幻灯页只能向左滑动，最后的幻灯页只能向右滑动。 将does-continue属性值设为true，就可以让幻灯页组首尾连接起来，循环切换。</p><blockquote><p>auto-play - 是否自动播放</p></blockquote><p>通过将auto-play属性设置为true，可以让幻灯页自动切换。切换的间隔默认是4000ms，可以 通过属性slide-interval进行调整。</p><blockquote><p>slide-interval - 自动播放的间隔时间，默认为4000ms<br>show-pager - 是否显示分页器</p></blockquote><p>分页器用来指示幻灯页的选中状态，位于幻灯片的底部。 允许值为：true | false</p><h3 id="方法事件"><a href="#方法事件" class="headerlink" title="方法事件"></a>方法事件</h3><blockquote><p>pager-click - 分页器点击事件<br>pager-click 属性应当设置为一个当前作用域上的函数调用表达式，这个函数将被 传入被点击的分页按钮对应的幻灯页序号：index<br>on-slide-changed - 幻灯页切换事件<br>on-slide-changed属性应当设置为一个当前作用域上的函数调用表达式，这个函数 将被传入当前幻灯页的序号：$index<br>active-slide - 当前幻灯页索引<br>active-slide 属性应当设置为一个当前作用域上的变量，当幻灯片切换时，这个变 量同步的反应当前的幻灯页索引号</p></blockquote><h3 id="API-ionicSlideBoxDelegate"><a href="#API-ionicSlideBoxDelegate" class="headerlink" title="API:$ionicSlideBoxDelegate"></a>API:$ionicSlideBoxDelegate</h3><blockquote><p>update() - 重绘幻灯片</p></blockquote><p>有时，比如当容器尺寸发生变化时，需要调用update()方法重绘幻灯片。</p><blockquote><p>slide(to[,speed]) - 切换到指定幻灯页</p></blockquote><p>参数to表示切换的目标幻灯页序号，参数speed是可选的，表示以毫秒 为单位的切换时间</p><blockquote><p>previous() - 切换到前一张幻灯页<br>next() - 切换到后一张幻灯页<br>currentIndex() - 获得当前幻灯页的序号<br>slideCount() - 获得全部幻灯页的数量</p></blockquote><h2 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h2><h3 id="模态对话框-ionicModal"><a href="#模态对话框-ionicModal" class="headerlink" title="模态对话框:$ionicModal"></a>模态对话框:$ionicModal</h3><p>模态对话框常用来供用户进行选择或编辑，在模态对话框关闭之前，其他 的用户交互行为被阻止。</p><p>在ionic中使用模态对话框有三个步骤：</p><h4 id="1、声明对话框模板"><a href="#1、声明对话框模板" class="headerlink" title="1、声明对话框模板"></a>1、声明对话框模板</h4><p>使用ion-modal-view指令声明对话框模板，对话框模板通常置入 script 内以构造内联模板：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script id=<span class="string">"a.html"</span> type=<span class="string">"text/ng-template"</span>&gt;</span><br><span class="line">    &lt;ion-modal-view&gt;</span><br><span class="line">        &lt;!--对话框内容--&gt;</span><br><span class="line">    &lt;<span class="regexp">/ion-modal-view&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h4 id="2、创建对话框对象"><a href="#2、创建对话框对象" class="headerlink" title="2、创建对话框对象"></a>2、创建对话框对象</h4><p>服务$ionicModal有两个方法用来创建对话框对象：</p><blockquote><p>fromTemplate(templateString,options) - 使用字符串模板<br>fromTemplateUrl(templateUrl,options) - 使用内联模板</p></blockquote><p>这两个方法返回的都是一个对话框对象。</p><h4 id="3、操作对话框对象"><a href="#3、操作对话框对象" class="headerlink" title="3、操作对话框对象"></a>3、操作对话框对象</h4><p>对象框对象有以下方法用于显示、隐藏或删除对话框：</p><blockquote><p>show() - 显示对话框<br>hide() - 隐藏对话框<br>remove() - 移除对话框<br>isShown() - 对话框是否可视？</p></blockquote><h4 id="4、js代码"><a href="#4、js代码" class="headerlink" title="4、js代码"></a>4、js代码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'testApp'</span>, [<span class="string">'ionic'</span>])</span><br><span class="line">.controller(<span class="string">'MyController'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $ionicModal</span>) </span>&#123;</span><br><span class="line">  $ionicModal.fromTemplateUrl(<span class="string">'modal.html'</span>, &#123;</span><br><span class="line">    scope: $scope,</span><br><span class="line">    animation: <span class="string">'slide-in-up'</span></span><br><span class="line">  &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">modal</span>) </span>&#123;</span><br><span class="line">    $scope.modal = modal;</span><br><span class="line">  &#125;);</span><br><span class="line">  $scope.openModal = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $scope.modal.show();</span><br><span class="line">  &#125;;</span><br><span class="line">  $scope.closeModal = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $scope.modal.hide();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//当我们用到模型时，清除它！</span></span><br><span class="line">  $scope.$on(<span class="string">'$destroy'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $scope.modal.remove();</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 当隐藏的模型时执行动作</span></span><br><span class="line">  $scope.$on(<span class="string">'modal.hide'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 执行动作</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 当移动模型时执行动作</span></span><br><span class="line">  $scope.$on(<span class="string">'modal.removed'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 执行动作</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="上拉菜单-ionicActionSheet"><a href="#上拉菜单-ionicActionSheet" class="headerlink" title="上拉菜单:$ionicActionSheet"></a>上拉菜单:$ionicActionSheet</h3><p>1、定义上拉菜单选项</p><p>菜单属性：</p><blockquote><p>titleText - 上拉菜单的标题文本<br>buttons - 自定义按钮数组。每个按钮需要一个描述对象，其text字段用于按钮显示<br>cancelText - 取消按钮的文本。如果不设置此字段，则上拉菜单中不出现取消按钮<br>destructiveText - 危险选项按钮的文本。如果不设置此字段，则上拉菜单中不出现危险选项按钮<br>buttonClicked - 自定义按钮的回调函数，当用户点击时触发<br>cancel - 取消按钮回调函数，当用户点击时触发<br>destructiveButtonClicked - 危险选项按钮的回调函数，当用户点击时触发<br>cancelOnStateChange - 当切换到新的视图时是否关闭此上拉菜单。默认为true<br>cssClass - 附加的CSS样式类名称</p></blockquote><p>2、创建上拉菜单</p><p>$ionicActionSheet 服务的 show() 方法用来创建上拉菜单，返回一个函数，调用该 返回函数可以关闭此菜单。</p><p>3、代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'mySuperApp'</span>, [<span class="string">'ionic'</span>])</span><br><span class="line">  .controller(<span class="function"><span class="keyword">function</span>(<span class="params">$scope, $ionicActionSheet</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 点击按钮触发，或一些其他的触发条件</span></span><br><span class="line">      $scope.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="comment">// 显示操作表</span></span><br><span class="line">          $ionicActionSheet.show(&#123;</span><br><span class="line">              buttons: [</span><br><span class="line">                 &#123; <span class="attr">text</span>: <span class="string">'&lt;b&gt;Share&lt;/b&gt; This'</span> &#125;,</span><br><span class="line">                 &#123; <span class="attr">text</span>: <span class="string">'Move'</span> &#125;,</span><br><span class="line">              ],</span><br><span class="line">              destructiveText: <span class="string">'Delete'</span>,</span><br><span class="line">              titleText: <span class="string">'Modify your album'</span>,</span><br><span class="line">              cancelText: <span class="string">'Cancel'</span>,</span><br><span class="line">              buttonClicked: <span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">                  <span class="keyword">switch</span> (index) &#123;</span><br><span class="line">                     <span class="keyword">case</span> <span class="number">0</span>: <span class="built_in">console</span>.log(<span class="string">'相机'</span>);</span><br><span class="line">                           <span class="keyword">break</span>;</span><br><span class="line">                     <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                       <span class="built_in">console</span>.log(<span class="string">'图库'</span>);</span><br><span class="line">                           <span class="keyword">break</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="弹出框-ionicPopup"><a href="#弹出框-ionicPopup" class="headerlink" title="弹出框:$ionicPopup"></a>弹出框:$ionicPopup</h3><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ionicPopup.show(options)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//这个函数在弹出框关闭时被调用</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>简化的特定弹出框：</p><blockquote><p>alert(options) - 警告弹出框，仅包含一个按钮供关闭弹出框<br>confirm(options) - 确认弹出框，包含一个取消按钮和一个确认按钮<br>prompt(options) - 输入提示弹出框，包含一个文本输入框、一个取消</p></blockquote><p>js代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'mySuperApp'</span>, [<span class="string">'ionic'</span>])</span><br><span class="line">.controller(<span class="function"><span class="keyword">function</span>(<span class="params">$scope, $ionicPopup, $timeout</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// 触发一个按钮点击，或一些其他目标</span></span><br><span class="line"> $scope.showPopup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   $scope.data = &#123;&#125;</span><br><span class="line">   <span class="comment">// 一个精心制作的自定义弹窗</span></span><br><span class="line">   <span class="keyword">var</span> myPopup = $ionicPopup.show(&#123;</span><br><span class="line">     template: <span class="string">'&lt;input type="password" ng-model="data.wifi"&gt;'</span>,</span><br><span class="line">     title: <span class="string">'Enter Wi-Fi Password'</span>,</span><br><span class="line">     subTitle: <span class="string">'Please use normal things'</span>,</span><br><span class="line">     scope: $scope,</span><br><span class="line">     buttons: [</span><br><span class="line">       &#123; <span class="attr">text</span>: <span class="string">'Cancel'</span> &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">         text: <span class="string">'&lt;b&gt;Save&lt;/b&gt;'</span>,</span><br><span class="line">         type: <span class="string">'button-positive'</span>,</span><br><span class="line">         onTap: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (!$scope.data.wifi) &#123;</span><br><span class="line">             <span class="comment">//不允许用户关闭，除非他键入wifi密码</span></span><br><span class="line">             e.preventDefault();</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="keyword">return</span> $scope.data.wifi;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">     ]</span><br><span class="line">   &#125;);</span><br><span class="line">   myPopup.then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'Tapped!'</span>, res);</span><br><span class="line">   &#125;);</span><br><span class="line">   $timeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      myPopup.close(); <span class="comment">//由于某种原因3秒后关闭弹出</span></span><br><span class="line">   &#125;, <span class="number">3000</span>);</span><br><span class="line">   <span class="comment">// 一个确认对话框</span></span><br><span class="line">   $scope.showConfirm = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> confirmPopup = $ionicPopup.confirm(&#123;</span><br><span class="line">       title: <span class="string">'Consume Ice Cream'</span>,</span><br><span class="line">       template: <span class="string">'Are you sure you want to eat this ice cream?'</span></span><br><span class="line">     &#125;);</span><br><span class="line">     confirmPopup.then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(res) &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">'You are sure'</span>);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">'You are not sure'</span>);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="comment">// 一个提示对话框</span></span><br><span class="line">   $scope.showAlert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> alertPopup = $ionicPopup.alert(&#123;</span><br><span class="line">       title: <span class="string">'Don\'t eat that!'</span>,</span><br><span class="line">       template: <span class="string">'It might taste good'</span></span><br><span class="line">     &#125;);</span><br><span class="line">     alertPopup.then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'Thank you for not eating my delicious ice cream cone'</span>);</span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;;</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="浮动框：-ionicPopover"><a href="#浮动框：-ionicPopover" class="headerlink" title="浮动框：$ionicPopover"></a>浮动框：$ionicPopover</h3><p>浮动框通常用以非侵入的方式提供当前视图的额外信息。</p><p>在 ionic 中使用浮动框的几个步骤：</p><p>1.声明模板</p><p>需要首先利用 ion-popover-view 指令声明一个模板内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-popover-view</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--模板内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-popover-view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.创建浮动框对象</p><p>使用$ion-popover服务的以下方法创建浮动框对象：</p><blockquote><p>fromTemplate(templateString,options) - 使用模板字符串构造浮动框<br>fromTemplateurl(templateUrl,options) - 使用内联模板构造浮动框</p></blockquote><p>注意：这两个方法返回的都是promise对象，在浮动框对象被构造 成功后得到解析，这时可以获取浮动框对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ionicPopover.fromTemplate(...)</span><br><span class="line"> .then(<span class="function"><span class="keyword">function</span>(<span class="params">popover</span>)</span>&#123;</span><br><span class="line">     <span class="comment">//popover参数是浮动框对象</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3.操作浮动框对象</p><p>浮动框对象提供以下方法：</p><blockquote><p>show() - 显示浮动框<br>hide() - 关闭浮动框<br>remove() - 移除浮动框<br>isShown() - 浮动框是否处于显示状态？</p></blockquote><p>4.代码</p><blockquote><p>页面部分</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script id=<span class="string">"ez-popover.html"</span> type=<span class="string">"text/ng-template"</span>&gt;</span><br><span class="line">  &lt;ion-popover-view <span class="class"><span class="keyword">class</span></span>=<span class="string">"calm-bg light padding"</span>&gt;</span><br><span class="line">    &lt;p&gt;这里应该有些帮助信息....&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/i</span>on-popover-view&gt;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>控制器部分</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">"ezApp"</span>, [<span class="string">"ionic"</span>])</span><br><span class="line">.controller(<span class="string">"ezCtrl"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $ionicPopover</span>) </span>&#123;</span><br><span class="line">  $ionicPopover.fromTemplateUrl(<span class="string">"ez-popover.html"</span>, &#123;</span><br><span class="line">    scope: $scope</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">popover</span>)</span>&#123;</span><br><span class="line">    $scope.popover = popover;</span><br><span class="line">  &#125;)</span><br><span class="line">  $scope.openPopover = <span class="function"><span class="keyword">function</span>(<span class="params">$event</span>) </span>&#123;</span><br><span class="line">    $scope.popover.show($event);</span><br><span class="line">  &#125;;</span><br><span class="line">  $scope.closePopover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $scope.popover.hide();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//销毁事件回调处理：清理popover对象</span></span><br><span class="line">  $scope.$on(<span class="string">"$destroy"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $scope.popover.remove();</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 隐藏事件回调处理</span></span><br><span class="line">  $scope.$on(<span class="string">"popover.hidden"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Execute action</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//删除事件回调处理</span></span><br><span class="line">  $scope.$on(<span class="string">"popover.removed"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Execute action</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-Ionic-JS&quot;&gt;&lt;a href=&quot;#什么是-Ionic-JS&quot; class=&quot;headerlink&quot; title=&quot;什么是 Ionic JS&quot;&gt;&lt;/a&gt;什么是 Ionic JS&lt;/h2&gt;&lt;p&gt;ionic 对 AngularJS 进行了扩展，主要就是将移动端开发中常见的 UI 组件抽象成 AngularJS 的指令，便于我们在开发中快速构建应用界面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/ionic17.png&quot; alt=&quot;Ionic JS&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hybrid APP 开发系列" scheme="http://yoursite.com/categories/Hybrid-APP-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="ionic" scheme="http://yoursite.com/tags/ionic/"/>
    
  </entry>
  
  <entry>
    <title>ionic css笔记</title>
    <link href="http://yoursite.com/2017/08/08/ionic%20css%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/08/08/ionic css笔记/</id>
    <published>2017-08-07T16:00:00.000Z</published>
    <updated>2018-06-07T07:28:21.715Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ionic-Css"><a href="#ionic-Css" class="headerlink" title="ionic Css"></a>ionic Css</h2><h3 id="ionic-css是什么"><a href="#ionic-css是什么" class="headerlink" title="ionic css是什么"></a>ionic css是什么</h3><p>可以只使用 ionic 的 CSS 框架：直接在 HTML 中引入 ionic.css 就可以了。ionic 的 CSS 框架主要提供预定义的 CSS 类，来帮助我们快速构建适用于手机端的 UI。</p><h3 id="Ionic-css组成"><a href="#Ionic-css组成" class="headerlink" title="Ionic css组成"></a>Ionic css组成</h3><blockquote><p>基本布局类<br>颜色和图标类<br>界面组件类<br>栅格系统类</p></blockquote><a id="more"></a><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><h4 id="定高条块定义"><a href="#定高条块定义" class="headerlink" title="定高条块定义"></a>定高条块定义</h4><p>.bar——将元素声明为屏幕上绝对定位的块状区域，具有固定的高度（44px）</p><h4 id="条块位置"><a href="#条块位置" class="headerlink" title="条块位置"></a>条块位置</h4><p>.bar-header - 置顶<br>.bar-subheader - header之下置顶<br>.bar-footer - 置底<br>.bar-subfooter - footer之上置底</p><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p>.content - 流式定位，内容在文档流中按顺序定位<br>.scroll-content - 绝对定位，内容元素占满整个屏幕</p><p><img src="/images/ionic03.png" alt="内容"></p><h3 id="bar子元素"><a href="#bar子元素" class="headerlink" title="bar子元素"></a>bar子元素</h3><p>有三种.bar子元素的样式是预定义的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">any</span> <span class="attr">class</span>=<span class="string">"bar"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">any</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">any</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">any</span>&gt;</span></span><br></pre></td></tr></table></figure><p>标题文字 - 对包含标题文字的元素应用 .title 样式，通常使用h1元素。</p><p>按钮 - 对用作按钮的元素，应用 .button 样式，通常使用 button 或 a 元素作为按钮。注意按钮将使用 .bar 的配色方案。</p><p>工具栏 - 工具栏包含一组按钮。对用作工具栏的元素，应用 .button-bar 样式，通常 使用 div 元素作为工具栏。</p><h4 id="bar嵌入input"><a href="#bar嵌入input" class="headerlink" title="bar嵌入input"></a>bar嵌入input</h4><p>在条块元素上应用 .item-input-inset 样式<br>将input包裹在应用 .item-input-wrapper 样式的元素内</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bar bar-subheader light-bg item-input-inset"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"button button-clear icon-right ion-android-arrow-dropdown"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item-input-wrapper"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"输入查询信息"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="/images/ionic04.png" alt="小结"></p><h3 id="颜色-amp-图标"><a href="#颜色-amp-图标" class="headerlink" title="颜色&amp;图标"></a>颜色&amp;图标</h3><h4 id="色彩"><a href="#色彩" class="headerlink" title="色彩"></a>色彩</h4><p>ionic定义了九种前景/背景/边框的色彩样式：</p><p><img src="/images/ionic05.png" alt="色彩"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">any</span> <span class="attr">class</span>=<span class="string">"positive-bg energized"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">any</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h4><p>官网地址：<a href="http://ionicons.com/" target="_blank" rel="noopener">http://ionicons.com/</a></p><p>.icon - 将元素声明为图标<br>.ion-{icon-name} - 声明要使用的具体图标</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">any</span> <span class="attr">class</span>=<span class="string">"icon ion-ionic calm"</span>&gt;</span><span class="tag">&lt;/<span class="name">any</span>&gt;</span></span><br></pre></td></tr></table></figure><p>比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button button-light icon ion-bug"</span>&gt;</span>&amp;nbsp;&amp;nbsp;&amp;nbsp;bug&amp;nbsp;&amp;nbsp;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h3><p>ionic定义了常用的内边距样式：</p><p>样式名很直白，边距统一为10px。可以在任何元素上应用这些样式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">any</span> <span class="attr">class</span>=<span class="string">"padding-top"</span>&gt;</span></span><br><span class="line">  .padding-top</span><br><span class="line"><span class="tag">&lt;/<span class="name">any</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/ionic06.png" alt="内边距"></p><h3 id="列表样式"><a href="#列表样式" class="headerlink" title="列表样式"></a>列表样式</h3><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>使用.list定义列表容器， 使用.item定义列表成员：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">any</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">any</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">any</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">any</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">any</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">any</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">any</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">any</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">any</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">any</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/ionic07.png" alt="列表"></p><h4 id="成员项"><a href="#成员项" class="headerlink" title="成员项"></a>成员项</h4><p>列表的样式定制主要发生在.item元素上。</p><p><img src="/images/ionic08.png" alt="成员项"></p><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><p>ionic使用.button样式定义按钮元素</p><p><img src="/images/ionic09.png" alt="按钮"></p><h4 id="开关"><a href="#开关" class="headerlink" title="开关"></a>开关</h4><p>开关通常用来设置两种状态 - 开启和关闭</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">any</span> <span class="attr">class</span>=<span class="string">"item item-toggle"</span>&gt;</span></span><br><span class="line">  iMessage</span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"toggle toggle-balanced"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"track"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"handle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">any</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/ionic10.png" alt="开关"></p><h4 id="复选"><a href="#复选" class="headerlink" title="复选"></a>复选</h4><p>复选框通常用来在一组列表中选中部分成员</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">any</span> <span class="attr">class</span>=<span class="string">"item item-chexkbox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">any</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">any</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">any</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/ionic11.png" alt="复选"></p><h4 id="单选"><a href="#单选" class="headerlink" title="单选"></a>单选</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item item-radio"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"group"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-content"</span>&gt;</span>f支付宝客户端支付<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"radio-icon ion-checkmark assertive"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><p>单选按钮通常不单独使用，将他们放入一个列表中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">any</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">any</span> <span class="attr">class</span>=<span class="string">"item item-radio"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">any</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">any</span> <span class="attr">class</span>=<span class="string">"item item-radio"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">any</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">any</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/ionic12.png" alt="单选"></p><h4 id="滑动条"><a href="#滑动条" class="headerlink" title="滑动条"></a>滑动条</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">any</span> <span class="attr">class</span>=<span class="string">"item range"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">any</span> <span class="attr">class</span>=<span class="string">"icon icon-volume-low"</span>&gt;</span><span class="tag">&lt;/<span class="name">any</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">name</span>=<span class="string">"volume"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">any</span> <span class="attr">class</span>=<span class="string">"icon icon-volume-high"</span>&gt;</span><span class="tag">&lt;/<span class="name">any</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">any</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/ionic13.png" alt="滑动条"></p><h4 id="选择框"><a href="#选择框" class="headerlink" title="选择框"></a>选择框</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">any</span> <span class="attr">class</span>=<span class="string">item</span> <span class="attr">item-select</span>”&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item-input"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">any</span> <span class="attr">class</span>=<span class="string">"input-label"</span>&gt;</span><span class="tag">&lt;/<span class="name">any</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>...<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>...<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">any</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/ionic14.png" alt="选择框"></p><h4 id="选项卡"><a href="#选项卡" class="headerlink" title="选项卡"></a>选项卡</h4><p>选项卡是一个可以包含多个按钮或链接的容器，通常用于提供一致的导航体验。 ionic中使用.tabs样式声明选项卡，使用.tab-item样式声明选项卡 成员</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;any class=&quot;tabs&quot;&gt;</span><br><span class="line">    &lt;any class=&quot;tab-item&quot;&gt;...&lt;/any&gt;</span><br><span class="line">    &lt;any class=&quot;tab-item&quot;&gt;...&lt;/any&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/any&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/ionic15.png" alt="选项卡"></p><h2 id="徽章"><a href="#徽章" class="headerlink" title="徽章"></a>徽章</h2><p>使用 .badge 样式插入徽章元素<br>在 .tab-item 同级声明 .has-badge 样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">any</span> <span class="attr">class</span>=<span class="string">"tabs"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">any</span> <span class="attr">class</span>=<span class="string">"tab-item has-badge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">any</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">any</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">any</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">any</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-view</span> <span class="attr">id</span>=<span class="string">"guidePage"</span> <span class="attr">view-title</span>=<span class="string">"引导页"</span> <span class="attr">cache-view</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bar bar-header calm-bg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>头部区域<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bar bar-subheader assertive-bg has-subheader"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button button-energized"</span>&gt;</span>会员登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button balanced-bg"</span>&gt;</span>注册会员<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bar bar-subheader positive-bg item-input-inset"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"button button-clear icon-right ion-android-arrow-dropdown"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"item-input-wrapper"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"输入查询信息"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"scroll-content balanced-bg has-header has-subheader has-footer has-subfooter"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>列表1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>列表2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>列表3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>列表4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button icon ion-ios-cart royal-bg"</span>&gt;</span>&amp;nbsp;&amp;nbsp;&amp;nbsp;购物车&amp;nbsp;&amp;nbsp;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"badge badge-assertive"</span>&gt;</span>34<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bar bar-subfooter royal-bg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"button-bar"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button button-energized"</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button button-energized"</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button balanced-bg"</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button balanced-bg"</span>&gt;</span>按钮4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bar bar-footer dark-bg"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button button-light icon ion-bug"</span>&gt;</span>&amp;nbsp;&amp;nbsp;&amp;nbsp;bug&amp;nbsp;&amp;nbsp;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-view</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/images/ionic16.png" alt="效果图"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ionic-Css&quot;&gt;&lt;a href=&quot;#ionic-Css&quot; class=&quot;headerlink&quot; title=&quot;ionic Css&quot;&gt;&lt;/a&gt;ionic Css&lt;/h2&gt;&lt;h3 id=&quot;ionic-css是什么&quot;&gt;&lt;a href=&quot;#ionic-css是什么&quot; class=&quot;headerlink&quot; title=&quot;ionic css是什么&quot;&gt;&lt;/a&gt;ionic css是什么&lt;/h3&gt;&lt;p&gt;可以只使用 ionic 的 CSS 框架：直接在 HTML 中引入 ionic.css 就可以了。ionic 的 CSS 框架主要提供预定义的 CSS 类，来帮助我们快速构建适用于手机端的 UI。&lt;/p&gt;
&lt;h3 id=&quot;Ionic-css组成&quot;&gt;&lt;a href=&quot;#Ionic-css组成&quot; class=&quot;headerlink&quot; title=&quot;Ionic css组成&quot;&gt;&lt;/a&gt;Ionic css组成&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;基本布局类&lt;br&gt;颜色和图标类&lt;br&gt;界面组件类&lt;br&gt;栅格系统类&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hybrid APP 开发系列" scheme="http://yoursite.com/categories/Hybrid-APP-%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="ionic" scheme="http://yoursite.com/tags/ionic/"/>
    
  </entry>
  
  <entry>
    <title>webpack 构建工具</title>
    <link href="http://yoursite.com/2017/07/07/webpack%20%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    <id>http://yoursite.com/2017/07/07/webpack 构建工具/</id>
    <published>2017-07-06T16:00:00.000Z</published>
    <updated>2018-06-07T06:19:29.649Z</updated>
    
    <content type="html"><![CDATA[<p>CommonJS 和 AMD 是用于 JavaScript 模块管理的两大规范，前者定义的是模块的同步加载，主要用于 NodeJS ；而后者则是异步加载，通过 RequireJS 等工具适用于前端。随着 npm 成为主流的 JavaScript 组件发布平台，越来越多的前端项目也依赖于 npm 上的项目，或者自身就会发布到 npm 平台。因此，让前端项目更方便的使用 npm 上的资源成为一大需求。</p><p>web 开发中常用到的静态资源主要有 JavaScript、CSS、图片、Jade 等文件，webpack 中将静态资源文件称之为模块。 webpack 是一个 module bundler (模块打包工具)，其可以兼容多种 js 书写规范，且可以处理模块间的依赖关系，具有更强大的 js 模块化的功能。Webpack 对它们进行统一的管理以及打包发布，其官方主页用下面这张图来说明 Webpack 的作用.</p><a id="more"></a><p><img src="/images/webpack001.png" alt="webpack的作用"></p><h2 id="webpack-介绍"><a href="#webpack-介绍" class="headerlink" title="webpack 介绍"></a>webpack 介绍</h2><p>webpack 更 Gulp 的作用相同，是项目构建工具。</p><h3 id="webpack-和-Gulp-的区别"><a href="#webpack-和-Gulp-的区别" class="headerlink" title="webpack 和 Gulp 的区别"></a>webpack 和 Gulp 的区别</h3><blockquote><p>Gulp 出现的比较早，更适合于做任务型的，可以处理任何的网站静态网站、SPA、Node.js 项目代码，Gulp 里面就是一堆的任务；<br>Webpack 一般全部用来处理 SPA 应用，就 React、Vue.js、AngularJS 使用。</p></blockquote><p>所以使用的场景不一样，因为内部的原理不同。</p><h3 id="webpack-官网文档"><a href="#webpack-官网文档" class="headerlink" title="webpack 官网文档"></a>webpack 官网文档</h3><p>官网地址：<a href="http://webpack.github.io/docs/" target="_blank" rel="noopener">http://webpack.github.io/docs/</a></p><h3 id="webpack-的优势"><a href="#webpack-的优势" class="headerlink" title="webpack 的优势"></a>webpack 的优势</h3><blockquote><p>对 CommonJS 、 AMD 、ES6 的语法做了兼容<br>对 js、css、图片等资源文件都支持打包<br>串联式模块加载器以及插件机制，让其具有更好的灵活性和扩展性，例如提供对 CoffeeScript、ES6的支持<br>有独立的配置文件 webpack.config.js<br>可以将代码切割成不同的 chunk，实现按需加载，降低了初始化时间<br>支持 SourceUrls 和 SourceMaps，易于调试<br>具有强大的 Plugin 接口，大多是内部插件，使用起来比较灵活<br>webpack 使用异步 IO 并具有多级缓存。这使得 webpack 很快且在增量编译上更加快</p></blockquote><h2 id="webpack-的使用"><a href="#webpack-的使用" class="headerlink" title="webpack 的使用"></a>webpack 的使用</h2><p>新建项目</p><p>在项目根目录下运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init -y</span><br></pre></td></tr></table></figure><h3 id="搭建基本的项目结构如下图："><a href="#搭建基本的项目结构如下图：" class="headerlink" title="搭建基本的项目结构如下图："></a>搭建基本的项目结构如下图：</h3><p><img src="/images/webpack002.png" alt="项目结构目录"></p><p>src 中的开发文件，dist 是打包后的文件</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install webpack -g</span><br><span class="line">$ npm install webpack -save-dev</span><br><span class="line">$ npm install react -save</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><blockquote><p>webpack.develop.config.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack 的开发配置文件</span></span><br><span class="line"><span class="comment">// 编写配置文件，要有最基本的文件入口和输出文件配置信息等</span></span><br><span class="line"><span class="comment">// 里面还可以加loader和各种插件配置使用</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 单页面 SPA 的入口文件</span></span><br><span class="line">    entry:path.resolve(__dirname,<span class="string">'src/js/app.js'</span>),</span><br><span class="line">    <span class="comment">// 构建之后的文件输出位置配置</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">'bundle.js'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ webpack --config webpack.develop.config.js</span><br></pre></td></tr></table></figure><p><img src="/images/webpack003.png" alt="运行完之后生成 bundle.js 文件"></p><h3 id="进行版本控制"><a href="#进行版本控制" class="headerlink" title="进行版本控制"></a>进行版本控制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ git status</span><br><span class="line">$ git add -A</span><br><span class="line">$ git commit -m &quot;项目目录结构及 webpack 初步配置&quot;</span><br></pre></td></tr></table></figure><h2 id="webpack-启动过程演进"><a href="#webpack-启动过程演进" class="headerlink" title="webpack 启动过程演进"></a>webpack 启动过程演进</h2><p>把运行命令配置到 npm 的 script 中。 package.json</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="string">"develop"</span>: <span class="string">"webpack --config webpack.develop.config.js"</span>,</span><br><span class="line">    <span class="string">"publish"</span>: <span class="string">"webpack --config webpack.publish.config.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run develop</span><br></pre></td></tr></table></figure><h3 id="更好的方式实现动启动"><a href="#更好的方式实现动启动" class="headerlink" title="更好的方式实现动启动"></a>更好的方式实现动启动</h3><p>如果需要一直输入 npm run develop 确实是一件非常无聊的事情，我们可以把让他安静的运行，让我们设置 webpack-dev-server</p><p>除了提供模块打包功能，Webpack 还提供了一个基于 Node.js Express 框架的开发服务器，它是一个静态资源 Web 服务器，对于简单静态页面或者仅依赖于独立服务的前端页面，都可以直接使用这个开发服务器进行开 发。在开发过程中，开发服务器会监听每一个文件的变化，进行实时打包，并且可以推送通知前端页面代码发生了变化，从而可以实现页面的自动刷新。</p><p>更好的方式实现自动启动：webpack 官方提供的一个第三个的插件，自动监听代码变化，帮我们重新构建，把 webpack 和 express 封装了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install webpack-dev-server -save-dev</span><br></pre></td></tr></table></figure><p>调整 npm 的 package.json scripts 部分中开发命令的配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">  <span class="string">"develop"</span>: <span class="string">"webpack-dev-server --config webpack.develop.config.js --devtool eval --progress --colors --hot --content-base src"</span>,</span><br><span class="line">  <span class="string">"publish"</span>: <span class="string">"webpack --config webpack.publish.config.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>webpack-dev-server - 在 localhost:8080 建立一个 Web 服务器<br>–devtool eval - 为你的代码创建源地址。当有任何报错的时候可以让你更加精确地定位到文件和行号<br>–progress - 显示合并代码进度<br>–colors – hot，命令行中显示颜色！<br>–content-base 指向设置的输出目录//这点一定是我们的发布目录</p></blockquote><p>在 src 下面，新建一个 index.html 文件，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack 使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行<code>npm run develop</code> ，结果如下图：</p><p><img src="/images/webpack004.png" alt="执行 npm run develop"></p><p>执行 <code>npm run develop</code> 之后我们发现执行没有结束，启动着监听，并在 8080 端口开启了一个服务器。</p><p>在浏览器中打开结果如下：</p><p><img src="/images/webpack005.png" alt="浏览器打开结果"></p><p>如果修改了 app.js 文件，会自动执行构建，刷新浏览器会发生变化。</p><p><strong>在 index.html 访问的时候，会访问 bundle.js 文件，为什么，因为 webpack-dev-server 生成的 bundle 在内存中，放到内存中构建快</strong></p><p>总的来说，当你运行 npm run develop 的时候，会启动一个 Web 服务器，然后监听文件修改，然后自动重新合并你的代码。真的非常简洁！</p><p>注意:</p><blockquote><p>用 webpack-dev-server 生成 bundle.js 文件是在内存中的，并没有实际生成<br>如果引用的文件夹中已经有 bundle.js 就不会自动刷新了，你需要先把 bundle.js 文件手动删除<br>用 webstorm 需要注意，因为他是自动保存的，所以可能识别的比较慢，你需要手动的 ctrl+s 一下</p></blockquote><h3 id="浏览器自动刷新"><a href="#浏览器自动刷新" class="headerlink" title="浏览器自动刷新"></a>浏览器自动刷新</h3><p>修改 webpack.develop.config.js 的入口文件配置，修改 entry 部分如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 单页面 SPA 的入口文件</span></span><br><span class="line">    entry:[</span><br><span class="line">        <span class="comment">// 实现浏览器自动刷新</span></span><br><span class="line">        <span class="string">'webpack/hot/dev-server'</span>,</span><br><span class="line">        <span class="string">'webpack-dev-server/client?http://localhost:8080'</span>,</span><br><span class="line">        path.resolve(__dirname,<span class="string">'src/js/app.js'</span>)</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 构建之后的文件输出位置配置</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">'bundle.js'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>修改了配置文件，重新启动，执行 <code>npm run develop</code> 结果如下图：</p><p>终端执行结果如下图：</p><p><img src="/images/webpack006.png" alt="终端执行结果"></p><p>此时的目录结构如下图：</p><p><img src="/images/webpack007.png" alt="目录结构变化"></p><h2 id="常用加载器"><a href="#常用加载器" class="headerlink" title="常用加载器"></a>常用加载器</h2><p>Loader：这是webpack准备的一些预处理工具</p><p>在构建项目之前做一些预处理操作，比如 ES6 转 ES5，Sass、Less</p><h3 id="编译-JSX-和-ES6-到-ES5-语法的加载器"><a href="#编译-JSX-和-ES6-到-ES5-语法的加载器" class="headerlink" title="编译 JSX 和 ES6 到 ES5 语法的加载器"></a>编译 JSX 和 ES6 到 ES5 语法的加载器</h3><p>安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install babel-loader --save-dev</span><br><span class="line">$ npm install babel-core babel-preset-es2015 babel-preset-react --save-dev</span><br></pre></td></tr></table></figure><p>babel-loader: 转换器，编译 JSX 语法和 ES6 语法到 ES5 语法。</p><p>修改开发配置环境: webpack.develop.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.jsx?$/</span>, <span class="comment">// 用正则来匹配文件路径，这段意思是匹配 js 或者 jsx</span></span><br><span class="line">            loader: <span class="string">'babel'</span>, <span class="comment">// 加载模块 "babel" 是 "babel-loader" 的缩写</span></span><br><span class="line">            query: &#123;</span><br><span class="line">                presets: [<span class="string">'es2015'</span>, <span class="string">'react'</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个 React Hello, World! app.js 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 项目入口文件</span></span><br><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        Hello World!</span><br><span class="line">    &lt;<span class="regexp">/div&gt;,</span></span><br><span class="line"><span class="regexp">    document.getElementById('app')</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><h3 id="加载-CSS"><a href="#加载-CSS" class="headerlink" title="加载 CSS"></a>加载 CSS</h3><p>webpack 允许像加载任何代码一样加载 CSS。可以选择需要的方式，但是可以为每个组件把所有的 CSS 加载到入口主文件中来做任何事情。</p><p>加载 CSS 需要 css-loader 和 style-loader，他们做两件不同的事情:</p><blockquote><p>css-loader 会遍历 CSS 文件，然后找到 url() 表达式然后处理他们<br>style-loader 会把原来的 CSS 代码插入页面中的一个 style 标签中</p></blockquote><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install css-loader style-loader --save-dev</span><br></pre></td></tr></table></figure><p>新建文件夹：components</p><p>新增：_base.css Hello.css Hello.js Hello.sass 文件</p><h4 id="修改配置文件："><a href="#修改配置文件：" class="headerlink" title="修改配置文件："></a>修改配置文件：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以在 js 中引用 css 的加载器</span></span><br><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">    loader: <span class="string">'style!css'</span> <span class="comment">// 如果同时使用多个加载器，中间用 ! 连接，加载器的执行顺序是从右向左</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>！用来定义loader的串联关系，”-loader”是可以省略不写的，多个loader之间用“!”连接起来</p><h4 id="Css加载策略"><a href="#Css加载策略" class="headerlink" title="Css加载策略"></a>Css加载策略</h4><p>1、在主入口文件中，比如 src/app.js 你可以为整个项目加载所有的 CSS</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  <span class="string">'./project-styles.css'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>CSS 就完全包含在合并的应用中，再也不需要重新下载。</p></blockquote><p>2、懒加载（推荐）</p><p>如果想发挥应用中多重入口文件的优势，可以在每个入口点包含各自的 CSS。</p><blockquote><p>把模块用文件夹分离，每个文件夹有各自的 CSS 和 JavaScript 文件。<br>再次，当应用发布的时候，导入的 CSS 已经加载到每个入口文件中。</p></blockquote><p>3、定制组件css</p><p>可以根据这个策略为每个组件创建 CSS 文件，可以让组件名和 CSS 中的 class 使用一个命名空间，来避免一个组件中的一些 class 干扰到另外一些组件的 class。如下图：</p><p><img src="/images/webpack008.png" alt="定制组件css"></p><p>4、使用内联样式取代 CSS 文件</p><p>在 “React Native” 中不再需要使用任何 CSS 文件，只需要使用 style 属性，可以把你的 CSS 定义成一个对象，那样就可以根据项目重新来考略你的 CSS 策略。</p><p><img src="/images/webpack009.png" alt="使用内联样式取代 CSS 文件"></p><h3 id="加载sass"><a href="#加载sass" class="headerlink" title="加载sass"></a>加载sass</h3><p>下载依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install sass-loader -save-dev</span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以在 js 中引用 sass 的加载器</span></span><br><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">    loader: <span class="string">'style!css!sass'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安装sass-loader之后运行运行 <code>npm run develop</code> 时报错如下：</p><p><img src="/images/webpack010.png" alt="安装sass-loader之后运行报错"></p><p>解决：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install node-sass -save-dev</span><br></pre></td></tr></table></figure><h3 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h3><blockquote><p>直到 HTTP/2 才能在应用加载的时候避免设置太多 HTTP 请求。<br>根据浏览器不同必须设置并行请求数，如果在 CSS 中加载了太多图片的话，可以自动把这些图片转成 BASE64 字符串然后内联到 CSS 里来降低必要的请求数，这个方法取决于图片大小。<br>需要为应用平衡下载的大小和下载的数量，不过 Webpack 可以让这个平衡十分轻松适应。</p></blockquote><p>下载载依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install url-loader  file-loader --save-dev</span><br></pre></td></tr></table></figure><p>修改配置文件:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class="line">    loader: <span class="string">'url?limit=25000'</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 处理字体</span></span><br><span class="line">&#123;</span><br><span class="line">    test: <span class="regexp">/\.(eot|woff|ttf|woff2|svg)$/</span>,</span><br><span class="line">    loader: <span class="string">'url?limit=25000'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>加载器会把需要转换的路径变成 BASE64 字符串，在其他的 webpack 书中提到的这方面会把 CSS 中的 “url()” 像其他 require 或者 import 来处理。<br>意味着如果我们可以通过它来处理我们的图片文件。<br>url-loader 传入的 limit 参数是告诉它图片如果不大于 25KB 的话要自动在它从属的 css 文件中转成 BASE64 字符串。</p></blockquote><p>大图片处理</p><p>在代码中是一下情况：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">div.img &#123;</span><br><span class="line">    background: url(../image/xxx.jpg)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">img.src = <span class="built_in">require</span>(<span class="string">"../image/xxx.jpg"</span>);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(img);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以这样配置</span></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.(png|jpg)$/</span>,</span><br><span class="line">      loader: <span class="string">'url-loader?limit=10000&amp;name=build/[name].[ext]'</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对上面的两种使用方式，loader 可以自动识别并处理。根据 loader 中的设置，webpack 会将小于指点大小的文件转化成 base64 格式的 dataUrl，其他图片会做适当的压缩并存放在指定目录中。</p><p>这一步的目录如下：</p><p><img src="/images/webpack011.png" alt="目录结构"></p><h3 id="components-Hello-js"><a href="#components-Hello-js" class="headerlink" title="components/Hello.js"></a>components/Hello.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./Hello.css'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./Hello.scss'</span>;</span><br><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="comment">// 直接在js中定义样式，内嵌样式</span></span><br><span class="line"><span class="keyword">let</span> style = &#123;</span><br><span class="line">    backgroundColor: <span class="string">'blue'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;<span class="comment">/*内嵌样式的写法*/</span>&#125;</span><br><span class="line">                &lt;h1 style=&#123;style&#125; onClick=&#123;()=&gt;<span class="keyword">this</span>.myClick(<span class="string">"fdfdf"</span>,<span class="number">23</span>)&#125;&gt;使用样式演示&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                &lt;br/</span>&gt;</span><br><span class="line">                &lt;img/&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="components-base-scss"><a href="#components-base-scss" class="headerlink" title="components/_base.scss"></a>components/_base.scss</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 新定义了一个变量</span><br><span class="line">$fontSize: 100px;</span><br><span class="line">components/Hello.css</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"../images/mv.png"</span>);</span><br><span class="line">    <span class="attribute">-moz-background-image</span>: <span class="built_in">url</span>(<span class="string">"../images/mv.png"</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="components-Hello-scss"><a href="#components-Hello-scss" class="headerlink" title="components/Hello.scss"></a>components/Hello.scss</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"base"</span>;</span><br><span class="line">h1&#123; // 利用静默注释描述一个样式 这种注释内容不会出现在生成的css文件中</span><br><span class="line">  font-size: $fontSize; /* _base.sass是部分文件，不会生成单独的css 这种注释内容会出现在生成的css文件中 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最终的-webpack-develop-config-js-文件"><a href="#最终的-webpack-develop-config-js-文件" class="headerlink" title="最终的 webpack.develop.config.js 文件"></a>最终的 webpack.develop.config.js 文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack 的开发配置文件</span></span><br><span class="line"><span class="comment">// 编写配置文件，要有最基本的文件入口和输出文件配置信息等</span></span><br><span class="line"><span class="comment">// 里面还可以加loader和各种插件配置使用</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="comment">// 自动打开浏览器插件</span></span><br><span class="line"><span class="keyword">var</span> OpenBrowserPlugin = <span class="built_in">require</span>(<span class="string">'open-browser-webpack-plugin'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 单页面 SPA 的入口文件</span></span><br><span class="line">    entry:[</span><br><span class="line">        <span class="comment">// 实现浏览器自动刷新</span></span><br><span class="line">        <span class="string">'webpack/hot/dev-server'</span>,</span><br><span class="line">        <span class="string">'webpack-dev-server/client?http://localhost:8080'</span>,</span><br><span class="line">        path.resolve(__dirname,<span class="string">'src/js/app.js'</span>)</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 构建之后的文件输出位置配置</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">'bundle.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        <span class="comment">// 不要轻易使用 noParse</span></span><br><span class="line">        <span class="comment">// noParse: [/moment-with-locales/],</span></span><br><span class="line">        <span class="comment">// preLoaders: [</span></span><br><span class="line">        <span class="comment">//     &#123; test: /\.js$/, loader: "eslint-loader", exclude: /node_modules/ &#125;</span></span><br><span class="line">        <span class="comment">// ],</span></span><br><span class="line">        loaders: [</span><br><span class="line">            <span class="comment">// JXS 和 ES6 语法转换为 ES5</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.jsx?$/</span>, <span class="comment">// 用正则来匹配文件路径，这段意思是匹配 js 或者 jsx</span></span><br><span class="line">                loader: <span class="string">'babel'</span>, <span class="comment">// 加载模块 "babel" 是 "babel-loader" 的缩写</span></span><br><span class="line">                query: &#123;</span><br><span class="line">                    presets: [<span class="string">'es2015'</span>, <span class="string">'react'</span>, <span class="string">'stage-0'</span>, <span class="string">'stage-1'</span>, <span class="string">'stage-2'</span>, <span class="string">'stage-3'</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 可以在 js 中引用 css 的加载器</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                loader: <span class="string">'style!css'</span> <span class="comment">// 如果同时使用多个加载器，中间用 ! 连接，加载器的执行顺序是从右向左</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 可以在 js 中引用 sass 的加载器</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">                loader: <span class="string">'style!css!sass'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 处理图片</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class="line">                loader: <span class="string">'url?limit=25000'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 处理字体</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(eot|woff|ttf|woff2|svg)$/</span>,</span><br><span class="line">                loader: <span class="string">'url?limit=1000000'</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        <span class="comment">//查找module的话从这里开始查找</span></span><br><span class="line">        <span class="comment">// root: '/pomy/github/flux-example/src', //绝对路径</span></span><br><span class="line">        <span class="comment">//自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名</span></span><br><span class="line">        <span class="comment">//注意一下, extensions 第一个是空字符串! 对应不需要后缀的情况.</span></span><br><span class="line">        extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.sass'</span>, <span class="string">'jsx'</span>],</span><br><span class="line">        <span class="comment">//模块别名定义，方便后续直接引用别名，无须多写长长的地址</span></span><br><span class="line">        alias: &#123;</span><br><span class="line">            <span class="comment">// AppStore : 'js/stores/AppStores.js', //后续直接 require('AppStore') 即可</span></span><br><span class="line">            <span class="comment">// ActionType : 'js/actions/ActionType.js',</span></span><br><span class="line">            <span class="comment">// AppAction : 'js/actions/AppAction.js'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 配置了这个属性之后 react 和 react-dom 这些第三方的包都不会被构建进 js 中，那么我们就需要通过 cdn 进行文件的引用了</span></span><br><span class="line">    <span class="comment">// 前边的这个名称是在项目中引用用的，相当于 import React from 'react1' 中的 react</span></span><br><span class="line">    externals: &#123;</span><br><span class="line">        <span class="comment">// 'react1': 'react',</span></span><br><span class="line">        <span class="comment">// 'react-dom1': 'react-dom',</span></span><br><span class="line">        <span class="comment">// '$1': 'jQuery'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> OpenBrowserPlugin(&#123;<span class="attr">url</span>: <span class="string">'http://localhost:8080/'</span>, <span class="attr">browser</span>: <span class="string">'chrome'</span>&#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="webpack-的部署策略"><a href="#webpack-的部署策略" class="headerlink" title="webpack 的部署策略"></a>webpack 的部署策略</h2><h3 id="修改-npm-的-package-json-文件"><a href="#修改-npm-的-package-json-文件" class="headerlink" title="修改 npm 的 package.json 文件"></a>修改 npm 的 package.json 文件</h3><p>“publish”: “ webpack –config webpack.publish.config.js -p”,</p><p>指向生产的配置文件，并且加上了webpack的cli的-p,他会自动做一些优化</p><h3 id="分离应用和第三方"><a href="#分离应用和第三方" class="headerlink" title="分离应用和第三方"></a>分离应用和第三方</h3><p>何时应该分离？</p><p>当应用依赖其他库尤其是像 React JS 这种大型库的时候，需要考虑把这些依赖分离出去，这样就能够让用户在更新应用之后不需要再次下载第三方文件。</p><p>当满足下面几个情况的时候你就需要这么做了：</p><p>1、当你的第三方的体积达到整个应用的 20% 或者更高的时候。<br>2、更新应用的时候只会更新很小的一部分<br>3、你没有那么关注初始加载时间，不过关注优化那些回访用户在你更新应用之后的体验。<br>4、有手机用户。</p><p>修改 webpack.publish.config.js 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> node_modules = path.resolve(__dirname, <span class="string">'node_modules'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: path.resolve(__dirname,<span class="string">'src/js/app.js'</span>),</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">        filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> CleanPlugin([<span class="string">'dist'</span>]),</span><br><span class="line">        <span class="comment">// 分离第三方应用插件,name属性会自动指向entry中vendros属性，filename属性中的文件会自动构建到output中的path属性下面</span></span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;<span class="attr">name</span>: <span class="string">'vendors'</span>, <span class="attr">filename</span>: <span class="string">'vendors.js'</span>&#125;),</span><br><span class="line">        <span class="comment">// 可以新建多个抽离样式的文件，这样就可以有多个css文件了。</span></span><br><span class="line">        <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"app.css"</span>),</span><br><span class="line">        <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">            <span class="comment">//去掉react中的警告，react会自己判断</span></span><br><span class="line">            <span class="string">'process.env'</span>: &#123;</span><br><span class="line">                NODE_ENV: <span class="string">'"production"'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，其实生产环境的配置和开发的配置没有太大的不同，主要是把不需要的东西给去掉了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm  run  publish</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack 使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vendors.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：记住要把这些文件都加入到你的 HTML 代码中，但在上面这种引入后，在浏览器打开之后报下面这个错误，是因为引入顺序的问题</p><p><img src="/images/webpack012.png" alt="报错"></p><p>将上面 index.html 文件中的两个 js 文件引入顺序调换，如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vendors.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="和-gulp-的集成"><a href="#和-gulp-的集成" class="headerlink" title="和 gulp 的集成"></a>和 gulp 的集成</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gulp 的任务是控制执行流程，webpack 的任务是处理复杂引用的依赖</span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="comment">// 删除文件和目录</span></span><br><span class="line"><span class="keyword">var</span> del = <span class="built_in">require</span>(<span class="string">'del'</span>);</span><br><span class="line"><span class="comment">// 按顺序执行</span></span><br><span class="line"><span class="keyword">var</span> gulpSequence = <span class="built_in">require</span>(<span class="string">'gulp-sequence'</span>);</span><br><span class="line"><span class="comment">// 引入webpack的本地模块</span></span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"><span class="comment">// 引入wbpack的配置文件</span></span><br><span class="line"><span class="keyword">var</span> webpackConfig = <span class="built_in">require</span>(<span class="string">"./webpack.publish.config.js"</span>);</span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'sequence'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"项目构建成功"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 流程控制</span></span><br><span class="line">gulp.task(<span class="string">'sequence'</span>, gulpSequence(<span class="string">'clean'</span>,<span class="string">'webpack'</span>));</span><br><span class="line"><span class="comment">// 删除文件和文件夹</span></span><br><span class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//del('dist);// 如果直接给dist的目录，项目启动的顺序还有清除结果会报错，所以要写的更详细一些</span></span><br><span class="line">    del([<span class="string">'dist/js'</span>,<span class="string">'dist/css'</span>,<span class="string">'dist/img'</span>,<span class="string">'dist/*.html'</span>]);</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cb();</span><br><span class="line">    &#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//写一个任务，在gulp中执行webpack的构建</span></span><br><span class="line"><span class="comment">// gulp 负责任务流程部分的操作，webpack 负责复杂模块系统的引用分离工作</span></span><br><span class="line">gulp.task(<span class="string">'webpack'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 执行webpack的构建任务</span></span><br><span class="line">        webpack(webpackConfig, <span class="function"><span class="keyword">function</span> (<span class="params">err, stats</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"构建任务失败"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cb();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="合并成单文件"><a href="#合并成单文件" class="headerlink" title="合并成单文件"></a>合并成单文件</h3><p>一般情况下只有在下面的情况下才使用单入口模式：</p><p>1、应用很小<br>2、很少会更新应用<br>3、你不太关心初始加载时间</p><blockquote><p>gulp + webpack 构建多页面前端项目</p></blockquote><p><a href="http://cnodejs.org/topic/56df76559386fbf86ddd6916" target="_blank" rel="noopener">http://cnodejs.org/topic/56df76559386fbf86ddd6916</a></p><h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><h3 id="压缩插件-webpack-optimize-UglifyJsPlugin-这个插件是webpack自带的"><a href="#压缩插件-webpack-optimize-UglifyJsPlugin-这个插件是webpack自带的" class="headerlink" title="压缩插件 webpack.optimize.UglifyJsPlugin, 这个插件是webpack自带的."></a>压缩插件 webpack.optimize.UglifyJsPlugin, 这个插件是webpack自带的.</h3><p>在配置文件中加入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">        compress: &#123;</span><br><span class="line">            warnings: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="提取css插件"><a href="#提取css插件" class="headerlink" title="提取css插件"></a>提取css插件</h3><p>在 webpack 中编写 js 文件时，可以通过 require 的方式引入其他的静态资源，可通过 loade r对文件自动解析并打包文件。通常会将 js 文件打包合并，css文件会在页面的header中嵌入style的方式载入页面。但开发过程中我们并不想将样式打在脚本中，最好可以独立生成css文 件，以外链的形式加载。这时extract-text-webpack-plugin插件可以帮我们达到想要的效果。需要使用npm的方式加载插件，然后 参见下面的配置，就可以将js中的css文件提取，并以指定的文件名来进行加载。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install extract-text-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><p>只能把 css 抽出来，但是 sass 的样式不能分离出来。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"app.css"</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="自动创建-index-Html-页面插件"><a href="#自动创建-index-Html-页面插件" class="headerlink" title="自动创建 index.Html 页面插件"></a>自动创建 index.Html 页面插件</h3><p>html-webpack-plugin</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'./src/template.html'</span>,</span><br><span class="line">      htmlWebpackPlugin: &#123;</span><br><span class="line">          <span class="string">"files"</span>: &#123;</span><br><span class="line">              <span class="string">"css"</span>: [<span class="string">"app.css"</span>],</span><br><span class="line">              <span class="string">"js"</span>: [<span class="string">"vendors.js"</span>, <span class="string">"bundle.js"</span>]</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 压缩 html 文档</span></span><br><span class="line">      minify: &#123;</span><br><span class="line">          removeComments: <span class="literal">true</span>,</span><br><span class="line">          collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">          removeAttributeQuotes: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="优化第三方包"><a href="#优化第三方包" class="headerlink" title="优化第三方包"></a>优化第三方包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="comment">//去掉react中的警告，react会自己判断</span></span><br><span class="line">      <span class="string">'process.env'</span>: &#123;</span><br><span class="line">          NODE_ENV: <span class="string">'"production"'</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="自动打开浏览器插件"><a href="#自动打开浏览器插件" class="headerlink" title="自动打开浏览器插件"></a>自动打开浏览器插件</h3><p>open-browser-webpack-plugin</p><p><a href="https://github.com/baldore/open-browser-webpack-" target="_blank" rel="noopener">https://github.com/baldore/open-browser-webpack-</a></p><blockquote><p>webpack.develop.config.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动打开浏览器插件</span></span><br><span class="line"><span class="keyword">var</span> OpenBrowserPlugin = <span class="built_in">require</span>(<span class="string">'open-browser-webpack-plugin'</span>);</span><br><span class="line">plugins: [</span><br><span class="line">    <span class="keyword">new</span> OpenBrowserPlugin(&#123;<span class="attr">url</span>: <span class="string">'http://localhost:8080/'</span>, <span class="attr">browser</span>: <span class="string">'chrome'</span>&#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="提取-js-公共部分插件"><a href="#提取-js-公共部分插件" class="headerlink" title="提取 js 公共部分插件"></a>提取 js 公共部分插件</h3><p>提取公共文件: CommonsChunkPlugin</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">    <span class="comment">// 分离第三方应用插件,name属性会自动指向 entry 中 vendros 属性，filename 属性中的文件会自动构建到 output 中的 path 属性下面</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;<span class="attr">name</span>: <span class="string">'vendors'</span>, <span class="attr">filename</span>: <span class="string">'vendors.js'</span>&#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="ProvidePlugin插件"><a href="#ProvidePlugin插件" class="headerlink" title="ProvidePlugin插件"></a>ProvidePlugin插件</h3><p>自动添加引用插件，全局暴露插件，直接使用</p><h3 id="删除目录插件"><a href="#删除目录插件" class="headerlink" title="删除目录插件"></a>删除目录插件</h3><p>clean-webpack-plugin</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CleanPlugin = <span class="built_in">require</span>(<span class="string">"clean-webpack-plugin"</span>);</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> CleanPlugin([<span class="string">'dist'</span>]),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="拷贝文件插件"><a href="#拷贝文件插件" class="headerlink" title="拷贝文件插件"></a>拷贝文件插件</h3><p>copy-webpack-plugin</p><h3 id="合并配置文件插件"><a href="#合并配置文件插件" class="headerlink" title="合并配置文件插件"></a>合并配置文件插件</h3><blockquote><p>webpack-config</p></blockquote><p><a href="https://github.com/mdreizin/webpack-config" target="_blank" rel="noopener">https://github.com/mdreizin/webpack-config</a></p><h3 id="最终的-webpack-publish-config-js-文件"><a href="#最终的-webpack-publish-config-js-文件" class="headerlink" title="最终的 webpack.publish.config.js 文件"></a>最终的 webpack.publish.config.js 文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack 的发布配置文件</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="comment">// 自动生成index.html页面插件</span></span><br><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="comment">// 提取css文件的插件</span></span><br><span class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</span><br><span class="line"><span class="comment">// 删除文件夹</span></span><br><span class="line"><span class="keyword">var</span> CleanPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 单页面 SPA 的入口文件</span></span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: path.resolve(__dirname,<span class="string">'src/js/app.js'</span>),</span><br><span class="line">        <span class="comment">// 当 react 作为一个 node  模块安装的时候，</span></span><br><span class="line">        <span class="comment">// 可以直接指向它，就比如 require('react');</span></span><br><span class="line">        vendors: [<span class="string">'react'</span>, <span class="string">'react-dom'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 构建之后的文件输出位置配置</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">'bundle.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        loaders: [</span><br><span class="line">            <span class="comment">// JXS 和 ES6 语法转换为 ES5</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.jsx?$/</span>, <span class="comment">// 用正则来匹配文件路径，这段意思是匹配 js 或者 jsx</span></span><br><span class="line">                loader: <span class="string">'babel'</span>, <span class="comment">// 加载模块 "babel" 是 "babel-loader" 的缩写</span></span><br><span class="line">                query: &#123;</span><br><span class="line">                    presets: [<span class="string">'es2015'</span>, <span class="string">'react'</span>, <span class="string">'stage-0'</span>, <span class="string">'stage-1'</span>, <span class="string">'stage-2'</span>, <span class="string">'stage-3'</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 可以在 js 中引用 css 的加载器</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                loader: ExtractTextPlugin.extract(<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>) <span class="comment">// 如果同时使用多个加载器，中间用 ! 连接，加载器的执行顺序是从右向左</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 可以在 js 中引用 sass 的加载器</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">                loader: ExtractTextPlugin.extract(<span class="string">"style-loader"</span>, <span class="string">"css-loader!sass-loader"</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 处理图片</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class="line">                loader: <span class="string">'url?limit=25000&amp;name=images/[name].[ext]'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 处理字体</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(eot|woff|ttf|woff2|svg)$/</span>,</span><br><span class="line">                loader: <span class="string">'url?limit=1000000&amp;name=fonts/[name],[ext]'</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        <span class="comment">//查找module的话从这里开始查找</span></span><br><span class="line">        <span class="comment">// root: '/pomy/github/flux-example/src', //绝对路径</span></span><br><span class="line">        <span class="comment">//自动扩展文件后缀名，意味着我们 require 模块可以省略不写后缀名</span></span><br><span class="line">        <span class="comment">//注意一下, extensions 第一个是空字符串! 对应不需要后缀的情况.</span></span><br><span class="line">        extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.sass'</span>, <span class="string">'jsx'</span>],</span><br><span class="line">        <span class="comment">//模块别名定义，方便后续直接引用别名，无须多写长长的地址</span></span><br><span class="line">        <span class="comment">// alias: &#123;</span></span><br><span class="line">        <span class="comment">//     AppStore : 'js/stores/AppStores.js',//后续直接 require('AppStore') 即可</span></span><br><span class="line">        <span class="comment">//         ActionType : 'js/actions/ActionType.js',</span></span><br><span class="line">        <span class="comment">//         AppAction : 'js/actions/AppAction.js'</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// 使用了该插件就不适用 gulp 了</span></span><br><span class="line">        <span class="keyword">new</span> CleanPlugin([<span class="string">'dist'</span>]),</span><br><span class="line">        <span class="comment">// 分离第三方应用插件,name属性会自动指向 entry 中 vendros 属性，filename 属性中的文件会自动构建到output中的path属性下面</span></span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;<span class="attr">name</span>: <span class="string">'vendors'</span>, <span class="attr">filename</span>: <span class="string">'vendors.js'</span>&#125;),</span><br><span class="line">        <span class="comment">// 用webpack压缩代码，可以忽略代码中的警告</span></span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">            compress: &#123;</span><br><span class="line">                warnings: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// 可以新建多个抽离样式的文件，这样就可以有多个css文件了。</span></span><br><span class="line">        <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"app.css"</span>),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: <span class="string">'./src/template.html'</span>,</span><br><span class="line">            htmlWebpackPlugin: &#123;</span><br><span class="line">                <span class="string">"files"</span>: &#123;</span><br><span class="line">                    <span class="string">"css"</span>: [<span class="string">"app.css"</span>],</span><br><span class="line">                    <span class="string">"js"</span>: [<span class="string">"vendors.js"</span>, <span class="string">"bundle.js"</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 压缩 html 文档</span></span><br><span class="line">            minify: &#123;</span><br><span class="line">                removeComments: <span class="literal">true</span>,</span><br><span class="line">                collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">                removeAttributeQuotes: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// 优化第三方的包，减少代码量</span></span><br><span class="line">        <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">            <span class="comment">//去掉react中的警告，react会自己判断</span></span><br><span class="line">            <span class="string">'process.env'</span>: &#123;</span><br><span class="line">                NODE_ENV: <span class="string">'"production"'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最终的目录结构如下图：</p><p><img src="/images/webpack013.png" alt="最终目录结构图"></p><h2 id="开发阶段代码风格控制-eslint"><a href="#开发阶段代码风格控制-eslint" class="headerlink" title="开发阶段代码风格控制 eslint"></a>开发阶段代码风格控制 eslint</h2><p>安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install eslint -g</span><br><span class="line">$ npm install eslint-loader -save-dev</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span> : &#123;</span><br><span class="line">  preLoaders: [</span><br><span class="line">      &#123;<span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">loader</span>: <span class="string">"eslint-loader"</span>, <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>&#125;</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>.eslintrc.js 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 开启推荐配置信息</span></span><br><span class="line">    <span class="comment">// "extends": "eslint:recommended",</span></span><br><span class="line">    <span class="comment">// 默认情况下，ESLint 会在所有父级目录里寻找配置文件，一直到根目录。如果你想要你所有项目都遵循一个特定的约定时，这将会很有用，但有时候会导致意想不到的结果。为了将 ESLint 限制到一个特定的项目，在你项目根目录下的 package.json 文件或者 .eslintrc.* 文件里的 eslintConfig 字段下设置 "root": true。ESLint 一旦发现配置文件中有 "root": true，它就会停止在父级目录中寻找。</span></span><br><span class="line">    <span class="string">"root"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 脚本在执行期间访问的额外的全局变量</span></span><br><span class="line">    <span class="comment">// 当访问未定义的变量时，no-undef 规则将发出警告。如果你想在一个文件里使用全局变量，推荐你定义这些全局变量，这样 ESLint 就不会发出警告了。你可以使用注释或在配置文件中定义全局变量。</span></span><br><span class="line">    <span class="string">"globals"</span> : &#123;</span><br><span class="line">        <span class="string">"window"</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="string">"document"</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="string">"$"</span>:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置插件</span></span><br><span class="line">    <span class="comment">// "plugins": [</span></span><br><span class="line">    <span class="comment">//     'html'</span></span><br><span class="line">    <span class="comment">// ],</span></span><br><span class="line">    <span class="comment">// 设置解析器选项</span></span><br><span class="line">    <span class="string">"parserOptions"</span>: &#123;</span><br><span class="line">        <span class="string">"ecmaVersion"</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="string">"sourceType"</span>: <span class="string">"module"</span>,</span><br><span class="line">        <span class="string">"ecmaFeatures"</span>: &#123;</span><br><span class="line">            <span class="string">"jsx"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 启用的规则及各自的错误级别</span></span><br><span class="line">    <span class="string">"rules"</span> : &#123;</span><br><span class="line">        <span class="comment">// 禁止用console</span></span><br><span class="line">        <span class="string">"no-console"</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="comment">// 禁止用分号</span></span><br><span class="line">        <span class="string">"semi"</span>:[<span class="number">1</span>,<span class="string">'never'</span>],</span><br><span class="line">        <span class="comment">// 在同一个作用域中禁止多次重复定义</span></span><br><span class="line">        <span class="string">"no-redeclare"</span>:<span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 指定想启用的环境</span></span><br><span class="line">    <span class="string">"env"</span>: &#123;</span><br><span class="line">        <span class="string">"browser"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"node"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="其它知识点"><a href="#其它知识点" class="headerlink" title="其它知识点"></a>其它知识点</h2><h3 id="webpack中的非入口文件（异步加载）"><a href="#webpack中的非入口文件（异步加载）" class="headerlink" title="webpack中的非入口文件（异步加载）"></a>webpack中的非入口文件（异步加载）</h3><p>这个是重点要配合 chunkname 属性，react-router 的动态路由会用到</p><p><a href="http://react-china.org/t/webpack-output-filename-output-chunkfilename/2256/2" target="_blank" rel="noopener">http://react-china.org/t/webpack-output-filename-output-chunkfilename/2256/2</a></p><p>基本上都是在 require.ensure 去加载模块的时候才会出现，chunkFileName，个人理解是 cmd 和 amd 异步加载而且没有给入口文件时，会生成了 no-name 的 chunk，所以 chunkFileName一般都会是 [id].[chunkhash].js, 也就是这种 chunk 的命名一般都会是 0.a5898fnub6.js.</p><h3 id="Resolve属性"><a href="#Resolve属性" class="headerlink" title="Resolve属性"></a>Resolve属性</h3><p>webpack 在构建包的时候会按目录的进行文件的查找，resolve 属性中的 extensions 数组中用于配置程序可以自行补全哪些文件后缀：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">    <span class="comment">//查找module的话从这里开始查找</span></span><br><span class="line">    root: <span class="string">'/pomy/github/flux-example/src'</span>, <span class="comment">//绝对路径</span></span><br><span class="line">    <span class="comment">//自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名</span></span><br><span class="line">    <span class="comment">//注意一下, extensions 第一个是空字符串! 对应不需要后缀的情况.</span></span><br><span class="line">    extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.scss'</span>,’jsx’],</span><br><span class="line">    <span class="comment">//模块别名定义，方便后续直接引用别名，无须多写长长的地址</span></span><br><span class="line">    alias: &#123;</span><br><span class="line">        AppStore : <span class="string">'js/stores/AppStores.js'</span>,<span class="comment">//后续直接 require('AppStore') 即可</span></span><br><span class="line">        ActionType : <span class="string">'js/actions/ActionType.js'</span>,</span><br><span class="line">        AppAction : <span class="string">'js/actions/AppAction.js'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Externals属性"><a href="#Externals属性" class="headerlink" title="Externals属性"></a>Externals属性</h3><p>外部依赖不需要打包进 bundle，当我们想在项目中 require 一些其他的类库或者 API ，而又不想让这些类库的源码被构建到运行时文件中，这在实际开发中很有必要。<br>比如：在页面里通过 script 标签引用了 jQuery：<code>&lt;script src=&quot;//code.jquery.com/jquery-1.12.0.min.js&quot;&gt;&lt;/script&gt;</code>，所以并不想在其他 js 里再打包进入一遍，比如你的其他 js 代码类似：</p><p>其实就是不是通过require或者import引入的，而是直接写在html中的js地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 配置了这个属性之后 react 和 react-dom 这些第三方的包都不会被构建进 js 中，那么我们就需要通过 cdn 进行文件的引用了</span><br><span class="line">// 前边的这个名称是在项目中引用用的，相当于 import React from &apos;react1&apos; 中的 react</span><br><span class="line">externals: &#123;</span><br><span class="line">    &apos;react1&apos;: &apos;react&apos;,</span><br><span class="line">    &apos;react-dom1&apos;: &apos;react-dom&apos;,</span><br><span class="line">    &apos;$1&apos;: &apos;jQuery&apos;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这样用了 externals 属性时不用分离插件了，作用是这里引的插件不会被 webpack 所打包。要么用 cdn 要么需要 webpack 打包。下图为 webpack 中使用公用的 CDN:</p><p><img src="/images/webpack014.png" alt="webpack 中使用公用的 CDN"></p><h3 id="开发环境中使用压缩文件"><a href="#开发环境中使用压缩文件" class="headerlink" title="开发环境中使用压缩文件"></a>开发环境中使用压缩文件</h3><p><a href="http://fakefish.github.io/react-webpack-cookbook/Optimizing-rebundling.html" target="_blank" rel="noopener">http://fakefish.github.io/react-webpack-cookbook/Optimizing-rebundling.html</a></p><p>不使用就会把 react 再处理一遍</p><h3 id="noParse属性"><a href="#noParse属性" class="headerlink" title="noParse属性"></a>noParse属性</h3><p>module.noParse 是 webpack 的另一个很有用的配置项，如果确定一个模块中没有其他新的依赖项就可以配置这个像，webpack 将不再扫描这个文件中的依赖。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  noParse: [<span class="regexp">/moment-with-locales/</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多文件入口"><a href="#多文件入口" class="headerlink" title="多文件入口"></a>多文件入口</h3><p><a href="http://fakefish.github.io/react-webpack-cookbook/Multiple-entry-points.html" target="_blank" rel="noopener">http://fakefish.github.io/react-webpack-cookbook/Multiple-entry-points.html</a></p><p><img src="/images/webpack015.png" alt="多文件入口"></p><h3 id="强制从新加载文件"><a href="#强制从新加载文件" class="headerlink" title="强制从新加载文件"></a>强制从新加载文件</h3><p><a href="http://fakefish.github.io/react-webpack-cookbook/Optimizing-caching.html" target="_blank" rel="noopener">http://fakefish.github.io/react-webpack-cookbook/Optimizing-caching.html</a></p><h3 id="Chunk"><a href="#Chunk" class="headerlink" title="Chunk"></a>Chunk</h3><p>代码分离：</p><p><a href="http://webpack.github.io/docs/code-splitting.html" target="_blank" rel="noopener">http://webpack.github.io/docs/code-splitting.html</a></p><h3 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h3><p>(1)、在 react 中如何使用</p><p><a href="http://fakefish.github.io/react-webpack-cookbook/Lazy-loaded-entry-points.html" target="_blank" rel="noopener">http://fakefish.github.io/react-webpack-cookbook/Lazy-loaded-entry-points.html</a></p><p>(2)、在 react-router 中用到动态加载路由可以实现</p><h3 id="在服务器端用-webpack"><a href="#在服务器端用-webpack" class="headerlink" title="在服务器端用 webpack"></a>在服务器端用 webpack</h3><p>Node 和webpack 集成用到的中间件：<a href="http://www.tuicool.com/articles/IvQb2ey" target="_blank" rel="noopener">http://www.tuicool.com/articles/IvQb2ey</a><br>Node 和webpack 集成过程中遇到的坑如何解决：<a href="http://www.tuicool.com/articles/zEZneuq" target="_blank" rel="noopener">http://www.tuicool.com/articles/zEZneuq</a></p><p>不推荐用 webpack 构建 Node 代码</p><h3 id="热加载组件"><a href="#热加载组件" class="headerlink" title="热加载组件"></a>热加载组件</h3><p><a href="http://fakefish.github.io/react-webpack-cookbook/Hot-loading-components.html" target="_blank" rel="noopener">http://fakefish.github.io/react-webpack-cookbook/Hot-loading-components.html</a></p><h2 id="最后的-package-json"><a href="#最后的-package-json" class="headerlink" title="最后的 package.json"></a>最后的 package.json</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"webpack_example"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"CommonJS 和 AMD 是用于 JavaScript 模块管理的两大规范，前者定义的是模块的同步加载，主要用于 NodeJS ；而后者则是异步加载，通过 RequireJS 等工具适用于前端。随着 npm 成为主流的 JavaScript 组件发布平台，越来越多的前端项目也依赖于 npm 上的项目，或者自身就会发布到 npm 平台。因此，让前端项目更方便的使用 npm 上的资源成为一大需求。"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="attr">"develop"</span>: <span class="string">"webpack-dev-server --config webpack.develop.config.js --devtool eval --progress --colors --hot --content-base src"</span>,</span><br><span class="line">    <span class="attr">"publish"</span>: <span class="string">"webpack --config webpack.publish.config.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"babel-core"</span>: <span class="string">"^6.20.0"</span>,</span><br><span class="line">    <span class="attr">"babel-loader"</span>: <span class="string">"^6.2.9"</span>,</span><br><span class="line">    <span class="attr">"babel-preset-es2015"</span>: <span class="string">"^6.18.0"</span>,</span><br><span class="line">    <span class="attr">"babel-preset-react"</span>: <span class="string">"^6.16.0"</span>,</span><br><span class="line">    <span class="attr">"css-loader"</span>: <span class="string">"^0.26.1"</span>,</span><br><span class="line">    <span class="attr">"eslint"</span>: <span class="string">"^3.12.0"</span>,</span><br><span class="line">    <span class="attr">"eslint-loader"</span>: <span class="string">"^1.6.1"</span>,</span><br><span class="line">    <span class="attr">"extract-text-webpack-plugin"</span>: <span class="string">"^1.0.1"</span>,</span><br><span class="line">    <span class="attr">"file-loader"</span>: <span class="string">"^0.9.0"</span>,</span><br><span class="line">    <span class="attr">"gulp"</span>: <span class="string">"^3.9.1"</span>,</span><br><span class="line">    <span class="attr">"html-webpack-plugin"</span>: <span class="string">"^2.24.1"</span>,</span><br><span class="line">    <span class="attr">"node-sass"</span>: <span class="string">"^4.0.0"</span>,</span><br><span class="line">    <span class="attr">"open-browser-webpack-plugin"</span>: <span class="string">"0.0.3"</span>,</span><br><span class="line">    <span class="attr">"sass-loader"</span>: <span class="string">"^4.0.2"</span>,</span><br><span class="line">    <span class="attr">"style-loader"</span>: <span class="string">"^0.13.1"</span>,</span><br><span class="line">    <span class="attr">"url-loader"</span>: <span class="string">"^0.5.7"</span>,</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^1.14.0"</span>,</span><br><span class="line">    <span class="attr">"webpack-dev-server"</span>: <span class="string">"^1.16.2"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"react"</span>: <span class="string">"^15.4.1"</span>,</span><br><span class="line">    <span class="attr">"react-dom"</span>: <span class="string">"^15.4.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码地址：<a href="https://github.com/HongqinMa/webpack_example" target="_blank" rel="noopener">https://github.com/HongqinMa/webpack_example</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CommonJS 和 AMD 是用于 JavaScript 模块管理的两大规范，前者定义的是模块的同步加载，主要用于 NodeJS ；而后者则是异步加载，通过 RequireJS 等工具适用于前端。随着 npm 成为主流的 JavaScript 组件发布平台，越来越多的前端项目也依赖于 npm 上的项目，或者自身就会发布到 npm 平台。因此，让前端项目更方便的使用 npm 上的资源成为一大需求。&lt;/p&gt;
&lt;p&gt;web 开发中常用到的静态资源主要有 JavaScript、CSS、图片、Jade 等文件，webpack 中将静态资源文件称之为模块。 webpack 是一个 module bundler (模块打包工具)，其可以兼容多种 js 书写规范，且可以处理模块间的依赖关系，具有更强大的 js 模块化的功能。Webpack 对它们进行统一的管理以及打包发布，其官方主页用下面这张图来说明 Webpack 的作用.&lt;/p&gt;
    
    </summary>
    
      <category term="webpack" scheme="http://yoursite.com/categories/webpack/"/>
    
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>React 学习笔记</title>
    <link href="http://yoursite.com/2017/07/07/React%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/07/07/React学习笔记/</id>
    <published>2017-07-06T16:00:00.000Z</published>
    <updated>2018-06-07T07:01:36.986Z</updated>
    
    <content type="html"><![CDATA[<p>React 是 Facebook 开源的一个用于构建用户界面的 Javascript 库，已经 应用于 Facebook 及旗下 Instagram。</p><p>和庞大的 AngularJS 不同，React 专注于 MVC 架构中的 V，即视图。 这使得 React 很容易和开发者已有的开发栈进行融合。</p><p>React 顺应了 Web 开发组件化的趋势。应用 React 时，应该从 UI 出发抽象出不同的组件，然后像搭积木一样把它们拼装起来。</p><a id="more"></a><h2 id="React简介"><a href="#React简介" class="headerlink" title="React简介"></a>React简介</h2><p>这个项目本身也越滚越大，从最早的 UI 引擎变成了一整套前后端通吃的 Web App 解决方案。衍生的 React Native 项目，目标更是宏伟，希望用写 Web App 的方式去写 Native App。如果能够实现，整个互联网行业都会被颠覆，因为同一组人只需要写一次 UI ，就能同时运行在服务器、浏览器和手机。</p><h3 id="官网地址"><a href="#官网地址" class="headerlink" title="官网地址"></a>官网地址</h3><p>英文网：<a href="http://facebook.github.io/react/docs/getting-started.html" target="_blank" rel="noopener">http://facebook.github.io/react/docs/getting-started.html</a></p><p>中文网：<a href="http://reactjs.cn/react/docs/getting-started.html" target="_blank" rel="noopener">http://reactjs.cn/react/docs/getting-started.html</a></p><h3 id="在线编辑工具-JSFiddle"><a href="#在线编辑工具-JSFiddle" class="headerlink" title="在线编辑工具 JSFiddle"></a>在线编辑工具 JSFiddle</h3><p>在线编辑工具，可以方便快速学习 react 基本语法</p><h3 id="为什么使用-React"><a href="#为什么使用-React" class="headerlink" title="为什么使用 React"></a>为什么使用 React</h3><p>我们创造 React 是为了解决一个问题：构建随着时间数据不断变化的大规模应用程序。为了达到这个目标，React 采用下面两个主要的思想。</p><p>1、简单</p><p>仅仅只要表达出应用程序在任一个时间点应该长的样子，然后当底层的数据变了，React 会自动处理所有用户界面的更新。</p><p>2、声明式 (Declarative)</p><p>数据变化后，React 概念上与点击“刷新”按钮类似，但仅会更新变化的部分。</p><p>3、构建可组合的组件</p><p>React 都是关于构建可复用的组件。事实上，通过 React 唯一要做的事情就是构建组件。得益于其良好的封装性，组件使代码复用、测试和关注分离（separation of concerns）更加简单。</p><p>更多原因 <a href="http://facebook.github.io/react/blog/2013/06/05/why-react.html" target="_blank" rel="noopener">http://facebook.github.io/react/blog/2013/06/05/why-react.html</a></p><h3 id="实战案例"><a href="#实战案例" class="headerlink" title="实战案例"></a>实战案例</h3><p><a href="http://info.smartstudy.com/" target="_blank" rel="noopener">http://info.smartstudy.com/</a><br><a href="http://www.kongkonghu.com/choice" target="_blank" rel="noopener">http://www.kongkonghu.com/choice</a><br><a href="https://github.com/webpack/react-starter" target="_blank" rel="noopener">https://github.com/webpack/react-starter</a></p><h3 id="入门视频"><a href="#入门视频" class="headerlink" title="入门视频"></a>入门视频</h3><p><a href="https://www.youtube.com/watch?v=7eLqKgp0eeY" target="_blank" rel="noopener">https://www.youtube.com/watch?v=7eLqKgp0eeY</a><br><a href="https://www.youtube.com/watch?v=fZKaq623y38&amp;list=PLQDnxXqV213JJFtDaG0aE9vqvp6Wm7nBg" target="_blank" rel="noopener">https://www.youtube.com/watch?v=fZKaq623y38&amp;list=PLQDnxXqV213JJFtDaG0aE9vqvp6Wm7nBg</a><br><a href="https://www.youtube.com/watch?v=QQK5hpUuOuA&amp;list=PLUAEXpf1UDMkzPOiNJBrlqsUryn7n2cnK" target="_blank" rel="noopener">https://www.youtube.com/watch?v=QQK5hpUuOuA&amp;list=PLUAEXpf1UDMkzPOiNJBrlqsUryn7n2cnK</a></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://github.com/dingyiming/learn-Js-react/issues/1" target="_blank" rel="noopener">https://github.com/dingyiming/learn-Js-react/issues/1</a></p><h2 id="React的四个概念简单介绍"><a href="#React的四个概念简单介绍" class="headerlink" title="React的四个概念简单介绍"></a>React的四个概念简单介绍</h2><p>React主要有四个主要概念构成：</p><blockquote><p>Virtual DOM<br>React 组件<br>JSX语法<br>Data Flow（单向数据流）</p></blockquote><h3 id="Virtual-DOM"><a href="#Virtual-DOM" class="headerlink" title="Virtual DOM"></a>Virtual DOM</h3><h4 id="虚拟DOM是React的基石"><a href="#虚拟DOM是React的基石" class="headerlink" title="虚拟DOM是React的基石"></a>虚拟DOM是React的基石</h4><p>之所以引入虚拟 DOM，一方面是性能的考虑。Web 应用和网站不同，一个 Web 应用 中通常会在单页内有大量的 DOM 操作，而这些DOM操作很慢。</p><p>在 React 中，应用程序在虚拟 DOM 上操作，这让 React 有了优化的机会。简单说，React 在每次需要渲染时，会先比较当前 DOM 内容和待渲染内容的差异，然后再决定如何最优地更新 DOM。这个过程被称为 reconciliation。</p><p>除了性能的考虑，React 引入虚拟 DOM 更重要的意义是提供了一种一致的开发方式来开发服务端应用、Web 应用和手机端应用：</p><p><img src="/images/React001.png" alt="虚拟DOM服务端应用、Web应用和手机端应用"></p><p>因为有了虚拟 DOM 这一层，所以通过配备不同的渲染器，就可以将虚拟 DOM 的内容渲染到不同的平台。而应用开发者，使用 JavaScript 就可以通吃各个平台了。</p><h4 id="Virtual-DOM速度快的说明"><a href="#Virtual-DOM速度快的说明" class="headerlink" title="Virtual DOM速度快的说明"></a>Virtual DOM速度快的说明</h4><p>在 Web 开发中，我们总需要将变化的数据实时反应到 UI 上，这时就需要对 DOM 进行操作。而复杂或频繁的 DOM 操作通常是性能瓶颈产生的原因（如何进行高性能的复杂 DOM 操作通常是衡量一个前端开发人员技能的重要指标）。</p><p>React 为此引入了虚拟 DOM（Virtual DOM）的机制：在浏览器端用 Javascript 实现了一套 DOM API。基于 React 进行开发时所有的 DOM 构造都是通过虚拟 DOM 进行，每当数据变化时，React 都会重新构建整个 DOM 树，然后 React 将当前整个 DOM 树和上一次的 DOM 树进行对比，得到 DOM 结构的区别。而且 React 能够批处理虚拟 DOM 的刷新，在一个事件循环（Event Loop）内的两次数据变化会被合并。例如连续的先将节点内容从 A 变成 B，然后又从 B 变成 A，React 会认为 UI 不发生任何变化，而如果通过手动控制，这种逻辑通常是极其复杂的。</p><p>尽管每一次都需要构造完整的虚拟 DOM 树，但是因为虚拟 DOM 是内存数据，性能是极高的。而对实际 DOM 进行操作的仅仅是 Diff 部分，因而能达到提高性能的目的。这样，在保证性能的同时，开发者将不再需要关注某个数据的变化如何更新到一个或多个具体的 DOM 元素，而只需要 关心在任意一个数据状态下，整个界面是如何 Render 的。</p><p><a href="http://blog.csdn.net/yczz/article/details/49585313" target="_blank" rel="noopener">http://blog.csdn.net/yczz/article/details/49585313</a></p><h3 id="React组件"><a href="#React组件" class="headerlink" title="React组件"></a>React组件</h3><h4 id="组件化概念"><a href="#组件化概念" class="headerlink" title="组件化概念"></a>组件化概念</h4><blockquote><p>虚拟 DOM(virtual-dom) 不仅带来了简单的 UI 开发逻辑，同时也带来了组件化开发的思想。<br>所谓组件，即封装起来的具有独立功能的UI部件。</p></blockquote><p>React 推荐以组件的方式去重新思考 UI 构成，将 UI 上每一个功能相对独立的模块定义成组件，然后将小的组件通过组合或者嵌套的方式构成大的组件，最终完成整体UI的构建。<br>例如，Facebook 的 instagram.com 整站都采用了 React 来开发，整个页面就是一个大的组件，其中包含了嵌套的大量其它组件。</p><blockquote><p>如果说 MVC 的思想是做到视图-数据-控制器的分离，那么组件化的思考方式则是带来了 UI 功能模块之间的分离。</p></blockquote><p>通过一个典型的 Blog 评论界面来看 MVC 和组件化开发思路的区别：</p><p>对于 MVC 开发模式来说，开发者将三者定义成不同的类，实现了表现，数据，控制的分离。开发者更多的是从技术的角度来对UI进行拆分，实现松耦合。</p><p>对于 React 而言，则完全是一个新的思路，开发者从功能的角度出发，将 UI 分成不同的组件，每个组件都独立封装。在 React 中，按照界面模块自然划分的方式来组织和编写代码，</p><p>对于评论界面而言，整个 UI 是一个通过小组件构成的大组件，每个组件只关心自己部分的逻辑，彼此独立。</p><p><img src="/images/React002.png" alt="组件的特点"></p><h4 id="组件化开发特性"><a href="#组件化开发特性" class="headerlink" title="组件化开发特性"></a>组件化开发特性</h4><p>React认为一个组件应该具有如下特征：</p><blockquote><p>(1)、可组合（Composeable）：一个组件易于和其它组件一起使用，或者嵌套在另一个组件内部。如果一个组件内部创建了另一个组件，那么说父组件拥有（own）它创建的子组件，通过这个特性，一个复杂的UI可以拆分成多个简单的UI组件；<br>(2)、可重用（Reusable）：每个组件都是具有独立功能的，它可以被使用在多个UI场景；<br>(3)、可维护（Maintainable）：每个小的组件仅仅包含自身的逻辑，更容易被理解和维护；<br>(4)、可测试（Testable）：因为每个组件都是独立的，那么对于各个组件分别测试显然要比对于整个UI进行测试容易的多。</p></blockquote><h4 id="组件定义"><a href="#组件定义" class="headerlink" title="组件定义"></a>组件定义</h4><p>在 React 中定义一个组件也是相当的容易，组件就是一个实现预定义接口的 JavaScript 类：</p><blockquote><p>1、组件渲染</p></blockquote><p>ReactDOM.render 是 React 的最基本方法，用于将模板转为 HTML 语言，并插入指定的 DOM 节点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;h1&gt;Hello, world!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>而这个方法， 必须而且只能返回一个有效的 React 元素。这意味着，如果你的组件是由多个元素构成的，那么你必须在外边包一个顶层元素，然后返回这个顶层元素。比如创建一个布局组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> React.createElement(</span><br><span class="line">        <span class="string">"div"</span>,<span class="literal">null</span>,</span><br><span class="line">        React.createElement(<span class="string">"div"</span>,<span class="literal">null</span>,<span class="string">"header"</span>),</span><br><span class="line">        React.createElement(<span class="string">"div"</span>,<span class="literal">null</span>,<span class="string">"content"</span>),</span><br><span class="line">        React.createElement(<span class="string">"div"</span>,<span class="literal">null</span>,<span class="string">"footer"</span>)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2、ES5方式定义组件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> HelloMessage = React.createClass(&#123;</span><br><span class="line">      displayName: <span class="string">"HelloMessage"</span>,</span><br><span class="line">      render: <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> React.createElement(</span><br><span class="line">                  <span class="string">"div"</span>,</span><br><span class="line">                  <span class="literal">null</span>,</span><br><span class="line">                  <span class="string">"Hello "</span>,</span><br><span class="line">                  <span class="keyword">this</span>.props.name</span><br><span class="line">            );</span><br><span class="line">      &#125;</span><br><span class="line">&#125;);</span><br><span class="line">ReactDOM.render(React.createElement(HelloMessage, &#123; <span class="attr">name</span>: <span class="string">"John"</span> &#125;), mountNode);</span><br></pre></td></tr></table></figure><blockquote><p>3、JSX 中定义组件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HelloMessage = React.createClass(&#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">HelloMessage</span> <span class="attr">name</span>=<span class="string">"John"</span> /&gt;</span>, mountNode);</span></span><br></pre></td></tr></table></figure><blockquote><p>4、ES6中定义组件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./Hello.css'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./Hello.scss'</span>;</span><br><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="comment">// 内联样式</span></span><br><span class="line"><span class="keyword">let</span> style = &#123;</span><br><span class="line">    backgroundColor:<span class="string">'blue'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123; <span class="attr">count</span>: <span class="string">'es6'</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h1 style=&#123;style&#125;&gt;Hello world&#123;<span class="keyword">this</span>.state.count&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                &lt;br/</span>&gt;</span><br><span class="line">                &lt;image/&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>5、注意事项</p></blockquote><p>React 组件名称的首字母应当大写，关于大小写的差异你会在后面发现。</p><p>div 元素的样式类是用 className 而不是 class 声明的，这是因为 class 是 JavaScript 的保留字，渲染后，真实的 DOM 还会是：<code>&lt;div class=&quot;ez-led&quot;&gt;Hello, React!&lt;/div&gt;</code></p><h3 id="JSX语法"><a href="#JSX语法" class="headerlink" title="JSX语法"></a>JSX语法</h3><blockquote><p>什么是 JSX</p></blockquote><p>在用 React 写组件的时候，通常会用到 JSX 语法，像是在 Javascript 代码里直接写起了 XML 标签，每一个 XML 标签都会被 JSX 转换工具转换成纯 Javascript 代码，直接使用纯 Javascript 代码写也是可以的，只是利用 JSX，组件的结构和组件之间的关系看上去更加清晰</p><blockquote><p>JSX 语法使用</p></blockquote><p>HTML 语言直接写在 JavaScript 语言之中，不加任何引号，这就是 JSX 的语法，它允许 HTML 与 JavaScript 的混写。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">'Alice'</span>, <span class="string">'Emily'</span>, <span class="string">'Kate'</span>];</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">  &#123;</span><br><span class="line">    names.map(<span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span> Hello, &#123;name&#125;! <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('example')</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><p>上面代码体现了 JSX 的基本语法规则：遇到 HTML 标签（以 <code>&lt;</code> 开头），就用 HTML 规则解析；遇到代码块（以 <code>{</code> 开头），就用 JavaScript 规则解析。</p><p>JSX 允许直接在模板插入 JavaScript 变量。如果这个变量是一个数组，则会展开这个数组的所有成员</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">  &lt;h1&gt;Hello world!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</span><br><span class="line">  &lt;h2&gt;React is awesome&lt;<span class="regexp">/h2&gt;,</span></span><br><span class="line"><span class="regexp">];</span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;div&gt;&#123;arr&#125;&lt;/</span>div&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>上面代码的 arr 变量是一个数组，结果 JSX 会把它的所有成员，添加到模板，运行结果如下:</p><p><img src="/images/React003.png" alt="运行结果"></p><h3 id="Data-Flow（单向数据流）"><a href="#Data-Flow（单向数据流）" class="headerlink" title="Data Flow（单向数据流）"></a>Data Flow（单向数据流）</h3><h4 id="传统的-MVC"><a href="#传统的-MVC" class="headerlink" title="传统的 MVC"></a>传统的 MVC</h4><p><img src="/images/React004.png" alt="传统的MVC"></p><p>到了 Flux 当中, 除了名字改变了, 重要的是大量的 Model 归到了 Store, View 也统一了,从而得到了所谓单向的数据流, 就是 Model 和 View 之间关系非常清晰了。这样需要人为管理的状态就一下少了很多, 结果体现在开发应用的效率当中。</p><h4 id="Flux"><a href="#Flux" class="headerlink" title="Flux"></a>Flux</h4><p>1、学习地址：<a href="https://hulufei.gitbooks.io/react-tutorial/content/flux.html" target="_blank" rel="noopener">https://hulufei.gitbooks.io/react-tutorial/content/flux.html</a></p><p>2、React 标榜自己是 MVC 里面 V 的部分，那么 Flux 就相当于添加 M 和 C 的部分，Flux 是 Facebook 使用的一套前端应用的架构模式。</p><p>3、一个 Flux 应用主要包含四个部分：</p><p>(1)、dispatcher 处理动作分发，维护 Store 之间的依赖关系</p><p>(2)、stores 数据和逻辑部分</p><p>(3)、views React 组件，这一层可以看作 controller-views，作为视图同时响应用户交互</p><p>(4)、actions 提供给 dispatcher 传递数据给 store</p><h4 id="Flux-的核心“单向数据流“怎么运作的："><a href="#Flux-的核心“单向数据流“怎么运作的：" class="headerlink" title="Flux 的核心“单向数据流“怎么运作的："></a>Flux 的核心“单向数据流“怎么运作的：</h4><p><code>Action -&gt; Dispatcher -&gt; Store -&gt; View</code></p><p>更多时候 View 会通过用户交互触发 Action，所以一个简单完整的数据流类似这样：</p><p><img src="/images/React005.png" alt="一个简单完整的数据流"></p><p>整个流程如下：</p><blockquote><p>首先要有 action，通过定义一些 action creator 方法根据需要创建 Action 提供给 dispatcher<br>View 层通过用户交互（比如 onClick）会触发 Action<br>Dispatcher 会分发触发的 Action 给所有注册的 Store 的回调函数<br>Store 回调函数根据接收的 Action 更新自身数据之后会触发一个 change 事件通知 View 数据更改了<br>View 会监听这个 change 事件，拿到对应的新数据并调用 setState 更新组件 UI</p></blockquote><p>所有的状态都由 Store 来维护，通过 Action 传递数据，构成了如上所述的单向数据流循环，所以应用中的各部分分工就相当明确，高度解耦了。这种单向数据流使得整个系统都是透明可预测的。</p><h4 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h4><p>Redux 官方中文文档：<a href="http://camsong.github.io/redux-in-chinese/index" target="_blank" rel="noopener">http://camsong.github.io/redux-in-chinese/index</a>.</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>Reflux：<a href="https://segmentfault.com/a/1190000002793786?utm_source=tuicool" target="_blank" rel="noopener">https://segmentfault.com/a/1190000002793786?utm_source=tuicool</a></p><h2 id="React快速开始"><a href="#React快速开始" class="headerlink" title="React快速开始"></a>React快速开始</h2><h3 id="创建项目文件夹"><a href="#创建项目文件夹" class="headerlink" title="创建项目文件夹"></a>创建项目文件夹</h3><p>初始化npm配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init -y</span><br></pre></td></tr></table></figure><h3 id="依赖环境"><a href="#依赖环境" class="headerlink" title="依赖环境"></a>依赖环境</h3><p>在项目根目录下打开命令窗口下载 react 和 react-dom 依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install  react  react-dom --save</span><br></pre></td></tr></table></figure><h3 id="创建目录结构"><a href="#创建目录结构" class="headerlink" title="创建目录结构"></a>创建目录结构</h3><p>Hello World</p><p>英文官网的：<a href="http://facebook.github.io/react/index.html" target="_blank" rel="noopener">http://facebook.github.io/react/index.html</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Var React = <span class="built_in">require</span>(<span class="string">'react'</span>);</span><br><span class="line">Var ReactDOM = <span class="built_in">require</span>(<span class="string">'react-dom'</span>);</span><br><span class="line"><span class="keyword">var</span> HelloMessage = React.createClass(&#123;</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">HelloMessage</span> <span class="attr">name</span>=<span class="string">"John"</span> /&gt;</span>, mountNode);</span></span><br></pre></td></tr></table></figure><h3 id="代码编译方式（语法转换）"><a href="#代码编译方式（语法转换）" class="headerlink" title="代码编译方式（语法转换）"></a>代码编译方式（语法转换）</h3><p>因为现在都是使用 jsx 和 es6，所以我们需要对 js 代码进行编译。</p><p>编译转换有分为浏览器中转换和离线转换，但是基本上不会用在浏览器中引入转换 js 转换，所以只介绍离线转换。</p><h4 id="react-tools转换"><a href="#react-tools转换" class="headerlink" title="react-tools转换"></a>react-tools转换</h4><p>这是 react 自己提供的，而且是老版本的，因为中文官网还是老版本的 api，所以介绍的是这种方式。</p><blockquote><p>首先安装依赖<br>用命令进行转换，有兴趣的大家自己看一下jsx -h</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g react-tools</span><br><span class="line">jsx  --watch  src/  build/</span><br></pre></td></tr></table></figure><p>参考地址：<a href="http://reactjs.cn/react/docs/getting-started.html" target="_blank" rel="noopener">http://reactjs.cn/react/docs/getting-started.html</a></p><h4 id="babel转换"><a href="#babel转换" class="headerlink" title="babel转换"></a>babel转换</h4><p>英文官网的文档比较新，已经推荐使用 babel 来进行转换</p><blockquote><p>1、下载依赖</p></blockquote><p>安装babel、babel转换jsx的包、babel转化ES6的包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --global babel-cli</span><br><span class="line">npm install babel-preset-react  -dev-save</span><br><span class="line">npm install babel-preset-es2015 -dev-save</span><br></pre></td></tr></table></figure><p>注意:加了 -dev 之后，运行 npm install 不会下载开发依赖，需要运行 npm install –dev</p><blockquote><p>2、运行命令进行编译</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">babel --presets react src --watch --out-dir build</span><br></pre></td></tr></table></figure><blockquote><p>3、将编译之后的js文件在index.html文件中引入</p></blockquote><h4 id="Gulp-react"><a href="#Gulp-react" class="headerlink" title="Gulp-react"></a>Gulp-react</h4><p><a href="https://github.com/sindresorhus/gulp-react" target="_blank" rel="noopener">https://github.com/sindresorhus/gulp-react</a></p><h4 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h4><p>请查看 webpack 的文档</p><h4 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h4><p><img src="/images/React006.png" alt="开发工具"></p><h2 id="主要知识"><a href="#主要知识" class="headerlink" title="主要知识"></a>主要知识</h2><h3 id="视图相关概念"><a href="#视图相关概念" class="headerlink" title="视图相关概念 !!!"></a>视图相关概念 !!!</h3><blockquote><p>Props（属性，就是 element 上的 attrss）<br>State（写过 view 组件的基本都会知道，按钮有三态，Normal，Highlight，Selected，包括 extjs，jquery 里的大部分 ui 框架都是有状态的。）<br>Event（其实还应该算一个就是 dom 事件）</p></blockquote><p>了解了上面这些，就可以写代码了，因为:</p><blockquote><p>属性，解决了view的定义问题，即语义描述<br>状态，是view的有穷状态机，根据状态决定组件 ui 和行为<br>事件，是view里元素的行为</p></blockquote><p>有穷状态机：<a href="http://baike.baidu.com/view/115336.htm" target="_blank" rel="noopener">http://baike.baidu.com/view/115336.htm</a></p><h3 id="jsx语法详解"><a href="#jsx语法详解" class="headerlink" title="jsx语法详解"></a>jsx语法详解</h3><h4 id="HTML-转义"><a href="#HTML-转义" class="headerlink" title="HTML 转义"></a>HTML 转义</h4><p>React 会将所有要显示到 DOM 的字符串转义，防止 XSS。<br>所以如果 JSX 中含有转义后的实体字符比如 © (<code>©</code>) 最后显示到 DOM 中不会正确显示，因为 React 自动把 © 中的特殊字符转义了。<br>有几种解决办法：</p><ul><li>直接使用 UTF-8 字符 <code>©</code></li><li>使用对应字符的 Unicode 编码</li><li>使用数组组装 <code>&lt;div&gt;{[&#39;cc &#39;, &lt;span&gt;&amp;copy;&lt;/span&gt;, &#39; 2015&#39;]}&lt;/div&gt;</code></li><li>直接插入原始的 HTML</li></ul><p><code>&lt;div dangerouslySetInnerHTML=\{\{__html: &#39;cc &amp;copy; 2015&#39;\}\} /&gt;</code></p><p>dangerouslySetInnerHTML 参考文档: <a href="http://reactjs.cn/react/tips/dangerously-set-inner-html.html" target="_blank" rel="noopener">http://reactjs.cn/react/tips/dangerously-set-inner-html.html</a></p><h4 id="自定义-HTML-属性"><a href="#自定义-HTML-属性" class="headerlink" title="自定义 HTML 属性"></a>自定义 HTML 属性</h4><p>如果在 JSX 中使用的属性不存在于 HTML 的规范中，这个属性会被忽略。如果要使用自定义属性，可以用 data- 前缀。可访问性属性的前缀 aria- 也是支持的。</p><p>与dom的区别文档：<a href="http://reactjs.cn/react/docs/dom-differences.html" target="_blank" rel="noopener">http://reactjs.cn/react/docs/dom-differences.html</a></p><h4 id="支持的标签和属性"><a href="#支持的标签和属性" class="headerlink" title="支持的标签和属性"></a>支持的标签和属性</h4><p>如果你要使用的某些标签或属性不在这些支持列表里面就可能被 React 忽略，必须要使用的话可以提 issue，或者用前面提到的 dangerouslySetInnerHTML。</p><p>支持列表：<a href="http://reactjs.cn/react/docs/tags-and-attributes.html" target="_blank" rel="noopener">http://reactjs.cn/react/docs/tags-and-attributes.html</a></p><p>1、并不是所有的 html 标签和属性都能在 jsx 语法中使用</p><p>2、基本上你能用到的标签的属性，jsx 语法都支持</p><p>3、有些特殊的属性需要注意，必须 class 属性要变为 className 属性</p><p>所有的属性都是驼峰命名的，class 属性和 for 属性分别改为 className 和 htmlFor，来符合 DOM API 规范。</p><h4 id="属性扩散"><a href="#属性扩散" class="headerlink" title="属性扩散"></a>属性扩散</h4><p>有时候你需要给组件设置多个属性，你不想一个个写下这些属性，或者有时候你甚至不知道这些属性的名称，这时候 spread attributes 的功能就很有用了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> props = &#123;&#125;;</span><br><span class="line">props.foo = x;</span><br><span class="line">props.bar = y;</span><br><span class="line"><span class="keyword">var</span> component = <span class="xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span>;</span></span><br></pre></td></tr></table></figure><p>属性也可以被覆盖，写在后面的属性值会覆盖前面的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> props = &#123; <span class="attr">foo</span>: <span class="string">'default'</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> component = <span class="xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">foo</span>=<span class="string">&#123;</span>'<span class="attr">override</span>'&#125; /&gt;</span>;</span></span><br><span class="line"><span class="xml">console.log(component.props.foo); // 'override'</span></span><br></pre></td></tr></table></figure><h4 id="自闭合标签"><a href="#自闭合标签" class="headerlink" title="自闭合标签"></a>自闭合标签</h4><p>如果只有一个组件，就用单闭合标签形式，如果有多个组件嵌套就用双闭合标签形式</p><p><a href="http://reactjs.cn/react/tips/self-closing-tag.html" target="_blank" rel="noopener">http://reactjs.cn/react/tips/self-closing-tag.html</a></p><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>在 JSX 里使用注释也很简单，就是沿用 JavaScript，唯一要注意的是在一个组件的子元素位置使用注释要用 <code>{}</code> 包起来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> content = (</span><br><span class="line">     &lt;Nav&gt;</span><br><span class="line">          &#123;<span class="comment">/* child comment, put &#123;&#125; around */</span>&#125;</span><br><span class="line">          &lt;Person</span><br><span class="line">               <span class="comment">/* multi</span></span><br><span class="line"><span class="comment">                   line</span></span><br><span class="line"><span class="comment">                   comment */</span></span><br><span class="line">               name=&#123;<span class="built_in">window</span>.isLoggedIn ? <span class="built_in">window</span>.name : <span class="string">''</span>&#125; <span class="comment">// end of line comment</span></span><br><span class="line">          /&gt;</span><br><span class="line">     &lt;<span class="regexp">/Nav&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><h2 id="React-的-API"><a href="#React-的-API" class="headerlink" title="React 的 API"></a>React 的 API</h2><h3 id="顶层-API"><a href="#顶层-API" class="headerlink" title="顶层 API"></a>顶层 API</h3><p><a href="http://facebook.github.io/react/docs/top-level-api.html" target="_blank" rel="noopener">http://facebook.github.io/react/docs/top-level-api.html</a></p><h3 id="组件-API"><a href="#组件-API" class="headerlink" title="组件 API"></a>组件 API</h3><p><a href="http://facebook.github.io/react/docs/component-api.html" target="_blank" rel="noopener">http://facebook.github.io/react/docs/component-api.html</a></p><h3 id="组件的生命周期（特别重要）"><a href="#组件的生命周期（特别重要）" class="headerlink" title="组件的生命周期（特别重要）"></a>组件的生命周期（特别重要）</h3><p>组件的生命周期，另外的名字是状态回调，和上面讲的状态的唯一差别，上面的状态是它里面的元素，而组件的生命周期是它自己。</p><p><a href="https://hulufei.gitbooks.io/react-tutorial/content/component-lifecycle.html" target="_blank" rel="noopener">https://hulufei.gitbooks.io/react-tutorial/content/component-lifecycle.html</a></p><h4 id="组件的生命周期分成三个状态："><a href="#组件的生命周期分成三个状态：" class="headerlink" title="组件的生命周期分成三个状态："></a>组件的生命周期分成三个状态：</h4><blockquote><p>Mounting：已插入真实 DOM<br>Updating：正在被重新渲染<br>Unmounting：已移出真实 DOM</p></blockquote><h4 id="处理函数"><a href="#处理函数" class="headerlink" title="处理函数"></a>处理函数</h4><p>React 为每个状态都提供了两种处理函数，will函数在进入状态之前调用，did 函数在进入状态之后调用，三种状态共计五种处理函数。</p><blockquote><p>componentWillMount()<br>componentDidMount()<br>componentWillUpdate(object nextProps, object nextState)<br>componentDidUpdate(object prevProps, object prevState)<br>componentWillUnmount()</p></blockquote><p>此外，React 还提供两种特殊状态的处理函数。</p><blockquote><p>componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用<br>shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用</p></blockquote><h4 id="函数调用顺序图"><a href="#函数调用顺序图" class="headerlink" title="函数调用顺序图"></a>函数调用顺序图</h4><p><img src="/images/React007.png" alt="函数调用顺序图"></p><p>从上图中我们可以看出来，组件再初始化一次之后就不会再运行上图运行中文字以上的方法，反而里面会有事件监听，从而执行 shouleComponentUpdate 事件。</p><h4 id="代码使用"><a href="#代码使用" class="headerlink" title="代码使用"></a>代码使用</h4><blockquote><p>ES5写法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Hello = React.createClass(&#123;</span><br><span class="line">    getInitialState() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">liked</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.liked);</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h1 style=&#123;style&#125;&gt;Hello world&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                &lt;br/</span>&gt;</span><br><span class="line">                &lt;image/&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp">module.exports = Hello;</span></span><br></pre></td></tr></table></figure><blockquote><p>ES6写法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123; <span class="attr">count</span>: <span class="string">'es6'</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h1 style=&#123;style&#125;&gt;Hello world&#123;<span class="keyword">this</span>.state.count&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                &lt;br/</span>&gt;</span><br><span class="line">                &lt;image/&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="http://www.cnblogs.com/CHONGCHONG2008/p/5099483.html" target="_blank" rel="noopener">http://www.cnblogs.com/CHONGCHONG2008/p/5099483.html</a><br><a href="http://pinggod.com/2015/React-%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/" target="_blank" rel="noopener">http://pinggod.com/2015/React-%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</a><br><a href="http://reactjs.cn/react/docs/component-specs.html" target="_blank" rel="noopener">http://reactjs.cn/react/docs/component-specs.html</a></p><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><p>在 ES6 中用 ES5 的写法会报错.</p><h4 id="ES5-ES6-最新写法对照表"><a href="#ES5-ES6-最新写法对照表" class="headerlink" title="ES5/ES6 最新写法对照表"></a>ES5/ES6 最新写法对照表</h4><p>React 的：</p><p><a href="http://www.tuicool.com/articles/equ2my" target="_blank" rel="noopener">http://www.tuicool.com/articles/equ2my</a></p><p>ReactNative 的:</p><p><a href="http://bbs.reactnative.cn/topic/15/react-react-native-%E7%9A%84es5-es6%E5%86%99%E6%B3%95%E5%AF%B9%E7%85%A7%E8%A1%A8/2" target="_blank" rel="noopener">http://bbs.reactnative.cn/topic/15/react-react-native-%E7%9A%84es5-es6%E5%86%99%E6%B3%95%E5%AF%B9%E7%85%A7%E8%A1%A8/2</a></p><h4 id="生命周期代码-ES5-和-ES6-的区别"><a href="#生命周期代码-ES5-和-ES6-的区别" class="headerlink" title="生命周期代码 ES5 和 ES6 的区别"></a>生命周期代码 ES5 和 ES6 的区别</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法规定</span></span><br><span class="line"><span class="comment">//1、定义模块 class Life extends Component</span></span><br><span class="line"><span class="comment">//2、导出模块 export default</span></span><br><span class="line"><span class="comment">//3、引入模块 import</span></span><br><span class="line"><span class="comment">//4、默认属性</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">static defaultProps = &#123;</span></span><br><span class="line"><span class="comment">autoPlay: false,</span></span><br><span class="line"><span class="comment">    maxLoops: 10,</span></span><br><span class="line"><span class="comment">&#125;;  // 注意这里有分号</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//5、默认state</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> constructor(props)&#123;</span></span><br><span class="line"><span class="comment">     super(props);</span></span><br><span class="line"><span class="comment">     console.log("构造函数");</span></span><br><span class="line"><span class="comment">     // 初始化了我们的state，这是被推荐的写法</span></span><br><span class="line"><span class="comment">     this.state = &#123;</span></span><br><span class="line"><span class="comment">        props1:"初始化state"</span></span><br><span class="line"><span class="comment">     &#125;;</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//6、定义方法</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">（1）生命周期的方法</span></span><br><span class="line"><span class="comment"> componentWillMount()&#123;</span></span><br><span class="line"><span class="comment">    console.log("componentWillMount");</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"> (2)自定义的方法</span></span><br><span class="line"><span class="comment"> click1=()=&gt;&#123;</span></span><br><span class="line"><span class="comment">     console.log("点击了单击事件");</span></span><br><span class="line"><span class="comment">     this.setState(&#123;</span></span><br><span class="line"><span class="comment">         props1:"改变state的值"</span></span><br><span class="line"><span class="comment">     &#125;)</span></span><br><span class="line"><span class="comment">     console.log("点击了单击事件结束");</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// ES6语法定义的组件生命周期</span></span><br><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Life</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// getDefaultProps,getInitialState在es6的写法中不被支持</span></span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"构造函数"</span>);</span><br><span class="line">        <span class="comment">// 初始化了我们的state，这是被推荐的写法</span></span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">           props1: <span class="string">"初始化state"</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 组件将要被渲染到真实的dom节点中</span></span><br><span class="line">    componentWillMount()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"componentWillMount"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 组件已经插入到真实的dom节点中</span></span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"componentDidMount"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 组件是否要被重新渲染</span></span><br><span class="line">    shouldComponentUpdate()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"shouldCompontentUpdate"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 组件将要被重新渲染</span></span><br><span class="line">    componentWillUpdate()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"conpontentWillUpdate"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 组件已经被重新渲染</span></span><br><span class="line">    componentDidUpdate()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"conpontentDidUpdate"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 组件将要接受到新属性</span></span><br><span class="line">    componentWillReceiveProps()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"compintentWillReceiveProps"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    click1 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"点击了单击事件"</span>);</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            props1:<span class="string">"改变state的值"</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"点击了单击事件结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"render"</span>);</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h1 onClick=&#123;<span class="keyword">this</span>.click1&#125;&gt;&#123;<span class="keyword">this</span>.state.props1&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ES5定义组件的写法</span></span><br><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">var</span> Life = React.createClass(&#123;</span><br><span class="line">   <span class="comment">// getDefaultProps,getInitialState在es6的写法中不被支持</span></span><br><span class="line">   <span class="comment">// 初始化props属性方法</span></span><br><span class="line">   getDefaultProps()&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"getDefaultProps"</span>);</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">// 初始化我们的state属性</span></span><br><span class="line">   getInitialState()&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"getInitialState"</span>);</span><br><span class="line">       <span class="keyword">return</span> &#123;</span><br><span class="line">           props1: <span class="string">"初始化state的值"</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">// 组件将要被渲染到真实的dom节点中</span></span><br><span class="line">   componentWillMount()&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"componentWillMount"</span>);</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">// 组件已经插入到真实的dom节点中</span></span><br><span class="line">   componentDidMount()&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"componentDidMount"</span>);</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">// 组件是否要被重新渲染</span></span><br><span class="line">   shouldComponentUpdate()&#123;</span><br><span class="line">       <span class="comment">// 这个方法比较特殊，如果你要重写，你要在这里手动的进行一下state值是否发生改变的判断，因为已经把之前的方法覆盖了</span></span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"shouldCompontentUpdate"</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">// 组件将要被重新渲染</span></span><br><span class="line">   componentWillUpdate()&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"conpontentWillUpdate"</span>);</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">// 组件已经被重新渲染</span></span><br><span class="line">   componentDidUpdate()&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"conpontentDidUpdate"</span>);</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">// 组件将要接受到新属性</span></span><br><span class="line">   componentWillReceiveProps()&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"compintentWillReceiveProps"</span>);</span><br><span class="line">   &#125;,</span><br><span class="line">   click1()&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"点击事件"</span>);</span><br><span class="line">       <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">           props1:<span class="string">"改变state的值"</span></span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"2"</span>);</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.props1);</span><br><span class="line">   &#125;,</span><br><span class="line">   render() &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"render"</span>);</span><br><span class="line">       <span class="keyword">return</span> (</span><br><span class="line">           &lt;div&gt;</span><br><span class="line">               &lt;h1 onClick=&#123;<span class="keyword">this</span>.click1&#125;&gt;&#123;<span class="keyword">this</span>.state.props1&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">           &lt;/</span>div&gt;</span><br><span class="line">       )</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = Life;</span><br></pre></td></tr></table></figure><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>onClick这种进行驼峰命名ES5和ES6的写法不一样，在ES6中要用bind方法绑定this(具体可参照ES5和ES6写法对照表)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkButton</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;<span class="attr">liked</span>: <span class="literal">false</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    handleClick(e) &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123; <span class="attr">liked</span>: !<span class="keyword">this</span>.state.liked &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> text = <span class="keyword">this</span>.state.liked ? <span class="string">'like'</span> : <span class="string">'haven\'t liked'</span>;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;p onClick=&#123;<span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>)&#125;&gt;</span><br><span class="line">                You &#123;text&#125; <span class="keyword">this</span>. Click to toggle.</span><br><span class="line">            &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h4><p>ES6 写法：给事件处理函数传递额外参数的方式：bind(this, arg1, arg2, …)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick.bind(this,</span> <span class="attr">param1</span>, <span class="attr">param2</span>, <span class="attr">param3</span>)&#125;&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;,</span></span><br><span class="line"><span class="xml">handleClick: function(param1,param2,param3, event) &#123;</span></span><br><span class="line"><span class="xml">    // handle click</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="React-支持的事件列表"><a href="#React-支持的事件列表" class="headerlink" title="React 支持的事件列表"></a>React 支持的事件列表</h4><p><a href="http://reactjs.cn/react/docs/events.html" target="_blank" rel="noopener">http://reactjs.cn/react/docs/events.html</a></p><p>组件事件的一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// react中的事件支持和使用</span></span><br><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="comment">// 直接在js中定义样式，内嵌样式</span></span><br><span class="line"><span class="keyword">let</span> style = &#123;</span><br><span class="line">    backgroundColor: <span class="string">'blue'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ClickEvent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 设置默认属性和默认状态</span></span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="comment">// 初始化state</span></span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            liked: <span class="literal">false</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 单击事件处理方法</span></span><br><span class="line">    handleClick(pm1,pm2,pm3,e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(pm1);</span><br><span class="line">        <span class="built_in">console</span>.log(pm2);</span><br><span class="line">        <span class="built_in">console</span>.log(pm3);</span><br><span class="line">        <span class="built_in">console</span>.log(e);</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123; <span class="attr">liked</span>: !<span class="keyword">this</span>.state.liked &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 用箭头函数去定义自己的方法</span></span><br><span class="line">    handleMouseOver=<span class="function">(<span class="params">str</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(str);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> text = <span class="keyword">this</span>.state.liked ? <span class="string">'like'</span> : <span class="string">'haven\'t liked'</span>;</span><br><span class="line">        <span class="comment">// return；里面是要渲染的html页面</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;p onMouseOver=&#123;()=&gt;<span class="keyword">this</span>.handleMouseOver(<span class="string">"2016年"</span>)&#125; onClick=&#123;<span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>,<span class="number">12</span>,<span class="string">"dfdf"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)&#125;&gt;</span><br><span class="line">                You &#123;text&#125; <span class="keyword">this</span>. Click to toggle.</span><br><span class="line">            &lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Dom操作"><a href="#Dom操作" class="headerlink" title="Dom操作"></a>Dom操作</h3><h4 id="方法一：findDOMNode-方法"><a href="#方法一：findDOMNode-方法" class="headerlink" title="方法一：findDOMNode()方法"></a>方法一：findDOMNode()方法</h4><p>首先我们要了解 ReactDOM.render 组件返回的是对组件的引用也就是组件实例（对于无状态状态组件来说返回 null），注意 JSX 返回的不是组件实例，它只是一个 ReactElement 对象。</p><p>当组件加载到页面上之后（mounted），你都可以通过 react-dom 提供的 findDOMNode() 方法拿到组件对应的 DOM 元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; findDOMNode &#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="comment">// Inside Component class</span></span><br><span class="line">componentDidMound() &#123;</span><br><span class="line">  <span class="keyword">const</span> el = findDOMNode(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">findDOMNode() 不能用在无状态组件上。</span><br></pre></td></tr></table></figure><h4 id="方法二：refs属性"><a href="#方法二：refs属性" class="headerlink" title="方法二：refs属性"></a>方法二：refs属性</h4><p>另外一种方式就是通过在要引用的 DOM 元素上面设置一个 ref 属性指定一个名称，然后通过 this.refs.name 来访问对应的 DOM 元素。</p><p>如果 ref 是设置在原生 HTML 元素上，它拿到的就是 DOM 元素，如果设置在自定义组件上，它拿到的就是组件实例，这时候就需要通过 findDOMNode 来拿到组件的 DOM 元素。</p><p>因为无状态组件没有实例，所以 ref 不能设置在无状态组件上，一般来说这没什么问题，因为无状态组件没有实例方法，不需要 ref 去拿实例调用相关的方法，但是如果想要拿无状态组件的 DOM 元素的时候，就需要用一个状态组件封装一层，然后通过 ref 和 findDOMNode 去获取。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInputFocus</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123; <span class="attr">userInput</span>: <span class="string">''</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    handleChange(e) &#123;</span><br><span class="line">        <span class="comment">// 1、通过ref和this.refs的配合使用可以在react中获取dom元素，dom元素上所有的属性方法都可以使用</span></span><br><span class="line">        <span class="comment">// 2、通过this.refs获取dom元素是有使用位置限制的,必须在componentDidMount方法里面或者之后的生命周期方法中使用</span></span><br><span class="line">        <span class="comment">// 3、react中是不推荐你用document.getElementById的方式去获取dom元素的</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.refs.theInput.value);</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123; <span class="attr">userInput</span>: e.target.value &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    clearAndFocusInput() &#123;</span><br><span class="line">        <span class="comment">// 第一个参数是要重新赋值的state，第二个参数一个回调函数</span></span><br><span class="line">        <span class="keyword">this</span>.setState(&#123; <span class="attr">userInput</span>: <span class="string">''</span> &#125;, () =&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>.refs.theInput.focus();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;div onClick = &#123;<span class="keyword">this</span>.clearAndFocusInput.bind(<span class="keyword">this</span>)&#125;&gt;</span><br><span class="line">                    Click to Focus and Reset</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                &lt;input</span></span><br><span class="line"><span class="regexp">                    ref = "theInput"</span></span><br><span class="line"><span class="regexp">                    value = &#123;this.state.userInput&#125;</span></span><br><span class="line"><span class="regexp">                    onChange = &#123;this.handleChange.bind(this)&#125;</span></span><br><span class="line"><span class="regexp">                /</span>&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">MyInputFocus.defaultProps = &#123;</span></span><br><span class="line"><span class="regexp">    autoPlay:false,</span></span><br><span class="line"><span class="regexp">    maxLoops:10,</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">MyInputFocus.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">    autoPlay: React.PropTypes.bool.isRequired,</span></span><br><span class="line"><span class="regexp">    maxLoops: React.PropTypes.number.isRequired,</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><blockquote><p>可以使用 ref 到的组件定义的任何公共方法，比如 this.refs.myTypeahead.reset()<br>Refs 是访问到组件内部 DOM 节点唯一可靠的方法<br>Refs 会自动销毁对子组件的引用（当子组件删除时）<br>不要在 render 或者 render 之前访问 refs<br>不要滥用 refs，比如只是用它来按照传统的方式操作界面 UI：找到 DOM -&gt; 更新 DOM</p></blockquote><h3 id="和其他库配合使用"><a href="#和其他库配合使用" class="headerlink" title="和其他库配合使用"></a>和其他库配合使用</h3><p><a href="http://reactjs.cn/react/tips/use-react-with-other-libraries.html" target="_blank" rel="noopener">http://reactjs.cn/react/tips/use-react-with-other-libraries.html</a></p><h3 id="组件的-DOM-事件监听"><a href="#组件的-DOM-事件监听" class="headerlink" title="组件的 DOM 事件监听"></a>组件的 DOM 事件监听</h3><p>这篇文章是讲如何给 DOM 元素绑定 React 未提供的事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Box = React.createClass(&#123;</span><br><span class="line">      getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">windowWidth</span>: <span class="built_in">window</span>.innerWidth&#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">      handleResize: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">windowWidth</span>: <span class="built_in">window</span>.innerWidth&#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      componentDidMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, <span class="keyword">this</span>.handleResize);</span><br><span class="line">      &#125;,</span><br><span class="line">      componentWillUnmount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">window</span>.removeEventListener(<span class="string">'resize'</span>, <span class="keyword">this</span>.handleResize);</span><br><span class="line">      &#125;,</span><br><span class="line">      render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Current window width: &#123;this.state.windowWidth&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;);</span><br><span class="line">React.render(<span class="xml"><span class="tag">&lt;<span class="name">Box</span> /&gt;</span>, mountNode);</span></span><br></pre></td></tr></table></figure><p><a href="http://reactjs.cn/react/tips/dom-event-listeners.html" target="_blank" rel="noopener">http://reactjs.cn/react/tips/dom-event-listeners.html</a></p><p>1、注意添加dom事件的位置</p><p>2、在组件退出的时候，取消监听事件</p><p>组件的 DOM 事件监听的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// react中的 dom 监听事件</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ListenEvent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="comment">//this.state=&#123; userInput: '' &#125;;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 演示错误添加监听事件</span></span><br><span class="line">    componentWillMount() &#123;</span><br><span class="line">        <span class="comment">//window.addEventListener('resize', this.handleResize);</span></span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="comment">// 1、在已经插入到真实的dom节点之后，注册窗体改变大小的事件监听</span></span><br><span class="line">        <span class="comment">// 3、用ajax发起数据请求的操作也要在componentDidMount方法里面去调用</span></span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, <span class="keyword">this</span>.handleResize);</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillUnmount() &#123;</span><br><span class="line">        <span class="comment">// 2、在组件将要被卸载的时候移除监听事件，防止对其他组件的影响</span></span><br><span class="line">        <span class="built_in">window</span>.removeEventListener(<span class="string">'resize'</span>, <span class="keyword">this</span>.handleResize);</span><br><span class="line">    &#125;</span><br><span class="line">    handleResize=<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">window</span>.innerWidth);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                   dom事件监听</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h3><p><a href="http://facebook.github.io/react/tips/initial-ajax.html" target="_blank" rel="noopener">http://facebook.github.io/react/tips/initial-ajax.html</a></p><p>用 ajax 发起数据请求的操作也要在 componentDidMount 方法里面去调用</p><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p>表单不同于其他 HTML 元素，因为它要响应用户的交互，显示不同的状态，所以在 React 里面会有点特殊。</p><h4 id="状态属性"><a href="#状态属性" class="headerlink" title="状态属性"></a>状态属性</h4><p>表单元素有这么几种属于状态的属性：</p><blockquote><p>value，对应 <code>&lt;input&gt;</code> 和 <code>&lt;textarea&gt;</code> 所有<br>checked，对应类型为 checkbox 和 radio 的 <code>&lt;input&gt;</code> 所有<br>selected，对应 <code>&lt;option&gt;</code> 所有</p></blockquote><p>在 HTML 中 <code>&lt;textarea&gt;</code> 的值可以由子节点（文本）赋值，但是在 React 中，要用 value 来设置。表单元素包含以上任意一种状态属性都支持 onChange 事件监听状态值的更改。针对这些状态属性不同的处理策略，表单元素在 React 里面有两种表现形式。</p><h4 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h4><p>对于设置了上面提到的对应“状态属性“值的表单元素就是受控表单组件，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"hello"</span>/&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>一个受控的表单组件，它所有状态属性更改涉及 UI 的变更都由 React 来控制（状态属性绑定 UI）。比如上面代码里的 <code>&lt;input&gt;</code> 输入框，用户输入内容，用户输入的内容不会显示（输入框总是显示状态属性 value 的值 hello），所以说这是受控组件，不是原来默认的表单元素了。</p><p>如果希望输入的内容反馈到输入框，就要用 onChange 事件改变状态属性 value 的值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">value</span>: <span class="string">'hello'</span>&#125;;</span><br><span class="line">&#125;,</span><br><span class="line">handleChange: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>: event.target.value&#125;);</span><br><span class="line">&#125;,</span><br><span class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="keyword">this</span>.state.value;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">&#123;value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>使用这种模式非常容易实现类似对用户输入的验证，或者对用户交互做额外的处理，比如截断最多输入140个字符：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">handleChange: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">value</span>: event.target.value.substr(<span class="number">0</span>, <span class="number">140</span>)&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>受控组件例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dom操作demo</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ControlForm</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state=&#123;</span><br><span class="line">        userInput: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="comment">//this.state=&#123; userInput: '' &#125;;</span></span><br><span class="line">    &#125;</span><br><span class="line">    handleChange(e) &#123;</span><br><span class="line">        <span class="comment">// 1、在react中思想是每一个组件的状态都应该为组件本身所控制</span></span><br><span class="line">        <span class="comment">// 2、受控表单组件中的value值是要和state属性绑定的，受控表单组件只能通过onChange方法去改变state的值，从而触发页面的从新渲染绑定</span></span><br><span class="line">        <span class="comment">// 3、扩展：WebComponent &lt;x-search&gt;</span></span><br><span class="line">        <span class="comment">// 方法一：用refs获取属性值</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.refs.theInput1.value);</span><br><span class="line">        <span class="keyword">let</span> inputStr=<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(e.target.value.length&gt;=<span class="number">16</span>)&#123;</span><br><span class="line">            inputStr=e.target.value.slice(<span class="number">0</span>,<span class="number">15</span>)+<span class="string">"..."</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            inputStr=e.target.value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 方法二：用事件参数获取属性值</span></span><br><span class="line">        <span class="keyword">this</span>.setState(&#123; <span class="attr">userInput</span>:inputStr&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    clearAndFocusInput() &#123;</span><br><span class="line">        <span class="comment">// 第一个参数是要重新赋值的state，第二个参数一个回调函数</span></span><br><span class="line">        <span class="keyword">this</span>.setState(&#123; <span class="attr">userInput</span>: <span class="string">''</span> &#125;, () =&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>.refs.theInput.focus();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;div onClick=&#123;<span class="keyword">this</span>.clearAndFocusInput.bind(<span class="keyword">this</span>)&#125;&gt;</span><br><span class="line">                    Click to Focus and Reset</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                &#123;/</span>*受控表单组件改变输入框的写法*<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">                &lt;input</span></span><br><span class="line"><span class="regexp">                    ref="theInput1"</span></span><br><span class="line"><span class="regexp">                    value=&#123;this.state.userInput&#125;</span></span><br><span class="line"><span class="regexp">                    onChange=&#123;this.handleChange.bind(this)&#125;</span></span><br><span class="line"><span class="regexp">                /</span>&gt;</span><br><span class="line">                &lt;br/&gt;</span><br><span class="line">                &#123;<span class="comment">/*受控表单组件写死了value值，永远不会改变了*/</span>&#125;</span><br><span class="line">                &lt;input</span><br><span class="line">                    ref=<span class="string">"theInput"</span></span><br><span class="line">                    value=<span class="string">'I'</span>am mhq<span class="string">'</span></span><br><span class="line"><span class="string">                /&gt;</span></span><br><span class="line"><span class="string">                &lt;br/&gt;</span></span><br><span class="line"><span class="string">                &#123;/*非受控表单组件它里面输入框值的改变不被react控制*/&#125;</span></span><br><span class="line"><span class="string">                &lt;input</span></span><br><span class="line"><span class="string">                    ref="theInput"</span></span><br><span class="line"><span class="string">                /&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        );</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="非受控属性"><a href="#非受控属性" class="headerlink" title="非受控属性"></a>非受控属性</h4><p>和受控组件相对，如果表单元素没有设置自己的“状态属性”，或者属性值设置为 null，这时候就是非受控组件。它的表现就符合普通的表单元素，正常响应用户的操作。同样，你也可以绑定 onChange 事件处理交互。如果你想要给“状态属性”设置默认值，就要用 React 提供的特殊属性 defaultValue，对于 checked 会有 defaultChecked，也是使用 defaultValue。</p><h4 id="为什么要有受控组件"><a href="#为什么要有受控组件" class="headerlink" title="为什么要有受控组件"></a>为什么要有受控组件</h4><p>引入受控组件不是说它有什么好处，而是因为 React 的 UI 渲染机制，对于表单元素不得不引入这一特殊的处理方式。</p><p>在浏览器 DOM 里面是有区分 attribute 和 property 的。</p><p>attribute 是在 HTML 里指定的属性，而每个 HTML 元素在 JS 对应是一个 DOM 节点对象，这个对象拥有的属性就是 property（可以在 console 里展开一个 DOM 节点对象看一下，HTML attributes 只是对应其中的一部分属性），attribute 对应的 property 会从 attribute 拿到初始值，有些会有相同的名称，但是有些名称会不一样，比如 attribute class 对应的 property 就是 className。（详细解释：.prop，.prop() vs .attr()）。回到 React 里的 <code>&lt;input&gt;</code> 输入框，当用户输入内容的时候，输入框的 value property 会改变，但是 value attribute 依然会是 HTML 上指定的值（attribute 要用 setAttribute 去更改）。</p><p>React 组件必须呈现这个组件的状态视图，这个视图 HTML 是由 render 生成，所以对于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"hello"</span>/&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>在任意时刻，这个视图总是返回一个显示 hello 的输入框。</p><h4 id="处理-select-表单"><a href="#处理-select-表单" class="headerlink" title="处理 select 表单"></a>处理 select 表单</h4><p>在 HTML 中 <code>&lt;select&gt;</code> 标签指定选中项都是通过对应 <code>&lt;option&gt;</code> 的 selected 属性来做的，但是在 React 修改成统一使用 value。所以没有一个 selected 的状态属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">value</span>=<span class="string">"B"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"A"</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"B"</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"C"</span>&gt;</span>Cranberry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以通过传递一个数组指定多个选中项：<code>&lt;select multiple={true} value={[&#39;B&#39;, &#39;C&#39;]}&gt;</code></p><h2 id="参数传递的判断"><a href="#参数传递的判断" class="headerlink" title="参数传递的判断"></a>参数传递的判断</h2><p><a href="http://facebook.github.io/react/docs/transferring-props.html" target="_blank" rel="noopener">http://facebook.github.io/react/docs/transferring-props.html</a></p><h3 id="组合组件"><a href="#组合组件" class="headerlink" title="组合组件"></a>组合组件</h3><p>使用组件的目的就是通过构建模块化的组件，相互组合组件最后组装成一个复杂的应用。</p><p>在 React 组件中要包含其他组件作为子组件，只需要把组件当作一个 DOM 元素引入就可以了。</p><p><a href="http://reactjs.cn/react/docs/multiple-components.html" target="_blank" rel="noopener">http://reactjs.cn/react/docs/multiple-components.html</a></p><h4 id="循环插入子元素"><a href="#循环插入子元素" class="headerlink" title="循环插入子元素"></a>循环插入子元素</h4><p>如果组件中包含通过循环插入的子元素，为了保证重新渲染 UI 的时候能够正确显示这些子元素，每个元素都需要通过一个特殊的 key 属性指定一个唯一值。为了内部 diff 的效率。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Todolistdemo</span></span><br><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="comment">// 循环生成列表组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoList</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">let</span> createItem = <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>&#123;item.text&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;this.props.items.map(createItem)&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//var Item = React.createClass(&#123;</span></span><br><span class="line"><span class="comment">//    render: function() &#123;</span></span><br><span class="line"><span class="comment">//        return &lt;li key=&#123;item.id&#125; onClick=&#123;this.props.deleteItem&#125;&gt;&#123;item.text&#125;&lt;/li&gt;;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//&#125;);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoApp</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="comment">// 初始化了我们的state，这是被推荐的写法</span></span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            items: [],<span class="comment">// 存我们输入的数据</span></span><br><span class="line">            text: <span class="string">''</span>  <span class="comment">// 每次输入文本</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输入框change事件</span></span><br><span class="line">    onChange=<span class="function">(<span class="params">e</span>)=&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">text</span>: e.target.value&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    handleSubmit=<span class="function">(<span class="params">e</span>)=&gt;</span> &#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        <span class="keyword">let</span> nextItems = <span class="keyword">this</span>.state.items.concat([&#123;<span class="attr">text</span>: <span class="keyword">this</span>.state.text, <span class="attr">id</span>: <span class="built_in">Date</span>.now()&#125;]);</span><br><span class="line">        <span class="keyword">let</span> nextText = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">items</span>: nextItems, <span class="attr">text</span>: nextText&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h3&gt;TODO&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">                &lt;TodoList items=&#123;this.state.items&#125;/</span>&gt;</span><br><span class="line">                &lt;form onSubmit=&#123;<span class="keyword">this</span>.handleSubmit&#125;&gt;</span><br><span class="line">                    &lt;input onChange=&#123;<span class="keyword">this</span>.onChange&#125; value=&#123;<span class="keyword">this</span>.state.text&#125; /&gt;</span><br><span class="line">                    &lt;button&gt;&#123;<span class="string">'Add #'</span> + (<span class="keyword">this</span>.state.items.length + <span class="number">0</span>)&#125;&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>form&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">export default TodoApp;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/moudle.exports=TodoApp;</span></span><br></pre></td></tr></table></figure><p>（1）当 React 校正带有 key 的子级时，它会确保它们被重新排序（而不是破坏）或者删除（而不是重用）。 务必 把 key 添加到子级数组里组件本身上，而不是每个子级内部最外层 HTML 上。</p><p>（2）也可以传递 object 来做有 key 的子级。object 的 key 会被当作每个组件的 key。但是一定要牢记 JavaScript 并不总是保证属性的顺序会被保留。实际情况下浏览器一般会保留属性的顺序，除了 使用 32位无符号数字做为 key 的属性。数字型属性会按大小排序并且排在其它属性前面。一旦发生这种情况，React 渲染组件的顺序就是混乱。可能在 key 前面加一个字符串前缀来避免：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> items = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.props.results.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">         <span class="comment">// 如果 result.id 看起来是一个数字（比如短哈希），那么</span></span><br><span class="line">         <span class="comment">// 对象字面量的顺序就得不到保证。这种情况下，需要添加前缀</span></span><br><span class="line">         <span class="comment">// 来确保 key 是字符串。</span></span><br><span class="line">         items[<span class="string">'result-'</span> + result.id] = <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;result.text&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">         &lt;ol&gt;</span><br><span class="line">              &#123;items&#125;</span><br><span class="line">         &lt;<span class="regexp">/ol&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp"> &#125;</span></span><br></pre></td></tr></table></figure><h4 id="子级"><a href="#子级" class="headerlink" title="子级"></a>子级</h4><p>组件标签里面包含的子元素会通过父元素的props.children 传递进来。</p><p>HTML 元素会作为 React 组件对象、JS 表达式结果是一个文字节点，都会存入 Parent 组件的 props.children。</p><p>props.children 通常是一个组件对象的数组，但是当只有一个子元素的时候，props.children 将是这个唯一的子元素，而不是数组了.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> NotesList = React.createClass(&#123;</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;ol&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                React.Children.map(<span class="keyword">this</span>.props.children, <span class="function"><span class="keyword">function</span> (<span class="params">child</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;child&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            &lt;<span class="regexp">/ol&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">    &lt;NotesList&gt;</span></span><br><span class="line"><span class="regexp">        &lt;span&gt;hello&lt;/</span>span&gt;</span><br><span class="line">        &lt;span&gt;world&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>NotesList&gt;,</span><br><span class="line">    <span class="built_in">document</span>.body</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>上面代码的 NoteList 组件有两个 span 子节点，它们都可以通过 this.props.children 读取。</p><p>这里需要注意， this.props.children 的值有三种可能：如果当前组件没有子节点，它就是 undefined ;如果有一个子节点，数据类型是 object ；如果有多个子节点，数据类型就是 array 。所以，处理 this.props.children 的时候要小心。React 提供一个工具方法 React.Children 来处理 this.props.children 。我们可以用 React.Children.map 来遍历子节点，而不用担心 this.props.children 的数据类型是 undefined 还是 object。更多的 React.Children 的方法，请参考官方文档。</p><h3 id="propsType"><a href="#propsType" class="headerlink" title="propsType"></a>propsType</h3><p><a href="http://www.reactjs.cn/react/docs/reusable-components.html" target="_blank" rel="noopener">http://www.reactjs.cn/react/docs/reusable-components.html</a></p><p>做属性校验使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// react中的属性校验</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">PropsCheck</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化props属性</span></span><br><span class="line">    <span class="comment">//static defaultProps=&#123;</span></span><br><span class="line">    <span class="comment">//    autoPlay:false,</span></span><br><span class="line">    <span class="comment">//    maxLoops:10,</span></span><br><span class="line">    <span class="comment">//&#125;;</span></span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="comment">//this.state=&#123; userInput: '' &#125;;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 进行属性校验</span></span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">        autoPlay: React.PropTypes.bool.isRequired,</span><br><span class="line">        maxLoops: React.PropTypes.number.isRequired,</span><br><span class="line">    &#125;;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                属性校验</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/写在外面的写法</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/MyInputFocus.defaultProps=&#123;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/    autoPlay:false,</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/    maxLoops:10,</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/MyInputFocus.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/    autoPlay: React.PropTypes.bool.isRequired,</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/    maxLoops: React.PropTypes.number.isRequired,</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><p><a href="http://facebook.github.io/react/docs/context.html" target="_blank" rel="noopener">http://facebook.github.io/react/docs/context.html</a></p><p>子组件使用父组件的值，通过 context 可以隔代获取值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">var</span> Button = React.createClass(&#123;</span><br><span class="line">    <span class="comment">// 在孙子里面校验祖宗里面的属性</span></span><br><span class="line">    contextTypes: &#123;</span><br><span class="line">        color: React.PropTypes.string</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h1&gt;&#123;<span class="keyword">this</span>.context.age&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">                &lt;button style=&#123;&#123;background: this.context.color&#125;&#125;&gt;</span></span><br><span class="line"><span class="regexp">                    &#123;this.props.children&#125;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>button&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp">var Message = React.createClass(&#123;</span></span><br><span class="line"><span class="regexp">    render: function() &#123;</span></span><br><span class="line"><span class="regexp">        return (</span></span><br><span class="line"><span class="regexp">            &lt;div&gt;</span></span><br><span class="line"><span class="regexp">                &#123;this.props.text&#125; &lt;Button&gt;Delete&lt;/</span>Button&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br><span class="line"><span class="regexp">var MessageList = React.createClass(&#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 通过这个方法去传递属性</span></span><br><span class="line"><span class="regexp">    getChildContext: function() &#123;</span></span><br><span class="line"><span class="regexp">        return &#123;</span></span><br><span class="line"><span class="regexp">            color: "red",</span></span><br><span class="line"><span class="regexp">            age:12</span></span><br><span class="line"><span class="regexp">        &#125;;</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ 传递给子孙属性的类型校验</span></span><br><span class="line"><span class="regexp">    childContextTypes: &#123;</span></span><br><span class="line"><span class="regexp">        color: React.PropTypes.string,</span></span><br><span class="line"><span class="regexp">        age: React.PropTypes.number</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    render: function() &#123;</span></span><br><span class="line"><span class="regexp">        var children = this.props.messages.map(function(message) &#123;</span></span><br><span class="line"><span class="regexp">            return &lt;Message text=&#123;message.text&#125; /</span>&gt;;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MessageList;</span><br></pre></td></tr></table></figure><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><p><a href="http://facebook.github.io/react/docs/animation.html" target="_blank" rel="noopener">http://facebook.github.io/react/docs/animation.html</a><br><a href="http://blog.csdn.net/lihongxun945/article/details/46778723" target="_blank" rel="noopener">http://blog.csdn.net/lihongxun945/article/details/46778723</a><br><a href="https://zhuanlan.zhihu.com/p/20419592" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/20419592</a></p><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// react中的dom监听事件</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactCSSTransitionGroup <span class="keyword">from</span> <span class="string">'react-addons-css-transition-group'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./animate.css'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Animate</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;<span class="attr">items</span>: [<span class="string">'hello'</span>, <span class="string">'world'</span>, <span class="string">'click'</span>, <span class="string">'me'</span>]&#125;;</span><br><span class="line">        <span class="keyword">this</span>.handleAdd = <span class="keyword">this</span>.handleAdd.bind(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    handleAdd() &#123;</span><br><span class="line">        <span class="keyword">const</span> newItems = <span class="keyword">this</span>.state.items.concat([</span><br><span class="line">            prompt(<span class="string">'Enter some text'</span>)</span><br><span class="line">        ]);</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">items</span>: newItems&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    handleRemove(i) &#123;</span><br><span class="line">        <span class="keyword">let</span> newItems = <span class="keyword">this</span>.state.items.slice();</span><br><span class="line">        newItems.splice(i, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">items</span>: newItems&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> items = <span class="keyword">this</span>.state.items.map(<span class="function">(<span class="params">item, i</span>) =&gt;</span> (</span><br><span class="line">            &lt;div key=&#123;item&#125; onClick=&#123;() =&gt; <span class="keyword">this</span>.handleRemove(i)&#125;&gt;</span><br><span class="line">                &#123;item&#125;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        ));</span></span><br><span class="line"><span class="regexp">        return (</span></span><br><span class="line"><span class="regexp">            &lt;div&gt;</span></span><br><span class="line"><span class="regexp">                &lt;button onClick=&#123;this.handleAdd&#125;&gt;Add Item1&lt;/</span>button&gt;</span><br><span class="line">                &#123;<span class="comment">/*这个组件虽然叫动画，但是它只负责显示隐藏的动画*/</span>&#125;</span><br><span class="line">                &#123;<span class="comment">/*你想让谁有显示隐藏的动画你就用ReactCSSTransitionGroup包裹谁*/</span>&#125;</span><br><span class="line">                &#123;<span class="comment">/*后添加进去的元素和删除的元素才有动画效果，同时添加元素和ReactCSSTransitionGroup是没有动画效果的*/</span>&#125;</span><br><span class="line">                &lt;ReactCSSTransitionGroup</span><br><span class="line">                    component=<span class="string">"div"</span></span><br><span class="line">                    transitionName=<span class="string">"example"</span></span><br><span class="line">                    transitionAppear=&#123;<span class="literal">true</span>&#125;</span><br><span class="line">                    transitionEnterTimeout=&#123;<span class="number">500</span>&#125;</span><br><span class="line">                    transitionLeaveTimeout=&#123;<span class="number">300</span>&#125;&gt;</span><br><span class="line">                    &#123;items&#125;</span><br><span class="line">                &lt;<span class="regexp">/ReactCSSTransitionGroup&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取react常用插件的网址"><a href="#获取react常用插件的网址" class="headerlink" title="获取react常用插件的网址"></a>获取react常用插件的网址</h3><p><a href="https://js.coach/react/react-infinite" target="_blank" rel="noopener">https://js.coach/react/react-infinite</a><br><a href="https://react.parts/native" target="_blank" rel="noopener">https://react.parts/native</a></p><h3 id="diff算法"><a href="#diff算法" class="headerlink" title="diff算法"></a>diff算法</h3><p><a href="http://blog.csdn.net/lihongxun945/article/details/46640503" target="_blank" rel="noopener">http://blog.csdn.net/lihongxun945/article/details/46640503</a><br><a href="http://reactjs.cn/react/docs/reconciliation.html" target="_blank" rel="noopener">http://reactjs.cn/react/docs/reconciliation.html</a><br><a href="http://blog.csdn.net/yczz/article/details/49585283" target="_blank" rel="noopener">http://blog.csdn.net/yczz/article/details/49585283</a><br><a href="http://blog.csdn.net/yczz/article/details/49886061" target="_blank" rel="noopener">http://blog.csdn.net/yczz/article/details/49886061</a></p><h3 id="Web-Components"><a href="#Web-Components" class="headerlink" title="Web Components"></a>Web Components</h3><p><a href="http://www.oschina.net/p/polymer" target="_blank" rel="noopener">http://www.oschina.net/p/polymer</a><br><a href="http://facebook.github.io/react/docs/webcomponents.html" target="_blank" rel="noopener">http://facebook.github.io/react/docs/webcomponents.html</a></p><h3 id="服务器渲染"><a href="#服务器渲染" class="headerlink" title="服务器渲染"></a>服务器渲染</h3><p><a href="http://zhuanlan.zhihu.com/p/20669111?from=groupmessage&amp;isappinstalled=0" target="_blank" rel="noopener">http://zhuanlan.zhihu.com/p/20669111?from=groupmessage&amp;isappinstalled=0</a></p><h3 id="组件间通信"><a href="#组件间通信" class="headerlink" title="组件间通信"></a>组件间通信</h3><h4 id="非父子组件间的通信"><a href="#非父子组件间的通信" class="headerlink" title="非父子组件间的通信"></a>非父子组件间的通信</h4><p>使用全局事件 Pub/Sub 模式，在 componentDidMount 里面订阅事件，在 componentWillUnmount 里面取消订阅，当收到事件触发的时候调用 setState 更新 UI。</p><p>这种模式在复杂的系统里面可能会变得难以维护，所以看个人权衡是否将组件封装到大的组件，甚至整个页面或者应用就封装到一个组件。</p><p>一般来说，对于比较复杂的应用，推荐使用类似 Flux 这种单项数据流架构，参见 Data Flow。Flux 和 redux</p><h4 id="数据流Flux"><a href="#数据流Flux" class="headerlink" title="数据流Flux"></a>数据流Flux</h4><p>Github地址：<a href="https://github.com/facebook/flux" target="_blank" rel="noopener">https://github.com/facebook/flux</a></p><p>React redux react-redux react-router webpack+gulp ES6 babel<br>Mocha+chai node<br>React native Flex fetch 原生 插件</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;React 是 Facebook 开源的一个用于构建用户界面的 Javascript 库，已经 应用于 Facebook 及旗下 Instagram。&lt;/p&gt;
&lt;p&gt;和庞大的 AngularJS 不同，React 专注于 MVC 架构中的 V，即视图。 这使得 React 很容易和开发者已有的开发栈进行融合。&lt;/p&gt;
&lt;p&gt;React 顺应了 Web 开发组件化的趋势。应用 React 时，应该从 UI 出发抽象出不同的组件，然后像搭积木一样把它们拼装起来。&lt;/p&gt;
    
    </summary>
    
      <category term="React系列" scheme="http://yoursite.com/categories/React%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>混合APP开发环境配置-ionic、cordora</title>
    <link href="http://yoursite.com/2017/06/20/%E6%B7%B7%E5%90%88APP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE-ionic%E3%80%81cordora/"/>
    <id>http://yoursite.com/2017/06/20/混合APP开发环境配置-ionic、cordora/</id>
    <published>2017-06-19T16:00:00.000Z</published>
    <updated>2018-06-07T05:38:38.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java环境"><a href="#java环境" class="headerlink" title="java环境"></a>java环境</h2><p>Android ADT需要</p><p>1、JDK下载地址：</p><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p><p>2、配置 Java 的环境变量 JAVA_HOME 和 CLASSPATH</p><p>JAVA_HOME 是 java 的安装目录的 bin 目录</p><p>JAVA_HOME: D:\Program Files\Java\jdk1.8.0_91</p><p>CLASSPATH: .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</p><p>我自己的配置如下：</p><blockquote><p>JAVA_HOME C:\Program Files\Java\jdk1.8.0_112<br>Path: %JAVA_HOME%\jre\bin;%JAVA_HOME%\bin;<br>CLASSPAHT: .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</p></blockquote><p><a href="https://jingyan.baidu.com/article/f96699bb8b38e0894e3c1bef.html" target="_blank" rel="noopener">配置 Java 环境变量的方法</a></p><a id="more"></a><h2 id="C-环境"><a href="#C-环境" class="headerlink" title="C++ 环境"></a>C++ 环境</h2><p>需要 c++ 环境，window 10 已自带，其他系统只需安装 vs2016，把 c++ 环境勾选即可。</p><h2 id="Android-ADT环境"><a href="#Android-ADT环境" class="headerlink" title="Android ADT环境"></a>Android ADT环境</h2><p>打包android应用的时候需要</p><p>1、下载安装ADT所需要的手动安装包</p><p><a href="http://www.androiddevtools.cn/" target="_blank" rel="noopener">http://www.androiddevtools.cn/</a></p><p><img src="/images/Android-SDK-01.png" alt="Android-SDK-01"></p><p><img src="/images/Android-SDK-02.png" alt="Android-SDK-02"></p><p><img src="/images/Android-SDK-03.png" alt="Android-SDK-03"></p><p>需要的包的截图</p><p><img src="/images/Android-SDK-04.png" alt="Android-SDK-04"></p><h2 id="node-环境"><a href="#node-环境" class="headerlink" title="node 环境"></a>node 环境</h2><p>node 需要使用稳定版本，如果需要管理多个版本，使用 nvm，如果是 windows 系统，那么使用 nvm 的 windows 版本。</p><p>nvm 的下载安装地址(windows版)：<a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">https://github.com/coreybutler/nvm-windows</a></p><p>在 nvm v1.1.1 版本中，虽然没有完成通过命令行配置镜像的功能（可以使用这两条命令，但无效……不不知作者怎么想的），但可以通过设置文件来配置镜像源。</p><p>在 nvm 安装目录中寻找 setting.txt 文件，打开后设置如下两条：</p><blockquote><p>node_mirror: <a href="https://npm.taobao.org/mirrors/node/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/node/</a><br>npm_mirror: <a href="https://npm.taobao.org/mirrors/npm/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/npm/</a></p></blockquote><ul><li><code>nvm install node版本号</code> 安装具体版本的 node</li><li><code>nvm use 7.0.0</code> 切换到已安装的具体版本</li><li><code>nvm ls</code> 列出本地已安装的所有的 node 环境版本</li></ul><p>如果下载不成功，使用代理服务器下载安装，如: <code>shadowsocks</code></p><ul><li><code>nvm proxy 127.0.0.1:1008</code>，<code>127.0.0.1:1008</code>是代理地址，使用的是服务器下载</li><li><code>nvm install 7.0.0</code></li></ul><h2 id="Git环境"><a href="#Git环境" class="headerlink" title="Git环境"></a>Git环境</h2><p>ng-cordova 插件需要，源代码管理</p><p>git 的下载地址：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p><p>下载后直接安装，我这边没有配环境直接可用</p><h2 id="cordova-ionic"><a href="#cordova-ionic" class="headerlink" title="cordova ionic"></a>cordova ionic</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cordova ionic</span><br></pre></td></tr></table></figure><h2 id="3-条命令"><a href="#3-条命令" class="headerlink" title="3 条命令"></a>3 条命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ionic start myApp</span><br><span class="line">在 myApp 项目跟目录下执行下面命令</span><br><span class="line">ionic platform add android</span><br><span class="line">ionic build android</span><br><span class="line">ionic run android</span><br></pre></td></tr></table></figure><p>执行 <code>ionic platform add android</code> 过程中如果出错，报 error occurred during initialization of vm，安装的是 jdk-8u112-windows-i586_8.0.1120.15.exe 版本，windows 64报错,</p><p>配置系统环境变量 –&gt; 新建 –&gt; <code>_JAVA_OPTIONS</code>–&gt; <code>-Xmx512M</code> ， 结果是：</p><p><img src="/images/Android-SDK-06.png" alt="Android-SDK-06"></p><p>然后又换了 64 位的 jdk，官方网站下载 jdk-8u112-windows-x64.exe</p><p>之后因为我一个文件名字 build 写错了没出来，修改了之后就打包成功了。</p><p>注：为了避免不必要的麻烦：所有这一过程都在 c 盘执行的。</p><h2 id="使用IONIC制作APP"><a href="#使用IONIC制作APP" class="headerlink" title="使用IONIC制作APP"></a>使用IONIC制作APP</h2><p>最后，来一张总图：</p><p><img src="/images/Android-SDK-05.png" alt="Android-SDK-05"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;java环境&quot;&gt;&lt;a href=&quot;#java环境&quot; class=&quot;headerlink&quot; title=&quot;java环境&quot;&gt;&lt;/a&gt;java环境&lt;/h2&gt;&lt;p&gt;Android ADT需要&lt;/p&gt;
&lt;p&gt;1、JDK下载地址：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、配置 Java 的环境变量 JAVA_HOME 和 CLASSPATH&lt;/p&gt;
&lt;p&gt;JAVA_HOME 是 java 的安装目录的 bin 目录&lt;/p&gt;
&lt;p&gt;JAVA_HOME: D:\Program Files\Java\jdk1.8.0_91&lt;/p&gt;
&lt;p&gt;CLASSPATH: .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;&lt;/p&gt;
&lt;p&gt;我自己的配置如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JAVA_HOME C:\Program Files\Java\jdk1.8.0_112&lt;br&gt;Path: %JAVA_HOME%\jre\bin;%JAVA_HOME%\bin;&lt;br&gt;CLASSPAHT: .;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://jingyan.baidu.com/article/f96699bb8b38e0894e3c1bef.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;配置 Java 环境变量的方法&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hybrid APP开发系列" scheme="http://yoursite.com/categories/Hybrid-APP%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="cordova" scheme="http://yoursite.com/tags/cordova/"/>
    
      <category term="ionic" scheme="http://yoursite.com/tags/ionic/"/>
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Node-留言列表小项目</title>
    <link href="http://yoursite.com/2017/05/18/Node-%E7%95%99%E8%A8%80%E5%88%97%E8%A1%A8%E5%B0%8F%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2017/05/18/Node-留言列表小项目/</id>
    <published>2017-05-17T16:00:00.000Z</published>
    <updated>2018-06-07T02:28:49.406Z</updated>
    
    <content type="html"><![CDATA[<p>该项目是仿照某些网站的留言列表做的一些小功能，项目没有划分 M V C，使用的前台技术是 Bootstrap，后台使用的是 Node.js，模板引擎使用的是 EJS，数据库是 MySQL。</p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><ul><li>Bootstrap</li><li>jQuery<ul><li>使用 jQuery 的 ajax 做异步无刷新列表加载</li></ul></li><li>EJS</li><li>Node.js<ul><li>express<ul><li>body-parser express 的中间件(middleware)，可以用来解析 post 请求体数据</li></ul></li><li>mysql</li><li>moment</li></ul></li><li>js-cookie</li></ul><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install bootstrap jquery express art-template --save</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="package-json-包括项目后面流程安装的依赖包"><a href="#package-json-包括项目后面流程安装的依赖包" class="headerlink" title="package.json (包括项目后面流程安装的依赖包)"></a>package.json (包括项目后面流程安装的依赖包)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;feedback&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [],</span><br><span class="line">  &quot;author&quot;: &quot;lpz &lt;mail@lipengzhou.com&gt; (http://www.lipengzhou.com/)&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;art-template&quot;: &quot;^3.0.3&quot;,</span><br><span class="line">    &quot;body-parser&quot;: &quot;^1.15.2&quot;,</span><br><span class="line">    &quot;bootstrap&quot;: &quot;^3.3.7&quot;,</span><br><span class="line">    &quot;ejs&quot;: &quot;^2.5.2&quot;,</span><br><span class="line">    &quot;express&quot;: &quot;^4.14.0&quot;,</span><br><span class="line">    &quot;jquery&quot;: &quot;^3.1.1&quot;,</span><br><span class="line">    &quot;js-cookie&quot;: &quot;^2.1.3&quot;,</span><br><span class="line">    &quot;moment&quot;: &quot;^2.16.0&quot;,</span><br><span class="line">    &quot;mysql&quot;: &quot;^2.12.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="页面搭建：Bootstrap"><a href="#页面搭建：Bootstrap" class="headerlink" title="页面搭建：Bootstrap"></a>页面搭建：Bootstrap</h2><blockquote><p>最终完整页面</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>反馈留言本<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/node_modules/bootstrap/dist/css/bootstrap.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 页头 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-header"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>反馈系统<span class="tag">&lt;<span class="name">small</span>&gt;</span>留言本<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span>欢迎：<span class="tag">&lt;<span class="name">%=</span> <span class="attr">user.username</span> %&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 页头 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 留言列表区域 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item list-group-item-info"</span>&gt;</span>留言（<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"message_count"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>条）<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- /留言列表区域 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 留言表单区域 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-warning"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"panel-title"</span>&gt;</span>我要发表看法<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后台指定提交的接口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"form"</span> <span class="attr">action</span>=<span class="string">"/message/add"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">role</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>您的留言<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">required</span> <span class="attr">name</span>=<span class="string">"message"</span> <span class="attr">rows</span>=<span class="string">"5"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>您的大名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">required</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">placeholder</span>=<span class="string">"请输入您的大名"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>电子邮件<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">required</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"请输入您的电子邮件"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>发表<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- /留言表单区域 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/template"</span> <span class="attr">id</span>=<span class="string">"tpl"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    &#123;&#123;each messages <span class="keyword">as</span> message index&#125;&#125;</span></span><br><span class="line"><span class="javascript">    &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"list-group-item"</span>&gt;&#123;&#123;message.name&#125;&#125;：&#123;&#123;message.message&#125;&#125;&lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"pull-right"</span>&gt;&#123;&#123;message.date&#125;&#125;&lt;<span class="regexp">/span&gt;&lt;/</span>li&gt;</span></span><br><span class="line"><span class="undefined">    &#123;&#123;/each&#125;&#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/node_modules/art-template/dist/template.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/node_modules/jquery/dist/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    loadMessages();</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">loadMessages</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// ajax 已死， 未来 fetch 可能会成为标准</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.fetch(<span class="string">'/message'</span>);</span></span><br><span class="line"><span class="javascript">        .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> res.json();</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="javascript">        .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          $(<span class="string">'.list-group li:gt(0)'</span>).remove();</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 前台渲染页面</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">const</span> result = template(<span class="string">'tpl'</span>, data);</span></span><br><span class="line"><span class="javascript">          $(<span class="string">'#message_count'</span>).html(data.messages.length);</span></span><br><span class="line"><span class="javascript">          $(<span class="string">'.list-group'</span>).append(result);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#form'</span>).on(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 加上这句，表单不会默认提交了</span></span></span><br><span class="line"><span class="undefined">      e.preventDefault();</span></span><br><span class="line"><span class="javascript">      $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">          url: $(<span class="keyword">this</span>).attr(<span class="string">'action'</span>),</span></span><br><span class="line"><span class="javascript">          type: $(<span class="keyword">this</span>).attr(<span class="string">'method'</span>),</span></span><br><span class="line"><span class="javascript">          data: $(<span class="keyword">this</span>).serialize(),</span></span><br><span class="line"><span class="javascript">          dataType: <span class="string">'json'</span></span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="javascript">        .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 是否成功由后台告诉前台</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (data.code === <span class="number">1000</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 成功后清空留言输入框</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#form [name]'</span>).val(<span class="string">''</span>);</span></span><br><span class="line"><span class="undefined">            loadMessages();</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.alert(<span class="string">'留言成功'</span>);</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="javascript">       <span class="comment">// 和 e.preventDefault(); 作用相同</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// return false;</span></span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="数据库设计-feedback"><a href="#数据库设计-feedback" class="headerlink" title="数据库设计: feedback"></a>数据库设计: feedback</h2><table><thead><tr><th style="text-align:center">名</th><th style="text-align:center">类型</th><th style="text-align:center">长度</th><th style="text-align:center">小数点</th><th style="text-align:center">不是null</th><th style="text-align:center">主键</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">int</td><td style="text-align:center">空</td><td style="text-align:center">空</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">message</td><td style="text-align:center">text</td><td style="text-align:center">空</td><td style="text-align:center">空</td><td style="text-align:center">yes</td><td style="text-align:center">空</td></tr><tr><td style="text-align:center">name</td><td style="text-align:center">varchar</td><td style="text-align:center">50</td><td style="text-align:center">空</td><td style="text-align:center">yes</td><td style="text-align:center">空</td></tr><tr><td style="text-align:center">email</td><td style="text-align:center">varchar</td><td style="text-align:center">50</td><td style="text-align:center">空</td><td style="text-align:center">yes</td><td style="text-align:center">空</td></tr><tr><td style="text-align:center">data</td><td style="text-align:center">datatime</td><td style="text-align:center">空</td><td style="text-align:center">空</td><td style="text-align:center">yes</td><td style="text-align:center">空</td></tr></tbody></table><h2 id="页面入口-后台数据处理-app-js"><a href="#页面入口-后台数据处理-app-js" class="headerlink" title="页面入口/后台数据处理 app.js"></a>页面入口/后台数据处理 app.js</h2><p>安装依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install body-parser moment ejs --save</span><br></pre></td></tr></table></figure><blockquote><p>app.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">'./db'</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">'moment'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">// 公开静态资源</span></span><br><span class="line">app.use(<span class="string">'/node_modules'</span>, express.static(path.join(__dirname, <span class="string">'node_modules'</span>)));</span><br><span class="line">app.use(<span class="string">'/public'</span>, express.static(path.join(__dirname, <span class="string">'public'</span>)));</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 配置模板引擎</span></span><br><span class="line"><span class="comment">// 配置视图存放路径，不配置默认就是 views</span></span><br><span class="line">app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>));</span><br><span class="line"><span class="comment">// 默认后缀名是 ejs，这样配置就可以使用 html 后缀名</span></span><br><span class="line"><span class="comment">// xTemplate 模板引擎配置也是如此</span></span><br><span class="line">app.engine(<span class="string">'.html'</span>, <span class="built_in">require</span>(<span class="string">'ejs'</span>).__express);</span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'html'</span>);</span><br><span class="line"><span class="comment">// 配置解析普通表单 POST 请求体的中间件</span></span><br><span class="line"><span class="comment">// 任何请求进来，如果是 POST 请求，则该中间件会自动解析 POST 请求体</span></span><br><span class="line"><span class="comment">// 解析成一个对象，然后挂载给 req 请求对象一个属性：body，然后调用下一个中间件</span></span><br><span class="line"><span class="comment">// 也就是说在后续某一个被匹配到的处理函数中可以直接通过 req.body 来使用表单 POST 提交的数据</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line"><span class="comment">// 请求网站根路径</span></span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 渲染首页</span></span><br><span class="line">  res.render(<span class="string">'index'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">'/message'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 1. 查询数据库，获取数据库中的内容</span></span><br><span class="line">  <span class="comment">// 2. 可能会处理一下获取到的数据</span></span><br><span class="line">  <span class="comment">// 3. 发送响应</span></span><br><span class="line">  db.query(<span class="string">'SELECT * FROM `feedback` ORDER BY `date` DESC'</span>, (err, rows) =&gt; &#123; <span class="comment">// 按日期排序</span></span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> next(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理时间</span></span><br><span class="line">    rows.forEach(<span class="function"><span class="params">r</span> =&gt;</span> r.date = moment(r.date).format(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>));</span><br><span class="line">    res.json(&#123;</span><br><span class="line">      messages: rows</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">'/signup'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.render(<span class="string">'signup'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 注册请求处理（异步请求表单不会刷新）</span></span><br><span class="line">app.post(<span class="string">'/signup'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 1. 接收请求数据：做数据的合法性校验</span></span><br><span class="line">  <span class="comment">// 2. 处理请求：先校验用户名是否被占用、</span></span><br><span class="line">  <span class="comment">//    如果已存在，告诉用户，用户名被占用了；如果不存在，执行注册</span></span><br><span class="line">  <span class="comment">//    注册成功：告诉用户：操作成功；如果失败，也告诉用户，操作失败</span></span><br><span class="line">  <span class="comment">// 3. 发送响应</span></span><br><span class="line">  <span class="keyword">const</span> body = req.body;</span><br><span class="line">  <span class="comment">// 前端传递给后台的数据，一定要再次做合法性校验</span></span><br><span class="line">  db.query(<span class="string">'SELECT * FROM `users` WHERE `username`=?'</span>, [body.username], (err, rows) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> next(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rows[<span class="number">0</span>]) &#123;</span><br><span class="line">      <span class="comment">// 说明被占用了</span></span><br><span class="line">      <span class="keyword">return</span> res.json(&#123;</span><br><span class="line">        <span class="comment">// 异步交互返回结果状态码，业务状态码</span></span><br><span class="line">        code: <span class="number">2001</span>,</span><br><span class="line">        message: <span class="string">'username already exists'</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行到这里，可以插入数据了</span></span><br><span class="line">    db.query(<span class="string">'INSERT INTO `users`(`username`, `password`, `email`, `create_time`, `last_signin_time`) VALUES(?, ?, ?, ?, ?)'</span>, [</span><br><span class="line">      body.username,</span><br><span class="line">      body.password,</span><br><span class="line">      body.email,</span><br><span class="line">      moment().format(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>),</span><br><span class="line">      moment().format(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>)</span><br><span class="line">    ], (err, stat) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> next(err);</span><br><span class="line">      &#125;</span><br><span class="line">      res.json(&#123;</span><br><span class="line">        code: <span class="number">2000</span>,</span><br><span class="line">        message: <span class="string">'success'</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">'/signin'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.render(<span class="string">'signin'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// post 处理留言页面异步表单提交，可以不使用 form，但是最好加上；后台会指定需要哪些数据</span></span><br><span class="line"><span class="comment">// body &#123; message: '', name: '', email: '' &#125;</span></span><br><span class="line">app.post(<span class="string">'/message/add'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 1. 接收客户端提交的数据</span></span><br><span class="line">  <span class="comment">// 2. 处理客户端提交的数据：2.1、对数据做合法性校验；2.2、 校验通过之后，插入数据库</span></span><br><span class="line">  <span class="comment">// 3. 给当前请求客户端发送响应</span></span><br><span class="line">  <span class="keyword">const</span> body = req.body;</span><br><span class="line">  db.query(<span class="string">'INSERT INTO `feedback`(`message`, `name`, `email`, `date`) VALUES(?, ?, ?, ?)'</span>, [</span><br><span class="line">    body.message,</span><br><span class="line">    body.name,</span><br><span class="line">    body.email,</span><br><span class="line">    moment().format(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>)</span><br><span class="line">  ], (err, stat) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> next(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 重定向对 ajax 请求没有用，重定向只对客户端同步请求有效</span></span><br><span class="line">    <span class="comment">// 例如输入了一个地址敲回车，点了一个 a 连接，提交了一个表单都是同步请求</span></span><br><span class="line">    res.json(&#123;</span><br><span class="line">      code: <span class="number">1000</span>,</span><br><span class="line">      message: <span class="string">'success'</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 千万不要少些最后一个 next</span></span><br><span class="line"><span class="comment">// 如果少了最后的参数 next，则现在这个中间件就是处理请求的中间件 req res next</span></span><br><span class="line"><span class="comment">// 所以错误处理中间件一定要使用四个参数：err req res next</span></span><br><span class="line"><span class="comment">// 只要在之前的任何中间件中调用 next 的时候，传递了参数，就一定会执行下面这个错误处理中间件</span></span><br><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">`500 ErrorMessage:<span class="subst">$&#123;err.message&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 监听端口，启动服务</span></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'server is running at port 3000.'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="渲染页面-EJS"><a href="#渲染页面-EJS" class="headerlink" title="渲染页面 EJS"></a>渲染页面 EJS</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;each messages <span class="keyword">as</span> message index&#125;&#125;</span><br><span class="line">&lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"list-group-item"</span>&gt;&#123;&#123;message.name&#125;&#125;：&#123;&#123;message.message&#125;&#125;&lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"pull-right"</span>&gt;&#123;&#123;message.date&#125;&#125;&lt;<span class="regexp">/span&gt;&lt;/</span>li&gt;</span><br><span class="line">&#123;&#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="前台-ajax-请求"><a href="#前台-ajax-请求" class="headerlink" title="前台 ajax 请求"></a>前台 ajax 请求</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#form'</span>).on(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 加上这句，表单不会默认提交了</span></span><br><span class="line">  e.preventDefault();</span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">      url: $(<span class="keyword">this</span>).attr(<span class="string">'action'</span>),</span><br><span class="line">      type: $(<span class="keyword">this</span>).attr(<span class="string">'method'</span>),</span><br><span class="line">      data: $(<span class="keyword">this</span>).serialize(),</span><br><span class="line">      dataType: <span class="string">'json'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 是否成功由后台告诉前台</span></span><br><span class="line">      <span class="keyword">if</span> (data.code === <span class="number">1000</span>) &#123;</span><br><span class="line">        $(<span class="string">'#form [name]'</span>).val(<span class="string">''</span>);</span><br><span class="line">        loadMessages();</span><br><span class="line">        <span class="built_in">window</span>.alert(<span class="string">'留言成功'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">   <span class="comment">// 和 e.preventDefault(); 作用相同</span></span><br><span class="line">  <span class="comment">// return false;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="后台-post-请求处理"><a href="#后台-post-请求处理" class="headerlink" title="后台 post 请求处理"></a>后台 post 请求处理</h2><p>? express 的 body-parser 中间件</p><p>配置中间键：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.use(bodyParser.json());</span><br></pre></td></tr></table></figure><p>日期格式化包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install moment --save</span><br></pre></td></tr></table></figure><p>格式化日期方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">moment().format(&apos;YYYY-MM-DD HH:mm:ss&apos;)</span><br></pre></td></tr></table></figure><p>后台处理 post 请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/message/add'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> body = req.body;</span><br><span class="line">    db.query(<span class="string">'INSERT INTO `feedback`(`message`, `name`, `email`, `date`) VALUES(?, ?, ?, ?)'</span>, [</span><br><span class="line">      body.message,</span><br><span class="line">      body.name,</span><br><span class="line">      body.email,</span><br><span class="line">      moment().format(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>)</span><br><span class="line">    ], (err, stat) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> next(err);</span><br><span class="line">      &#125;</span><br><span class="line">      res.json(&#123;</span><br><span class="line">        code: <span class="number">1000</span>,</span><br><span class="line">        message: <span class="string">'success'</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>响应给前台后，前台处理响应成功逻辑：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是否成功由后台告诉前台</span></span><br><span class="line"><span class="keyword">if</span> (data.code === <span class="number">1000</span>) &#123;</span><br><span class="line">  $(<span class="string">'#form [name]'</span>).val(<span class="string">''</span>);</span><br><span class="line">  loadMessages();</span><br><span class="line">  <span class="built_in">window</span>.alert(<span class="string">'留言成功'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注册登录模块"><a href="#注册登录模块" class="headerlink" title="注册登录模块"></a>注册登录模块</h2><h3 id="登录页面"><a href="#登录页面" class="headerlink" title="登录页面"></a>登录页面</h3><h3 id="注册页面"><a href="#注册页面" class="headerlink" title="注册页面"></a>注册页面</h3><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><h4 id="添加表-users"><a href="#添加表-users" class="headerlink" title="添加表 users"></a>添加表 users</h4><table><thead><tr><th style="text-align:center">索引</th><th style="text-align:center">类型</th><th style="text-align:center">长度</th><th style="text-align:center">小数点</th><th style="text-align:center">不是null</th><th style="text-align:center">主键</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">int</td><td style="text-align:center">50</td><td style="text-align:center">空</td><td style="text-align:center">yes</td><td style="text-align:center">yes</td></tr><tr><td style="text-align:center">username</td><td style="text-align:center">varchar</td><td style="text-align:center">50</td><td style="text-align:center">空</td><td style="text-align:center">yes</td><td style="text-align:center">空</td></tr><tr><td style="text-align:center">password</td><td style="text-align:center">varchar</td><td style="text-align:center">50</td><td style="text-align:center">空</td><td style="text-align:center">yes</td><td style="text-align:center">空</td></tr><tr><td style="text-align:center">email</td><td style="text-align:center">varchar</td><td style="text-align:center">50</td><td style="text-align:center">空</td><td style="text-align:center">yes</td><td style="text-align:center">空</td></tr><tr><td style="text-align:center">create_time</td><td style="text-align:center">datetime</td><td style="text-align:center">空</td><td style="text-align:center">空</td><td style="text-align:center">yes</td><td style="text-align:center">空</td></tr><tr><td style="text-align:center">last_signin_time</td><td style="text-align:center">datetime</td><td style="text-align:center">空</td><td style="text-align:center">空</td><td style="text-align:center">yes</td><td style="text-align:center">空</td></tr></tbody></table><h4 id="处理注册页面后台逻辑"><a href="#处理注册页面后台逻辑" class="headerlink" title="处理注册页面后台逻辑"></a>处理注册页面后台逻辑</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册请求处理（异步请求表单不会刷新）</span></span><br><span class="line">app.post(<span class="string">'/signup'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 1. 接收请求数据：做数据的合法性校验</span></span><br><span class="line">  <span class="comment">// 2. 处理请求：先校验用户名是否被占用、</span></span><br><span class="line">  <span class="comment">//    如果已存在，告诉用户，用户名被占用了；如果不存在，执行注册</span></span><br><span class="line">  <span class="comment">//    注册成功：告诉用户：操作成功；如果失败，也告诉用户，操作失败</span></span><br><span class="line">  <span class="comment">// 3. 发送响应</span></span><br><span class="line">  <span class="keyword">const</span> body = req.body;</span><br><span class="line">  <span class="comment">// 前端传递给后台的数据，一定要再次做合法性校验</span></span><br><span class="line">  db.query(<span class="string">'SELECT * FROM `users` WHERE `username`=?'</span>, [body.username], (err, rows) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> next(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rows[<span class="number">0</span>]) &#123;</span><br><span class="line">      <span class="comment">// 说明被占用了</span></span><br><span class="line">      <span class="keyword">return</span> res.json(&#123;</span><br><span class="line">        <span class="comment">// 异步交互返回结果状态码，业务状态码</span></span><br><span class="line">        code: <span class="number">2001</span>,</span><br><span class="line">        message: <span class="string">'username already exists'</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行到这里，可以插入数据了</span></span><br><span class="line">    db.query(<span class="string">'INSERT INTO `users`(`username`, `password`, `email`, `create_time`, `last_signin_time`) VALUES(?, ?, ?, ?, ?)'</span>, [</span><br><span class="line">      body.username,</span><br><span class="line">      body.password,</span><br><span class="line">      body.email,</span><br><span class="line">      moment().format(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>),</span><br><span class="line">      moment().format(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>)</span><br><span class="line">    ], (err, stat) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> next(err);</span><br><span class="line">      &#125;</span><br><span class="line">      res.json(&#123;</span><br><span class="line">        code: <span class="number">2000</span>,</span><br><span class="line">        message: <span class="string">'success'</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="处理注册页面前台逻辑"><a href="#处理注册页面前台逻辑" class="headerlink" title="处理注册页面前台逻辑"></a>处理注册页面前台逻辑</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'form'</span>).on(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">      url: $(<span class="keyword">this</span>).attr(<span class="string">'action'</span>),</span><br><span class="line">      type: $(<span class="keyword">this</span>).attr(<span class="string">'method'</span>),</span><br><span class="line">      data: $(<span class="keyword">this</span>).serialize(),</span><br><span class="line">      dataType: <span class="string">'json'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (data.code === <span class="number">2000</span>) &#123;</span><br><span class="line">        <span class="built_in">window</span>.alert(<span class="string">'恭喜：注册成功'</span>);</span><br><span class="line">        <span class="comment">// 可以通过控制 location 的 href ，让浏览器跳转</span></span><br><span class="line">        <span class="built_in">window</span>.location.href = <span class="string">'/'</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.code === <span class="number">2001</span>) &#123;</span><br><span class="line">        <span class="built_in">window</span>.alert(<span class="string">'用户名已存在，请更换重试'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="记住用户名（通过前台来写）"><a href="#记住用户名（通过前台来写）" class="headerlink" title="记住用户名（通过前台来写）"></a>记住用户名（通过前台来写）</h4><blockquote><p>方法一：</p></blockquote><p>安装插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install js-cookie --save</span><br></pre></td></tr></table></figure><p>设置 cookie：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var username = Cookies.get(&apos;username&apos;);</span><br><span class="line">if (username) &#123;</span><br><span class="line">  document.querySelector(&apos;#username&apos;).value = username;</span><br><span class="line">&#125;</span><br><span class="line">$(&apos;form&apos;).on(&apos;submit&apos;, function (e) &#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  Cookies.set(&apos;username&apos;, $(&apos;#username&apos;).val());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="在-express-中使用-cookie-parser"><a href="#在-express-中使用-cookie-parser" class="headerlink" title="在 express 中使用 cookie-parser"></a>在 express 中使用 cookie-parser</h5><p>安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install cookie-parser --save</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.use(cookieParser());</span><br></pre></td></tr></table></figure><blockquote><p>方法二：session 保持状态</p></blockquote><p>session 和 cookie 结合使用。</p><h5 id="在-express-中使用-session"><a href="#在-express-中使用-session" class="headerlink" title="在 express 中使用 session"></a>在 express 中使用 session</h5><p>安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install express-session --save</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.use(session(&#123;</span><br><span class="line">  <span class="comment">// 表示生成钥匙的时候根据这个字符串生成</span></span><br><span class="line">  secret: <span class="string">'mhq'</span>,</span><br><span class="line">  resave: <span class="literal">false</span>,</span><br><span class="line">  saveUnitialized: <span class="literal">true</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h3 id="处理用户注册和登录的状态"><a href="#处理用户注册和登录的状态" class="headerlink" title="处理用户注册和登录的状态"></a>处理用户注册和登录的状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install express-session --save</span><br></pre></td></tr></table></figure><h4 id="最终的-app-js"><a href="#最终的-app-js" class="headerlink" title="最终的 app.js"></a>最终的 app.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入包</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">'./db'</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">'moment'</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">// 暴露静态资源</span></span><br><span class="line">app.use(<span class="string">'/node_modules'</span>, express.static(path.join(__dirname, <span class="string">'node_modules'</span>)));</span><br><span class="line">app.use(<span class="string">'/public'</span>, express.static(path.join(__dirname, <span class="string">'public'</span>)));</span><br><span class="line"><span class="comment">// 配置模板引擎</span></span><br><span class="line">app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>));</span><br><span class="line">app.engine(<span class="string">'.html'</span>, <span class="built_in">require</span>(<span class="string">'ejs'</span>).__express);</span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'html'</span>);</span><br><span class="line"><span class="comment">// 配置 body-parser 中间件</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line"><span class="comment">// 配置 Session 中间件，在进入路由之前配置</span></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">  secret: <span class="string">'mhq'</span>,</span><br><span class="line">  resave: <span class="literal">false</span>,</span><br><span class="line">  saveUninitialized: <span class="literal">true</span></span><br><span class="line">&#125;));</span><br><span class="line"><span class="comment">// 没有登录时跳到登录页面</span></span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!req.session.user) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.redirect(<span class="string">'/signin'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  res.render(<span class="string">'index'</span>, &#123;</span><br><span class="line">    <span class="comment">// session 中保存了 user</span></span><br><span class="line">    user: req.session.user</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 处理消息页面的 form 表单数据</span></span><br><span class="line">app.get(<span class="string">'/message'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  db.query(<span class="string">'SELECT * FROM `feedback` ORDER BY `date` DESC'</span>, (err, rows) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> next(err);</span><br><span class="line">    &#125;</span><br><span class="line">    rows.forEach(<span class="function"><span class="params">r</span> =&gt;</span> r.date = moment(r.date).format(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>))</span><br><span class="line">    res.json(&#123;</span><br><span class="line">      messages: rows</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 登录成功后跳到首页</span></span><br><span class="line">app.get(<span class="string">'/signup'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.session.user) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.redirect(<span class="string">'/'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  res.render(<span class="string">'signup'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 处理注册 post 请求</span></span><br><span class="line">app.post(<span class="string">'/signup'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> body = req.body;</span><br><span class="line">  db.query(<span class="string">'SELECT * FROM `users` WHERE `username`=?'</span>, [body.username], (err, rows) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> next(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rows[<span class="number">0</span>]) &#123;</span><br><span class="line">      <span class="comment">// 说明被占用了</span></span><br><span class="line">      <span class="keyword">return</span> res.json(&#123;</span><br><span class="line">        code: <span class="number">2001</span>,</span><br><span class="line">        message: <span class="string">'username already exists'</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行到这里，可以插入数据了</span></span><br><span class="line">    db.query(<span class="string">'INSERT INTO `users`(`username`, `password`, `email`, `create_time`, `last_signin_time`) VALUES(?, ?, ?, ?, ?)'</span>, [</span><br><span class="line">      body.username,</span><br><span class="line">      body.password,</span><br><span class="line">      body.email,</span><br><span class="line">      moment().format(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>),</span><br><span class="line">      moment().format(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>)</span><br><span class="line">    ], (err, stat) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> next(err)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 注册成功，保存用户登陆状态</span></span><br><span class="line">      req.session.user = &#123;</span><br><span class="line">        username: body.username</span><br><span class="line">      &#125;;</span><br><span class="line">      res.json(&#123;</span><br><span class="line">        code: <span class="number">2000</span>,</span><br><span class="line">        message: <span class="string">'success'</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">'/signin'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.session.user) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.redirect(<span class="string">'/'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  res.render(<span class="string">'signin'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 处理登录页面 post 请求</span></span><br><span class="line">app.post(<span class="string">'/signin'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> username = req.body.username;</span><br><span class="line">  <span class="keyword">const</span> password = req.body.password;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 验证用户名是否存在，密码是否正确</span></span><br><span class="line">  db.query(<span class="string">'SELECT * FROM `users` WHERE `username`=?'</span>, [username], (err, rows) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> user = rows[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.json(&#123;</span><br><span class="line">        code: <span class="number">3001</span>,</span><br><span class="line">        message: <span class="string">'username not exists'</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (password !== user.password) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.json(&#123;</span><br><span class="line">        code: <span class="number">3002</span>,</span><br><span class="line">        message: <span class="string">'password error'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 登陆成功，保存状态</span></span><br><span class="line">    req.session.user = &#123;</span><br><span class="line">      username: username</span><br><span class="line">    &#125;;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">      code: <span class="number">3000</span>,</span><br><span class="line">      message: <span class="string">'login success'</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 处理留言页面的 post 请求的数据</span></span><br><span class="line">app.post(<span class="string">'/message/add'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> body = req.body;</span><br><span class="line">  db.query(<span class="string">'INSERT INTO `feedback`(`message`, `name`, `email`, `date`) VALUES(?, ?, ?, ?)'</span>, [</span><br><span class="line">    body.message,</span><br><span class="line">    body.name,</span><br><span class="line">    body.email,</span><br><span class="line">    moment().format(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>)</span><br><span class="line">  ], (err, stat) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> next(err);</span><br><span class="line">    &#125;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">      code: <span class="number">1000</span>,</span><br><span class="line">      message: <span class="string">'success'</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">`500 ErrorMessage:<span class="subst">$&#123;err.message&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'server is running at port 3000.'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="处理登录页面"><a href="#处理登录页面" class="headerlink" title="处理登录页面"></a>处理登录页面</h4><blockquote><p>最终的 singin.html</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/signin"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">class</span>=<span class="string">"form-signin"</span> <span class="attr">role</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"form-signin-heading"</span>&gt;</span>用户登陆<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span> <span class="attr">required</span> <span class="attr">autofocus</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"remember-me"</span>&gt;</span> Remember me</span><br><span class="line">          <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-primary btn-block"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>登陆<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/node_modules/jquery/dist/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/node_modules/js-cookie/src/js.cookie.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="javascript">      $(<span class="string">'form'</span>).on(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        e.preventDefault();</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">          url: $(<span class="keyword">this</span>).attr(<span class="string">'action'</span>),</span></span><br><span class="line"><span class="javascript">          type: $(<span class="keyword">this</span>).attr(<span class="string">'method'</span>),</span></span><br><span class="line"><span class="javascript">          data: $(<span class="keyword">this</span>).serialize(),</span></span><br><span class="line"><span class="javascript">          dataType: <span class="string">'json'</span></span></span><br><span class="line"><span class="javascript">        &#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">switch</span> (data.code) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="number">3000</span>:</span></span><br><span class="line"><span class="javascript">              <span class="built_in">window</span>.location.href = <span class="string">'/'</span></span></span><br><span class="line"><span class="javascript">              <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="number">3001</span>:</span></span><br><span class="line"><span class="javascript">              <span class="built_in">window</span>.alert(<span class="string">'该用户不存在'</span>);</span></span><br><span class="line"><span class="javascript">              <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">case</span> <span class="number">3002</span>:</span></span><br><span class="line"><span class="javascript">              <span class="built_in">window</span>.alert(<span class="string">'密码错误了'</span>);</span></span><br><span class="line"><span class="javascript">              <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">              <span class="built_in">window</span>.alert(<span class="string">'未知错误'</span>);</span></span><br><span class="line"><span class="javascript">              <span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="处理注册页面"><a href="#处理注册页面" class="headerlink" title="处理注册页面"></a>处理注册页面</h4><blockquote><p>最终的 singup.html</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户登陆<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/node_modules/bootstrap/dist/css/bootstrap.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/public/css/signin.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/signup"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">class</span>=<span class="string">"form-signin"</span> <span class="attr">role</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"form-signin-heading"</span>&gt;</span>用户注册<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span> <span class="attr">required</span> <span class="attr">autofocus</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"请输入邮箱"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"confirm"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"confirm"</span> <span class="attr">placeholder</span>=<span class="string">"请确认密码"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-primary btn-block"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/node_modules/jquery/dist/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 处理前台逻辑</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'form'</span>).on(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">      e.preventDefault();</span></span><br><span class="line"><span class="javascript">      $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">          url: $(<span class="keyword">this</span>).attr(<span class="string">'action'</span>),</span></span><br><span class="line"><span class="javascript">          type: $(<span class="keyword">this</span>).attr(<span class="string">'method'</span>),</span></span><br><span class="line"><span class="javascript">          data: $(<span class="keyword">this</span>).serialize(),</span></span><br><span class="line"><span class="javascript">          dataType: <span class="string">'json'</span></span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="javascript">        .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (data.code === <span class="number">2000</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.alert(<span class="string">'恭喜：注册成功'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 可以通过控制 location 的 href ，让浏览器跳转</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.location.href = <span class="string">'/'</span>;</span></span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.code === <span class="number">2001</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.alert(<span class="string">'用户名已存在，请更换重试'</span>);</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h4><blockquote><p>连接数据库关键代码：db.js</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"><span class="comment">// 使用连接，提高操作数据库效率</span></span><br><span class="line"><span class="comment">// 创建一个连接池，池子存放的连接数量是 100 个</span></span><br><span class="line"><span class="keyword">const</span> pool = mysql.createPool(&#123;</span><br><span class="line">  connectionLimit: <span class="number">100</span>,</span><br><span class="line">  host: <span class="string">'localhost'</span>,</span><br><span class="line">  user: <span class="string">'root'</span>,</span><br><span class="line">  password: <span class="string">'*********'</span>,</span><br><span class="line">  database: <span class="string">'feedback'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// rest 参数</span></span><br><span class="line"><span class="comment">// 作为函数参数的最后一个参数出现，以 ... 开头，后面跟一个名字</span></span><br><span class="line"><span class="comment">// rest 参数就代替了 arguments</span></span><br><span class="line">exports.query = <span class="function"><span class="keyword">function</span> (<span class="params">sql, ...values</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> callback;</span><br><span class="line">  <span class="keyword">let</span> params = [];</span><br><span class="line">  <span class="keyword">if</span> (values.length === <span class="number">3</span>) &#123;</span><br><span class="line">    params = values[<span class="number">1</span>];</span><br><span class="line">    callback = values[<span class="number">2</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (values.length === <span class="number">2</span>) &#123;</span><br><span class="line">    callback = values[<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  pool.getConnection(<span class="function">(<span class="params">err, connection</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果传递了两个参数，则第二个参数就是 callback，也就是说这种情况下，params 就是 callback</span></span><br><span class="line">    <span class="comment">// 后面的 参数就忽略不计了</span></span><br><span class="line">    <span class="comment">// 如果传递了三个参数，那就是一一对应</span></span><br><span class="line">    connection.query(sql, params, (err, result) =&gt; &#123;</span><br><span class="line">      connection.release();</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(err);</span><br><span class="line">      &#125;</span><br><span class="line">      callback(<span class="literal">null</span>, result);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="css"><a href="#css" class="headerlink" title="css"></a>css</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">padding-top</span>: <span class="number">40px</span>; <span class="attribute">padding-bottom</span>: <span class="number">40px</span>; <span class="attribute">background-color</span>: <span class="number">#eee</span>; &#125;</span><br><span class="line"><span class="selector-class">.form-signin</span> &#123;<span class="attribute">max-width</span>: <span class="number">330px</span>; <span class="attribute">padding</span>: <span class="number">15px</span>; <span class="attribute">margin</span>: <span class="number">0</span> auto;&#125;</span><br><span class="line"><span class="selector-class">.form-signin</span> <span class="selector-class">.form-signin-heading</span>,<span class="selector-class">.form-signin</span> <span class="selector-class">.checkbox</span> &#123;<span class="attribute">margin-bottom</span>: <span class="number">10px</span>;&#125;</span><br><span class="line"><span class="selector-class">.form-signin</span> <span class="selector-class">.checkbox</span> &#123;<span class="attribute">font-weight</span>: normal;&#125;</span><br><span class="line"><span class="selector-class">.form-signin</span> <span class="selector-class">.form-control</span> &#123; <span class="attribute">position</span>: relative; <span class="attribute">height</span>: auto; <span class="attribute">box-sizing</span>: border-box; <span class="attribute">padding</span>: <span class="number">10px</span>; <span class="attribute">font-size</span>: <span class="number">16px</span>; &#125;</span><br><span class="line"><span class="selector-class">.form-signin</span> <span class="selector-class">.form-control</span><span class="selector-pseudo">:focus</span> &#123;<span class="attribute">z-index</span>: <span class="number">2</span>;&#125;</span><br><span class="line"><span class="selector-class">.form-signin</span> <span class="selector-tag">input</span><span class="selector-attr">[type="email"]</span> &#123;<span class="attribute">margin-bottom</span>: -<span class="number">1px</span>; <span class="attribute">border-bottom-right-radius</span>: <span class="number">0</span>; <span class="attribute">border-bottom-left-radius</span>: <span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-class">.form-signin</span> <span class="selector-tag">input</span><span class="selector-attr">[type="password"]</span> &#123; <span class="attribute">margin-bottom</span>: <span class="number">10px</span>; <span class="attribute">border-top-left-radius</span>: <span class="number">0</span>; <span class="attribute">border-top-right-radius</span>: <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;该项目是仿照某些网站的留言列表做的一些小功能，项目没有划分 M V C，使用的前台技术是 Bootstrap，后台使用的是 Node.js，模板引擎使用的是 EJS，数据库是 MySQL。&lt;/p&gt;
&lt;h2 id=&quot;依赖&quot;&gt;&lt;a href=&quot;#依赖&quot; class=&quot;headerlink&quot; title=&quot;依赖&quot;&gt;&lt;/a&gt;依赖&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Bootstrap&lt;/li&gt;
&lt;li&gt;jQuery&lt;ul&gt;
&lt;li&gt;使用 jQuery 的 ajax 做异步无刷新列表加载&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;EJS&lt;/li&gt;
&lt;li&gt;Node.js&lt;ul&gt;
&lt;li&gt;express&lt;ul&gt;
&lt;li&gt;body-parser express 的中间件(middleware)，可以用来解析 post 请求体数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;mysql&lt;/li&gt;
&lt;li&gt;moment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;js-cookie&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;安装依赖&quot;&gt;&lt;a href=&quot;#安装依赖&quot; class=&quot;headerlink&quot; title=&quot;安装依赖&quot;&gt;&lt;/a&gt;安装依赖&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install bootstrap jquery express art-template --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="EJS" scheme="http://yoursite.com/tags/EJS/"/>
    
      <category term="Express" scheme="http://yoursite.com/tags/Express/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Express中使用模板引擎</title>
    <link href="http://yoursite.com/2017/04/28/Express%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    <id>http://yoursite.com/2017/04/28/Express中使用模板引擎/</id>
    <published>2017-04-27T16:00:00.000Z</published>
    <updated>2018-06-07T01:40:41.750Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在-Express-中使用-ejs-模板引擎"><a href="#在-Express-中使用-ejs-模板引擎" class="headerlink" title="在 Express 中使用 ejs 模板引擎"></a>在 Express 中使用 ejs 模板引擎</h2><p>安装：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save ejs</span><br></pre></td></tr></table></figure><p>配置 Express 使用 ejs 模板</p><ul><li><code>app.set(&#39;views&#39;, config.viewPath);</code><ul><li>配置模板文件存放的路径</li></ul></li><li><code>app.set(&#39;view engine&#39;, &#39;ejs&#39;);</code><ul><li>配置调用 res.render 的时候使用的模板引擎</li><li>找到 <code>view</code> 目录下的 <code>.ejs</code> 后缀的文件</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.set(<span class="string">'views'</span>, <span class="string">'视图模板文件存放路径'</span>)</span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'安装的模板引擎的名称，例如：ejs'</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><p>如果使用上面的配置，则视图的后缀名必须为 <code>.ejs</code>，如果想要修改视图的后缀名，可以使用下面的配置形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.engine(<span class="string">'.html'</span>, <span class="built_in">require</span>(<span class="string">'ejs'</span>).__express)</span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'html'</span>)</span><br></pre></td></tr></table></figure><p>使用：</p><p>只要执行了上面两句代码：就可以直接在后面的请求处理函数中使用 <code>res.render(视图名称，要注入的数据对象)</code>，然后express会自动帮你去读取文件然后注入数据，解析替换，最后得到一个完整的 html 页面，然后发送给客户端。</p><p>如 <code>views/index.html</code> 文件代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello <span class="tag">&lt;<span class="name">%=</span> <span class="attr">name</span> %&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>app.js</code> 文件代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.render(<span class="string">'index'</span>, &#123;</span><br><span class="line">    name: <span class="string">'World'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>浏览器中看到的最终渲染结果如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="在-Express-中使用-xTemplate-模板引擎"><a href="#在-Express-中使用-xTemplate-模板引擎" class="headerlink" title="在 Express 中使用 xTemplate 模板引擎"></a>在 Express 中使用 xTemplate 模板引擎</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install xtpl xtemplate --save</span><br></pre></td></tr></table></figure><h3 id="配置模板引擎"><a href="#配置模板引擎" class="headerlink" title="配置模板引擎"></a>配置模板引擎</h3><p>1、渲染的页面必须是 .xtpl 后缀的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入路径配置文件</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./config'</span>);</span><br><span class="line"><span class="comment">// 指定模板放在什么地方了</span></span><br><span class="line">app.set(<span class="string">'views'</span>, config.viewPath);</span><br><span class="line"><span class="comment">// 指定使用哪个模板引擎</span></span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'xtpl'</span>);</span><br></pre></td></tr></table></figure><p>2、渲染页面任然是 .hmtl 后缀的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./config'</span>);</span><br><span class="line">app.set(<span class="string">'views'</span>, config.viewPath);</span><br><span class="line">app.engine(<span class="string">'.html'</span>, <span class="built_in">require</span>(<span class="string">'xtpl'</span>).__express);</span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'html'</span>);</span><br></pre></td></tr></table></figure><h3 id="Node-走通页面流程"><a href="#Node-走通页面流程" class="headerlink" title="Node 走通页面流程"></a>Node 走通页面流程</h3><p>1、安装包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save express</span><br><span class="line">$ npm install xtpl xtemplate --save</span><br></pre></td></tr></table></figure><p>2、views 文件下添加要渲染的 layout/base.html 页面视图文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>后台管理系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 侧边栏 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aside"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 主体 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 头部 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 个人资料 --&gt;</span></span><br><span class="line">      &#123;&#123;&#123;block('content')&#125;&#125;&#125;  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、中间需要替换的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;extend(<span class="string">'../layout/base'</span>)&#125;&#125;</span><br><span class="line">&#123;&#123;#block('content')&#125;&#125;</span><br><span class="line">&lt;!-- 个人资料 --&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"body teacher-profile"</span>&gt;</span><br><span class="line">  &lt;!-- ... --&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&#123;&#123;/</span>block&#125;&#125;</span><br></pre></td></tr></table></figure><p>4、入口程序：app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  引入包</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="comment">// 加载子路由</span></span><br><span class="line"><span class="keyword">const</span> index = <span class="built_in">require</span>(<span class="string">'./controllers/index'</span>);</span><br><span class="line"><span class="comment">// 配置模板引擎</span></span><br><span class="line">app.set(<span class="string">'views'</span>, config.viewPath);</span><br><span class="line">app.engine(<span class="string">'.html'</span>, <span class="built_in">require</span>(<span class="string">'xtpl'</span>).__express);</span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'html'</span>);</span><br><span class="line"><span class="comment">// 暴漏静态资源</span></span><br><span class="line">app.use(<span class="string">'/'</span>,express.static(<span class="string">'public'</span>));</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.listen(<span class="number">5000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Server is running at port <span class="subst">$&#123;config.port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>5、设置子路由，contorllers/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首页当做一个子路由</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="comment">// express 有个方法叫 Router() 方法，创建子路由</span></span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br><span class="line"><span class="comment">// 当成一个模块加载，对外暴漏接口，子路由暴漏出去了</span></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br><span class="line"><span class="comment">// 设置子路由</span></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">'dashboard/index'</span>, &#123;&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;在-Express-中使用-ejs-模板引擎&quot;&gt;&lt;a href=&quot;#在-Express-中使用-ejs-模板引擎&quot; class=&quot;headerlink&quot; title=&quot;在 Express 中使用 ejs 模板引擎&quot;&gt;&lt;/a&gt;在 Express 中使用 ejs 模板引擎&lt;/h2&gt;&lt;p&gt;安装：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install --save ejs&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;配置 Express 使用 ejs 模板&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;app.set(&amp;#39;views&amp;#39;, config.viewPath);&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;配置模板文件存放的路径&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;app.set(&amp;#39;view engine&amp;#39;, &amp;#39;ejs&amp;#39;);&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;配置调用 res.render 的时候使用的模板引擎&lt;/li&gt;
&lt;li&gt;找到 &lt;code&gt;view&lt;/code&gt; 目录下的 &lt;code&gt;.ejs&lt;/code&gt; 后缀的文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;app.set(&lt;span class=&quot;string&quot;&gt;&#39;views&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;视图模板文件存放路径&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.set(&lt;span class=&quot;string&quot;&gt;&#39;view engine&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;安装的模板引擎的名称，例如：ejs&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="EJS" scheme="http://yoursite.com/tags/EJS/"/>
    
      <category term="Express" scheme="http://yoursite.com/tags/Express/"/>
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
      <category term="xTemplate" scheme="http://yoursite.com/tags/xTemplate/"/>
    
  </entry>
  
  <entry>
    <title>Cookie、Session 存储技术</title>
    <link href="http://yoursite.com/2017/04/08/Cookie%E3%80%81Session%20%E5%AD%98%E5%82%A8%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2017/04/08/Cookie、Session 存储技术/</id>
    <published>2017-04-07T16:00:00.000Z</published>
    <updated>2018-06-07T01:30:04.426Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>保存用户和网站之间的一个状态。</p><ul><li>Cookie（复数形态Cookies），中文名称为“小型文本文件”或“小甜饼”</li><li>指某些网站为了辨别用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。</li><li>是网景公司的前雇员卢·蒙特利在1993年3月的发明</li><li>历史记录是浏览器的一个特性，cookie 使用了保持状态的一种手段</li><li>浏览器缓存分为好几种<ul><li>一般所指缓存有静态资源缓存：<ul><li>css、img、JavaScript</li><li>不是经常变换的资源可以设置环境</li><li>也不是浏览器能做到的</li><li>304 服务器做的</li></ul></li><li>动态资源缓存<ul><li>浏览器可以做到</li><li>例如不常变化的接口资源</li><li>例如商品分类</li></ul></li></ul></li></ul><a id="more"></a><h3 id="HTTP-无状态"><a href="#HTTP-无状态" class="headerlink" title="HTTP 无状态"></a>HTTP 无状态</h3><ul><li><p>跟客户端交互，到底做了什么事情，对于服务器来说根本就不知道</p></li><li><p>为什么不记住客户端跟我做了什么事情？</p><ul><li>客户端第一次请求过来</li><li>服务器校验一下客户端有没有那个标记（Cookie凭证）<ul><li>如果发现有，则不给标记</li><li>如果发现没有：写Cookie（贴凭证）</li></ul></li></ul></li></ul><h3 id="什么是-Cookie"><a href="#什么是-Cookie" class="headerlink" title="什么是 Cookie"></a>什么是 Cookie</h3><p>所谓的 Cookie 其实就是服务器和客户端浏览器约定好的一种规则。<br>只要服务器给客户端浏览器发送了一个 Cookie，则浏览器以后的每次请求中都会自动带着这个 Cookie 上来。</p><p>Cookie 就是通过 HTTP 请求报文和响应报文配合完成。</p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>利用响应头：<code>Set-Cookie</code> 来写 Cookie，然后解析请求头中的 <code>cookie</code> 来读取。</p><h4 id="利用-http-模块来写入-Cookie"><a href="#利用-http-模块来写入-Cookie" class="headerlink" title="利用 http 模块来写入 Cookie"></a>利用 http 模块来写入 Cookie</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="comment">// 是不是第一次访问网站</span></span><br><span class="line"><span class="comment">// 如果是第一次访问：告诉用户是第一个访问该网站</span></span><br><span class="line"><span class="comment">// 如果不是第一次访问：告诉用户欢迎再次访问</span></span><br><span class="line">http.createServer()</span><br><span class="line">  .on(<span class="string">'request'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 如果你给客户端发送过这个 Cookie 了</span></span><br><span class="line">    <span class="comment">// 则客户端请求的时候会自动带过来</span></span><br><span class="line">    <span class="comment">// 然后将 Cookie 放到请求报文中</span></span><br><span class="line">    <span class="keyword">const</span> cookies = req.headers[<span class="string">'cookie'</span>];</span><br><span class="line">    req.cookie = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (cookies) &#123;</span><br><span class="line">      cookies.split(<span class="string">';'</span>).forEach(<span class="function"><span class="params">cookie</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> tmp = cookie.split(<span class="string">'='</span>);</span><br><span class="line">        req.cookie[tmp[<span class="number">0</span>]] = tmp[<span class="number">1</span>];</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (req.cookie.isFirst) &#123;</span><br><span class="line">      res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/plain; charset=utf-8'</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      res.end(<span class="string">'欢迎再次光临...'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/plain; charset=utf-8'</span>,</span><br><span class="line">        <span class="string">'Set-Cookie'</span>: <span class="string">'isFirst=true; Max-Age=20;'</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      res.end(<span class="string">'欢迎第一次访问'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  .listen(<span class="number">4000</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'runnning...'</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="利用前台-js-代码写入-Cookie"><a href="#利用前台-js-代码写入-Cookie" class="headerlink" title="利用前台 js 代码写入 Cookie"></a>利用前台 js 代码写入 Cookie</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"/node_modules/jquery/dist/jquery.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">"/node_modules/js-cookie/src/js.cookie.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> username = Cookies.get(<span class="string">'username'</span>);</span><br><span class="line">  <span class="keyword">if</span> (username) &#123;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'#username'</span>).value = username;</span><br><span class="line">  &#125;</span><br><span class="line">  $(<span class="string">'form'</span>).on(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    Cookies.set(<span class="string">'username'</span>, $(<span class="string">'#username'</span>).val());</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="在-Express-中使用-cookie-parser-中间件解析-cookie"><a href="#在-Express-中使用-cookie-parser-中间件解析-cookie" class="headerlink" title="在 Express 中使用 cookie-parser 中间件解析 cookie"></a>在 Express 中使用 <code>cookie-parser</code> 中间件解析 cookie</h4><p>安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save cookie-parser</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">// 配置中间件</span></span><br><span class="line">app.use(cookieParser());</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">// 只要在 Express 中配置了这个中间件，使用 Cookie 解析中间件。</span></span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="comment">// req.cookies 用来获取请求中的 Cookie</span></span><br><span class="line">  <span class="keyword">if</span> (req.cookies.isFirst) &#123;</span><br><span class="line">    res.send(<span class="string">'欢迎再次访问本网站'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 第三个参数设置过期时间</span></span><br><span class="line">    res.cookie(<span class="string">'isFirst'</span>, <span class="string">'true'</span>, &#123;</span><br><span class="line">      maxAge: <span class="number">10</span> * <span class="number">1000</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.send(<span class="string">'欢迎第一次访问'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'running...'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Cookie-的分类"><a href="#Cookie-的分类" class="headerlink" title="Cookie 的分类"></a>Cookie 的分类</h3><ul><li><p>会话 Cookie，也叫 内存 Cookie，存在于浏览器运行的进程中</p><ul><li>只要浏览器一关闭，Cookie 就会被销毁</li></ul></li><li><p>持久化 Cookie</p><ul><li>持久化 Cookie 会保存在磁盘上</li><li>通过过期时间来设定持久 Cookie 的保存时间</li></ul></li></ul><h3 id="Cookie-的使用场景"><a href="#Cookie-的使用场景" class="headerlink" title="Cookie 的使用场景"></a>Cookie 的使用场景</h3><ul><li>购物车<ul><li>没有登陆之前商品数据是保存到 Cookie 中了</li></ul></li><li>记住用户名<ul><li>利用 Cookie 保存用户名</li></ul></li><li>记住我<ul><li>利用 Cookie 来保存用户名和密码（加密之后保存的）</li></ul></li></ul><p>Cookie 一般适用于安全性要求不高的场景。</p><h3 id="Cookie-的缺陷"><a href="#Cookie-的缺陷" class="headerlink" title="Cookie 的缺陷"></a>Cookie 的缺陷</h3><ul><li>Cookie体积过大会造成请求和响应速度变慢<ul><li>尽量不要再Cookie中存储大量数据</li></ul></li><li>默认浏览器会对任何请求把 Cookie 带上去<ul><li>哪怕是静态资源：/public/css/main.css</li><li>所以说在静态资源请求中带着 Cookie 上去，没有意义，影响性能</li><li>一般大型网站会专门把静态资源存储到单独的域名服务器上</li></ul></li><li>Cookie可以在前后端修改，数据容易被篡改和伪造</li><li>Cookie对于敏感数据的保护基本是无效的</li><li>Cookie 就是保存状态数据的。</li></ul><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>Session 是基于 Cookie 的。Cookie 是 session 的凭证。</p><h2 id="在-Express-中使用-express-session-中间件"><a href="#在-Express-中使用-express-session-中间件" class="headerlink" title="在 Express 中使用 express-session 中间件"></a>在 Express 中使用 <code>express-session</code> 中间件</h2><p>Session原理</p><p><img src="/images/Session.png" alt="session原理"></p><p>安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save express-session</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>);</span><br><span class="line"><span class="comment">// secret 就是私钥，生成钥匙的时候会根据这个私有加密，用来访问别人伪造钥匙</span></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">  secret: <span class="string">'hq'</span>,</span><br><span class="line">  resave: <span class="literal">false</span>,</span><br><span class="line">  saveUninitialized: <span class="literal">true</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>基本使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">// secret 表示生成钥匙的时候根据这个字符串生成</span></span><br><span class="line"><span class="comment">// 这个字符串一般被称为私钥</span></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">  secret: <span class="string">'mhq'</span>,</span><br><span class="line">  resave: <span class="literal">false</span>,</span><br><span class="line">  saveUninitialized: <span class="literal">true</span></span><br><span class="line">&#125;));</span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 只要配置了 Session 中间件</span></span><br><span class="line">  <span class="comment">// 那么，客户端请求过来就会直接给其分配一把钥匙，在本次请求会话过程中都是同一个</span></span><br><span class="line">  <span class="comment">//        Session 也分为会话 Session 和 持久 Session</span></span><br><span class="line">  <span class="comment">// 没有配置 Session 中间件之前 req 对象是没有 session 这个属性的</span></span><br><span class="line">  <span class="comment">// 配置完毕之后，req 请求对象会多出一个 Session 属性出来</span></span><br><span class="line">  <span class="comment">// req.session 就是根据客户端的凭证找到其对应的数据</span></span><br><span class="line">  <span class="comment">// console.log(req.session);</span></span><br><span class="line">  <span class="comment">// session 数据是保存在当前运行的 node 进程中的，也就是保存在内存中</span></span><br><span class="line">  <span class="comment">// 只要服务器重启，或者服务器宕机了，则 Session 数据丢失</span></span><br><span class="line">  <span class="keyword">if</span> (req.session.isLogin) &#123;</span><br><span class="line">    res.send(<span class="string">'欢迎再次访问'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 通过客户端的 Cookie 钥匙凭证，找到对应的数据格子</span></span><br><span class="line">    <span class="comment">// 找到数据格式之后，往里面加一个属性：isLogin</span></span><br><span class="line">    req.session.isLogin = <span class="literal">true</span>;</span><br><span class="line">    res.send(<span class="string">'欢迎第一次访问'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">'/logout'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 清除 Session 中的数据</span></span><br><span class="line">  req.session.isLogin = <span class="literal">null</span>;</span><br><span class="line">  res.send(<span class="string">'用户退出了'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'running...'</span>)；</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="cookie-和-session"><a href="#cookie-和-session" class="headerlink" title="cookie 和 session"></a>cookie 和 session</h3><p><strong>Cookie虽在持久保存客户端数据提供方便并分担服务器存储负担，但有很多局限性</strong></p><ul><li>弊端<ul><li>IE6 或更低的版本最多 20 个 cookie</li><li>IE7 和之后的版本最后可以有 50 cookie</li><li>FireFox 最多 50 个 cookie</li><li>chrome 和 Safari 没有做硬性限制</li></ul></li></ul><p>IE 和 opera 会清理近期最少使用的 cookie，FireFox 会随时清理 cookie，cookie 的最大容量为 4096 字节，为了兼容性，一般不能超过 4095</p><p>IE 提供了一种存储可以支持持久化用户数据，叫做 userdata ,从 IE5.0 就开始支持。每个数据最多 128k ,每个域名下最多 1M。这个持久化数据放在缓存中，如果缓存没有清理，那么会一直存在。</p><ul><li>优点：极高的扩展性和可用性<ul><li>通过良好的编程，控制保存在 cookie 中的 session 对象的大小</li><li>通过加密和安全传输技术（SSL），减少 cookie 被破解的可能性</li><li>只要在 cookie 中存放不敏感数据，即使被盗也不会有重大损失</li><li>控制 cookie 的生命周期，使之不会永远有效。偷盗者很可能拿到一个过去的 cookie</li></ul></li><li>缺点<ul><li>cookie 数量和长度的限制。每个 domain 最多只能有 20 条 cookie ，每个 cookie 的长度不能超过 4kb，否则被截掉；</li><li>安全性问题。如果 cookie 被拦截了，那么拦截者就可以取得所有的 session 信息。即使密码加密也于事无补，因为拦截者并不需要知道 cookie 的意义，他只要原样转发 cookie 就可以达到目的了；</li><li>有些状态不可能保存客户端。例如：为了防止重复提交表单，我们需要在服务器端保存一个计数器。如果我们把这个计数器保存在客户端，那么它起不到任何作用。</li></ul></li></ul><p>浏览器本地存储</p><p><strong>在较高版本浏览器中，JavaScript 供了 sessionStorage 和 globalStorage ,在 HTML5 中提供了 localStorage 来取代 lobalStorage</strong></p><p>H5 中的 web Storage 中包括两种存储方式：sessionStorage 和 localStorage</p><h3 id="sessionStorage和localStorage区别"><a href="#sessionStorage和localStorage区别" class="headerlink" title="sessionStorage和localStorage区别"></a>sessionStorage和localStorage区别</h3><p>sessionStorage 和localStorage 都有相同的方法，例如：setItem, getItem, removeItem, clear</p><p>sessionStorage 用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也会随之消失。因此，sessionStorage 不是一种持久化的本地存储，仅仅是会话级别的存储。</p><p>localStorage 用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。</p><h3 id="web-Storage-和-cookie"><a href="#web-Storage-和-cookie" class="headerlink" title="web Storage 和 cookie"></a>web Storage 和 cookie</h3><p>web Storage 和 cookie 相似，web Storage 的存储更大；</p><p>cookie 大小受限，并且每次新请求一个页面 cookie 都会发送过去，浪费了带宽；</p><p>cookie 还需要指定作用域，不可以跨域调用；</p><p>cookie 是不可缺的：其作用是与服务器进行交互，作为 HTTP 规范的一部分二存在，而 Web Storage 仅仅是为了在本地“存储”数据而生。</p><h3 id="web-Storage方法："><a href="#web-Storage方法：" class="headerlink" title="web Storage方法："></a>web Storage方法：</h3><p>setItem, getItem, removeItem, clear等方法，而 cookie 需要开发者自己封装 setCookie， getCookie。</p><h3 id="浏览器的支持"><a href="#浏览器的支持" class="headerlink" title="浏览器的支持"></a>浏览器的支持</h3><p>浏览器的支持除了IE7以下不支持外，其他标准浏览器都完全支持（IE及FF需要在web服务器里运行）。</p><p>IE6,7中的 userDat a其实就是 javascript 本地存储的解决方案。通过简单封装代码就可以使所有的浏览器都支持 Web Storage。</p><h3 id="session-和-cookie-区别"><a href="#session-和-cookie-区别" class="headerlink" title="session 和 cookie 区别"></a>session 和 cookie 区别</h3><p>cookie 数据存储在客户的浏览器上，session 数据放在服务器上；</p><p>cookie 数据不安全，别人可以分享存放在本地的 cookie 并进行 cookie 欺骗，考虑到安全性应当使用 session；</p><p>session 一般会在一定的时间内保存在服务器上。当访问增多，会比较占用服务器的性能；</p><p>单个 cookie 保存的数据不能超过 4k，很多浏览器都限制一个站点最多保存 20 个 cookie；</p><p>个人等数据存放为 session 稳妥；其他数据可以存放到 cookie 中。</p><p>总的来说：</p><p>cookies 兼容所有的浏览器，Html5 提供的storage 存储方式。</p><ul><li>Document.cookie</li><li>Window.localstorage</li><li>Window.sessionstorage</li></ul><ol><li>cookie 数据始终在同源的 http 请求中携带（即使不需要），即 cookie 在浏览器和服务器间来回传递。而 sessionStorage 和 localStorage 不会自动把数据发给服务器，仅在本地保存。</li><li>存储大小限制也不同，cookie 数据不能超过 4k，同时因为每次http请求都会携带 cookie ，所以 cookie 只适合保存很小的数据，如会话标识。sessionStorage 和 localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到 5M 或更大。</li><li>数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie 只在设置的 cookie 过期时间之前一直有效，即使窗口或浏览器关闭。</li><li>作用域不同，sessionStorage 不在不同的浏览器窗口中共享，即使是同一个页面；localStorage 在所有同源窗口中都是共享的；cookie 也是在所有同源窗口中都是共享的。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Cookie&quot;&gt;&lt;a href=&quot;#Cookie&quot; class=&quot;headerlink&quot; title=&quot;Cookie&quot;&gt;&lt;/a&gt;Cookie&lt;/h2&gt;&lt;p&gt;保存用户和网站之间的一个状态。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cookie（复数形态Cookies），中文名称为“小型文本文件”或“小甜饼”&lt;/li&gt;
&lt;li&gt;指某些网站为了辨别用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。&lt;/li&gt;
&lt;li&gt;是网景公司的前雇员卢·蒙特利在1993年3月的发明&lt;/li&gt;
&lt;li&gt;历史记录是浏览器的一个特性，cookie 使用了保持状态的一种手段&lt;/li&gt;
&lt;li&gt;浏览器缓存分为好几种&lt;ul&gt;
&lt;li&gt;一般所指缓存有静态资源缓存：&lt;ul&gt;
&lt;li&gt;css、img、JavaScript&lt;/li&gt;
&lt;li&gt;不是经常变换的资源可以设置环境&lt;/li&gt;
&lt;li&gt;也不是浏览器能做到的&lt;/li&gt;
&lt;li&gt;304 服务器做的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;动态资源缓存&lt;ul&gt;
&lt;li&gt;浏览器可以做到&lt;/li&gt;
&lt;li&gt;例如不常变化的接口资源&lt;/li&gt;
&lt;li&gt;例如商品分类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Storage" scheme="http://yoursite.com/categories/Storage/"/>
    
    
      <category term="Cookie" scheme="http://yoursite.com/tags/Cookie/"/>
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
      <category term="Session" scheme="http://yoursite.com/tags/Session/"/>
    
  </entry>
  
  <entry>
    <title>数据库基础 以及 Node 操作方法</title>
    <link href="http://yoursite.com/2017/03/28/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%20%E4%BB%A5%E5%8F%8A%20Node%20%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2017/03/28/数据库基础 以及 Node 操作方法/</id>
    <published>2017-03-27T16:00:00.000Z</published>
    <updated>2018-06-06T08:43:47.613Z</updated>
    
    <content type="html"><![CDATA[<p>数据库：存储数据的仓库。</p><ul><li>数据结构化</li><li>实现数据共享<ul><li>可以减少冗余数据</li></ul></li><li>数据独立性高</li><li>数据统一管理与控制</li></ul><a id="more"></a><h2 id="数据库介绍"><a href="#数据库介绍" class="headerlink" title="数据库介绍"></a>数据库介绍</h2><ul><li>MySQL 数据库</li><li>Oracle<ul><li>Orcale数据库管理系统由甲骨文公司开发，在数据库领域一直处于领先地位</li><li>商业收费，大型系统，淘宝、京东就使用了 Oracle 数据库</li></ul></li><li>SqlServer 数据库<ul><li>由微软公司开发，只能在Windows上运行。.net开发程序员</li></ul></li><li>DB2<ul><li>由IBM公司开发，在金融行业中使用的比较多。IBM的服务器，买服务器送数据库</li><li>商业收费</li></ul></li><li>MS SQL Server<ul><li>以上这些数据库都是使用 SQL 语言进行操作</li><li>SQL 语言就是用于 关系型数据库 的一个操作语言</li><li>利用这个 SQL 语言可以增删改查库和表，以及增删改查表数据</li><li>表 就是 关系</li><li>表与表之间就是关系</li></ul></li><li><p>MongoDB</p><ul><li>非关系型数据库</li><li>没有表，这个数据库中存储的数据都在集合中，类似于 JavaScript 对象，其实就是 json 格式的数据</li><li>集合没有结构，集合就是一个数组</li><li>也可以往集合中插入数据</li></ul></li><li><p>关系型数据库存储结构</p><ul><li>数据库服务器<ul><li>数据库管理系统</li></ul></li><li>数据库</li><li>数据表<ul><li>根据业务设计表结构</li></ul></li><li>记录<ul><li>根据表结构存储记录数据</li></ul></li></ul></li></ul><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><p>MongoDB是由10gen公司开发的一个介于关系型数据库和非关系型数据库之间的产品，是非关系型数据库中功能最丰富，最像关系型数据库的。他支持的数据结构非常松散，是类似json的格式，所以可以存储比较复杂的数据结构类型。MongoDB数据库管理系统最大的特点就是它支持的查询语言非常强大，语法类似于面向对象的查询语言。它还是一个开源的数据库，对于大数据量、高并发的互联网应用，支持非常不错。操作非关系型数据库不需要使用SQL语言。</p><p>MongoDB 官网：<a href="https://www.mongodb.com/" target="_blank" rel="noopener">https://www.mongodb.com/</a></p><ul><li>MongoDB 是一个非关系型数据库</li><li>面向文档存储</li><li>开源免费、高性能</li><li>MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成</li><li>MongoDB 文档类似于 JSON 对象</li><li>字段值可以包含其他文档，数组及文档数组</li><li>Mongo支持丰富的查询表达式</li><li>查询指令使用JSON形式的标记，可轻易查询文档中内嵌的对象及数组。</li></ul><h3 id="创建数据目录并启动MongoDB数据库服务器"><a href="#创建数据目录并启动MongoDB数据库服务器" class="headerlink" title="创建数据目录并启动MongoDB数据库服务器"></a>创建数据目录并启动MongoDB数据库服务器</h3><blockquote><p>启动MongoDB数据库需要指定一个数据存储目录</p></blockquote><ul><li>在 c 盘 根目录创建一个目录：data</li><li>接下来启动 MongoDB 服务器<ul><li>打开终端，输入：<code>mongod 你刚才创建的目录的绝对路径</code></li></ul></li></ul><p>注意：如果发现执行上面的命令收到这样一个提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;mongod&apos; 不是内部或外部命令，也不是可运行的程序或批处理文件。</span><br></pre></td></tr></table></figure><p>解决方案：将 MongoDB 安装目录下的 bin 目录配置到环境变量。</p><p>如果执行完上面的命令启动成功后不要动这个命令台了，说明 MongoDB 服务器正在运行。</p><p>MongoDB 默认运行的端口号是 27017</p><p>如何关闭？</p><p>在终端中：<code>Ctrl + C</code> 关闭 MongoDB 数据库。</p><h3 id="连接-MongoDB-数据库"><a href="#连接-MongoDB-数据库" class="headerlink" title="连接 MongoDB 数据库"></a>连接 MongoDB 数据库</h3><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><ul><li>数据库<ul><li>一个mongodb中可以建立多个数据库</li><li>MongoDB的默认数据库为”db”，该数据库存储在data目录中</li><li>MongoDB的单个实例可以容纳多个独立的数据库，每一个都有自己的集合和文档</li><li>不同的数据库也放置在不同的文件中</li><li><code>show dbs</code> 显示所有数据库列表</li><li><code>db</code> 显示当前数据库对象或集合</li><li><code>use 数据库名字</code> 连接到一个指定的数据库</li></ul></li><li>集合<ul><li>集合就是 MongoDB 文档组，类似于关系型数据库中的表</li><li>集合存在于数据库中，集合没有固定的结构，就是一个 JSON</li><li>通常情况下我们插入集合的数据都会有一定的关联性。</li><li>当第一个文档插入时，集合就会被创建。</li><li>db.col.find() 查询所有数据</li><li>db.col.findOne({}) 查询指定数据</li></ul></li><li>文档<ul><li>文档是一个键值(key-value)对(即BSON)</li></ul></li></ul><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ul><li><code>show dbs</code> 查看数据库列表</li><li><code>use 名称</code> 创建一个数据库<ul><li>这里表示如果有该数据库则切换到该数据库</li><li>如果没有，则创建（创建不是真的创建，只有当你在这个数据库中插入一个集合数据之后才会创建成功）</li></ul></li><li><code>show collections</code> 查看当前数据库中的集合</li><li><code>db.集合名称.insert({文档对象})</code> 向集合中插入一个文档（JSON 对象）<ul><li>如果该集合不存在，则直接新建，并将数据插入进去</li><li>如果该集合已存在，则直接将数据添加到该集合中</li></ul></li><li><code>db.集合名.find()</code> 查询集合中的所有数据</li><li><code>db.集合名.find(文档条件)</code> 按照文档条件查询</li><li><code>db.集合名.findOne(文档条件)</code> 按照文档条件查询，只查询匹配项的第一个</li><li><code>db.dropDatabase()</code> 自杀，删除数据库当前数据库</li><li><code>db.集合名.drop()</code> 删除数据库中的指定集合</li><li><code>db.集合名.update(文档条件, 文档对象)</code> 根据文档条件，整体更新为文档对象</li><li><code>db.集合名.update(文档条件, { $set:文档对象 })</code> 根据文档条件，更新指定字段<ul><li>如果更新的文档对象中的字段已存在，则更新</li><li>如果不存在，则直接怼进去</li></ul></li><li><code>db.集合名.save(文档)</code><ul><li>如果文档中包含一个 <code>&quot;_id&quot; : ObjectId(&quot;56064f89ade2f21f36b03136&quot;)</code> 该字段</li><li>则会找到匹配项条件，整体替换</li><li>如果没有该字段，则直接 insert</li></ul></li><li><code>db.集合名.remove(条件文档)</code><ul><li><a href="http://www.runoob.com/mongodb/mongodb-operators.html" target="_blank" rel="noopener">http://www.runoob.com/mongodb/mongodb-operators.html</a> 条件操作符</li></ul></li></ul><h3 id="在-Node-中操作-MongoDB"><a href="#在-Node-中操作-MongoDB" class="headerlink" title="在 Node 中操作 MongoDB"></a>在 Node 中操作 MongoDB</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongodb = <span class="built_in">require</span>(<span class="string">'mongodb'</span>);</span><br><span class="line"><span class="keyword">var</span> MongoClient = mongodb.MongoClient;</span><br><span class="line"><span class="comment">// Connection URL </span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">'mongodb://localhost:27017/itcast'</span>;</span><br><span class="line"><span class="comment">// Use connect method to connect to the Server </span></span><br><span class="line">MongoClient.connect(url, <span class="function"><span class="keyword">function</span> (<span class="params">err, db</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 2. 使用 db </span></span><br><span class="line">  <span class="comment">// 插入数据</span></span><br><span class="line">  <span class="comment">// db.collection('duanzi').insertMany([</span></span><br><span class="line">  <span class="comment">//   &#123; nickname: '斜阳烟柳', gender: 0, age: 20, content: '小时候，村里有只狗很凶，我和哥哥对它又恨又怕。一次，我哥在家偷我爸的酒喝。碰巧那只狗从我家门前经过，我哥借酒壮胆，抄起棍子冲了出去。凶狗见势不妙，仓皇逃窜，我哥就满村追着打。第二天，我哥和凶狗在一条窄巷遇上，彼此一愣，各自扭头撒腿就跑...', &#125;</span></span><br><span class="line">  <span class="comment">// ], (err, result) =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   if (err) &#123;</span></span><br><span class="line">  <span class="comment">//     throw err;</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">//   console.log('插入数据成功');</span></span><br><span class="line">  <span class="comment">// &#125;);</span></span><br><span class="line">  <span class="comment">// 查询数据</span></span><br><span class="line">  db.collection(<span class="string">'duanzi'</span>).find(&#123;&#125;).toArray(<span class="function">(<span class="params">err, docs</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(docs);</span><br><span class="line">  &#125;)</span><br><span class="line">  db.close();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>oracle、sqlserver、DB2、MySQL 都是关系型数据库。</p><h2 id="安装和配置-MySQL-数据库"><a href="#安装和配置-MySQL-数据库" class="headerlink" title="安装和配置 MySQL 数据库"></a>安装和配置 MySQL 数据库</h2><p>官方网站：<a href="http://www.mysql.com/" target="_blank" rel="noopener">http://www.mysql.com/</a></p><p>启动 和 停止MySQL服务：</p><blockquote><p>通过Windows的运行，输入services.msc找到MySQL服务</p></blockquote><p>通过DOS命令启动MySQL服务（使用管理员权限打开终端）</p><p>登录MySQL数据库:</p><p><code>mysql -h localhost -P 3306 -u root -p</code></p><ul><li><code>-h：</code>主机名</li><li><code>-P：</code>端口</li><li><code>-u：</code>用户名</li><li><code>-p：</code>密码</li></ul><p>mysql默认连接localhost和3306，所以可以省略-h和-P:</p><p><code>mysql -u root -p</code></p><p>在命令行中输入“help;”或者“\h”，就会显示出MySQL的帮助信息。</p><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">简写</th><th style="text-align:center">具体含义</th></tr></thead><tbody><tr><td style="text-align:center">?</td><td style="text-align:center">\?</td><td style="text-align:center">显示帮助信息</td></tr><tr><td style="text-align:center">exit</td><td style="text-align:center">\q</td><td style="text-align:center">退出MySQL</td></tr><tr><td style="text-align:center">help</td><td style="text-align:center">\h</td><td style="text-align:center">显示帮助信息</td></tr><tr><td style="text-align:center">quit</td><td style="text-align:center">\q</td><td style="text-align:center">退出MySQL</td></tr><tr><td style="text-align:center">status</td><td style="text-align:center">\s</td><td style="text-align:center">获取MySQL服务器状态信息</td></tr><tr><td style="text-align:center">use</td><td style="text-align:center">\u</td><td style="text-align:center">用来选择一个数据库，以一个数据库名作为参数</td></tr></tbody></table><h2 id="数据库的存储结构"><a href="#数据库的存储结构" class="headerlink" title="数据库的存储结构"></a>数据库的存储结构</h2><ul><li>一个数据库服务器上可以有多个数据库</li><li>一个数据库中可以有多个表<ul><li>一个表一定要有表结构</li><li>所有的数据存储在表中，所以有了数据库之后，要先设计你的表结构</li></ul></li><li>一张表中存储多条记录<ul><li>记录按照表结构的形式进行存储</li></ul></li></ul><h2 id="创建数据库和表"><a href="#创建数据库和表" class="headerlink" title="创建数据库和表"></a>创建数据库和表</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE [IF NOT EXISTS] db_name</span><br></pre></td></tr></table></figure><h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES;</span><br></pre></td></tr></table></figure><h3 id="显示数据库创建语句"><a href="#显示数据库创建语句" class="headerlink" title="显示数据库创建语句"></a>显示数据库创建语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE DATABASE db_name;</span><br></pre></td></tr></table></figure><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE [IF EXISTS] db_name;</span><br></pre></td></tr></table></figure><h3 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE db_name;</span><br></pre></td></tr></table></figure><h3 id="查看当前使用的数据库"><a href="#查看当前使用的数据库" class="headerlink" title="查看当前使用的数据库"></a>查看当前使用的数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT database();</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">大小</th><th style="text-align:center">范围（有符号）</th><th style="text-align:center">范围（无符号）</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">TINYINT</td><td style="text-align:center">1 字节</td><td style="text-align:center">(-128，127)</td><td style="text-align:center">(0，255)</td><td style="text-align:center">小整数值</td></tr><tr><td style="text-align:center">SMALLINT</td><td style="text-align:center">2 字节</td><td style="text-align:center">(-32 768，32 767)</td><td style="text-align:center">(0，65 535)</td><td style="text-align:center">大整数值</td></tr><tr><td style="text-align:center">MEDIUMINT</td><td style="text-align:center">3 字节</td><td style="text-align:center">(-8 388 608，8 388 607)</td><td style="text-align:center">(0，16 777 215)</td><td style="text-align:center">大整数值</td></tr><tr><td style="text-align:center">INT或INTEGER</td><td style="text-align:center">4 字节</td><td style="text-align:center">(-2 147 483 648，2 147 483 647)</td><td style="text-align:center">(0，4 294 967 295)</td><td style="text-align:center">大整数值</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td><td style="text-align:center">…</td></tr></tbody></table><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><p>在MySQL数据库中，存储小数都是使用浮点数和定点数来表示的。</p><p>浮点数有两种：</p><ul><li>单精度浮点数（FLOAT）</li><li>双精度浮点数(DOUBLE)</li></ul><p>定点数（DECIMAL）[ˈdesɪml]</p><h3 id="时间和日期类型"><a href="#时间和日期类型" class="headerlink" title="时间和日期类型"></a>时间和日期类型</h3><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">大小(字节)</th><th style="text-align:center">范围</th><th style="text-align:center">格式</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">DATE</td><td style="text-align:center">3</td><td style="text-align:center">1000-01-01/9999-12-31</td><td style="text-align:center">YYY-MM-DD</td><td style="text-align:center">日期值</td></tr><tr><td style="text-align:center">TIME</td><td style="text-align:center">3</td><td style="text-align:center">‘-838:59:59’/‘838:59:59’</td><td style="text-align:center">H:MM:SS</td><td style="text-align:center">时间值或持续时间</td></tr><tr><td style="text-align:center">YEAR</td><td style="text-align:center">1</td><td style="text-align:center">1901/2155</td><td style="text-align:center">YYY</td><td style="text-align:center">年份值</td></tr><tr><td style="text-align:center">DATETIME</td><td style="text-align:center">8</td><td style="text-align:center">1000-01-01 00:00:00/9999-12-31 23:59:59</td><td style="text-align:center">YYY-MM-DD HH:MM:SS</td><td style="text-align:center">混合日期和时间值</td></tr><tr><td style="text-align:center">TIMESTAMP</td><td style="text-align:center">8</td><td style="text-align:center">1970-01-01 00:00:00/2037 年某时</td><td style="text-align:center">YYYMMDD HHMMSS</td><td style="text-align:center">混合日期和时间值，时间戳</td></tr></tbody></table><p>如果插入的数值不合法，系统会自动将对应的零值插入到数据库中。</p><ul><li>YEAR<br>使用4位字符串或数字表示，范围为‘1901‘ ~ ‘2155’或1901~2155</li></ul><p>例如，输入‘2016‘或者2016，插入到数据库的值均为2016</p><ul><li>DATE</li></ul><p>DATE类型用来表示日期值，不包含时间部分。</p><p>可以使用“YYYY-MM-DD“或‘YYYYMMDD‘字符串表示</p><p>例如，输入‘2016-10-01‘或’20161001‘插入到数据库的日期都是2016-10-01</p><ul><li>TIME</li></ul><p>TIME类型用于表示时间值，它的显示形式一般为HH:MM:SS,其中HH 表示小时，MM表示分，SS表示秒</p><p>可以使用下面三种方式指定时间的值：</p><ol><li>以“D HH：MM：SS“字符串格式表示。其中，D表示日，可以取0-34之间的值，插入数据时，小时的值等于（D*24+HH）<ul><li>例如，输入‘2 11:30:50‘，插入数据库的日期为 59:30:50</li></ul></li><li>以‘HHMMSS‘字符串格式或者HHMMSS数字格式表示<ul><li>例如：输入‘345454‘或345454，插入数据库的日期为34:54:54</li></ul></li><li>使用CURRENT_TIME或NOW()输入当前系统时间<ul><li>DATETIME</li></ul></li></ol><p>指定DATETIME类型的值：</p><ol><li>以‘YYYY-MM-DD HH:MM:SS‘或者’YYYYMMDDHHMMSS‘字符串或数字都可以。</li><li>使用NOW来输入当前系统的日期和时间</li></ol><ul><li>TIMESTAMP</li></ul><p>TIMESTAMP类型显示形式和DATETIME相同，但取值范围比DATETIME小。</p><ol><li>输入CURRENT_TIMESTAMP输入系统当前日期和时间</li><li>输入NULL时，系统会自动输入当前日期和时间</li><li>无任何输入时，系统会输入系统当前日期和时间</li></ol><p>标记。利用它可以保存表中某条记录的最后修改时间。自动维护。</p><h3 id="CHAR和VARCHAR"><a href="#CHAR和VARCHAR" class="headerlink" title="CHAR和VARCHAR"></a>CHAR和VARCHAR</h3><table><thead><tr><th style="text-align:center">插入值</th><th style="text-align:center">CHAR(4)</th><th style="text-align:center">存储需求</th><th style="text-align:center">VARCHAR(4)</th><th style="text-align:center">存储需求</th></tr></thead><tbody><tr><td style="text-align:center">‘’</td><td style="text-align:center">‘’</td><td style="text-align:center">4个字节</td><td style="text-align:center">‘’</td><td style="text-align:center">1个字节</td></tr><tr><td style="text-align:center">‘ab’</td><td style="text-align:center">‘ab’</td><td style="text-align:center">4个字节</td><td style="text-align:center">‘ab’</td><td style="text-align:center">3个字节</td></tr><tr><td style="text-align:center">‘abc’</td><td style="text-align:center"></td><td style="text-align:center">4个字节</td><td style="text-align:center">‘abc’</td><td style="text-align:center">4个字节</td></tr><tr><td style="text-align:center">‘abcd’</td><td style="text-align:center"></td><td style="text-align:center">4个字节</td><td style="text-align:center">‘abcd’</td><td style="text-align:center">5个字节</td></tr><tr><td style="text-align:center">‘abcde’</td><td style="text-align:center">‘abcd’</td><td style="text-align:center">4个字节</td><td style="text-align:center">‘abcd’</td><td style="text-align:center">5个字节</td></tr></tbody></table><p>当数据为CHAR(4)类型时，不管插入值的长度是多少，所占用的存储空间都是4个字节。而VARCHAR（4）所对应的数据所占用的字节数为实际长度加1.</p><p>总结：</p><ul><li>字符长度不固定的类型使用VARCHAR 查询的时候要计算字节的长度</li><li><p>字符串长度固定的使用CHAR 查询速度快。</p></li><li><p>VARCAHR比CHAR省空间</p></li><li><p>CHAR比VARCHAR省时间</p></li></ul><p>TEXT类型</p><p>表示大文本数据，例如：文章内容、评论等</p><h2 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h3><p>查看当前数据库中的所有表： <code>show tables;</code></p><p>查看表结构: <code>desc table_name;</code></p><p>查看建表语句: <code>show create table table_name;</code></p><h3 id="修改数据表"><a href="#修改数据表" class="headerlink" title="修改数据表"></a>修改数据表</h3><p>增加列: <code>ALTER TABLE table_name ADD colum datatype;</code></p><p>修改列: <code>ALTER TABLE table_name MODIFY colum datatype;</code></p><p>删除列: <code>ALTER TABLE table_name DROP colum;</code></p><p>修改表名: <code>rename TABLE table_name to new_table_name;</code></p><p>修改列名: <code>ALTER TABLE table_name change colum_name new_colum_name datatype;</code></p><h3 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h3><p><code>DROP TABLE table_name;</code></p><h3 id="表的约束"><a href="#表的约束" class="headerlink" title="表的约束"></a>表的约束</h3><table><thead><tr><th style="text-align:center">约束条件</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">PRIMARY KEY</td><td style="text-align:center">主键约束，用于唯一标识对应的记录</td></tr><tr><td style="text-align:center">FOREIGN KEY</td><td style="text-align:center">外键约束</td></tr><tr><td style="text-align:center">NOT NULL</td><td style="text-align:center">非空约束</td></tr><tr><td style="text-align:center">UNIQUE</td><td style="text-align:center">唯一性约束</td></tr><tr><td style="text-align:center">DEFAULT</td><td style="text-align:center">默认值约束，用于设置字段的默认值</td></tr></tbody></table><p>表的约束条件都是针对表中字段进行限制，从而保证数据表中数据的正确性和唯一性。</p><h4 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h4><p>每个数据表中最多只能有一个主键约束，定义为PRIMARY KEY 的字段不能有重复值且不能为NULL值。也就是非空而且唯一</p><p>语法：<code>字段名 数据类型 PRIMARY KEY</code></p><h4 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h4><p>非空约束指的是字段的值不能为NULL，在MySQL中，非空约束是通过NOT NULL 定义的。</p><p>语法：<code>字段名 数据类型 NOT NULL;</code></p><h4 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h4><p>唯一约束用于保证数据表中字段的唯一性，即表中字段的值不能重复出现。</p><p>语法：<code>字段名 数据类型 UNIQUE;</code></p><h4 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h4><p>默认约束用于给数据库中的字段指定默认值，即当在表中插入一条记录时，如果没有给这个字段赋值，数据库系统会为这个字段插入默认值。</p><p>语法：<code>字段名 数据类型 DEFAULT 默认值;</code></p><h3 id="设置表的字段值自动增加"><a href="#设置表的字段值自动增加" class="headerlink" title="设置表的字段值自动增加"></a>设置表的字段值自动增加</h3><p>如果想为表中插入的新纪录自动生成唯一ID。可以使用AUTO_INCREMENT实现</p><p>语法：<code>字段名 数据类型 AUTO_INCREMENT;</code></p><h2 id="添加、更新与删除数据"><a href="#添加、更新与删除数据" class="headerlink" title="添加、更新与删除数据"></a>添加、更新与删除数据</h2><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><h4 id="为表中所有字段添加数据"><a href="#为表中所有字段添加数据" class="headerlink" title="为表中所有字段添加数据"></a>为表中所有字段添加数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 表名</span><br><span class="line">VALUES(列1值,列2值,...)</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>values中的值必须与表中的字段一一对应。</li><li>插入的数据应与字段中的数据类型相同</li><li>数据的大小应该在列的规定范围内，例如不能将一个长度为80的字符串插入到长度为40个列中</li><li>字符和日期型数据应该包含在单引号中</li><li>如果要插入一个空值，不指定或者使用NULL</li></ul><h4 id="按照指定列添加数据："><a href="#按照指定列添加数据：" class="headerlink" title="按照指定列添加数据："></a>按照指定列添加数据：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 表名(列1名, 列2名,...)</span><br><span class="line">VALUES(列1值, 列2值,...)</span><br></pre></td></tr></table></figure><p><strong>注意: values中的值必须与列声明中的列一一对应</strong></p><h4 id="同时添加多条记录"><a href="#同时添加多条记录" class="headerlink" title="同时添加多条记录"></a>同时添加多条记录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO employee</span><br><span class="line">VALUES (value1,value2,value3...),</span><br><span class="line">        (value1,value2,value3...),</span><br><span class="line">        (value1,value2,value3),</span><br><span class="line">        ...;</span><br></pre></td></tr></table></figure><h3 id="更新全部数据："><a href="#更新全部数据：" class="headerlink" title="更新全部数据："></a>更新全部数据：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE 表名</span><br><span class="line">SET 列名=值, 列名=值[,列名=值]</span><br></pre></td></tr></table></figure><h4 id="按条件更新："><a href="#按条件更新：" class="headerlink" title="按条件更新："></a>按条件更新：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE 表名</span><br><span class="line">SET 列名=值, 列名=值[,列名=值]</span><br><span class="line">WHERE 条件;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>UPDATE语句可以用新值更新原有表中行的列。</li><li>SET字句指定要修改哪些列和要给与哪些值</li><li>WHERE需要给定一个条件，表示要更新符号该条件的行，没有WHERE字句，则更新所有行</li></ul><h4 id="条件可以使用的运算符："><a href="#条件可以使用的运算符：" class="headerlink" title="条件可以使用的运算符："></a>条件可以使用的运算符：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 比较运算符 &gt; &lt; &lt;= &gt;= = &lt;&gt;  大于、小于、大于(小于等于)、不等于</span><br><span class="line">BETWEEN…AND -- 显示在某一区间的值</span><br><span class="line">IN(set) -- 显示在in列表中的值，例：in(100,200)</span><br><span class="line">LIKE -- ‘张pattern’ 模糊查询%</span><br><span class="line">IS NULL -- 判断是否为空</span><br><span class="line">-- 逻辑运算符 AND 多个条件同时成立</span><br><span class="line">OR  多个条件任一成立</span><br><span class="line">NOT 不成立，例：WHERE NOT(salary&gt;100)</span><br></pre></td></tr></table></figure><h3 id="删除数据："><a href="#删除数据：" class="headerlink" title="删除数据："></a>删除数据：</h3><h4 id="删除全部数据"><a href="#删除全部数据" class="headerlink" title="删除全部数据"></a>删除全部数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM 表名;</span><br></pre></td></tr></table></figure><h4 id="根据条件删除："><a href="#根据条件删除：" class="headerlink" title="根据条件删除："></a>根据条件删除：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM 表名</span><br><span class="line">WHERE 条件;</span><br></pre></td></tr></table></figure><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>runcate初始化数据表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truncate table_name;</span><br></pre></td></tr></table></figure><p><strong>truncate和delete的区别：</strong></p><ul><li>delete会一条一条的删</li><li>truncate先摧毁整张表，再创建一张和原来的表结构一模一样的表</li><li>拿拆迁举例子</li><li>truncate在效率上比delete高</li><li>truncate只能删除整表的数据，也就是格式化。</li><li>truncate会把自增id截断恢复为1</li></ul><p>总结：</p><ul><li>如果不使用WHERE语句，将删除表中所有数据</li><li>DELETE不能删除某一列的值，（可使用UPDATE）</li><li>使用DELETE语句仅仅删除记录，不删除表本身，如果要删除表，使用DROP TABLE语句</li><li>删除表中所有数据也可以使用truncate table_name语句</li></ul><h3 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h3><h4 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT [DISTINCT] *|&#123;colum1, colum2, colum3...&#125; FROM table_name;</span><br></pre></td></tr></table></figure><ul><li>SELECT指定查询哪些列的数据</li><li>column指定列名</li><li><code>*</code>号表示查询所有列</li><li>FROM 指定查询哪种表</li><li>DISTINCT 可选，指查询结果时，是否去除重复数据</li></ul><h4 id="查询表中所有数据："><a href="#查询表中所有数据：" class="headerlink" title="查询表中所有数据："></a>查询表中所有数据：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM 表名;</span><br></pre></td></tr></table></figure><h4 id="按照指定列查询表中所有数据："><a href="#按照指定列查询表中所有数据：" class="headerlink" title="按照指定列查询表中所有数据："></a>按照指定列查询表中所有数据：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 列名,列名[,列名] FROM 表名;</span><br></pre></td></tr></table></figure><h4 id="根据条件查询数据："><a href="#根据条件查询数据：" class="headerlink" title="根据条件查询数据："></a>根据条件查询数据：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM 表名</span><br><span class="line">WHERE 条件;</span><br></pre></td></tr></table></figure><p>在WHERE字句中经常使用的运算符</p><table><thead><tr><th style="text-align:center">比较运算符</th><th style="text-align:center">&gt; &lt; &lt;= &gt;= = &lt;&gt;</th><th style="text-align:center">大于、小于、大于(小于等于)、不等于</th></tr></thead><tbody><tr><td style="text-align:center">比较运算符</td><td style="text-align:center">BETWEEN…AND</td><td style="text-align:center">显示在某一区间的值</td></tr><tr><td style="text-align:center">比较运算符</td><td style="text-align:center">IN(set)</td><td style="text-align:center">显示在in列表中的值，例：in(100,200)</td></tr><tr><td style="text-align:center">比较运算符</td><td style="text-align:center">LIKE</td><td style="text-align:center">‘张pattern’ 模糊查询%</td></tr><tr><td style="text-align:center">比较运算符</td><td style="text-align:center">IS NULL</td><td style="text-align:center">判断是否为空</td></tr><tr><td style="text-align:center">逻辑运算符</td><td style="text-align:center">AND</td><td style="text-align:center">多个条件同时成立</td></tr><tr><td style="text-align:center">逻辑运算符</td><td style="text-align:center">OR</td><td style="text-align:center">多个条件任一成立</td></tr><tr><td style="text-align:center">逻辑运算符</td><td style="text-align:center">NOT</td><td style="text-align:center">不成立，例：WHERE NOT(salary&gt;100)</td></tr></tbody></table><p>LIKE语句中，<code>%</code> 代表零个或多个任意字符，<code>_</code>代表一个字符，例如：<code>name LIKE &#39;_a%&#39;</code>;</p><h4 id="多表查询："><a href="#多表查询：" class="headerlink" title="多表查询："></a>多表查询：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 多表查询</span><br><span class="line">-- 找到表 articles 中 user_id 等于 users 表中 id 的</span><br><span class="line">-- 多表查询可以起别名</span><br><span class="line">SELECT a.id as article_id, a.title, a.time</span><br><span class="line">FROM articles as a</span><br><span class="line">INSERT JOIN users as u</span><br><span class="line">ON a.user_id=u.id</span><br></pre></td></tr></table></figure><h4 id="查询总记录数："><a href="#查询总记录数：" class="headerlink" title="查询总记录数："></a>查询总记录数：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查询表中的总记录数据</span><br><span class="line">SELECT COUNT(id) as count FROM articles;</span><br></pre></td></tr></table></figure><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><blockquote><p>在实际开发中，经常需要对某些数据进行统计，例如统计某个字段的最大值，最小值，平均值等，为此，MySQL提供了一些函数来实现这些功能。</p></blockquote><table><thead><tr><th style="text-align:center">函数名称</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">COUNT()</td><td style="text-align:center">返回某行的列数</td></tr><tr><td style="text-align:center">SUM()</td><td style="text-align:center">返回某列值的和</td></tr><tr><td style="text-align:center">AVG()</td><td style="text-align:center">返回某列的平均值</td></tr><tr><td style="text-align:center">MAX()</td><td style="text-align:center">返回某列值的最大值</td></tr><tr><td style="text-align:center">MIN()</td><td style="text-align:center">返回某列的最小值</td></tr></tbody></table><ul><li>COUNT（列名）返回某一列，行的总数</li><li>COUNT（列名）返回某一列，行的总数</li><li>SUM()函数返回满足WHERE条件的行的和</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUM(列名) &#123;, SUM(列名)...&#125; FROM table_name</span><br><span class="line">  [WHERE where_definition]</span><br></pre></td></tr></table></figure><p>注意：SUM仅对数值起作用，否则报错; 对多列求和，“,”不能少。</p><ul><li>MAX()/MIN()函数返回满足WHERE条件的一列的最大/最小值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT MAX(列名) FROM table_name</span><br><span class="line">  [WHERE where_definition];</span><br></pre></td></tr></table></figure><h4 id="对查询结果排序"><a href="#对查询结果排序" class="headerlink" title="对查询结果排序"></a>对查询结果排序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT colum1, colum2, colum3..</span><br><span class="line">    FROM table_name</span><br><span class="line">    ORDER BY colum ASC|DESC;</span><br></pre></td></tr></table></figure><p>ORDER BY 指定排序的列，排序的列表即可以是表中的列名，也可以是SELECT语句后指定的列名.</p><ul><li>ASC 升序，DESC 降序</li><li>ORDER BY 字句应该位于SELECT 语句的结尾</li></ul><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT colum1, colum2, ...</span><br><span class="line">  FROM 表名</span><br><span class="line">  LIMIT [OFFSET, ] 记录数</span><br></pre></td></tr></table></figure><p>LIMIT表示从哪一条记录开始往后【不包含该记录】，以及一共查询多少记录</p><p>OFFSET表示偏移量:</p><ul><li>如果为0则表示从第一条记录开始</li><li>如果为5则表示从第6条记录开始</li></ul><p>使用场景：分页查询</p><p>分页查询一个例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 仅仅取了前 10 条</span><br><span class="line">SELECET * FROM articles LIMIT 10</span><br><span class="line">-- 跳过一条取一条</span><br><span class="line">SELECET * FROM articles LIMIT 1, 1</span><br></pre></td></tr></table></figure><h3 id="为表和字段区别名"><a href="#为表和字段区别名" class="headerlink" title="为表和字段区别名"></a>为表和字段区别名</h3><h4 id="为表取别名"><a href="#为表取别名" class="headerlink" title="为表取别名"></a>为表取别名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT 表别名.id,表别名.name... FROM 表名 AS 表别名</span><br><span class="line">  WHERE 表别名.id = 2..</span><br></pre></td></tr></table></figure><h4 id="为字段取别名"><a href="#为字段取别名" class="headerlink" title="为字段取别名"></a>为字段取别名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段名 [AS] 别名 [,字段名 [AS] 别名,...] FROM 表名;</span><br></pre></td></tr></table></figure><h3 id="多表操作"><a href="#多表操作" class="headerlink" title="多表操作"></a>多表操作</h3><p>实际开发中业务逻辑比较复杂，可能有几十到几百张表不等，所以我们就需要对多张表来进行查询操作，对两张以上的表进行操作，就是多表操作。</p><h4 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h4><p>为了保证数据的完整性，将两张表之间的数据建立关系，因此就需要在成绩表中添加外键约束。</p><ul><li>外键是指引用另一个表中的一列或多列，被引用的列应该具有主键约束或唯一约束。</li><li>外键用于建立和加强两个表数据之间的链接。</li></ul><h4 id="为表添加外键约束"><a href="#为表添加外键约束" class="headerlink" title="为表添加外键约束"></a>为表添加外键约束</h4><p>创建表的时候添加外键:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE department(</span><br><span class="line">    id INT PRIMARY KEY auto_increment,</span><br><span class="line">    name VARCHAR(20) NOT NULL</span><br><span class="line">);</span><br><span class="line">CREATE TABLE employee(</span><br><span class="line">    id INT PRIMARY KEY auto_increment,</span><br><span class="line">    name VARCHAR(20) NOT NULL,</span><br><span class="line">    dept_id INT,</span><br><span class="line">    FOREIGN KEY (id) REFERENCES department(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>表已经存在，通过修改表的语句增加外键:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD CONSTRAINT 外键名 FOREIGN KEY(外键字段名) REFERENCES 外表表名(主键字段名);</span><br></pre></td></tr></table></figure><h4 id="删除外键约束"><a href="#删除外键约束" class="headerlink" title="删除外键约束"></a>删除外键约束</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 DROP FOREIGN KEY 外键名;</span><br></pre></td></tr></table></figure><h3 id="操作关联表"><a href="#操作关联表" class="headerlink" title="操作关联表"></a>操作关联表</h3><blockquote><p>关联关系:</p></blockquote><ul><li>多对一</li><li>多对多</li><li>一对一</li></ul><h2 id="使用-Node-操作-MySQL-数据库"><a href="#使用-Node-操作-MySQL-数据库" class="headerlink" title="使用 Node 操作 MySQL 数据库"></a>使用 Node 操作 MySQL 数据库</h2><p>安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save mysql</span><br></pre></td></tr></table></figure><p><a href="https://www.npmjs.com/package/mysql" target="_blank" rel="noopener">使用 Node 操作</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line"><span class="keyword">var</span> connection = mysql.createConnection(&#123;</span><br><span class="line">  host: <span class="string">'localhost'</span>,</span><br><span class="line">  port: <span class="number">3306</span>,</span><br><span class="line">  user: <span class="string">'root'</span>,</span><br><span class="line">  password: <span class="string">'*********'</span>,</span><br><span class="line">  database: <span class="string">'personal'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 开始操作之前先连接，这一步可以省略</span></span><br><span class="line"><span class="comment">// 当操作数据库的时候，可以自动连接</span></span><br><span class="line"><span class="comment">// connection.connect();</span></span><br><span class="line"><span class="comment">// 操作数据库</span></span><br><span class="line"><span class="comment">// 第一个参数就是任何 SQL 语言，增删改查，? 是要拼接字符串的数据</span></span><br><span class="line"><span class="comment">// 第二个参数可选，传入数据数组</span></span><br><span class="line"><span class="comment">// 第三个参数：回调函数</span></span><br><span class="line"><span class="comment">//    回调函数中的第一个参数就是异常错误对象</span></span><br><span class="line"><span class="comment">//    回调函数中的第二个参数就是操作结果</span></span><br><span class="line"><span class="comment">//    第三个参数可以省略，基本不考虑</span></span><br><span class="line">connection.query(<span class="string">'SELECT * FROM `users` WHERE `age`&gt;?'</span>, [<span class="number">20</span>], <span class="function"><span class="keyword">function</span>(<span class="params">err, rows, fields</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="comment">// 如果是 SELECT，结果是数组</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'The solution is: '</span>, rows[<span class="number">0</span>].solution);</span><br><span class="line">  <span class="comment">// 对象中有一个数组很重要：affectedRows</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`受影响的行数：<span class="subst">$&#123;rows.affectedRows&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 关闭数据库</span></span><br><span class="line"><span class="comment">// 一般就是一个连接操作一次数据库，操作完毕，断开连接</span></span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure><p>使用 Node 操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>)</span><br><span class="line">exports.query = <span class="function">(<span class="params">sql, params = [], callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> connection = mysql.createConnection(&#123;</span><br><span class="line">    connectionLimit : <span class="number">500</span>,</span><br><span class="line">    host: <span class="string">'localhost'</span>,</span><br><span class="line">    port: <span class="number">3306</span>,</span><br><span class="line">    user: <span class="string">'root'</span>,</span><br><span class="line">    password: <span class="string">'*********'</span>,</span><br><span class="line">    database: <span class="string">'personal'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  connection.query(sql, params, (err, rows) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback(err)</span><br><span class="line">    &#125;</span><br><span class="line">    callback(<span class="literal">null</span>, rows)</span><br><span class="line">    <span class="comment">// 操作完毕，结束连接</span></span><br><span class="line">    connection.end()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用连接池操作-MySQL-数据库"><a href="#使用连接池操作-MySQL-数据库" class="headerlink" title="使用连接池操作 MySQL 数据库"></a>使用连接池操作 MySQL 数据库</h3><ul><li>修改安装目录下 my.ini 文件中的: <code>max_connections=1000</code> 默认是 <code>max_connections=151</code></li><li>重启服务器</li></ul><p><img src="/images/连接池.png" alt="连接池"></p><h3 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h3><p>封装过程：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"><span class="comment">// 使用连接，提高操作数据库效率</span></span><br><span class="line"><span class="comment">// 创建一个连接池，池子存放的连接数量是 100 个</span></span><br><span class="line"><span class="keyword">const</span> pool = mysql.createPool(&#123;</span><br><span class="line">  connectionLimit: <span class="number">100</span>,</span><br><span class="line">  host: <span class="string">'localhost'</span>,</span><br><span class="line">  user: <span class="string">'root'</span>,</span><br><span class="line">  password: <span class="string">'*********'</span>,</span><br><span class="line">  database: <span class="string">'personal'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">  <span class="comment">// 从池子中拿一个可用的连接</span></span><br><span class="line">  pool.getConnection(<span class="function">(<span class="params">err, connection</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    connection.query(<span class="string">'INSERT INTO `feedback`(`message`, `name`, `email`, `date`) VALUES(?, ?, ?, ?)'</span>, [</span><br><span class="line">      <span class="string">'今天的雾霾很醇厚'</span>,</span><br><span class="line">      <span class="string">'校长'</span>,</span><br><span class="line">      <span class="string">'xiaozhang@abc.com'</span>,</span><br><span class="line">      <span class="string">'2016-11-17 09:31:00'</span></span><br><span class="line">    ], (err, stat) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 尽早的释放回连接池</span></span><br><span class="line">      <span class="comment">// 只要操作数据库的回调函数被执行，说明这个连接的任务完成了</span></span><br><span class="line">      connection.release();</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`第<span class="subst">$&#123;i+<span class="number">1</span>&#125;</span>个任务完成了`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>封装：db.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"><span class="keyword">const</span> pool = mysql.createPool(&#123;</span><br><span class="line">  connectionLimit: <span class="number">100</span>,</span><br><span class="line">  host: <span class="string">'localhost'</span>,</span><br><span class="line">  user: <span class="string">'root'</span>,</span><br><span class="line">  password: <span class="string">'*********'</span>,</span><br><span class="line">  database: <span class="string">'personal'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// rest 参数</span></span><br><span class="line"><span class="comment">// 作为函数参数的最后一个参数出现，以 ... 开头，后面跟一个名字</span></span><br><span class="line"><span class="comment">// rest 参数就代替了 arguments</span></span><br><span class="line">exports.query = <span class="function"><span class="keyword">function</span> (<span class="params">sql, ...values</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> callback;</span><br><span class="line">  <span class="keyword">let</span> params = [];</span><br><span class="line">  <span class="keyword">if</span> (values.length === <span class="number">3</span>) &#123;</span><br><span class="line">    params = values[<span class="number">0</span>];</span><br><span class="line">    callback = values[<span class="number">1</span>];</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (values.length === <span class="number">2</span>) &#123;</span><br><span class="line">    callback = values[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  pool.getConnection(<span class="function">(<span class="params">err, connection</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果传递了两个参数，则第二个参数就是 callback</span></span><br><span class="line">    <span class="comment">// 也就是说这种情况下，params 就是 callback</span></span><br><span class="line">    <span class="comment">// 后面的 参数就忽略不计了</span></span><br><span class="line">    <span class="comment">// 如果真的传递了三个参数，那就是一一对应</span></span><br><span class="line">    connection.query(sql, params, (err, result) =&gt; &#123;</span><br><span class="line">      connection.release();</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(err);</span><br><span class="line">      &#125;</span><br><span class="line">      callback(<span class="literal">null</span>, result);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="promise-版"><a href="#promise-版" class="headerlink" title="promise 版"></a>promise 版</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"><span class="keyword">const</span> pool = mysql.createPool(&#123;</span><br><span class="line">  connectionLimit: <span class="number">100</span>,</span><br><span class="line">  host: <span class="string">'localhost'</span>,</span><br><span class="line">  user: <span class="string">'root'</span>,</span><br><span class="line">  password: <span class="string">'*********'</span>,</span><br><span class="line">  database: <span class="string">'personal'</span></span><br><span class="line">&#125;);</span><br><span class="line">exports.query = <span class="function">(<span class="params">sql, params = []</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    pool.getConnection(<span class="function">(<span class="params">err, connection</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">      connection.query(sql, params, (err, result) =&gt; &#123;</span><br><span class="line">        connection.release();</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> reject(err);</span><br><span class="line">        &#125;</span><br><span class="line">        resolve(result);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>调用示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">'./db'</span>)</span><br><span class="line">db.query(<span class="string">'SELECT 1 + 1 as solution'</span>);</span><br><span class="line">  .then(<span class="function"><span class="params">rows</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// use rows</span></span><br><span class="line">    <span class="keyword">return</span> db.query(<span class="string">'INSERT INTO table_name VALUES(?, ?, ?)'</span>, [<span class="string">'值1'</span>, <span class="string">'值2'</span>, <span class="string">'值3'</span>])</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">rows</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// use rows</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// handle error</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据库：存储数据的仓库。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据结构化&lt;/li&gt;
&lt;li&gt;实现数据共享&lt;ul&gt;
&lt;li&gt;可以减少冗余数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据独立性高&lt;/li&gt;
&lt;li&gt;数据统一管理与控制&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="MongoDB" scheme="http://yoursite.com/tags/MongoDB/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Node-相册小项目（下）</title>
    <link href="http://yoursite.com/2017/03/10/Node-%E7%9B%B8%E5%86%8C%E5%B0%8F%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>http://yoursite.com/2017/03/10/Node-相册小项目（下）/</id>
    <published>2017-03-09T16:00:00.000Z</published>
    <updated>2018-06-06T07:40:47.101Z</updated>
    
    <content type="html"><![CDATA[<p>将相册项目（中）继续升级，最终使用 Express 版本。</p><h2 id="封装-render-渲染函数"><a href="#封装-render-渲染函数" class="headerlink" title="封装 render 渲染函数"></a>封装 render 渲染函数</h2><ul><li>获取模板字符串中需要的数据</li><li>获取模板字符串<ul><li><code>fs.readFile(&#39;文件名&#39;);</code></li></ul></li><li>将模板字符串中用到的数据和模板字符串通过模板引擎整合到一起<ul><li><code>_.template(模板字符串)({数据对象});</code></li></ul></li><li>发送响应<ul><li><code>res.end(_.template(模板字符串)({数据对象}));</code></li></ul></li></ul><p>render(‘文件路径’, ‘数据对象’);<br>render(‘index’, ‘数据对象’);</p><a id="more"></a><p>综上所述，封装的具体代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  res.render = <span class="function">(<span class="params">viewName, obj = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(<span class="string">`<span class="subst">$&#123;path.join(config.viewPath, viewName)&#125;</span>.html`</span>, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">      &#125;)</span><br><span class="line">      res.end(_.template(data)(obj));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="handler-js"><a href="#handler-js" class="headerlink" title="handler.js"></a>handler.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">'underscore'</span>);</span><br><span class="line"><span class="keyword">const</span> mime = <span class="built_in">require</span>(<span class="string">'mime'</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./config'</span>);</span><br><span class="line"><span class="keyword">const</span> qstring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"><span class="keyword">const</span> formidable = <span class="built_in">require</span>(<span class="string">'formidable'</span>);</span><br><span class="line">exports.showIndex = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.readdir(config.uploadDir, (err, files) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用 render() 函数</span></span><br><span class="line">    res.render(<span class="string">'index'</span>, &#123;</span><br><span class="line">      albumNames: files</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">exports.showPublic = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="built_in">decodeURI</span>(req.url);</span><br><span class="line">  fs.readFile(<span class="string">`.<span class="subst">$&#123;url&#125;</span>`</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      res.writeHead(<span class="number">404</span>, <span class="string">'Not Found'</span>);</span><br><span class="line">      res.end();</span><br><span class="line">    &#125;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: mime.lookup(req.url)</span><br><span class="line">    &#125;);</span><br><span class="line">    res.end(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">exports.doAddAlbum = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> albumName = req.query.albumName ? req.query.albumName.trim() : <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/(\\|\/|\:|\*|\?|"|\&lt;|\&gt;|\|)|^$/</span>.test(albumName)) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.end(<span class="string">'albumName param invalid error.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  fs.access(path.join(config.uploadDir, albumName), err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.end(<span class="string">'albumName already exists'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fs.mkdir(path.join(config.uploadDir, albumName), err =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      res.redirect(<span class="string">'/'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">exports.showAlbum = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> albumName = req.query.albumName ? req.query.albumName.trim() : <span class="string">''</span>;</span><br><span class="line">  fs.access(path.join(config.uploadDir, albumName), err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.end(<span class="string">'album not exists.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fs.readdir(path.join(config.uploadDir, albumName), (err, files) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      res.render(<span class="string">'album'</span>, &#123;</span><br><span class="line">        albumName: albumName,</span><br><span class="line">        albumPaths: files.map(<span class="function"><span class="params">fileName</span> =&gt;</span> <span class="string">`/uploads/<span class="subst">$&#123;albumName&#125;</span>/<span class="subst">$&#123;fileName&#125;</span>`</span>)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 测试登录页</span></span><br><span class="line">exports.showLogin = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.render(<span class="string">'login'</span>, &#123;</span><br><span class="line">    Name: <span class="string">'Jack'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">exports.doUpload = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> albumName = req.query.albumName ? req.query.albumName : <span class="string">''</span>;</span><br><span class="line">  fs.access(path.join(config.uploadDir, albumName), err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.end(<span class="string">'album not exists'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> form = <span class="keyword">new</span> formidable.IncomingForm();</span><br><span class="line">    form.uploadDir = path.join(config.uploadDir, albumName);</span><br><span class="line">    form.keepExtensions = <span class="literal">true</span>;</span><br><span class="line">    form.maxFieldsSize = <span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line">    form.parse(req, (err, fields, files) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.end(<span class="string">'The default size is 10MB.'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      res.redirect(<span class="string">`/album?albumName=<span class="subst">$&#123;albumName&#125;</span>`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">exports.showRegister = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.readFile(path.join(config.viewPath, <span class="string">'register.html'</span>), (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    res.end(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">exports.doRegister = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> buffers = [];</span><br><span class="line">  req.on(<span class="string">'data'</span>, data =&gt; &#123;</span><br><span class="line">    buffers.push(data);</span><br><span class="line">  &#125;);</span><br><span class="line">  req.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> file = Buffer.concat(buffers);</span><br><span class="line">    fs.writeFile(<span class="string">'./a'</span>, file, err =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'writed success'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(file.length);</span><br><span class="line">      <span class="comment">// console.log(qstring.parse(body))</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="router-js"><a href="#router-js" class="headerlink" title="router.js"></a>router.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">const</span> handler = <span class="built_in">require</span>(<span class="string">'./handler'</span>);</span><br><span class="line"><span class="keyword">const</span> render = <span class="built_in">require</span>(<span class="string">'./common/render'</span>);</span><br><span class="line"><span class="comment">// http://www.baidu.com:80/a/b/c?key=value&amp;key=value#xxx</span></span><br><span class="line"><span class="comment">// 协议://主机名:端口号:请求路径?查询字符串#内部定位</span></span><br><span class="line"><span class="comment">// 单页应用中就是利用 hash 来作为网站的请求标识路由的</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> urlObj = url.parse(req.url, <span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> pathname = urlObj.pathname;</span><br><span class="line">  <span class="keyword">const</span> queryObj = urlObj.query;</span><br><span class="line">  <span class="keyword">const</span> method = req.method.toLowerCase();</span><br><span class="line">  req.query = queryObj || &#123;&#125;;</span><br><span class="line">  res.redirect = <span class="function"><span class="params">url</span> =&gt;</span> &#123;</span><br><span class="line">    res.writeHead(<span class="number">302</span>, &#123;</span><br><span class="line">      <span class="string">'Location'</span>: <span class="built_in">encodeURI</span>(url);</span><br><span class="line">    &#125;);</span><br><span class="line">    res.end();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 只要调用了该方法，res 对象就拥有了一个成员叫做 render</span></span><br><span class="line">  <span class="comment">// 以后只要是渲染模板，那就直接调用 res.render('视图名称', 数据对象)</span></span><br><span class="line">  render(res);</span><br><span class="line">  <span class="keyword">if</span> (pathname === <span class="string">'/'</span>) &#123;</span><br><span class="line">    handler.showIndex(req, res);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method === <span class="string">'get'</span> &amp;&amp; (pathname.startsWith(<span class="string">'/public/'</span>) || pathname.startsWith(<span class="string">'/uploads/'</span>) || pathname.startsWith(<span class="string">'/node_modules/'</span>))) &#123;</span><br><span class="line">    handler.showPublic(req, res);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method === <span class="string">'get'</span> &amp;&amp; pathname === <span class="string">'/album/add'</span>) &#123;</span><br><span class="line">    handler.doAddAlbum(req, res);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method === <span class="string">'get'</span> &amp;&amp; pathname === <span class="string">'/album'</span>) &#123;</span><br><span class="line">    handler.showAlbum(req, res);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method === <span class="string">'post'</span> &amp;&amp; pathname === <span class="string">'/upload'</span>) &#123;</span><br><span class="line">    handler.doUpload(req, res);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method === <span class="string">'get'</span> &amp;&amp; pathname === <span class="string">'/register'</span>) &#123;</span><br><span class="line">    handler.showRegister(req, res);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method === <span class="string">'post'</span> &amp;&amp; pathname === <span class="string">'/register'</span>) &#123;</span><br><span class="line">    handler.doRegister(req, res);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method === <span class="string">'get'</span> &amp;&amp; pathname === <span class="string">'/login'</span>) &#123;</span><br><span class="line">    handler.showLogin(req, res);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h2><p>Express 是一个基于 Node.js 开发的快速、开放、极简的 Web 开发框架，可以用来快速构建网站后台，使用 Express 可以让你更加专注于业务的处理。</p><ul><li>Koa</li><li>Sails</li><li>ThinkJS</li></ul><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>Express框架建立在node.js内置的http模块上<ul><li>不对 Node.js 已有的特性进行二次抽象</li><li>在 HTTP 模块之上扩展了 Web 应用所需的基本功能，例如：<code>req.query</code>、<code>res.send</code>、<code>res.json</code>、<code>res.render</code> 等API</li><li>原来的 HTTP 模块的 <code>req.url</code>、<code>req.method</code>，<code>res.write</code>，<code>res.end</code> 等 API 依然存在</li></ul></li><li>轻量、API简单友好</li><li>简单语义化的路由系统</li><li>强大的中间件处理系统</li></ul><h3 id="Geting-Started"><a href="#Geting-Started" class="headerlink" title="Geting Started"></a>Geting Started</h3><ol><li>安装</li><li>hello world</li><li>路由</li><li>处理静态资源</li></ol><p>安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save express</span><br></pre></td></tr></table></figure><p>基本路由及基本使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="comment">// 1. 调用 express 得到一个 app 实例对象</span></span><br><span class="line"><span class="comment">// 这里就好比是 http.createServer</span></span><br><span class="line"><span class="comment">// 得到的 app 就是 server</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">// 2. 添加路由，设置处理函数</span></span><br><span class="line"><span class="comment">// 当用户以 GET 请求 / 路径的时候，执行相应的回调处理函数</span></span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.send(<span class="string">'Index Page'</span>);;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 当用户以 GET 请求 /login 路径的时候，执行相应的回调处理函数</span></span><br><span class="line">app.get(<span class="string">'/login'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.send(<span class="string">'Login Page'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 处理以 POST 请求 /upload</span></span><br><span class="line">app.post(<span class="string">'/upload'</span>, (req, res) &#123; </span><br><span class="line">  res.send(<span class="string">'Upload'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 3. 绑定端口，启动服务器</span></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'server is listenning at port 3000.'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>处理静态资源：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 node_modules、public、uploads 目录开放给用户，可以直接通过绝对路径的形式访问该目录中的资源</span></span><br><span class="line"><span class="comment">// 第一个参数表示以什么标识开头，第二个参数调用 express.static('路径') 要暴力的目录的路径</span></span><br><span class="line"><span class="comment">// 注意第一个参数请求标识，所有请求标识都是以 / 开头的</span></span><br><span class="line">app.use(<span class="string">'/node_modules'</span>, express.static(<span class="string">'./node_modules/'</span>));</span><br><span class="line">app.use(<span class="string">'/public'</span>, express.static(<span class="string">'./public/'</span>));</span><br><span class="line">app.use(<span class="string">'/uploads'</span>, express.static(<span class="string">'./uploads/'</span>));</span><br></pre></td></tr></table></figure><h2 id="express-版的-相册"><a href="#express-版的-相册" class="headerlink" title="express 版的 相册"></a>express 版的 相册</h2><h3 id="views-目录下"><a href="#views-目录下" class="headerlink" title="views 目录下"></a>views 目录下</h3><p>views 目录下 index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的相册 - <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"node_modules/bootstrap/dist/css/bootstrap.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"public/css/main.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle collapsed"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#bs-example-navbar-collapse-1"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>我的相册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse"</span> <span class="attr">id</span>=<span class="string">"bs-example-navbar-collapse-1"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>首页 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">data-toggle</span>=<span class="string">"modal"</span> <span class="attr">data-target</span>=<span class="string">"#exampleModal"</span> <span class="attr">data-whatever</span>=<span class="string">"@mdo"</span>&gt;</span>新建相册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%</span> <span class="attr">albumNames.forEach</span>(<span class="attr">function</span>(<span class="attr">albumName</span>)&#123; %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-md-3"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/album?albumName=&lt;%= albumName %&gt;"</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"public/img/icon.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">albumName</span> %&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%</span> &#125;) %&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"exampleModal"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-labelledby</span>=<span class="string">"exampleModalLabel"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span> <span class="attr">role</span>=<span class="string">"document"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/album/add"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span> <span class="attr">aria-label</span>=<span class="string">"Close"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"exampleModalLabel"</span>&gt;</span>新建相册<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"recipient-name"</span> <span class="attr">class</span>=<span class="string">"control-label"</span>&gt;</span>相册名称:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"albumName"</span> <span class="attr">placeholder</span>=<span class="string">"请输入相册名称"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>点击添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/jquery/dist/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/bootstrap/dist/js/bootstrap.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>views 目录下 album.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的相册 -<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"node_modules/bootstrap/dist/css/bootstrap.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"public/css/main.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle collapsed"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#bs-example-navbar-collapse-1"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>我的相册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse"</span> <span class="attr">id</span>=<span class="string">"bs-example-navbar-collapse-1"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>首页 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">data-toggle</span>=<span class="string">"modal"</span> <span class="attr">data-target</span>=<span class="string">"#exampleModal"</span> <span class="attr">data-whatever</span>=<span class="string">"@mdo"</span>&gt;</span>照片上传<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%</span> <span class="attr">albumPaths.forEach</span>(<span class="attr">function</span> (<span class="attr">imgSrc</span>) &#123; %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-md-3"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&lt;%= imgSrc %&gt;"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">%</span> &#125;) %&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"exampleModal"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-labelledby</span>=<span class="string">"exampleModalLabel"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span> <span class="attr">role</span>=<span class="string">"document"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/upload?albumName=&lt;%= albumName %&gt;"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span> <span class="attr">aria-label</span>=<span class="string">"Close"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"exampleModalLabel"</span>&gt;</span>照片上传<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"recipient-name"</span> <span class="attr">class</span>=<span class="string">"control-label"</span>&gt;</span>请选择文件:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"pic"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>点击上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/jquery/dist/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/bootstrap/dist/js/bootstrap.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="根目录"><a href="#根目录" class="headerlink" title="根目录"></a>根目录</h3><p>config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  uploadDir: path.join(__dirname, <span class="string">'uploads'</span>),</span><br><span class="line">  viewPath : path.join(__dirname, <span class="string">'views'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./config'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 1. 创建 app 实例对象</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">// 2. 处理公共请求</span></span><br><span class="line">app</span><br><span class="line">  .use(<span class="string">'/node_modules'</span>,express.static(path.join(__dirname, <span class="string">'node_modules'</span>)))</span><br><span class="line">  .use(<span class="string">'/public'</span>,express.static(path.join(__dirname, <span class="string">'public'</span>)))</span><br><span class="line">  .use(<span class="string">'/uploads'</span>,express.static(path.join(__dirname, <span class="string">'uploads'</span>)));</span><br><span class="line"><span class="comment">// 使用 ejs 模板引擎，配置 html 后缀名</span></span><br><span class="line"><span class="comment">// 配置模板文件存放的路径，如果不设置，默认就是去当前目录下找 view 目录</span></span><br><span class="line">app.set(<span class="string">'views'</span>, config.viewPath);</span><br><span class="line">app.engine(<span class="string">'.html'</span>, <span class="built_in">require</span>(<span class="string">'ejs'</span>).__express);</span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'html'</span>);</span><br><span class="line"><span class="comment">// 3. 加载路由</span></span><br><span class="line">app.use(router);</span><br><span class="line"><span class="comment">// Express 全局处理错误中间件，把该中间件放到最后</span></span><br><span class="line"><span class="comment">// 在之前的任何中间件中，如果有错误发生，就调用 next ，将错误对象传递给 next </span></span><br><span class="line"><span class="comment">// 只要 next 有错误对象参数，该中间件就会被匹配到并执行</span></span><br><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.appendFile(<span class="string">'./log.txt'</span>, err.message, err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'写入日志失败'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 有错误发生的时候，记录错误、通知网站管理员（发邮件、发短信）</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'记录错误日志成功'</span>);</span><br><span class="line">    res.render(<span class="string">'500'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 4. 启动监听</span></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Server is running at port 3000.'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>router.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> handler = <span class="built_in">require</span>(<span class="string">'./handler'</span>);</span><br><span class="line"><span class="comment">// 1. 创建一个路由实例</span></span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br><span class="line"><span class="comment">// 2. 给路由实例对象挂载路由</span></span><br><span class="line">router</span><br><span class="line">  .get(<span class="string">'/'</span>, handler.showIndex)</span><br><span class="line">  .get(<span class="string">'/album/add'</span>, handler.doAddAlbum)</span><br><span class="line">  .get(<span class="string">'/album'</span>, handler.showAlbum)</span><br><span class="line">  .post(<span class="string">'/upload'</span>, handler.doUpload)</span><br><span class="line"><span class="comment">// 3. 暴露路由实例对象</span></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>handler.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./config'</span>);</span><br><span class="line"><span class="keyword">const</span> formidable = <span class="built_in">require</span>(<span class="string">'formidable'</span>);</span><br><span class="line">exports.showIndex = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1. 将所有的相册名称读取出来</span></span><br><span class="line">  <span class="comment">// 2. 把相册名称数据和文件中的模板字符串编译替换</span></span><br><span class="line">  <span class="comment">// 3. 发送给客户端浏览器</span></span><br><span class="line">  fs.readdir(config.uploadDir, (err, files) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="comment">// </span></span><br><span class="line">      <span class="keyword">return</span> next(err);</span><br><span class="line">    &#125;</span><br><span class="line">    res.render(<span class="string">'index'</span>, &#123;</span><br><span class="line">      albumNames: files</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">exports.doAddAlbum = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> albumName = req.query.albumName ? req.query.albumName.trim() : <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/(\\|\/|\:|\*|\?|"|\&lt;|\&gt;|\|)|^$/</span>.test(albumName)) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.end(<span class="string">'albumName param invalid error.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  fs.access(path.join(config.uploadDir, albumName), err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.end(<span class="string">'albumName already exists'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fs.mkdir(path.join(config.uploadDir, albumName), err =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> next(err);</span><br><span class="line">      &#125;</span><br><span class="line">      res.redirect(<span class="string">'/'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">exports.showAlbum = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> albumName = req.query.albumName ? req.query.albumName.trim() : <span class="string">''</span>;</span><br><span class="line">  fs.access(path.join(config.uploadDir, albumName), err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.end(<span class="string">'album not exists.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fs.readdir(path.join(config.uploadDir, albumName), (err, files) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> next(err);</span><br><span class="line">      &#125;</span><br><span class="line">      res.render(<span class="string">'album'</span>, &#123;</span><br><span class="line">        albumName: albumName,</span><br><span class="line">        albumPaths: files.map(<span class="function"><span class="params">fileName</span> =&gt;</span> <span class="string">`/uploads/<span class="subst">$&#123;albumName&#125;</span>/<span class="subst">$&#123;fileName&#125;</span>`</span>)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">exports.doUpload = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> albumName = req.query.albumName ? req.query.albumName : <span class="string">''</span>;</span><br><span class="line">  fs.access(path.join(config.uploadDir, albumName), err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.end(<span class="string">'album not exists'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> form = <span class="keyword">new</span> formidable.IncomingForm();</span><br><span class="line">    form.uploadDir = path.join(config.uploadDir, albumName);</span><br><span class="line">    form.keepExtensions = <span class="literal">true</span>;</span><br><span class="line">    form.maxFieldsSize = <span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line">    form.parse(req, (err, fields, files) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.end(<span class="string">'The default size is 10MB.'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      res.redirect(<span class="string">`/album?albumName=<span class="subst">$&#123;albumName&#125;</span>`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="路由系统模块"><a href="#路由系统模块" class="headerlink" title="路由系统模块"></a>路由系统模块</h3><p>Express 中提供了一种路由模块化的方式，具体使用形式就是可以将路由单独的放到一个模块中，然后通过 <code>app.use</code> 的形式加载路由系统。</p><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>如果把一个 <code>http</code> 处理过程比作是污水处理，中间件就像是一层层的过滤网（过滤器）。每个中间件在 <code>http</code> 处理过程中通过改写 <code>request</code>或（和）<code>response</code> 的数据、状态，实现了特定的功能。</p><p>简单说，中间件（middleware）就是处理HTTP请求的函数。它最大的特点就是，一个中间件处理完，再传递给下一个中间件。App 实例在运行过程中，会调用一系列的中间件。</p><p>中间件的功能包括：</p><ul><li>执行任何代码。</li><li>修改请求和响应对象。</li><li>终结请求-响应循环。</li><li>调用堆栈中的下一个中间件。</li></ul><h4 id="中间件函数"><a href="#中间件函数" class="headerlink" title="中间件函数"></a>中间件函数</h4><p>每个中间件可以从App实例，接收三个参数，依次为：</p><ul><li>request对象（代表HTTP请求）</li><li>response对象（代表HTTP回应）</li><li>next回调函数（代表下一个中间件）</li></ul><p>每个中间件都可以对HTTP请求（request对象）进行加工，并且决定是否调用next方法，将request对象再传给下一个中间件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exampleMiddware</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// handle req</span></span><br><span class="line">  <span class="comment">// or end res</span></span><br><span class="line">  <span class="comment">// or next()</span></span><br><span class="line">  <span class="comment">// or next(err)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="中间件常用-API"><a href="#中间件常用-API" class="headerlink" title="中间件常用 API"></a>中间件常用 API</h4><ul><li><code>app.use(handler)</code><ul><li>任何请求方法、路径都会进入该中间件，然后执行里面的代码</li></ul></li><li><code>app.use([path], handler)</code><ul><li>只有指定的请求路径，才会进入该中间件，然后执行里面的代码</li></ul></li><li><code>app.get(path, handler)</code><ul><li>只有 get 请求，并且是指定的请求路径，才会执行该中间件</li></ul></li><li><code>app.post(path, handler)</code><ul><li>只有 post 请求，并且是指定的请求路径，才会执行该中间件</li></ul></li></ul><h4 id="常用第三方中间件"><a href="#常用第三方中间件" class="headerlink" title="常用第三方中间件"></a>常用第三方中间件</h4><p><a href="http://expressjs.com/en/resources/middleware.html" target="_blank" rel="noopener">Express middleware</a></p><p>使用第三方中间件的步骤一般如下：</p><p>第一步 <code>npm install --save 中间件名称</code></p><p>第二步：看文档，找到 <code>example</code>，然后 <code>try-try-see</code></p><h4 id="Express-中的错误处理"><a href="#Express-中的错误处理" class="headerlink" title="Express 中的错误处理"></a>Express 中的错误处理</h4><p>这是从框架、代码层面的解决。</p><p>程序运行异常的解决。</p><p>如何记录错误日志</p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><h4 id="express"><a href="#express" class="headerlink" title="express()"></a>express()</h4><ul><li>express() 类似于 http.createServer，得到一个 Server 实例对象</li><li>express.static(‘公共资源目录路径’) 处理静态资源</li><li>express.Router([options])：创建路由实例对象<ul><li>得到一个 router 实例</li><li>给 router 挂载路由处理函数 get、post、</li><li>然后就可以通过 <code>app.use</code> 的形式加载这个 router 实例</li></ul></li></ul><h4 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h4><ul><li>app.locals</li><li>res.download(path [, filename] [, fn])</li><li>res.end([data] [, encoding])</li><li>res.json([body])</li><li>res.jsonp([body])</li><li>res.redirect([status,] path)</li><li>res.render(view [, locals] [, callback])</li><li>res.send([body])</li><li>res.sendFile(path [, options] [, fn])</li><li>res.sendStatus(statusCode)</li><li>res.set(field [, value])</li><li>res.status(code)</li><li>res.type(type)<ul><li>‘Content-Type’</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">// app.locals 是一个对象，可以给它挂载数据</span></span><br><span class="line"><span class="comment">// 然后就可以在后续的任何处理函数中通过 req.app.locals 来使用了</span></span><br><span class="line"><span class="comment">// 作用：可以把多个处理函数中使用到的公共的资源挂载给 app.locals 属性</span></span><br><span class="line">app.locals.name = <span class="string">'hello'</span>;</span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.app.locals.name)</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">'/download'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.download(<span class="string">'./README.md'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">'/json'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.json(&#123;</span><br><span class="line">    name: <span class="string">'jack'</span>,</span><br><span class="line">    foo: <span class="string">'bar'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h4 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h4><ul><li>router.all(path, [callback, …] callback)</li><li>router.METHOD(path, [callback, …] callback)<ul><li>get</li><li>post</li></ul></li><li>router.param([name,] callback)</li><li>router.route(path)</li><li>router.use([path], [function, …] function)</li></ul><h3 id="中间件插件-API"><a href="#中间件插件-API" class="headerlink" title="中间件插件 API"></a>中间件插件 API</h3><ul><li>安装插件</li><li>加载插件</li><li>使用插件 API</li></ul><p>关于中间件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.use(中间件处理函数)</span></span><br><span class="line"><span class="comment">// app.use('请求路径', 请求处理函数)</span></span><br><span class="line"><span class="comment">// app.get('请求路径', 请求处理函数)</span></span><br><span class="line"><span class="comment">// app.post('请求路径', 请求处理函数)</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">// 不限定于某个具体的 请求方法+请求路径</span></span><br><span class="line">app.use(<span class="string">'/a'</span>,express.static(path.join(__dirname, <span class="string">'data/a'</span>)));</span><br><span class="line">app.use(<span class="string">'/b'</span>,express.static(path.join(__dirname, <span class="string">'data/b'</span>)));</span><br><span class="line"><span class="comment">// 该中间件，任何请求都会进入该中间件</span></span><br><span class="line"><span class="comment">// 请求进入中间</span></span><br><span class="line"><span class="comment">// 记录所有的请求日志</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.appendFile(<span class="string">'./log.txt'</span>, <span class="string">`<span class="subst">$&#123;req.method&#125;</span> - <span class="subst">$&#123;req.url&#125;</span> - <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(req.query)&#125;</span></span></span><br><span class="line"><span class="string">`</span>, err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 代码执行到这里，说明日志记录成功，该中间件任务已完成，可以进入下一个中间件了</span></span><br><span class="line">    next();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 该中间件可以处理任意的 /a 请求</span></span><br><span class="line"><span class="comment">// 无论是 get 请求 /a 还是 post 请求 /a 都会进入该中间件</span></span><br><span class="line"><span class="comment">// 只要请求路径不是 /a 就不会进入该中间件</span></span><br><span class="line">app.use(<span class="string">'/a'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'进入 /a 请求处理中间件了'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">222</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.send(<span class="string">'index page'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 处理 HTTP 具体方法和路径型中间件</span></span><br><span class="line"><span class="comment">// 一般在这里结束响应之后，就不需要调用下一个中间件了</span></span><br><span class="line">app.get(<span class="string">'/login'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  res.send(<span class="string">'login page'</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 一个请求对应一个响应</span></span><br><span class="line">  <span class="comment">// 响应结束，该处理流程中就不能再次发送响应数据了，否则报错</span></span><br><span class="line">  <span class="comment">// res.send('aaa');</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'responsed end...'</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">'/login'</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'aaa login'</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h3 id="express-支持使用字符串模式的路由路径"><a href="#express-支持使用字符串模式的路由路径" class="headerlink" title="express 支持使用字符串模式的路由路径"></a>express 支持使用字符串模式的路由路径</h3><p>req.pramers 来取得路径的参数 如路径 <code>article/:5</code>, 是一个对象，里面可以获取到当前路径的参数</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将相册项目（中）继续升级，最终使用 Express 版本。&lt;/p&gt;
&lt;h2 id=&quot;封装-render-渲染函数&quot;&gt;&lt;a href=&quot;#封装-render-渲染函数&quot; class=&quot;headerlink&quot; title=&quot;封装 render 渲染函数&quot;&gt;&lt;/a&gt;封装 render 渲染函数&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;获取模板字符串中需要的数据&lt;/li&gt;
&lt;li&gt;获取模板字符串&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fs.readFile(&amp;#39;文件名&amp;#39;);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;将模板字符串中用到的数据和模板字符串通过模板引擎整合到一起&lt;ul&gt;
&lt;li&gt;&lt;code&gt;_.template(模板字符串)({数据对象});&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;发送响应&lt;ul&gt;
&lt;li&gt;&lt;code&gt;res.end(_.template(模板字符串)({数据对象}));&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;render(‘文件路径’, ‘数据对象’);&lt;br&gt;render(‘index’, ‘数据对象’);&lt;/p&gt;
    
    </summary>
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="Express" scheme="http://yoursite.com/tags/Express/"/>
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
      <category term="小项目" scheme="http://yoursite.com/tags/%E5%B0%8F%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Node-相册小项目（中）</title>
    <link href="http://yoursite.com/2017/02/18/Node-%E7%9B%B8%E5%86%8C%E5%B0%8F%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%AD%EF%BC%89/"/>
    <id>http://yoursite.com/2017/02/18/Node-相册小项目（中）/</id>
    <published>2017-02-17T16:00:00.000Z</published>
    <updated>2018-06-06T07:19:25.987Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h2><p>操作文件的路径使用注意事项：</p><ul><li>如果是以 <code>/</code> 开头的路径，则就是去执行当前脚本所属的磁盘根路径去找</li><li>如果是以 <code>C:/dev/nvm/settings.txt</code> ，则直接去找该绝对路径</li><li>如果是以 <code>./</code> 或者 <code>../</code>开头的，则是相对于执行 node 命令的时候所处的路径</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.readFile(<span class="string">'/README.md'</span>, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><p>如果使用 <code>C:\Users\mhq\Desktop&gt; node code/02_文件路径.js</code> 这样执行 node 命令：</p><p>该文件中的相对路径是去执行node命令的目录地方去找了 <code>&#39;C:\Users\mhq\Desktop\README.md</code></p><p>又如：<code>C:\Users\mhq&gt; node .\Desktop\code\02_文件路径.js</code></p><p>找了这样 <code>C:\Users\mhq\README.md</code> 的目录</p><p>想要解决上面的问题：</p><p><strong>每一个模块中都提供了两个属性：</strong> <code>__dirname</code> 和 <code>__filename</code></p><p>所以，如果是操作相对路径的文件，最好把相对路径转为绝对路径。</p><p>但是绝对路径又不能写死，可以使用每一个文件模块中都提供了两个属性：<code>__dirname</code> 和 <code>__filename</code> 。</p><ul><li><code>__dirname</code> 用来获取当前文件模块所属目录的绝对路径</li><li><code>__filename</code> 用来获取当前文件的绝对路径，这个属性用的比较少</li></ul><p>然后在执行 node 命令，不会受路径影响。</p><p><code>__dirname</code> 相对于当前所在文件，找到它的绝对路径，假如下面这段代码在 <code>02.js</code> 这个文件中，那么 <code>__dirname</code> 就是找的 <code>02.js</code> 的绝对路径。而这个 <code>README.md</code>文件是和 <code>02.js</code> 同级，如果 <code>02.js</code> 在 <code>README.md</code> 的上一级，那么只需要加上 <code>../</code> 就可以自动拼接了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line">fs.readFile(path.join(__dirname, <span class="string">'README.md'</span>), <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line">fs.readFile(path.join(__dirname, <span class="string">'README.md'</span>), <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(__dirname); <span class="comment">// =&gt; C:\Users\mhq\Desktop\code</span></span><br><span class="line"><span class="built_in">console</span>.log(__filename); <span class="comment">// =&gt; C:\Users\mhq\Desktop\code\02_文件路径.js</span></span><br><span class="line"><span class="built_in">console</span>.log(path.join(__dirname, <span class="string">'README.md'</span>)); <span class="comment">// 把相对路径变为绝对路径</span></span><br></pre></td></tr></table></figure><p><strong>注意：加载自己写的相对路径模块不受执行 node 命令所处目录影响，也就是说，加载文件模块还是使用相对路径</strong></p><h2 id="node-中使用模板引擎"><a href="#node-中使用模板引擎" class="headerlink" title="node 中使用模板引擎"></a>node 中使用模板引擎</h2><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>);</span><br><span class="line">http</span><br><span class="line">  .createServer()</span><br><span class="line">  .on(<span class="string">'request'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    router(req, res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Server is running at port 3000.'</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>router.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">const</span> handler = <span class="built_in">require</span>(<span class="string">'./handler'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = funciton(req, res) &#123;</span><br><span class="line">  <span class="keyword">const</span> urlObj = url.parse(req.url, <span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> pathname = urlObj.pathname; </span><br><span class="line">  <span class="keyword">const</span> queryObj = urlObj.query;</span><br><span class="line">  <span class="comment">// 一个请求对应了一个处理流程代码</span></span><br><span class="line">  <span class="keyword">if</span> (pathname === <span class="string">'/'</span>) &#123;</span><br><span class="line">    handler.showIndex(req, res);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname.startsWith(<span class="string">'/public/'</span>) || pathname.startsWith(<span class="string">'/uploads/'</span>) || pathname.startsWith(<span class="string">'/node_modules/'</span>)) &#123;</span><br><span class="line">    handler.showPublic(req, res);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hander.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">'underscore'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'mine'</span>)</span><br><span class="line"><span class="comment">// 处理渲染首页</span></span><br><span class="line">exports.showIndex = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.readdir(<span class="string">'./uploads'</span>, (err, files) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    fs.readFile(<span class="string">'./views/index.html'</span>, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> result = _.template(data)(</span><br><span class="line">        albumNames: files</span><br><span class="line">      );</span><br><span class="line">      res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">      &#125;);</span><br><span class="line">      res.end(result);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 处理添加相册</span></span><br><span class="line"><span class="comment">// 处理渲染相册页面</span></span><br><span class="line"><span class="comment">// 处理上传照片请求</span></span><br><span class="line"><span class="comment">// 处理静态资源请求</span></span><br><span class="line">exports.showPublic = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.readFile(<span class="string">`.<span class="subst">$&#123;req.url&#125;</span>`</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      res.writeHead(<span class="number">404</span>, <span class="string">'Not Found'</span>);</span><br><span class="line">      res.end();</span><br><span class="line">    &#125;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: mime.lookup(req.url)</span><br><span class="line">    &#125;)</span><br><span class="line">    res.end(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>./views/index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的相册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"node_modules/bootstrap/dist/css/bootstrap.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"public/css/main.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle collapsed"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#bs-example-navbar-collapse-1"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>我的相册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse"</span> <span class="attr">id</span>=<span class="string">"bs-example-navbar-collapse-1"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>首页 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">data-toggle</span>=<span class="string">"modal"</span> <span class="attr">data-target</span>=<span class="string">"#exampleModal"</span> <span class="attr">data-whatever</span>=<span class="string">"@mdo"</span>&gt;</span>新建相册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用模板引擎 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%</span> <span class="attr">albumNames.forEach</span>(<span class="attr">function</span>(<span class="attr">albumName</span>)&#123; %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-md-3"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"public/img/icon.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">albumName</span> %&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%</span> &#125;) %&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"exampleModal"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-labelledby</span>=<span class="string">"exampleModalLabel"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span> <span class="attr">role</span>=<span class="string">"document"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span> <span class="attr">aria-label</span>=<span class="string">"Close"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"exampleModalLabel"</span>&gt;</span>新建相册<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"recipient-name"</span> <span class="attr">class</span>=<span class="string">"control-label"</span>&gt;</span>相册名称:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"albumName"</span> <span class="attr">placeholder</span>=<span class="string">"请输入相册名称"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>点击添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/jquery/dist/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/bootstrap/dist/js/bootstrap.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在的问题是要使项目运行起来，不知道项目的入口文件。</p><p>如何解决？ 利用某种规则。可以写一些 npm 运行脚本。如：<code>package.json</code> 中的 <code>&quot;script&quot;</code> 。</p><p>在 “script” 下加 <code>&quot;start&quot;: &quot;node app.js&quot;</code> 。</p><p>现在启动网站直接可以使用 <code>npm start</code> 直接启动项目。其中<code>start</code> 是在终端中要执行的命令名称。</p><p>package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"album"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"node app.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"lpz &lt;mail@lipengzhou.com&gt; (http://www.lipengzhou.com/)"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"MIT"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"bootstrap"</span>: <span class="string">"^3.3.7"</span>,</span><br><span class="line">    <span class="attr">"formidable"</span>: <span class="string">"^1.0.17"</span>,</span><br><span class="line">    <span class="attr">"jquery"</span>: <span class="string">"^3.1.1"</span>,</span><br><span class="line">    <span class="attr">"mime"</span>: <span class="string">"^1.3.4"</span>,</span><br><span class="line">    <span class="attr">"underscore"</span>: <span class="string">"^1.8.3"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用模板引擎"><a href="#使用模板引擎" class="headerlink" title="使用模板引擎"></a>使用模板引擎</h2><h3 id="在浏览器中使用模板引擎"><a href="#在浏览器中使用模板引擎" class="headerlink" title="在浏览器中使用模板引擎"></a>在浏览器中使用模板引擎</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>在浏览器中使用模板引擎<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../node_modules/bootstrap/dist/css/bootstrap.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-md-3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../public/img/icon.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>相册名称<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-md-3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../public/img/icon.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h3</span>&gt;</span>相册名称<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/template"</span> <span class="attr">id</span>=<span class="string">"tpl"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    &lt;% arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123; %&gt;</span></span><br><span class="line"><span class="javascript">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-xs-6 col-md-3"</span>&gt;</span></span><br><span class="line"><span class="javascript">        &lt;a href=<span class="string">"#"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../public/img/icon.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="javascript">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"caption"</span>&gt;</span></span><br><span class="line"><span class="javascript">          &lt;h3&gt;<span class="xml"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">item</span> %&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">%</span> &#125;) %&gt;</span></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/underscore/underscore.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> arr = [<span class="string">'人文'</span>, <span class="string">'地理'</span>, <span class="string">'美女'</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> result = _.template(<span class="built_in">document</span>.getElementById(<span class="string">'tpl'</span>).innerHTML)(&#123;</span></span><br><span class="line"><span class="undefined">      arr: arr;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(result);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 1. 模板引擎和 DOM 操作没有任何关系</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2. 模板引擎并不一定操作 HTML 结构字符串</span></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在-node-中使用模板引擎"><a href="#在-node-中使用模板引擎" class="headerlink" title="在 node 中使用模板引擎"></a>在 node 中使用模板引擎</h3><p>在 node 中，模板引擎的使用方式和浏览器是一样的。</p><p>只不过模板字符串的存储方式变了，因为 <code>node</code> 中没有<code>DOM</code>，没有 <code>script</code> 标签的概念。</p><p>但是 node 支持文件操作，所以我们把模板字符串放到文件中。</p><p>使用的时候，通过 <code>fs.readFile</code> 读取出来就可以了。</p><p>.js 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">'underscore'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.readFile(<span class="string">'./tpl.mhq'</span>, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="string">'人文'</span>, <span class="string">'地理'</span>, <span class="string">'美女'</span>];</span><br><span class="line">  <span class="comment">// 键名和引用名一样，只用一个就可以表示。</span></span><br><span class="line">  <span class="keyword">const</span> result = _.template(data)(&#123;</span><br><span class="line">    arr;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>tpl.mhq</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;% arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123; %&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-xs-6 col-md-3"</span>&gt;</span><br><span class="line">  &lt;a href=<span class="string">"#"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"thumbnail"</span>&gt;</span><br><span class="line">    &lt;img src=<span class="string">"../public/img/icon.png"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">  &lt;div class="caption"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;h3&gt;&lt;%= item %&gt;&lt;/</span>h3&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;% &#125;) %&gt;</span><br></pre></td></tr></table></figure><h3 id="使用模板引擎处理别的字符串"><a href="#使用模板引擎处理别的字符串" class="headerlink" title="使用模板引擎处理别的字符串"></a>使用模板引擎处理别的字符串</h3><p>.js 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">'underscore'</span>);</span><br><span class="line"><span class="keyword">const</span> users = <span class="built_in">require</span>(<span class="string">'./data.json'</span>); </span><br><span class="line">fs.readFile(<span class="string">'./result.txt'</span>, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> result = _.template(data)(&#123;</span><br><span class="line">    users;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>data.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"jack"</span>,</span><br><span class="line">    <span class="attr">"age"</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">"gender"</span>: <span class="string">"男"</span>,</span><br><span class="line">    <span class="attr">"birthday"</span>: <span class="string">"1995-11-11"</span>,</span><br><span class="line">    <span class="attr">"hobby"</span>: [</span><br><span class="line">      <span class="string">"eat"</span>,</span><br><span class="line">      <span class="string">"sleep"</span>,</span><br><span class="line">      <span class="string">"hitDouDou"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"rose"</span>,</span><br><span class="line">    <span class="attr">"age"</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">"gender"</span>: <span class="string">"女"</span>,</span><br><span class="line">    <span class="attr">"birthday"</span>: <span class="string">"1995-11-11"</span>,</span><br><span class="line">    <span class="attr">"hobby"</span>: [</span><br><span class="line">      <span class="string">"eat"</span>,</span><br><span class="line">      <span class="string">"sleep"</span>,</span><br><span class="line">      <span class="string">"hitDouDou"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>result.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;% users.forEach(function (user) &#123; %&gt;</span><br><span class="line">姓名：&lt;%= user.name %&gt;</span><br><span class="line">年龄：&lt;%= user.age %&gt;</span><br><span class="line">性别：&lt;%= user.gender %&gt;</span><br><span class="line">生日：&lt;%= user.birthday %&gt;</span><br><span class="line">爱好：&lt;%= user.hobby.join(&apos;、&apos;) %&gt;</span><br><span class="line">-----------------------------------</span><br><span class="line">-----------------------------------</span><br><span class="line">&lt;% &#125;) %&gt;</span><br></pre></td></tr></table></figure><h2 id="处理添加相册"><a href="#处理添加相册" class="headerlink" title="处理添加相册"></a>处理添加相册</h2><p>GET</p><p><code>/album/add?albumName=xxx&amp;key=xxx</code></p><p>表单 GET 提交（表单的 method 属性默认就是 get）：</p><p>表单会将表单中所有具有 name 属性的 input 按照: <code>name=input-value&amp;name1=input-value2&amp;xxx=xxx</code>, 拼接完之后，找到自己的 <code>action</code>（就是请求路径）, 然后在 <code>action</code> 之后 加一个 ? ，后面跟上拼接好的查询字符串</p><p>最后，发起请求 <code>albumName=xxx&amp;xxx=xxx</code></p><p><code>/album/add?albumName=xxx&amp;xxx=xxx</code></p><p>appjs</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>)</span><br><span class="line">http</span><br><span class="line">  .createServer()</span><br><span class="line">  .on(<span class="string">'request'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    router(req, res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Server is running at port 3000.'</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的相册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"node_modules/bootstrap/dist/css/bootstrap.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"public/css/main.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle collapsed"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#bs-example-navbar-collapse-1"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>我的相册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse"</span> <span class="attr">id</span>=<span class="string">"bs-example-navbar-collapse-1"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>首页 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">data-toggle</span>=<span class="string">"modal"</span> <span class="attr">data-target</span>=<span class="string">"#exampleModal"</span> <span class="attr">data-whatever</span>=<span class="string">"@mdo"</span>&gt;</span>新建相册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%</span> <span class="attr">albumNames.forEach</span>(<span class="attr">function</span>(<span class="attr">albumName</span>)&#123; %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-md-3"</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 这里处理了 a 连接 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/album?albumName=&lt;%= albumName %&gt;"</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"public/img/icon.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">albumName</span> %&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%</span> &#125;) %&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"exampleModal"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-labelledby</span>=<span class="string">"exampleModalLabel"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span> <span class="attr">role</span>=<span class="string">"document"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/album/add"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span> <span class="attr">aria-label</span>=<span class="string">"Close"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"exampleModalLabel"</span>&gt;</span>新建相册<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"recipient-name"</span> <span class="attr">class</span>=<span class="string">"control-label"</span>&gt;</span>相册名称:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"albumName"</span> <span class="attr">placeholder</span>=<span class="string">"请输入相册名称"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>点击添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/jquery/dist/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/bootstrap/dist/js/bootstrap.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>album.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的相册 -<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"node_modules/bootstrap/dist/css/bootstrap.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"public/css/main.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle collapsed"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#bs-example-navbar-collapse-1"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>我的相册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse"</span> <span class="attr">id</span>=<span class="string">"bs-example-navbar-collapse-1"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>首页 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">data-toggle</span>=<span class="string">"modal"</span> <span class="attr">data-target</span>=<span class="string">"#exampleModal"</span> <span class="attr">data-whatever</span>=<span class="string">"@mdo"</span>&gt;</span>照片上传<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%</span> <span class="attr">albumPaths.forEach</span>(<span class="attr">function</span> (<span class="attr">imgSrc</span>) &#123; %&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-md-3"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&lt;%= imgSrc %&gt;"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%</span> &#125;) %&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"exampleModal"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-labelledby</span>=<span class="string">"exampleModalLabel"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span> <span class="attr">role</span>=<span class="string">"document"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/upload?albumName=&lt;%= albumName %&gt;"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span> <span class="attr">aria-label</span>=<span class="string">"Close"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"exampleModalLabel"</span>&gt;</span>照片上传<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"recipient-name"</span> <span class="attr">class</span>=<span class="string">"control-label"</span>&gt;</span>请选择文件:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"pic"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>点击上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/jquery/dist/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/bootstrap/dist/js/bootstrap.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>router.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">const</span> handler = <span class="built_in">require</span>(<span class="string">'./handler'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 指定第二个参数，parse 方法会将查询字符串解析为一个对象挂载给返回结果的 query 属性</span></span><br><span class="line">  <span class="comment">// 该方法，会将一个完整的 url 路径解析为一个对象，方便我们取各个部分的数据</span></span><br><span class="line">  <span class="keyword">const</span> urlObj = url.parse(req.url, <span class="literal">true</span>);</span><br><span class="line">  <span class="comment">// 拿到请求路径，不包含查询字符串</span></span><br><span class="line">  <span class="keyword">const</span> pathname = urlObj.pathname;</span><br><span class="line">  <span class="comment">// 拿到通过 url.parse 方法解析出来的查询字符串（已经自动转为对象了）</span></span><br><span class="line">  <span class="keyword">const</span> queryObj = urlObj.query;</span><br><span class="line">  <span class="comment">// 拿到当前请求方法</span></span><br><span class="line">  <span class="keyword">const</span> method = req.method.toLowerCase();</span><br><span class="line">  <span class="comment">// 在这里，将解析到的查询字符串以属性的形式挂载给 req 请求对象</span></span><br><span class="line">  <span class="comment">// 在后面的处理方法中就可以直接通过 req.query 来获取查询字符串中的数据了</span></span><br><span class="line">  req.query = queryObj || &#123;&#125;;</span><br><span class="line">  <span class="comment">// 302 重定向</span></span><br><span class="line">  <span class="comment">// 浏览器收到 302 状态码的时，浏览器会自动找响应报文中的 Location，然后对 Location 指向的地址发起请求</span></span><br><span class="line">  <span class="comment">// 在这里给 res 对象挂载一个 redirect 方法，在后续的处理中就可以直接使用该方法，就可以实现重定向跳转</span></span><br><span class="line">  res.redirect = <span class="function"><span class="params">url</span> =&gt;</span> &#123;</span><br><span class="line">    res.writeHead(<span class="number">302</span>, &#123;</span><br><span class="line">      <span class="string">'Location'</span>: url;</span><br><span class="line">    &#125;)</span><br><span class="line">    res.end();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 一个请求其实就是对应一个处理函数，每一个请求处理函数无非都需要用到 req 对象和 res 对象</span></span><br><span class="line">  <span class="comment">// 所以 handler 中都定义成接收 req 和 res 的一个一个的小函数，用来处理对应的请求</span></span><br><span class="line">  <span class="keyword">if</span> (pathname === <span class="string">'/'</span>) &#123;</span><br><span class="line">    handler.showIndex(req, res);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method === <span class="string">'get'</span> &amp;&amp; (pathname.startsWith(<span class="string">'/public/'</span>) || pathname.startsWith(<span class="string">'/uploads/'</span>) || pathname.startsWith(<span class="string">'/node_modules/'</span>))) &#123;</span><br><span class="line">    handler.showPublic(req, res);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method === <span class="string">'get'</span> &amp;&amp; pathname === <span class="string">'/album/add'</span>) &#123;</span><br><span class="line">    handler.doAddAlbum(req, res);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method === <span class="string">'get'</span> &amp;&amp; pathname === <span class="string">'/album'</span>) &#123;</span><br><span class="line">    handler.showAlbum(req, res);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method === <span class="string">'post'</span> &amp;&amp; pathname === <span class="string">'/upload'</span>) &#123;</span><br><span class="line">    handler.doUpload(req, res);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method === <span class="string">'get'</span> &amp;&amp; pathname === <span class="string">'/register'</span>) &#123;</span><br><span class="line">    handler.showRegister(req, res);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method === <span class="string">'post'</span> &amp;&amp; pathname === <span class="string">'/register'</span>) &#123;</span><br><span class="line">    handler.doRegister(req, res);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>handler.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">'underscore'</span>);</span><br><span class="line"><span class="keyword">const</span> mime = <span class="built_in">require</span>(<span class="string">'mime'</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./config'</span>);</span><br><span class="line"><span class="keyword">const</span> qstring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"><span class="keyword">const</span> formidable = <span class="built_in">require</span>(<span class="string">'formidable'</span>);</span><br><span class="line">exports.showIndex = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1. 将所有的相册名称读取出来</span></span><br><span class="line">  <span class="comment">// 2. 把相册名称数据和文件中的模板字符串编译替换</span></span><br><span class="line">  <span class="comment">// 3. 发送给客户端浏览器</span></span><br><span class="line">  fs.readdir(config.uploadDir, (err, files) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    fs.readFile(<span class="string">'./views/index.html'</span>, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 使用 underscore 中的 template 模板引擎在后台处理一下源数据</span></span><br><span class="line">      <span class="comment">// 这里是把 index.html 文件内容当成模板字符串了（整体）</span></span><br><span class="line">      <span class="comment">// 也就是说你在 index.html 页面可以随便使用模板引擎语法，因为后台在发送页面内容之前会对文件内容做处理</span></span><br><span class="line">      <span class="keyword">const</span> result = _.template(data)(&#123;</span><br><span class="line">        albumNames: files</span><br><span class="line">      &#125;);</span><br><span class="line">      res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">      &#125;);</span><br><span class="line">      res.end(result);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * GET /public</span></span><br><span class="line"><span class="comment"> *     /uploads</span></span><br><span class="line"><span class="comment"> *     /node_modules</span></span><br><span class="line"><span class="comment"> * 这是一个处理公共资源的请求处理方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">exports.showPublic = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 解决中文路径解析问题</span></span><br><span class="line">  <span class="keyword">const</span> url = <span class="built_in">decodeURI</span>(req.url);</span><br><span class="line">  fs.readFile(<span class="string">`.<span class="subst">$&#123;url&#125;</span>`</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      res.writeHead(<span class="number">404</span>, <span class="string">'Not Found'</span>);</span><br><span class="line">      res.end();</span><br><span class="line">    &#125;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: mime.lookup(req.url);</span><br><span class="line">    &#125;)</span><br><span class="line">    res.end(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * GET /album/add</span></span><br><span class="line"><span class="comment"> * query: &#123; albumName: 'xxx' &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">exports.doAddAlbum = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1. 接收客户端的请求数据</span></span><br><span class="line">  <span class="comment">// 2. 处理请求：创建目录</span></span><br><span class="line">  <span class="comment">// 3. 发送响应：告诉请求端，成功与否</span></span><br><span class="line">  <span class="keyword">const</span> albumName = req.query.albumName ? req.query.albumName.trim() : <span class="string">''</span>;</span><br><span class="line">  <span class="comment">// 校验添加相册名称的合法性 \/:*?"&lt;&gt;|</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/(\\|\/|\:|\*|\?|"|\&lt;|\&gt;|\|)|^$/</span>.test(albumName)) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.end(<span class="string">'albumName param invalid error.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 1. 万一 handler.js 不在项目的根路径下了</span></span><br><span class="line">  <span class="comment">// 2. 万一 上传的目录不想叫 uploads</span></span><br><span class="line">  <span class="comment">// 3. 万一 上传的路径不在 uploads 中</span></span><br><span class="line">  <span class="comment">// 由于在多个地方都会使用到 uploads 目录的路径，所以以上三种可能万一变化，就要手动全部修改</span></span><br><span class="line">  <span class="comment">// 所以这里就把可能变化并且多个地方引用的元素放到了 config.js 配置文件中</span></span><br><span class="line">  <span class="comment">// 这样的话在使用的时候，就通过 config.js 配置文件来拿</span></span><br><span class="line">  <span class="comment">// 好处就是：只要配置文件中的属性发生了变化，那么所有使用了该属性的地方都会跟着变</span></span><br><span class="line">  fs.access(path.join(config.uploadDir, albumName), err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">      <span class="comment">// 如果没有错误发生，说明该相册目录已存在</span></span><br><span class="line">      <span class="keyword">return</span> res.end(<span class="string">'albumName already exists'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fs.mkdir(path.join(config.uploadDir, albumName), err =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 跳转页面，302 重定向</span></span><br><span class="line">      <span class="comment">// 当浏览器收到 302 状态码的时候，浏览器会自动找到相应报文中的 Location</span></span><br><span class="line">      <span class="comment">// 对 Loacation 指向的地址发起请求</span></span><br><span class="line">      <span class="comment">// '/' 表示当前网站的根路径</span></span><br><span class="line">      res.writeHead(<span class="number">302</span>, &#123;</span><br><span class="line">        <span class="string">'Location'</span>: <span class="string">'/'</span></span><br><span class="line">      &#125;);</span><br><span class="line">      res.end();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * GET /album</span></span><br><span class="line"><span class="comment"> * query: &#123; albumName: 'xxx' &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 首先在 index.html 里面修改 a 标签的连接</span></span><br><span class="line">exports.showAlbum = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1. 解析接收客户端提交的数据</span></span><br><span class="line">  <span class="comment">// 2. 根据数据处理客户端请求</span></span><br><span class="line">  <span class="comment">// 3. 对处理结果发送响应</span></span><br><span class="line">  <span class="keyword">const</span> albumName = req.query.albumName ? req.query.albumName.trim() : <span class="string">''</span>;</span><br><span class="line">  fs.access(path.join(config.uploadDir, albumName), err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.end(<span class="string">'album not exists.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fs.readdir(path.join(config.uploadDir, albumName), (err, files) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      fs.readFile(path.join(config.viewPath, <span class="string">'album.html'</span>), <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> result = _.template(data)(&#123;</span><br><span class="line">          albumName: albumName,</span><br><span class="line">          albumPaths: files.map(<span class="function"><span class="params">fileName</span> =&gt;</span> <span class="string">`/uploads/<span class="subst">$&#123;albumName&#125;</span>/<span class="subst">$&#123;fileName&#125;</span>`</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: <span class="string">"text/html; charset=utf-8"</span></span><br><span class="line">        &#125;);</span><br><span class="line">        res.end(result);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * POST /upload</span></span><br><span class="line"><span class="comment"> * query &#123; albumName: 'xxx' &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">exports.doUpload = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1. 解析表单提交数据：这里使用 formidable 解析表单 post 文件提交</span></span><br><span class="line">  <span class="comment">//                      formidable 文档：album/node_modules/formidable/Readme.md</span></span><br><span class="line">  <span class="comment">// 2. 处理客户端请求</span></span><br><span class="line">  <span class="comment">// 3. 根据处理结果发送响应</span></span><br><span class="line">  <span class="keyword">const</span> albumName = req.query.albumName ? req.query.albumName : <span class="string">''</span>;</span><br><span class="line">  fs.access(path.join(config.uploadDir, albumName), err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.end(<span class="string">'album not exists'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> form = <span class="keyword">new</span> formidable.IncomingForm();</span><br><span class="line">    <span class="comment">// 自定义文件上传的路径</span></span><br><span class="line">    form.uploadDir = path.join(config.uploadDir, albumName);</span><br><span class="line">    <span class="comment">// formidable 默认会去掉扩展名，这里配置为保留文件的扩展名</span></span><br><span class="line">    form.keepExtensions = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 限制上传数据的大小，单位是字节</span></span><br><span class="line">    form.maxFieldsSize = <span class="number">10</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line">    <span class="comment">// fields 就是 formidable 解析到的普通字段数据</span></span><br><span class="line">    <span class="comment">// files 是一个一个的文件信息对象</span></span><br><span class="line">    <span class="comment">// formidable 会自动将上传的文件解析到当前操作系统的临时目录</span></span><br><span class="line">    <span class="comment">// 它会把帮你解析完并且保存的文件的路径、文件名等信息作为对象的形式挂载给 files 参数</span></span><br><span class="line">    form.parse(req, (err, fields, files) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.end(<span class="string">'The default size is 10MB.'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 封装了重定向函数</span></span><br><span class="line">      res.redirect(<span class="built_in">encodeURI</span>(<span class="string">`/album?albumName=<span class="subst">$&#123;albumName&#125;</span>`</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/* 以下关于注册的处理函数是为了演示如何使用 node 处理普通表单 POST 请求 */</span></span><br><span class="line">exports.showRegister = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.readFile(path.join(config.viewPath, <span class="string">'register.html'</span>), (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    res.end(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">exports.doRegister = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> buffers = [];</span><br><span class="line">  <span class="comment">// 监听 req 对象的 data 事件 和 end 事件</span></span><br><span class="line">  req.on(<span class="string">'data'</span>, data =&gt; &#123;</span><br><span class="line">    buffers.push(data);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 基本用不到</span></span><br><span class="line">  req.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> file = Buffer.concat(buffers);</span><br><span class="line">    fs.writeFile(<span class="string">'./a'</span>, file, err =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'writed success'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(file.length);</span><br><span class="line">    <span class="comment">// console.log(qstring.parse(body));</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  uploadDir: path.join(__dirname, <span class="string">'uploads'</span>),</span><br><span class="line">  viewPath : path.join(__dirname, <span class="string">'views'</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>处理普通表单 POST 提交（没有文件的表单）</strong></p><p>表单会将表单中的所有具有 name 的 input 中的 name 和 value 按照 <code>name=value&amp;name=value</code>，这样的形式拼接成一个查询字符串，然后将查询字符串放到请求报问体中。</p><ul><li>请求头<ul><li>请求首行</li><li>请求首部字段</li></ul></li><li>空行</li><li>请求体 <code>name=value&amp;name=value</code></li></ul><p><strong>处理有文件的表单 POST 提交</strong></p><ol><li>请求方法必须是 post</li><li>将表单的 enctype 设置为 multipart/form-data<ul><li>表单会把普通字段（不是文件，具有name的input）和文件，否放到请求报问体中。</li></ul></li></ol><p><strong>注意：这里的请求报问体中就不是查询字符串了，所以后台通过查询字符串的解析方式就解析不到了</strong></p><p>如何解析：</p><ul><li>在 Node 后台，可以使用一个第三方包：formidable 来辅助解析有文件的表单提交</li><li>使用文档可以查看：<code>album/node_modules/formidable/Readme.md</code></li></ul><p>简单登录页（仅仅用来案例演示）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户登陆<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/register"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>是否同意<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"agree"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">name</span>=<span class="string">"gender"</span>&gt;</span>男</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"0"</span> <span class="attr">name</span>=<span class="string">"gender"</span>&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span>头像<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"avatar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"点击注册"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件路径&quot;&gt;&lt;a href=&quot;#文件路径&quot; class=&quot;headerlink&quot; title=&quot;文件路径&quot;&gt;&lt;/a&gt;文件路径&lt;/h2&gt;&lt;p&gt;操作文件的路径使用注意事项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果是以 &lt;code&gt;/&lt;/code&gt; 开头的路径，则就是去执行当前脚本所属的磁盘根路径去找&lt;/li&gt;
&lt;li&gt;如果是以 &lt;code&gt;C:/dev/nvm/settings.txt&lt;/code&gt; ，则直接去找该绝对路径&lt;/li&gt;
&lt;li&gt;如果是以 &lt;code&gt;./&lt;/code&gt; 或者 &lt;code&gt;../&lt;/code&gt;开头的，则是相对于执行 node 命令的时候所处的路径&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;fs&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fs.readFile(&lt;span class=&quot;string&quot;&gt;&#39;/README.md&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;utf8&#39;&lt;/span&gt;, (err, data) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; err;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
      <category term="Underscore" scheme="http://yoursite.com/tags/Underscore/"/>
    
      <category term="小项目" scheme="http://yoursite.com/tags/%E5%B0%8F%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Node-相册小项目（上）</title>
    <link href="http://yoursite.com/2017/01/26/Node-%E7%9B%B8%E5%86%8C%E5%B0%8F%E9%A1%B9%E7%9B%AE%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>http://yoursite.com/2017/01/26/Node-相册小项目（上）/</id>
    <published>2017-01-25T16:00:00.000Z</published>
    <updated>2018-06-06T07:00:50.310Z</updated>
    
    <content type="html"><![CDATA[<p>完成相册新建、上传图片等简单的功能小项目。</p><h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><ol><li>把前端用到的静态资源放到 <code>public</code> 目录下</li><li>把所有的页面都放到 <code>views</code> 目录下</li><li>在项目根路径下创建一个 <code>app.js</code> 作为后台的启动入口</li><li>使用 npm 安装和管理项目的依赖项</li><li>将所有的相册放到项目根路径下的 <code>uploads</code>目录小</li></ol><h2 id="划分哪些资源公共开放"><a href="#划分哪些资源公共开放" class="headerlink" title="划分哪些资源公共开放"></a>划分哪些资源公共开放</h2><a id="more"></a><ul><li>public<ul><li>css</li><li>js</li><li>img</li></ul></li><li>uploads</li><li>node_modules</li></ul><h2 id="设计路由"><a href="#设计路由" class="headerlink" title="设计路由"></a>设计路由</h2><table><thead><tr><th>请求方法</th><th style="text-align:right">请求路径</th><th style="text-align:center">响应处理</th></tr></thead><tbody><tr><td>GET</td><td style="text-align:right">/</td><td style="text-align:center">views/index.html</td></tr><tr><td>GET</td><td style="text-align:right">/album</td><td style="text-align:center">views/album.html</td></tr><tr><td>GET</td><td style="text-align:right">/album/add</td><td style="text-align:center">处理添加相册请求</td></tr><tr><td>POST</td><td style="text-align:right">/upload</td><td style="text-align:center">处理照片上传请求</td></tr></tbody></table><h2 id="处理相册静态资源"><a href="#处理相册静态资源" class="headerlink" title="处理相册静态资源"></a>处理相册静态资源</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">const</span> mime = <span class="built_in">require</span>(<span class="string">'mime'</span>);</span><br><span class="line">http</span><br><span class="line">  .createServer()</span><br><span class="line">  .on(<span class="string">'request'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 指定第二个参数，parse 方法会将查询字符串解析为一个对象挂载给返回结果的 query 属性</span></span><br><span class="line">    <span class="comment">// 该方法，会将一个完整的 url 路径解析为一个对象，方便我们取各个部分的数据</span></span><br><span class="line">    <span class="keyword">const</span> urlObj = url.parse(req.url, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">const</span> pathname = urlObj.pathname; <span class="comment">// 拿到请求路径，不包含查询字符串</span></span><br><span class="line">    <span class="keyword">const</span> queryObj = urlObj.query; <span class="comment">// 拿到通过 url.parse 方法解析出来的查询字符串（已经自动转为对象了）</span></span><br><span class="line">    <span class="keyword">if</span> (pathname === <span class="string">'/'</span>) &#123;</span><br><span class="line">      fs.readFile(<span class="string">'./views/index.html'</span>, (err, data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        res.end(data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname.startsWith(<span class="string">'/public/'</span>) || pathname.startsWith(<span class="string">'/uploads/'</span>) || pathname.startsWith(<span class="string">'/node_modules/'</span>)) &#123;</span><br><span class="line">      fs.readFile(<span class="string">`.<span class="subst">$&#123;pathname&#125;</span>`</span>, (err, data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          res.writeHead(<span class="number">404</span>, <span class="string">'Not Found'</span>);</span><br><span class="line">          res.end();</span><br><span class="line">        &#125;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: mime.lookup(pathname)</span><br><span class="line">        &#125;)</span><br><span class="line">        res.end(data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Server is running at port 3000.'</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="路由：根据不同的请求路径做处理。"><a href="#路由：根据不同的请求路径做处理。" class="headerlink" title="路由：根据不同的请求路径做处理。"></a>路由：根据不同的请求路径做处理。</h2><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>);</span><br><span class="line">http</span><br><span class="line">  .createServer()</span><br><span class="line">  .on(<span class="string">'request'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    router(req, res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Server is running at port 3000.'</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>提取的路由模块</p><p>router.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">const</span> mime = <span class="built_in">require</span>(<span class="string">'mime'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = funciton(req, res) &#123;</span><br><span class="line">  <span class="keyword">const</span> urlObj = url.parse(req.url, <span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> pathname = urlObj.pathname; </span><br><span class="line">  <span class="keyword">const</span> queryObj = urlObj.query;</span><br><span class="line">  <span class="comment">// 一个请求对应了一个处理流程代码</span></span><br><span class="line">  <span class="keyword">if</span> (pathname === <span class="string">'/'</span>) &#123;</span><br><span class="line">    fs.readFile(<span class="string">'./views/index.html'</span>, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">      &#125;);</span><br><span class="line">      res.end(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname.startsWith(<span class="string">'/public/'</span>) || pathname.startsWith(<span class="string">'/uploads/'</span>) || pathname.startsWith(<span class="string">'/node_modules/'</span>)) &#123;</span><br><span class="line">    fs.readFile(<span class="string">`.<span class="subst">$&#123;pathname&#125;</span>`</span>, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        res.writeHead(<span class="number">404</span>, <span class="string">'Not Found'</span>);</span><br><span class="line">        res.end();</span><br><span class="line">      &#125;</span><br><span class="line">      res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: mime.lookup(pathname)</span><br><span class="line">      &#125;)</span><br><span class="line">      res.end(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="再次封装处理请求的代码-处理模块，暴漏一系列的方法"><a href="#再次封装处理请求的代码-处理模块，暴漏一系列的方法" class="headerlink" title="再次封装处理请求的代码, 处理模块，暴漏一系列的方法"></a>再次封装处理请求的代码, 处理模块，暴漏一系列的方法</h2><p>router.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">const</span> mime = <span class="built_in">require</span>(<span class="string">'mime'</span>);</span><br><span class="line"><span class="keyword">const</span> handler = <span class="built_in">require</span>(<span class="string">'./handler'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = funciton(req, res) &#123;</span><br><span class="line">  <span class="keyword">const</span> urlObj = url.parse(req.url, <span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> pathname = urlObj.pathname; </span><br><span class="line">  <span class="keyword">const</span> queryObj = urlObj.query;</span><br><span class="line">  <span class="comment">// 一个请求对应了一个处理流程代码</span></span><br><span class="line">  <span class="keyword">if</span> (pathname === <span class="string">'/'</span>) &#123;</span><br><span class="line">    handler.showIndex(req, res);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname.startsWith(<span class="string">'/public/'</span>) || pathname.startsWith(<span class="string">'/uploads/'</span>) || pathname.startsWith(<span class="string">'/node_modules/'</span>)) &#123;</span><br><span class="line">    handler.showPublic(req, res);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hander.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 处理渲染首页</span></span><br><span class="line">exports.showIndex = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.readFile(<span class="string">'./views/index.html'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.end(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 处理添加相册</span></span><br><span class="line"><span class="comment">// 处理渲染相册页面</span></span><br><span class="line"><span class="comment">// 处理上传照片请求</span></span><br><span class="line"><span class="comment">// 处理静态资源请求</span></span><br><span class="line">exports.showPublic = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.readFile(<span class="string">`.<span class="subst">$&#123;req.url&#125;</span>`</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      res.writeHead(<span class="number">404</span>, <span class="string">'Not Found'</span>);</span><br><span class="line">      res.end();</span><br><span class="line">    &#125;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: mime.lookup(req.url)</span><br><span class="line">    &#125;)</span><br><span class="line">    res.end(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>模块清晰-职责单一</p><p>客户端 -&gt; app.js (1.启动服务器; 2. 将请求传递到 router 模块中) -&gt; router.js 路由模块 (根据不同的请求路径调用不同的处理函数) -&gt; handler.js 请求处理函数</p><h2 id="使用模板引擎"><a href="#使用模板引擎" class="headerlink" title="使用模板引擎"></a>使用模板引擎</h2><p>template.js （先看有关 underscore 模板的使用的小例子）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">'underscore'</span>);</span><br><span class="line"><span class="comment">// 1. 将模板字符串传递给 _.template 方法</span></span><br><span class="line"><span class="comment">//    该方法返回一个编译函数</span></span><br><span class="line"><span class="comment">// 2. 调用编译函数，传入要注入的数据对象</span></span><br><span class="line"><span class="keyword">const</span> complied = _.template(<span class="string">`hello &lt;%= name %&gt;</span></span><br><span class="line"><span class="string">&lt;ul&gt; </span></span><br><span class="line"><span class="string">  &lt;% fruits.forEach(function (fruit))&#123; %&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;&lt;%= fruit %&gt;&lt;li&gt;</span></span><br><span class="line"><span class="string">  &lt;% &#125;) %&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(complied(&#123;</span><br><span class="line">  name: <span class="string">"Hiraku"</span>,</span><br><span class="line">  fruits: [</span><br><span class="line">    <span class="string">'栗子'</span>,</span><br><span class="line">    <span class="string">'苹果'</span>,</span><br><span class="line">    <span class="string">'橙子'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>现在将模板字符串利用读文件的方式读出来。(tpt.html)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">fruits.forEach</span>(<span class="attr">function</span> (<span class="attr">fruit</span>))&#123; %&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">fruit</span> %&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> &#125;) %&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在可以这样写 template.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">'underscore'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.readFile(<span class="string">'./tpl.html'</span>, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> complied = _.template(data);</span><br><span class="line">  <span class="built_in">console</span>.log(complied(&#123;</span><br><span class="line">    fruits: [</span><br><span class="line">      <span class="string">'栗子'</span>,</span><br><span class="line">      <span class="string">'苹果'</span>,</span><br><span class="line">      <span class="string">'橙子'</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="完成首页渲染相册表功能"><a href="#完成首页渲染相册表功能" class="headerlink" title="完成首页渲染相册表功能"></a>完成首页渲染相册表功能</h2><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'./router'</span>);</span><br><span class="line">http</span><br><span class="line">  .createServer()</span><br><span class="line">  .on(<span class="string">'request'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    router(req, res);</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Server is running at port 3000.'</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>hander.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">'underscore'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'mine'</span>)</span><br><span class="line"><span class="comment">// 处理渲染首页</span></span><br><span class="line">exports.showIndex = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.readdir(<span class="string">'./uploads'</span>, (err, files) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    fs.readFile(<span class="string">'./views/index.html'</span>, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> result = _.template(data)(</span><br><span class="line">        albumNames: files</span><br><span class="line">      );</span><br><span class="line">      res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">      &#125;);</span><br><span class="line">      res.end(result);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 处理添加相册</span></span><br><span class="line"><span class="comment">// 处理渲染相册页面</span></span><br><span class="line"><span class="comment">// 处理上传照片请求</span></span><br><span class="line"><span class="comment">// 处理静态资源请求</span></span><br><span class="line">exports.showPublic = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.readFile(<span class="string">`.<span class="subst">$&#123;req.url&#125;</span>`</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      res.writeHead(<span class="number">404</span>, <span class="string">'Not Found'</span>);</span><br><span class="line">      res.end();</span><br><span class="line">    &#125;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: mime.lookup(req.url)</span><br><span class="line">    &#125;)</span><br><span class="line">    res.end(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>router.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">const</span> handler = <span class="built_in">require</span>(<span class="string">'./handler'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = funciton(req, res) &#123;</span><br><span class="line">  <span class="keyword">const</span> urlObj = url.parse(req.url, <span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> pathname = urlObj.pathname; </span><br><span class="line">  <span class="keyword">const</span> queryObj = urlObj.query;</span><br><span class="line">  <span class="comment">// 一个请求对应了一个处理流程代码</span></span><br><span class="line">  <span class="keyword">if</span> (pathname === <span class="string">'/'</span>) &#123;</span><br><span class="line">    handler.showIndex(req, res);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pathname.startsWith(<span class="string">'/public/'</span>) || pathname.startsWith(<span class="string">'/uploads/'</span>) || pathname.startsWith(<span class="string">'/node_modules/'</span>)) &#123;</span><br><span class="line">    handler.showPublic(req, res);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>./views/index.html</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;我的相册&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;link rel="stylesheet" href="node_modules/</span>bootstrap/dist/css/bootstrap.css<span class="string">"&gt;</span></span><br><span class="line"><span class="string">  &lt;link rel="</span>stylesheet<span class="string">" href="</span>public/css/main.css<span class="string">"&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">  &lt;div class="</span>container-fluid<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    &lt;nav class="</span>navbar navbar-<span class="keyword">default</span><span class="string">"&gt;</span></span><br><span class="line"><span class="string">      &lt;div class="</span>container-fluid<span class="string">"&gt;</span></span><br><span class="line"><span class="string">        &lt;div class="</span>navbar-header<span class="string">"&gt;</span></span><br><span class="line">          &lt;button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false"&gt;</span><br><span class="line">            &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"sr-only"</span>&gt;Toggle navigation&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">            &lt;span class="icon-bar"&gt;&lt;/</span>span&gt;</span><br><span class="line">            &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"icon-bar"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">            &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"icon-bar"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">          &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">          &lt;a class="navbar-brand" href="/</span><span class="string">"&gt;我的相册&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div class="</span>collapse navbar-collapse<span class="string">" id="</span>bs-example-navbar-collapse<span class="number">-1</span><span class="string">"&gt;</span></span><br><span class="line"><span class="string">          &lt;ul class="</span>nav navbar-nav<span class="string">"&gt;</span></span><br><span class="line"><span class="string">            &lt;li class="</span>active<span class="string">"&gt;&lt;a href="</span>/<span class="string">"&gt;首页 &lt;span class="</span>sr-only<span class="string">"&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">          &lt;/ul&gt;</span></span><br><span class="line"><span class="string">          &lt;ul class="</span>nav navbar-nav navbar-right<span class="string">"&gt;</span></span><br><span class="line"><span class="string">            &lt;li&gt;</span></span><br><span class="line">              &lt;a href="" data-toggle="modal" data-target="#exampleModal" data-whatever="@mdo"&gt;新建相册&lt;/a&gt;</span><br><span class="line">            &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/u</span>l&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/nav&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;!-- 使用模板引擎 --&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"row"</span>&gt;</span><br><span class="line">      &lt;% albumNames.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">albumName</span>)</span>&#123; %&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-xs-6 col-md-3"</span>&gt;</span><br><span class="line">          &lt;a href=<span class="string">"#"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"thumbnail"</span>&gt;</span><br><span class="line">            &lt;img src=<span class="string">"public/img/icon.png"</span> alt=<span class="string">""</span>&gt;</span><br><span class="line">          &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">          &lt;div class="caption"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;h3&gt;&lt;%= albumName %&gt;&lt;/</span>h3&gt;</span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">      &lt;% &#125;) %&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal fade"</span> id=<span class="string">"exampleModal"</span> tabindex=<span class="string">"-1"</span> role=<span class="string">"dialog"</span> aria-labelledby=<span class="string">"exampleModalLabel"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-dialog"</span> role=<span class="string">"document"</span>&gt;</span><br><span class="line">      &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-content"</span>&gt;</span><br><span class="line">        &lt;form action=<span class="string">"/"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">          &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-header"</span>&gt;</span><br><span class="line">            &lt;button type=<span class="string">"button"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"close"</span> data-dismiss=<span class="string">"modal"</span> aria-label=<span class="string">"Close"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">            &lt;h4 <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-title"</span> id=<span class="string">"exampleModalLabel"</span>&gt;新建相册&lt;<span class="regexp">/h4&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>div&gt;</span><br><span class="line">          &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-body"</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">              &lt;label <span class="keyword">for</span>=<span class="string">"recipient-name"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"control-label"</span>&gt;相册名称:<span class="xml"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line">              &lt;input type=<span class="string">"text"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-control"</span> name=<span class="string">"albumName"</span> placeholder=<span class="string">"请输入相册名称"</span>&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>div&gt;</span><br><span class="line">          &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"modal-footer"</span>&gt;</span><br><span class="line">            &lt;button type=<span class="string">"button"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"btn btn-default"</span> data-dismiss=<span class="string">"modal"</span>&gt;关闭&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;button type="submit" class="btn btn-success"&gt;点击添加&lt;/</span>button&gt;</span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>form&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script src="node_modules/</span>jquery/dist/jquery.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  &lt;script src="</span>node_modules/bootstrap/dist/js/bootstrap.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h2 id="请求处理模块调用流程图"><a href="#请求处理模块调用流程图" class="headerlink" title="请求处理模块调用流程图"></a>请求处理模块调用流程图</h2><p><img src="/images/请求处理模块调用流程图.png" alt="请求处理模块调用流程图"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;完成相册新建、上传图片等简单的功能小项目。&lt;/p&gt;
&lt;h2 id=&quot;项目初始化&quot;&gt;&lt;a href=&quot;#项目初始化&quot; class=&quot;headerlink&quot; title=&quot;项目初始化&quot;&gt;&lt;/a&gt;项目初始化&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;把前端用到的静态资源放到 &lt;code&gt;public&lt;/code&gt; 目录下&lt;/li&gt;
&lt;li&gt;把所有的页面都放到 &lt;code&gt;views&lt;/code&gt; 目录下&lt;/li&gt;
&lt;li&gt;在项目根路径下创建一个 &lt;code&gt;app.js&lt;/code&gt; 作为后台的启动入口&lt;/li&gt;
&lt;li&gt;使用 npm 安装和管理项目的依赖项&lt;/li&gt;
&lt;li&gt;将所有的相册放到项目根路径下的 &lt;code&gt;uploads&lt;/code&gt;目录小&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;划分哪些资源公共开放&quot;&gt;&lt;a href=&quot;#划分哪些资源公共开放&quot; class=&quot;headerlink&quot; title=&quot;划分哪些资源公共开放&quot;&gt;&lt;/a&gt;划分哪些资源公共开放&lt;/h2&gt;
    
    </summary>
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
      <category term="Underscore" scheme="http://yoursite.com/tags/Underscore/"/>
    
      <category term="mine" scheme="http://yoursite.com/tags/mine/"/>
    
      <category term="小项目" scheme="http://yoursite.com/tags/%E5%B0%8F%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Node-http-网站</title>
    <link href="http://yoursite.com/2017/01/16/Node-http-%E7%BD%91%E7%AB%99/"/>
    <id>http://yoursite.com/2017/01/16/Node-http-网站/</id>
    <published>2017-01-15T16:00:00.000Z</published>
    <updated>2018-06-06T05:45:36.616Z</updated>
    
    <content type="html"><![CDATA[<p>超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议</p><p>接收请求<br>处理请求<br>发送响应<br>net 为什么不能处理浏览器的响应呢？</p><p>http 模块和 net 模块之间的区别</p><a id="more"></a><h2 id="http-模块的简单使用"><a href="#http-模块的简单使用" class="headerlink" title="http 模块的简单使用"></a>http 模块的简单使用</h2><p>(1). 创建服务器，得到一个 Server 实例对象</p><ul><li>任何请求都会触发该 request 请求事件，然后执行事件处理函数</li><li>也就是说所有的请求入口就是这个 request 事件</li><li>如何区分不同的请求<ul><li>每个请求有请求报文: 请求头、请求路径、请求方法等信息</li></ul></li><li>Node 将每一个请求中的请求报文信息解析为一个对象：Request ，挂载给请求处理函数的第一个参数<ul><li>也就是说可以通过 Request 请求对象拿到一些请求报文信息，例如请求方法、请求路径、请求头部字段等信息</li></ul></li><li>同时，Node 还提供了一个接口对象：Response<ul><li>该对象可以用来给当前请求发送响应数据<br>(2). 监听服务器 Server 对象的 Request 请求事件，设置请求处理函数</li></ul></li></ul><p>(3). 绑定监听端口，启动服务器，设置启动成功之后的回调处理函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 http 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="comment">// 创建 http 服务器</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(); </span><br><span class="line"><span class="comment">// 监听 request 事件</span></span><br><span class="line">server.on(<span class="string">'request'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.end(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 开启服务端口</span></span><br><span class="line">server.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Server is running at port 3000.'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="对不同的请求发送不同的响应"><a href="#对不同的请求发送不同的响应" class="headerlink" title="对不同的请求发送不同的响应"></a>对不同的请求发送不同的响应</h2><ul><li>当用户访问 <code>&#39;/&#39;</code> 的时候，返回 index page</li><li>当用户访问 <code>&#39;/add&#39;</code> 的时候，返回 add page</li><li>当用户访问 <code>&#39;/about&#39;</code> 的时候，返回 about page</li><li>当用户访问 <code>&#39;/xxx&#39;</code> 的时候，返回 404</li></ul><p>(1). 获取当前的请求路径（通过 Request 请求对象的 url 属性获取）</p><p><strong>这里的请求路径永远都是以 <code>/</code> 开头的</strong></p><p>例如你在浏览器地址中输入的是:</p><ul><li><code>http://127.0.0.1:3000</code> 则 url 就是 /</li><li><code>http://127.0.0.1:3000/</code> 则 url 就是 /</li><li><code>http://127.0.0.1:3000/add</code> 则 url 就是 /add</li></ul><p>(2). 发送响应</p><p>2.1 请求之后，可以使用 res.write 方法发送响应</p><p>2.2 注意：res.write 可以向响应流中多次发送数据，</p><ul><li>但是一定要在写完响应流数据之后调用 <code>res.end()</code> 方法结束响应。</li><li>否则客户端浏览器还认为你的数据没有发送完毕，一直等待接收。</li></ul><p>2.3 一般发送响应数据的时候，很少有这种需要多次调用 write 方法来发送的数据</p><ul><li>就是说一般就是 <code>res.write(&#39;响应数据&#39;)</code>, <code>res.end()</code> 结束响应</li><li>所以，可以使用 <code>res.end(&#39;响应数据&#39;)</code> 直接发送响应数据，同时结束响应</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> server = http.createServer();</span><br><span class="line">server.on(<span class="string">'request'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> url = req.url;   </span><br><span class="line">  <span class="comment">// res.write(url);  </span></span><br><span class="line">  <span class="comment">// res.end();</span></span><br><span class="line">  res.end(url);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Server is running at port 3000...'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="根据不同请求响应不同内容"><a href="#根据不同请求响应不同内容" class="headerlink" title="根据不同请求响应不同内容"></a>根据不同请求响应不同内容</h2><p>因此，可以这样来判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> server = http.createServer();</span><br><span class="line">server.on(<span class="string">'request'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> url = req.url;   </span><br><span class="line">  <span class="keyword">if</span> (url === <span class="string">'/'</span>) &#123;</span><br><span class="line">    res.end(<span class="string">'&lt;h1&gt;index page&lt;/h1&gt;'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">'/add'</span>) &#123;</span><br><span class="line">    res.end(<span class="string">'&lt;h1&gt;add page&lt;/h1&gt;'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">'/about'</span>) &#123;</span><br><span class="line">    res.end(<span class="string">'about page'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.end(<span class="string">'404 Not Found.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Server is running at port 3000...'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="处理页面中的静态资源"><a href="#处理页面中的静态资源" class="headerlink" title="处理页面中的静态资源"></a>处理页面中的静态资源</h2><p>上面这段代码表示可以解析 html 字符串，那也可以响应页面。</p><p>如果要处理一些读取出来的 html 字符串，那读文件的时候就指定编码或者调用 data.toString() 方法转为字符。</p><ul><li>这里因为不处理字符串，所以就不转字符</li><li><code>res.end()</code> 只能接收 二进制数据或者 字符串，其它都报错</li><li>如果传递的字符串，则发送响应的时候，还会自动将字符串转为二进制再发送</li><li>如果直接就传递的是二进制数据，则直接发送</li></ul><blockquote><p>当客户端浏览器收到发送的响应数据的时：</p></blockquote><ul><li>浏览器会先查看响应报文头中的 <code>Content-Type</code> 中的 <code>charset</code> 编码，然后根据该编码解析数据</li><li>如果响应报文头中没有 <code>Content-Type</code> 那么浏览器则根据 HTML 结构中的 <code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code> 来解析数据</li><li>可以通过 <code>res.writeHead</code> 方法在结束响应之前，写响应头</li><li>查询网址：<a href="http://tool.oschina.net/commons" target="_blank" rel="noopener">http://tool.oschina.net/commons</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> server = http.createServer();</span><br><span class="line">server.on(<span class="string">'request'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> url = req.url;   </span><br><span class="line">  <span class="keyword">if</span> (url === <span class="string">'/'</span>) &#123;</span><br><span class="line">    fs.readFile(<span class="string">'.data/index.html'</span>, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 在结束响应之前，写响应头，指定charset 编码</span></span><br><span class="line">    res.writeHead(<span class="number">202</span>, <span class="string">'OK'</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.end(data);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">'/add'</span>) &#123;</span><br><span class="line">    fs.readFile(<span class="string">'.data/add.html'</span>, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    res.writeHead(<span class="number">202</span>, <span class="string">'OK'</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.end(data);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">'/about'</span>) &#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, <span class="string">'OK'</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/plain; charset=utf-8'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    res.end(<span class="string">'about page'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fs.readFile(<span class="string">'.data/404.html'</span>, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    res.writeHead(<span class="number">404</span>, <span class="string">'Not Found'</span>, &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    res.end(data);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Server is running at port 3000...'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="处理页面中的动态资源和静态资源"><a href="#处理页面中的动态资源和静态资源" class="headerlink" title="处理页面中的动态资源和静态资源"></a>处理页面中的动态资源和静态资源</h2><p>同一个页面中有多个外链，不是指 a 标签。</p><p>当浏览器获取到当前响应的 HTML 格式字符串之后，浏览器从上到下依次解析字符串（HTML 结构文档）。</p><p>在解析的过程中，如果发现有 link img script iframe 等具有 src 或 href 的标签：a 标签和他们不一样，a 标签是用来跳转的，资源在另一个页面。则，浏览器主动对该资源指向的地址发起请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line">http</span><br><span class="line">  .createServer()</span><br><span class="line">  .on(<span class="string">'request'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> url = req.url;</span><br><span class="line">    <span class="keyword">if</span> (url === <span class="string">'/'</span>) &#123;</span><br><span class="line">      fs.readFile(<span class="string">'./data/static/index.html'</span>, (err, data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        res.end(data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">'/css/main.css'</span>) &#123;</span><br><span class="line">      fs.readFile(<span class="string">'./data/static/css/main.css'</span>, (err, data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: <span class="string">'text/css; charset=utf-8'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        res.end(data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">'/img/96102-106.jpg'</span>) &#123;</span><br><span class="line">      fs.readFile(<span class="string">'./data/static/img/96102-106.jpg'</span>, (err, data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: <span class="string">'image/jpeg'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        res.end(data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">'/js/main.js'</span>) &#123;</span><br><span class="line">      fs.readFile(<span class="string">'./data/static/js/main.js'</span>, (err, data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: <span class="string">'application/x-javascript; charset=utf-8'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        res.end(data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Server is running at port 3000.'</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>index.html 文档内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- src: ./data/static/index.html --&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;!-- http://127.0.0.1:3000/css/main.css --&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;css/main.css&quot;&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;css/a.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;h1&gt;首页&lt;/h1&gt;</span><br><span class="line">  &lt;!-- http://127.0.0.1:3000/img/96102-106.jpg --&gt;</span><br><span class="line">  &lt;img src=&quot;img/96102-106.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">  &lt;!-- http://127.0.0.1:3000/js/main.js --&gt;</span><br><span class="line">  &lt;script src=&quot;js/main.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="解决静态资源的-mime-类型"><a href="#解决静态资源的-mime-类型" class="headerlink" title="解决静态资源的 mime 类型"></a>解决静态资源的 mime 类型</h2><ul><li>‘Content-Type’: mime.lookup(url);</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> mime = <span class="built_in">require</span>(<span class="string">'mime'</span>);</span><br><span class="line">http</span><br><span class="line">  .createServer()</span><br><span class="line">  .on(<span class="string">'request'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    <span class="comment">// /  index.html</span></span><br><span class="line">    <span class="comment">// /add add.html</span></span><br><span class="line">    <span class="comment">// /404 404.html</span></span><br><span class="line">    <span class="comment">// http://127.0.0.1:3000/public/css/main.css</span></span><br><span class="line">    <span class="comment">// http://127.0.0.1:3000/public/js/main.js</span></span><br><span class="line">    <span class="keyword">const</span> url = req.url</span><br><span class="line">    <span class="keyword">if</span> (url === <span class="string">'/'</span>) &#123;</span><br><span class="line">      fs.readFile(<span class="string">'./views/index.html'</span>, (err, data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        res.end(data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url.startsWith(<span class="string">'/public/'</span>)) &#123;</span><br><span class="line">      <span class="comment">// /public/css/main.css</span></span><br><span class="line">      <span class="comment">// /public/js/main.js</span></span><br><span class="line">      fs.readFile(<span class="string">`.<span class="subst">$&#123;url&#125;</span>`</span>, (err, data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Content-Type ？</span></span><br><span class="line">        <span class="comment">// 无论是任何资源，都最好要有 Content-Type</span></span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: mime.lookup(url);</span><br><span class="line">        &#125;);</span><br><span class="line">        res.end(data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">'/add'</span>) &#123;</span><br><span class="line">      fs.readFile(<span class="string">'./views/add.html'</span>, (err, data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        res.end(data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fs.readFile(<span class="string">'./views/404.html'</span>, (err, data) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: <span class="string">'text/html; charset=utf-8'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        res.end(data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Server is running at port 3000.'</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ul><li>./views/index.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"public/css/main.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"public/css/a.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"public/js/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="http-和-net-的区别与联系"><a href="#http-和-net-的区别与联系" class="headerlink" title="http 和 net 的区别与联系"></a>http 和 net 的区别与联系</h2><p>解释浏览器和服务器的交互本质：</p><ul><li>本质上就是浏览器通过 Socket 和 服务器 Socket 进行通信</li><li>双方都通过 HTTP 协议进行交流</li><li>net 模块就是传输层的一个模块，只是为了纯粹的收发数据</li><li>http 模块构建与 net 模块之上，只不过对于收发的数据会进行解析和包装</li><li>所有的BS模型都是使用的 HTTP 协议进行数据的解析和包装</li></ul><p>一下代码仅仅用来说明 net 和 HTTP 之间的联系与区别，没有实际应用意义。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line">net</span><br><span class="line">  .createServer();</span><br><span class="line">  .on(<span class="string">'connection'</span>, socket =&gt; &#123;</span><br><span class="line">    socket.on(<span class="string">'data'</span>, data =&gt; &#123;</span><br><span class="line">      <span class="comment">// console.log(data.toString())</span></span><br><span class="line">      <span class="comment">// 自己动手解析请求报文</span></span><br><span class="line">      <span class="comment">// 1. 按照空行将请求体和请求报文分割</span></span><br><span class="line">      <span class="comment">// 2. 按照换行将请求头分割</span></span><br><span class="line">      <span class="comment">//    数组中第 0 项就是请求首行</span></span><br><span class="line">      <span class="comment">//    其它所有项都是请求首部字段</span></span><br><span class="line">      <span class="built_in">console</span>.log(socket.remoteAddress, socket.remotePort);</span><br><span class="line">      data = data.toString();</span><br><span class="line">      <span class="keyword">const</span> requestContext = data.split(<span class="string">'\r\n\r\n'</span>);</span><br><span class="line">      <span class="keyword">const</span> requestHead = requestContext[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">const</span> requestBody = requestContext[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">const</span> req = &#123;&#125;;</span><br><span class="line">      <span class="comment">// url method httpVersion</span></span><br><span class="line">      <span class="comment">// headers</span></span><br><span class="line">      <span class="comment">// &#123; key: value, key:value &#125; 给在给 req 对象的 headers</span></span><br><span class="line">      <span class="keyword">const</span> requestHeadFirst = requestHead.split(<span class="string">'\r\n'</span>)[<span class="number">0</span>].split(<span class="string">' '</span>);</span><br><span class="line">      req.method = requestHeadFirst[<span class="number">0</span>];</span><br><span class="line">      req.url = requestHeadFirst[<span class="number">1</span>];</span><br><span class="line">      req.httpVersion = requestHeadFirst[<span class="number">2</span>];</span><br><span class="line">      req.headers = &#123;&#125;;</span><br><span class="line">      <span class="keyword">const</span> requestHeadFileds = requestHead.split(<span class="string">'\r\n'</span>).slice(<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> requestHeadFileds) &#123;</span><br><span class="line">        <span class="keyword">const</span> tmp = item.split(<span class="string">': '</span>);</span><br><span class="line">        req.headers[tmp[<span class="number">0</span>]] = tmp[<span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// net 模块中发送数据只是纯粹的发送你传入的字符串，有一行空白行。</span></span><br><span class="line">      socket.write(<span class="string">`</span></span><br><span class="line"><span class="string">HTTP/1.1 200 OK</span></span><br><span class="line"><span class="string">Server: Itcast</span></span><br><span class="line"><span class="string">Connection: keep-alive</span></span><br><span class="line"><span class="string">foo: bar</span></span><br><span class="line"><span class="string">Content-Type: text/html; charset=utf-8</span></span><br><span class="line"><span class="string">&lt;h1&gt;hello world&lt;/h1&gt;`</span>);</span><br><span class="line">      socket.end();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'server is running at port 3000.'</span>)</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>当在浏览器地址栏输入了一个地址：<a href="http://127.0.0.1:3000/" target="_blank" rel="noopener">http://127.0.0.1:3000/</a></p><p>浏览器按照 HTTP 协议将你输入的地址包装成 HTTP 请求报文，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3000</span></span><br><span class="line">Connection: keep-alive</span><br><span class="line">Cache-Control: max-age=<span class="number">0</span></span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">53.0</span><span class="number">.2785</span><span class="number">.116</span> Safari/<span class="number">537.36</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/webp,*<span class="comment">/*;q=0.8</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate, sdch</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.8</span></span><br></pre></td></tr></table></figure><p>请求报文格式如下：</p><ul><li>请求头<ul><li>请求首行<ul><li>请求方法 请求路径 HTTP协议版本</li></ul></li><li>请求首部字段<ul><li>首都字段中放一些额外的附加信息</li><li>例如 User-Agent 表示告诉服务器我这个客户端是什么<ul><li>这里为什么有各种浏览器的标识</li><li>原因在早期的网页有各种各样兼容性问题</li><li>这个字段还可以用来统计浏览器的使用量占比情况</li></ul></li><li>Accept<ul><li>早期的 HTTP 0.9 中，只能收发普通字符数据 不支持图片等富文本信息</li><li>历史原因，现代的服务器和客户端浏览器已经不需要这个东西</li></ul></li></ul></li></ul></li><li>空行</li><li>请求体<ul><li>如果是 post 请求才有请求体</li><li>如果有请求体，则请求体是在请求头的回车换行之后</li><li>如果没有，也会有一个空行存在</li></ul></li></ul><p>响应报文：</p><ul><li>响应头<ul><li>响应首行<ul><li>HTTP协议版本 状态码 状态短语</li></ul></li><li>响应首部字段</li></ul></li><li>空行</li><li>响应体<ul><li>所有的响应数据都在响应头之后的空行之后</li></ul></li></ul><h2 id="net-和-http-模块的关系："><a href="#net-和-http-模块的关系：" class="headerlink" title="net 和 http 模块的关系："></a>net 和 http 模块的关系：</h2><ul><li>http 模块是构建与 net 模块之上的</li><li>http 中的收发数据还是通过 net 模块中的 Socket 收发数据的</li><li>http 会将收发的数据按照 HTTP 协议自动帮你解析和包装<ul><li>例如 http 模块自动将请求报文解析出来，然后挂载给了 req 请求对象</li><li>你可以通过 req 请求对象去拿到你想要的信息</li></ul></li><li>为什么既有 net 又有 http 呢？<ul><li>http 只是一个基于 net 之上的一个模块，该模块遵循的 http 协议</li><li>会对收发的数据进行 协议格式解析和包装</li><li>HTTP 协议只是适用于B/S模型</li></ul></li><li>有的业务功能使用的是别的协议<ul><li>例如 一些智能终端，就用的是别的协议，而不是 HTTP</li><li>但是他们都是基于最基本的 Socket 网络编程模型而构建的</li></ul></li></ul><h2 id="浏览器的本质"><a href="#浏览器的本质" class="headerlink" title="浏览器的本质"></a>浏览器的本质</h2><ul><li>Socket 客户端<ul><li>收发数据</li></ul></li><li>渲染 HTML、CSS</li><li>解析和执行 JavaScript 代码</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议&lt;/p&gt;
&lt;p&gt;接收请求&lt;br&gt;处理请求&lt;br&gt;发送响应&lt;br&gt;net 为什么不能处理浏览器的响应呢？&lt;/p&gt;
&lt;p&gt;http 模块和 net 模块之间的区别&lt;/p&gt;
    
    </summary>
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Node-网络编程-终端聊天室</title>
    <link href="http://yoursite.com/2017/01/01/Node-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-%E7%BB%88%E7%AB%AF%E8%81%8A%E5%A4%A9%E5%AE%A4/"/>
    <id>http://yoursite.com/2017/01/01/Node-网络编程-终端聊天室/</id>
    <published>2016-12-31T16:00:00.000Z</published>
    <updated>2018-06-06T05:19:50.487Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><ul><li>应用层<ul><li>http 协议</li><li>在浏览器输入一个地址，浏览器按照 http 协议将输入的地址包装成 http 报文</li><li>和数据传输没有任何关系</li><li>只负责数据包装</li><li>包装目的就是为了区分不同的行为</li></ul></li><li>传输层<ul><li>将应用层包装好的数据，通过传输层进行传输</li><li>TCP: 电话机<ul><li>端到端通信协议，必须知道对方的 ip 地址和端口号</li><li>TCP/IP 对数据传输有一定的完整性的保障<ul><li>一旦传输过程发生数据的完整性丢失，则全部丢掉重传</li></ul></li><li>三次握手连接<ul><li>双方通信必须先建立连接</li><li>确保双方都能收到对方的消息</li><li>首先呢，有两个概念<ul><li>客户端 发送一个请求 –&gt; 再回一个 这就是三次握手连接</li><li>服务器 回送一个消息</li></ul></li><li>建立三次握手连接之后双方就可以进行有保证的数据通信了</li></ul></li><li>用于 web 服务器 和 客户端浏览器 传输数据</li><li>数据安全性，对数据完整性有要求的使用 TCP/IP 协议</li></ul></li><li>UDP: 收音机 广播<ul><li>发送一条数据，谁收到我不关心</li><li>例如游戏、在线听歌、看电影 都是使用 UDP 协议</li><li>对于数据的完整性没有保证</li></ul></li></ul></li><li>网络层<ul><li>路由定位</li><li>IP 寻址 和 路由定位</li></ul></li><li>链路层<ul><li>“链接层”的功能，它在 “实体层” 的上方，确定了 0 和 1 的分组方式</li><li>对要传输的数据，把 0 和 1 进行分组，分成多个数据块进行传输</li></ul></li><li>实体层<ul><li>光缆、电缆、双绞线、无线电液</li><li>高电频、低电频</li></ul></li></ul><a id="more"></a><h2 id="在终端模拟聊天室"><a href="#在终端模拟聊天室" class="headerlink" title="在终端模拟聊天室"></a>在终端模拟聊天室</h2><h3 id="服务端模拟"><a href="#服务端模拟" class="headerlink" title="服务端模拟"></a>服务端模拟</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"><span class="keyword">const</span> server = net.createServer();</span><br><span class="line"><span class="comment">// 用户昵称: socket对象</span></span><br><span class="line"><span class="comment">// 用户昵称: socket对象</span></span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"><span class="keyword">const</span> users = &#123;&#125;;</span><br><span class="line">server.on(<span class="string">'connection'</span>, socket =&gt; &#123;</span><br><span class="line">  <span class="comment">// 当收到客户端的注册消息的时候，处理注册请求</span></span><br><span class="line">  <span class="comment">// 可能昵称被占用了，你就要告诉用户被占用了</span></span><br><span class="line">  <span class="comment">// 如果没有被占用，则将昵称保存起来，告诉用户登陆聊天室成功</span></span><br><span class="line">  <span class="comment">// 叶良辰</span></span><br><span class="line">  <span class="comment">// \list</span></span><br><span class="line">  <span class="comment">// 我有一百种方法让你待不下去</span></span><br><span class="line">  <span class="comment">// 赵日天: 你等着</span></span><br><span class="line">  socket.json = <span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">    socket.write(<span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line">  &#125;</span><br><span class="line">  socket.on(<span class="string">'data'</span>, data =&gt; &#123;</span><br><span class="line">    data = data.toString().trim();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      data = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">      <span class="keyword">switch</span> (data.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'signup'</span>:</span><br><span class="line">          <span class="comment">// 如果昵称已存在，则告诉用户昵称已存在</span></span><br><span class="line">          <span class="keyword">if</span> (users[data.message]) &#123;</span><br><span class="line">            <span class="keyword">return</span> socket.write(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">              type: <span class="string">'singup'</span>,</span><br><span class="line">              code: <span class="number">1001</span>,</span><br><span class="line">              message: <span class="string">'nickname already exists'</span></span><br><span class="line">            &#125;));</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 将昵称保存到数据对象中</span></span><br><span class="line">          users[data.message] = socket;</span><br><span class="line">          <span class="comment">// 给客户端响应消息，告诉客户端登陆成功</span></span><br><span class="line">          socket.write(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">            type: <span class="string">'singup'</span>,</span><br><span class="line">            code: <span class="number">1000</span>,</span><br><span class="line">            nickname: data.message,</span><br><span class="line">            message: <span class="string">'success'</span>,</span><br><span class="line">          &#125;));</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'broadcast'</span>:</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> nickname <span class="keyword">in</span> users) &#123;</span><br><span class="line">            users[nickname].json(&#123;</span><br><span class="line">              type: <span class="string">'broadcast'</span>,</span><br><span class="line">              <span class="keyword">from</span>: data.from,</span><br><span class="line">              message: data.message</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="number">10000</span>, <span class="string">'192.168.32.96'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'server is running at port 3000'</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="客户端模拟"><a href="#客户端模拟" class="headerlink" title="客户端模拟"></a>客户端模拟</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"><span class="keyword">const</span> socket = net.createConnection(<span class="number">3000</span>, <span class="string">'192.168.32.96'</span>);</span><br><span class="line">socket.json = <span class="function"><span class="params">obj</span> =&gt;</span> &#123;</span><br><span class="line">  socket.write(<span class="built_in">JSON</span>.stringify(obj));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 这个变量用来保存用户的昵称同时也作为一个标记</span></span><br><span class="line"><span class="keyword">let</span> nickname;</span><br><span class="line">socket.on(<span class="string">'connect'</span>, () =&gt; &#123;</span><br><span class="line">  process.stdout.write(<span class="string">'请输入你的昵称：'</span>);</span><br><span class="line">  process.stdin.on(<span class="string">'data'</span>, data =&gt; &#123;</span><br><span class="line">    data = data.toString().trim();</span><br><span class="line">    <span class="keyword">if</span> (!nickname) &#123;</span><br><span class="line">      <span class="keyword">const</span> send = &#123;</span><br><span class="line">          type: <span class="string">'signup'</span>,</span><br><span class="line">          message: data,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 将 json 对象转为字符串就叫做序列化</span></span><br><span class="line">        <span class="comment">// 将 json 格式字符串转为对象叫做反序列化</span></span><br><span class="line">      <span class="keyword">return</span> socket.write(<span class="built_in">JSON</span>.stringify(send));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把所有这种指令型的都加上一个 \ 用来区分</span></span><br><span class="line">    <span class="comment">// \help</span></span><br><span class="line">    <span class="keyword">if</span> (data === <span class="string">'\\list'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> socket.json(&#123;</span><br><span class="line">        type: <span class="string">'list'</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果用户输入的 xxx:dsadsadsa</span></span><br><span class="line">    <span class="comment">// 就包装成点对点聊天数据格式</span></span><br><span class="line">    <span class="keyword">const</span> matches = <span class="regexp">/^(.+):(.+)$/</span>.exec(data)</span><br><span class="line">    <span class="keyword">if</span> (matches) &#123;</span><br><span class="line">      <span class="keyword">return</span> socket.json(&#123;</span><br><span class="line">        type: <span class="string">'p2p'</span>,</span><br><span class="line">        <span class="keyword">from</span>: nickname,</span><br><span class="line">        to: matches[<span class="number">1</span>],</span><br><span class="line">        message: matches[<span class="number">2</span>]</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    socket.json(&#123;</span><br><span class="line">      type: <span class="string">'broadcast'</span>,</span><br><span class="line">      <span class="keyword">from</span>: nickname,</span><br><span class="line">      message: data</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">socket.on(<span class="string">'data'</span>, data =&gt; &#123;</span><br><span class="line">  <span class="comment">// 客户端也要根据服务器响应的消息做一个处理</span></span><br><span class="line">  <span class="comment">// 例如，当服务器发送了一个被占用的消息的时候，客户端就提示用户请重新输入</span></span><br><span class="line">  <span class="comment">// 当服务器发送一个登陆成功的时候，客户端也提示用户</span></span><br><span class="line">  data = data.toString().trim();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    data = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">    <span class="keyword">switch</span> (data.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'singup'</span>:</span><br><span class="line">        <span class="keyword">switch</span> (data.code) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">1000</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'恭喜，登陆聊天室成功'</span>);</span><br><span class="line">            nickname = data.nickname;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="number">1001</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'昵称已被占用，大侠请重新来过'</span>);</span><br><span class="line">            process.stdout.write(<span class="string">'请输入你的昵称：'</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'broadcast'</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;data.<span class="keyword">from</span>&#125;</span>说：<span class="subst">$&#123;data.message&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'list'</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">''</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'================ 用户列表 ================'</span>);</span><br><span class="line">        data.message.forEach(<span class="function"><span class="params">n</span> =&gt;</span> <span class="built_in">console</span>.log(n));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'=========================================='</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">''</span>);</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'p2p'</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;data.<span class="keyword">from</span>&#125;</span>对你说：<span class="subst">$&#123;data.message&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;网络编程&quot;&gt;&lt;a href=&quot;#网络编程&quot; class=&quot;headerlink&quot; title=&quot;网络编程&quot;&gt;&lt;/a&gt;网络编程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;应用层&lt;ul&gt;
&lt;li&gt;http 协议&lt;/li&gt;
&lt;li&gt;在浏览器输入一个地址，浏览器按照 http 协议将输入的地址包装成 http 报文&lt;/li&gt;
&lt;li&gt;和数据传输没有任何关系&lt;/li&gt;
&lt;li&gt;只负责数据包装&lt;/li&gt;
&lt;li&gt;包装目的就是为了区分不同的行为&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;传输层&lt;ul&gt;
&lt;li&gt;将应用层包装好的数据，通过传输层进行传输&lt;/li&gt;
&lt;li&gt;TCP: 电话机&lt;ul&gt;
&lt;li&gt;端到端通信协议，必须知道对方的 ip 地址和端口号&lt;/li&gt;
&lt;li&gt;TCP/IP 对数据传输有一定的完整性的保障&lt;ul&gt;
&lt;li&gt;一旦传输过程发生数据的完整性丢失，则全部丢掉重传&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;三次握手连接&lt;ul&gt;
&lt;li&gt;双方通信必须先建立连接&lt;/li&gt;
&lt;li&gt;确保双方都能收到对方的消息&lt;/li&gt;
&lt;li&gt;首先呢，有两个概念&lt;ul&gt;
&lt;li&gt;客户端 发送一个请求 –&amp;gt; 再回一个 这就是三次握手连接&lt;/li&gt;
&lt;li&gt;服务器 回送一个消息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;建立三次握手连接之后双方就可以进行有保证的数据通信了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用于 web 服务器 和 客户端浏览器 传输数据&lt;/li&gt;
&lt;li&gt;数据安全性，对数据完整性有要求的使用 TCP/IP 协议&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UDP: 收音机 广播&lt;ul&gt;
&lt;li&gt;发送一条数据，谁收到我不关心&lt;/li&gt;
&lt;li&gt;例如游戏、在线听歌、看电影 都是使用 UDP 协议&lt;/li&gt;
&lt;li&gt;对于数据的完整性没有保证&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;网络层&lt;ul&gt;
&lt;li&gt;路由定位&lt;/li&gt;
&lt;li&gt;IP 寻址 和 路由定位&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;链路层&lt;ul&gt;
&lt;li&gt;“链接层”的功能，它在 “实体层” 的上方，确定了 0 和 1 的分组方式&lt;/li&gt;
&lt;li&gt;对要传输的数据，把 0 和 1 进行分组，分成多个数据块进行传输&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实体层&lt;ul&gt;
&lt;li&gt;光缆、电缆、双绞线、无线电液&lt;/li&gt;
&lt;li&gt;高电频、低电频&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node-文件操作（下）- 文件监视、markdown转换器</title>
    <link href="http://yoursite.com/2016/12/26/Node-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%8B%EF%BC%89-%20%E6%96%87%E4%BB%B6%E7%9B%91%E8%A7%86%E3%80%81markdown%E8%BD%AC%E6%8D%A2%E5%99%A8/"/>
    <id>http://yoursite.com/2016/12/26/Node-文件操作（下）- 文件监视、markdown转换器/</id>
    <published>2016-12-25T16:00:00.000Z</published>
    <updated>2018-06-06T05:11:15.651Z</updated>
    
    <content type="html"><![CDATA[<h2 id="监视"><a href="#监视" class="headerlink" title="监视"></a>监视</h2><p>文件监视 API fs.watchFile()</p><ul><li>回调函数中需要接收两个参数</li><li>第一个是当前文件的最新状态 stat，</li><li>第二个是变化之前的 stat</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 监视文件的修改时间</span></span><br><span class="line">fs.watchFile(<span class="string">'./node.md'</span>, (curr, prev) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(curr.mtime.getHours() + <span class="string">':'</span> + curr.mtime.getMinutes() + <span class="string">':'</span> +curr.mtime.getSeconds());</span><br><span class="line">  <span class="built_in">console</span>.log(prev.mtime.getHours() + <span class="string">':'</span> + prev.mtime.getMinutes() + <span class="string">':'</span> +prev.mtime.getSeconds());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用模板引擎时需要注意的地方</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">'art-template'</span>);</span><br><span class="line"><span class="comment">// 1. 调用 template.compile 方法，传入一个模板字符串，得到一个渲染函数</span></span><br><span class="line"><span class="comment">// # 表示不编码输出</span></span><br><span class="line"><span class="keyword">const</span> render = template.compile(<span class="string">`</span></span><br><span class="line"><span class="string">&lt;h1&gt;&#123;&#123;# title &#125;&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">`</span>);</span><br><span class="line"><span class="comment">// 防止用户恶意注入 JavaScript 代码</span></span><br><span class="line"><span class="keyword">const</span> result = render(&#123;</span><br><span class="line">  title: <span class="string">'&lt;span&gt;hello&lt;/span&gt;'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p>在 node 中使用模板引擎</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">'art-template'</span>);</span><br><span class="line"><span class="comment">// 这是 art-template 的简洁语法</span></span><br><span class="line"><span class="keyword">const</span> render = template.compile(<span class="string">`</span></span><br><span class="line"><span class="string">  &lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">  &lt;ul&gt;</span></span><br><span class="line"><span class="string">    &#123;&#123;each list as value i&#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;li&gt;索引&#123;&#123;i&#125;&#125;:&#123;&#123;value&#125;&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &#123;&#123;/each&#125;&#125;</span></span><br><span class="line"><span class="string">  &lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span>);</span><br><span class="line"><span class="keyword">const</span> result = render(&#123;</span><br><span class="line">  title: <span class="string">'node 中使用模板引擎'</span>,</span><br><span class="line">  list: [</span><br><span class="line">    <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p>以上这段代码的模板是手写到代码中的，我们可以通过文件读取的方式获得模板</p><p>正真想用原生语法，就需要加载另一个native 文件，修改的入口文件： art-tempalte 文件下的package.json, main:”./node/template-native.js”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">'art-template'</span>);</span><br><span class="line"><span class="comment">// 这是 art-template 的原生语法</span></span><br><span class="line"><span class="keyword">const</span> render = template.compile(<span class="string">`</span></span><br><span class="line"><span class="string">  &lt;h1&gt;&lt;%= title %&gt;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">  &lt;ul&gt;</span></span><br><span class="line"><span class="string">  &lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span>);</span><br><span class="line"><span class="keyword">const</span> result = render(&#123;</span><br><span class="line">  title: <span class="string">'node 中使用模板引擎'</span>,</span><br><span class="line">  list: [</span><br><span class="line">    <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><p>模板字符串</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">""</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"markdown-body"</span>&gt;</span></span><br><span class="line">    &#123;&#123;# body &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="markdown-文件自动生成-HTML"><a href="#markdown-文件自动生成-HTML" class="headerlink" title="markdown 文件自动生成 HTML"></a>markdown 文件自动生成 HTML</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> marked = <span class="built_in">require</span>(<span class="string">'marked'</span>);</span><br><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">'art-template'</span>);</span><br><span class="line"><span class="comment">// &#123; persistent: true, interval: 1000 &#125; 修改间隔时间</span></span><br><span class="line">fs.watchFile(<span class="string">'./node.md'</span>, &#123; <span class="attr">persistent</span>: <span class="literal">true</span>, <span class="attr">interval</span>: <span class="number">1000</span> &#125;, (curr, prev) =&gt; &#123;</span><br><span class="line">  fs.readFile(<span class="string">'./node.md'</span>, (err, md) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 拿到文件数据，将 Markdown 格式字符串转换为 HTML 格式字符串</span></span><br><span class="line">    <span class="keyword">const</span> htmlStr = marked(md.toString());</span><br><span class="line">    fs.readFile(<span class="string">'./template.html'</span>, <span class="string">'utf8'</span>, (err, tmp) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 使用 art-template 模板引擎编译解析</span></span><br><span class="line">      <span class="keyword">const</span> result = template.compile(tmp)(&#123;</span><br><span class="line">        textTitle: <span class="string">'node 学习'</span>,</span><br><span class="line">        title: <span class="string">'node 学习'</span>,</span><br><span class="line">        body: htmlStr,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// 写入要生成的文件中</span></span><br><span class="line">      fs.writeFile(<span class="string">'./node.html'</span>, result, err =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'translate success'</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>最后， art-template 模板既可以在浏览器中使用还可以在 node 中使用，注意：</p><ul><li>node 中使用时，看 node-modules 文件下 art-template 文件下的 package.json 文件，该文件中的 main 属性就是 node 使用 art-template 模板所使用包的路径。</li><li>在浏览器中使用时，引入的 art-template 包是 dist 目录下的 art-template.js 文件。</li></ul><h2 id="读-execl-文件"><a href="#读-execl-文件" class="headerlink" title="读 execl 文件"></a>读 execl 文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parseXlsx = <span class="built_in">require</span>(<span class="string">'excel'</span>);</span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">'moment'</span>);</span><br><span class="line">parseXlsx(<span class="string">'./data/课表.xlsx'</span>, (err, data) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 解析 excel 表格日期</span></span><br><span class="line">  <span class="comment">// var date = new Date((42628 - (25567 + 1)) * 86400 * 1000)</span></span><br><span class="line">  <span class="comment">// // 在原有日期 - 1 天</span></span><br><span class="line">  <span class="comment">// date = moment(date).add(-1, 'days').format('YYYY-MM-DD'))</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> day <span class="keyword">of</span> data) &#123;</span><br><span class="line">    <span class="keyword">if</span> (day[<span class="number">1</span>].trim().length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (day[<span class="number">1</span>].includes(<span class="string">'周淑刚'</span>)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(moment(<span class="keyword">new</span> <span class="built_in">Date</span>((<span class="built_in">parseInt</span>(day[<span class="number">0</span>]) - (<span class="number">25567</span> + <span class="number">1</span>)) * <span class="number">86400</span> * <span class="number">1000</span>)).add(<span class="number">-1</span>, <span class="string">'days'</span>).format(<span class="string">'YYYY-MM-DD'</span>), day[<span class="number">1</span>])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="文件流"><a href="#文件流" class="headerlink" title="文件流"></a>文件流</h3><p>读取大文件，使用流的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs= <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> src = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">const</span> des = <span class="string">''</span>;</span><br><span class="line"><span class="comment">// 创建一个可读流</span></span><br><span class="line"><span class="comment">// 2. 创建一个可写流</span></span><br><span class="line"><span class="comment">// 3. 更新可毒瘤对象的 data 事件</span></span><br><span class="line"><span class="comment">//    只要流对象已经过创建成功，先一瓢一瓢的读取数据</span></span><br><span class="line"><span class="comment">//    当读取到一定数据的时候，触发 data 事件， 同时将数据传递给回调函数</span></span><br><span class="line"><span class="comment">//    只要度去掉一个点数据，就调用可写流对象的 write 方法，将数据写入到可写流中</span></span><br><span class="line"><span class="comment">// 4. 监听可读流对象的 end 事件</span></span><br><span class="line"><span class="comment">//    当以流的形式读取数据之后，会触发可读流对象的 end 事件</span></span><br><span class="line"><span class="comment">//    使用可写流的 end 方法将可写流关闭</span></span><br><span class="line"><span class="keyword">const</span> readStream = fs.createReadStream(src);</span><br><span class="line"><span class="keyword">const</span> writeStream = fs.createWriteStream(des);</span><br><span class="line"><span class="comment">// 获取要读取文件的总字节大小</span></span><br><span class="line"><span class="keyword">const</span> totalSize = fs.statSync(src).size;</span><br><span class="line"><span class="comment">// 用来统计最新读取到的数据字节数</span></span><br><span class="line"><span class="keyword">const</span> currentSize = <span class="number">0</span>;</span><br><span class="line">readStream.on(<span class="string">'data'</span>, data =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;((currentSize += data.length) <span class="regexp">/ totalSize * 100).toFixed(2)&#125;%10`);</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">  writeStream.write(data);</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">&#125;);</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">readStream.on('end', () =&gt; &#123;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">  console.log('复制文结束');</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">  writeStream.end();</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">&#125;);</span></span></span></span><br></pre></td></tr></table></figure><p>使用管道方法读写大文件；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> readStream = fs.createReadStrean(src);</span><br><span class="line"><span class="keyword">const</span> writeStream = fs.createWriteStream(des);</span><br><span class="line"><span class="keyword">const</span> fs= <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> src = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">const</span> des = <span class="string">''</span>;</span><br><span class="line"><span class="comment">// 获取要读取文件的总字节大小</span></span><br><span class="line"><span class="keyword">const</span> totalSize = fs.statSync(src).size;</span><br><span class="line"><span class="comment">// 用来统计最新读取到的数据字节数</span></span><br><span class="line"><span class="keyword">const</span> currentSize = <span class="number">0</span>;</span><br><span class="line">readStream.on(<span class="string">'data'</span>, data =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;((currentSize += data.length) <span class="regexp">/ totalSize * 100).toFixed(2)&#125;%10`);</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">  writeStream.write(data);</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">&#125;);</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">/</span><span class="regexp">/ 将可读流通过 pipe 方法，数据自动流入指定的可写流中</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="regexp">readStream.pipe(writeStream);</span></span></span></span><br></pre></td></tr></table></figure><h2 id="涉及的包"><a href="#涉及的包" class="headerlink" title="涉及的包"></a>涉及的包</h2><ul><li>moment：时间处理</li><li>fs-extra：扩展了原生 fs 模块的功能，例如删除一个非空目录，递归遍历无极目录等</li><li>marked：Markdown转换</li><li>art-template：模板引擎</li><li>excel：读取excel表格文件数据</li><li>nodemon: 监听文件变化，自动重启<ul><li><code>npm install -g nodemon</code></li><li><code>nodemon server.js</code></li><li>该工具会监听文件的变化，使用 node 重新执行对应的脚本文件</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;监视&quot;&gt;&lt;a href=&quot;#监视&quot; class=&quot;headerlink&quot; title=&quot;监视&quot;&gt;&lt;/a&gt;监视&lt;/h2&gt;&lt;p&gt;文件监视 API fs.watchFile()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回调函数中需要接收两个参数&lt;/li&gt;
&lt;li&gt;第一个是当前文件的最新状态 stat，&lt;/li&gt;
&lt;li&gt;第二个是变化之前的 stat&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;fs&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 监视文件的修改时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fs.watchFile(&lt;span class=&quot;string&quot;&gt;&#39;./node.md&#39;&lt;/span&gt;, (curr, prev) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(curr.mtime.getHours() + &lt;span class=&quot;string&quot;&gt;&#39;:&#39;&lt;/span&gt; + curr.mtime.getMinutes() + &lt;span class=&quot;string&quot;&gt;&#39;:&#39;&lt;/span&gt; +curr.mtime.getSeconds());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(prev.mtime.getHours() + &lt;span class=&quot;string&quot;&gt;&#39;:&#39;&lt;/span&gt; + prev.mtime.getMinutes() + &lt;span class=&quot;string&quot;&gt;&#39;:&#39;&lt;/span&gt; +prev.mtime.getSeconds());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用模板引擎时需要注意的地方&lt;/p&gt;
    
    </summary>
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node-文件操作（中）- 文件状态、promise版本封装</title>
    <link href="http://yoursite.com/2016/12/08/Node-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%AD%EF%BC%89-%20%E6%96%87%E4%BB%B6%E7%8A%B6%E6%80%81%E3%80%81promise%E7%89%88%E6%9C%AC%E5%B0%81%E8%A3%85/"/>
    <id>http://yoursite.com/2016/12/08/Node-文件操作（中）- 文件状态、promise版本封装/</id>
    <published>2016-12-07T16:00:00.000Z</published>
    <updated>2018-06-06T03:03:52.788Z</updated>
    
    <content type="html"><![CDATA[<h2 id="获取文件信息"><a href="#获取文件信息" class="headerlink" title="获取文件信息"></a>获取文件信息</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.stat(path,callback);</span><br></pre></td></tr></table></figure><h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h2><p>readdir 只能读取一级目录</p><a id="more"></a><h3 id="1-readdir-方法初步使用"><a href="#1-readdir-方法初步使用" class="headerlink" title="1. readdir 方法初步使用"></a>1. readdir 方法初步使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line">fs.readdir(rootDir, (err, data) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> name <span class="keyword">of</span> files) &#123;</span><br><span class="line">    <span class="keyword">const</span> tmpPath = path.join(rootDir, name);</span><br><span class="line">    fs.stat(tmpPath, (err, stats) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (stats.isFile() &amp;&amp; path.extname(tmpPath) === <span class="string">'.cmd'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(tempPath);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-把-1-的代码封装成一个方法，得到一个目录下所有后缀名的文件"><a href="#2-把-1-的代码封装成一个方法，得到一个目录下所有后缀名的文件" class="headerlink" title="2. 把 1 的代码封装成一个方法，得到一个目录下所有后缀名的文件"></a>2. 把 1 的代码封装成一个方法，得到一个目录下所有后缀名的文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> rootDir = <span class="string">'./data'</span>;</span><br><span class="line">getPathsByFilter(rootDir, <span class="string">'.txt'</span>, (err, paths) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(paths);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装成一个方法，得到一个目录下所有后缀名的文件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPathsByFilter</span>(<span class="params">rootDir, extName, callback</span>) </span>&#123;</span><br><span class="line">  fs.readdir(rootDir, (err, files) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> paths = [];</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> name <span class="keyword">of</span> files) &#123;</span><br><span class="line">      <span class="keyword">const</span> tmpPath = path.join(rootDir, name);</span><br><span class="line">      fs.stat(tmpPath, (err, stats) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> callback(err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stats.isFile() &amp;&amp; path.extname(tmpPath) === extName) &#123;</span><br><span class="line">          paths.push(tmpPath);</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">if</span> (count === files.length) &#123;</span><br><span class="line">          callback(<span class="literal">null</span>, paths);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-把-2-代码块得到的所有文件都读出来"><a href="#3-把-2-代码块得到的所有文件都读出来" class="headerlink" title="3. 把 2 代码块得到的所有文件都读出来"></a>3. 把 2 代码块得到的所有文件都读出来</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> rootDir = <span class="string">'./data'</span>;</span><br><span class="line">getPathsByFilter(rootDir, <span class="string">'.txt'</span>, (err, paths) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 读文件</span></span><br><span class="line">  <span class="built_in">Promise</span>.all(paths.map(<span class="function"><span class="params">p</span> =&gt;</span> readFile(p)))</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    data.forEach(<span class="function"><span class="params">d</span> =&gt;</span> <span class="built_in">console</span>.log(d.toString()));</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装成一个方法，得到一个目录下所有后缀名的文件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPathsByFilter</span>(<span class="params">rootDir, extName, callback</span>) </span>&#123;</span><br><span class="line">  fs.readdir(rootDir, (err, files) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> paths = [];</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> name <span class="keyword">of</span> files) &#123;</span><br><span class="line">      <span class="keyword">const</span> tmpPath = path.join(rootDir, name);</span><br><span class="line">      fs.stat(tmpPath, (err, stats) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> callback(err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stats.isFile() &amp;&amp; path.extname(tmpPath) === extName) &#123;</span><br><span class="line">          paths.push(tmpPath);</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">if</span> (count === files.length) &#123;</span><br><span class="line">          callback(<span class="literal">null</span>, paths);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读文件的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">filePath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(filePath, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样封装的 getPathsByFilter() 方法不是好的 API，要用 Promise， 都封装成 Promise 版本</p><h3 id="4-把-3-代码优化"><a href="#4-把-3-代码优化" class="headerlink" title="4. 把 3 代码优化"></a>4. 把 3 代码优化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> rootDir = <span class="string">'./data'</span>;</span><br><span class="line">getPathsByFilter(rootDir, <span class="string">'.txt'</span>)</span><br><span class="line">.then(<span class="function"><span class="params">paths</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all(paths.map(<span class="function"><span class="params">p</span> =&gt;</span> readFile(p)))</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  data.forEach(<span class="function"><span class="params">d</span> =&gt;</span> <span class="built_in">console</span>.log(d.toString()));</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> err;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装成一个方法，得到一个目录下所有后缀名的文件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPathsByFilter</span>(<span class="params">rootDir, extName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readdir(rootDir, (err, files) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> paths = [];</span><br><span class="line">      <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> name <span class="keyword">of</span> files) &#123;</span><br><span class="line">        <span class="keyword">const</span> tmpPath = path.join(rootDir, name);</span><br><span class="line">        fs.stat(tmpPath, (err, stats) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> reject(err);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (stats.isFile() &amp;&amp; path.extname(tmpPath) === extName) &#123;</span><br><span class="line">            paths.push(tmpPath);</span><br><span class="line">          &#125;</span><br><span class="line">          count++;</span><br><span class="line">          <span class="keyword">if</span> (count === files.length) &#123;</span><br><span class="line">            resolve(paths);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读文件的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">filePath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(filePath, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-终极-promise-版本的指定文件目录，读取指定后缀名的所有文件"><a href="#5-终极-promise-版本的指定文件目录，读取指定后缀名的所有文件" class="headerlink" title="5. 终极 promise 版本的指定文件目录，读取指定后缀名的所有文件"></a>5. 终极 promise 版本的指定文件目录，读取指定后缀名的所有文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> rootDir = <span class="string">'./data'</span>;</span><br><span class="line">getPathsByFilter(rootDir, <span class="string">'.txt'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">paths</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.all(paths.map(<span class="function"><span class="params">p</span> =&gt;</span> readFile(p)))</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    data.forEach(<span class="function"><span class="params">d</span> =&gt;</span> <span class="built_in">console</span>.log(d.toString()))</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> err</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPathsByFilter</span>(<span class="params">rootDir, extName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    readdir(rootDir).then(<span class="function"><span class="params">files</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> paths = []</span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> name <span class="keyword">of</span> files) &#123;</span><br><span class="line">          <span class="keyword">const</span> tmpPath = path.join(rootDir, name)</span><br><span class="line">          stat(tmpPath).then(<span class="function"><span class="params">stats</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="comment">// 判断是否是文件并且后缀名是指定的 .txt</span></span><br><span class="line">              <span class="keyword">if</span> (stats.isFile() &amp;&amp; path.extname(tmpPath) === extName) &#123;</span><br><span class="line">                paths.push(tmpPath)</span><br><span class="line">              &#125;</span><br><span class="line">              count++</span><br><span class="line">              <span class="keyword">if</span> (count === files.length) &#123;</span><br><span class="line">                resolve(paths)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="comment">// 主动在当前代码块抛出异常</span></span><br><span class="line">              <span class="built_in">Promise</span>.reject(err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件目录操作</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readdir</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readdir(dir, (err, files) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(files)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读文件的方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">filePath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(filePath, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取文件状态</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stat</span>(<span class="params">filePath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.stat(filePath, (err, stats) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(stats)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;获取文件信息&quot;&gt;&lt;a href=&quot;#获取文件信息&quot; class=&quot;headerlink&quot; title=&quot;获取文件信息&quot;&gt;&lt;/a&gt;获取文件信息&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;fs&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fs.stat(path,callback);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;文件目录&quot;&gt;&lt;a href=&quot;#文件目录&quot; class=&quot;headerlink&quot; title=&quot;文件目录&quot;&gt;&lt;/a&gt;文件目录&lt;/h2&gt;&lt;p&gt;readdir 只能读取一级目录&lt;/p&gt;
    
    </summary>
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node-promise对象</title>
    <link href="http://yoursite.com/2016/11/22/Node-promise%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2016/11/22/Node-promise对象/</id>
    <published>2016-11-21T16:00:00.000Z</published>
    <updated>2018-06-06T02:58:43.345Z</updated>
    
    <content type="html"><![CDATA[<p>一个 promise 在在代码中体现出来就是一个对象，该对象一般保存一个异步执行的任务。</p><p>Promise是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6将其写进了语言标准，统一了用法，原生提供了 <code>Promise</code> 对象。表示是一个未来的事情，可能做到，也可能失败。 Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。</p><h2 id="Promise-对象"><a href="#Promise-对象" class="headerlink" title="Promise 对象"></a>Promise 对象</h2><p>从语法上说，Promise是一个对象，从它可以获取异步操作的结果。</p><a id="more"></a><p>Promise对象代表一个异步操作，有三种状态：</p><ul><li>Pending（进行中）</li><li>Resolved（已完成，又称Fulfilled）</li><li>Rejected（已失败）</li></ul><p>只有异步操作的结果，可以决定当前是哪一种状态。</p><p>有了Promise对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise对象提供统一的接口，使得控制异步操作更加容易。</p><blockquote><p>一个读文件的例子:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// Promise 对象容器中一般放置一个异步执行的任务</span></span><br><span class="line"><span class="comment">// 就是封装一个异步执行的 API</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Promise 容器执行了'</span>);</span><br><span class="line">  fs.readFile(<span class="string">'./es6.md'</span>, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="comment">// 容器中异步任务失败之后，就调用容器的 Promise 对象的 reject 方法；</span></span><br><span class="line">      <span class="comment">// 将错误对象传递给 regect 方法</span></span><br><span class="line">      <span class="keyword">return</span> reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 容器中异步任务成功之后，就调用 Promise 容器中的 resolve 方法，</span></span><br><span class="line">    <span class="comment">// 将结果传递给 resolve 方法</span></span><br><span class="line">    resolve(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 当 Promise 对象一经创建就会立即执行</span></span><br><span class="line"><span class="comment">// 可以通过 Promise 容器对象的任何方法接收 容器中 resolve 传递的结果值</span></span><br><span class="line"><span class="comment">// then 方法需要接收一个回调函数，该回调函数是 Promise 容器中的 resolve</span></span><br><span class="line">p.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;, err =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'读取文件失败了'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="解决异步调用问题"><a href="#解决异步调用问题" class="headerlink" title="解决异步调用问题"></a>解决异步调用问题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.readFile(<span class="string">'./data/01.txt'</span>, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">    resolve(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.readFile(<span class="string">'./data/02.txt'</span>, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">    resolve(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.readFile(<span class="string">'./data/03.txt'</span>, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">    resolve(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">p1.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="keyword">return</span> p2;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 当前这个 then 里面的回调函数的参数，就是上一个 then 中回调函数的返回值</span></span><br><span class="line">  <span class="comment">// 该返回值有 3 种情况，</span></span><br><span class="line">  <span class="comment">//    1， 没有返回值就是 undefined</span></span><br><span class="line">  <span class="comment">//    2.  手动的 return 普通值</span></span><br><span class="line">  <span class="comment">//    3.  返回一个新的 Promise 对象</span></span><br><span class="line">  <span class="comment">//        如果是 Promise 对象，那么当前 then 就是 该 Promise 对象 resolve 函数的结果</span></span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="keyword">return</span> p3;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 当前这个catch 方法就可以把之前所有的任务中可能出现的异常都捕获</span></span><br><span class="line">  <span class="comment">// 甚至包括 then 函数中的异常也可以捕获到</span></span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>封装 Promise 版本的读取文件方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">filePath, encoding</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(filePath, encoding, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">readFile(<span class="string">'./data/01.txt'</span>, <span class="string">'utf8'</span>)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="keyword">return</span> readFile(<span class="string">'./data/02.txt'</span>, <span class="string">'utf8'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="keyword">return</span> readFile(<span class="string">'./data/03.txt'</span>, <span class="string">'utf8'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>封装 Promise 版本的读写文件方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">filePath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(filePath, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeFile</span>(<span class="params">filePath, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.writeFile(filePath, data, err =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">readFile(<span class="string">'./data/01.txt'</span>)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> writeFile(<span class="string">'./data/01copy.txt'</span>, data);</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(write success);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h3><p>Promise.all方法用于将多个Promise实例，包装成一个新的Promise实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.all([p1, p2, p3]);</span><br><span class="line">p.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data); <span class="comment">// data 是一个数组</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Promise.all方法接受一个数组作为参数，p1、p2、p3都是Promise对象的实例。</p><p>p的状态由p1、p2、p3决定，分成两种情况：</p><ul><li><p>只有p1、p2、p3的状态都变成fulfilled ，p的状态才会变成fulfilled</p><ul><li>此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</li></ul></li><li><p>只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected</p><ul><li>此时第一个被reject的实例的返回值，会传递给p的回调函数。<br>封装异步并行读取文件 Promise 的另外一个版本</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">filePath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(filePath, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Promise 构造函数的 all() 方法接收一个每个元素都是 Promise 对象的数组</span></span><br><span class="line"><span class="comment">// 返回结果也是 Promise 对象</span></span><br><span class="line"><span class="comment">// Promise 专门用来解决回调地狱的，也可以做异步流程控制</span></span><br><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">  readFile(<span class="string">'./data/01.txt'</span>), </span><br><span class="line">  readFile(<span class="string">'./data/02.txt'</span>), </span><br><span class="line">  readFile(<span class="string">'./data/03.txt'</span>)</span><br><span class="line">]).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data[<span class="number">0</span>].toString());</span><br><span class="line">  <span class="built_in">console</span>.log(data[<span class="number">1</span>].toString());</span><br><span class="line">  <span class="built_in">console</span>.log(data[<span class="number">2</span>].toString());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="以读文件为例子，封装-Promise-API："><a href="#以读文件为例子，封装-Promise-API：" class="headerlink" title="以读文件为例子，封装 Promise API："></a>以读文件为例子，封装 Promise API：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">filePath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(filePath, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 提供一个方法，该方法接收一个数组，数组中的指定要读取的文件路径，个数不定</span></span><br><span class="line"><span class="comment">// 当所有文件读取到的时候，将读取到的所有文件的结果返回</span></span><br><span class="line"><span class="comment">// getAll(['./data/01.txt', './data/02.txt', './data/03.txt']).then().catch()</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAll</span>(<span class="params">filePaths</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all(filePaths.map(<span class="function"><span class="params">filePath</span> =&gt;</span> readFile(filePath)));</span><br><span class="line">&#125;</span><br><span class="line">getAll([</span><br><span class="line">  <span class="string">'./data/01.txt'</span>, </span><br><span class="line">  <span class="string">'./data/02.txt'</span>, </span><br><span class="line">  <span class="string">'./data/03.txt'</span></span><br><span class="line">]).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data[<span class="number">0</span>].toString());</span><br><span class="line">  <span class="built_in">console</span>.log(data[<span class="number">1</span>].toString());</span><br><span class="line">  <span class="built_in">console</span>.log(data[<span class="number">2</span>].toString());</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'读取文件失败'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h3><p>Promise.race方法同样是将多个Promise实例，包装成一个新的Promise实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="built_in">Promise</span>.race([p1,p2,p3]);</span><br></pre></td></tr></table></figure><p>上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的Promise实例的返回值，就传递给p的回调函数。</p><p>并行执行一系列的异步任务，只要有一个异步任务完成，那业务就完成。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">filePath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(filePath, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 谁先完成得到谁的数据</span></span><br><span class="line"><span class="built_in">Promise</span>.race([readFile(<span class="string">'./data/01.txt'</span>), readFile(<span class="string">'./data/02.txt'</span>)])</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个 promise 在在代码中体现出来就是一个对象，该对象一般保存一个异步执行的任务。&lt;/p&gt;
&lt;p&gt;Promise是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6将其写进了语言标准，统一了用法，原生提供了 &lt;code&gt;Promise&lt;/code&gt; 对象。表示是一个未来的事情，可能做到，也可能失败。 Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。&lt;/p&gt;
&lt;h2 id=&quot;Promise-对象&quot;&gt;&lt;a href=&quot;#Promise-对象&quot; class=&quot;headerlink&quot; title=&quot;Promise 对象&quot;&gt;&lt;/a&gt;Promise 对象&lt;/h2&gt;&lt;p&gt;从语法上说，Promise是一个对象，从它可以获取异步操作的结果。&lt;/p&gt;
    
    </summary>
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node-文件操作（上）-简单封装复制文件方法、process对象</title>
    <link href="http://yoursite.com/2016/11/11/Node-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%8A%EF%BC%89-%E7%AE%80%E5%8D%95%E5%B0%81%E8%A3%85%E5%A4%8D%E5%88%B6%E6%96%87%E4%BB%B6%E6%96%B9%E6%B3%95%E3%80%81process%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2016/11/11/Node-文件操作（上）-简单封装复制文件方法、process对象/</id>
    <published>2016-11-10T16:00:00.000Z</published>
    <updated>2018-06-06T02:51:45.926Z</updated>
    
    <content type="html"><![CDATA[<p>fs 文件操作模块</p><p>Node 只在文件 IO 操作中，提供了同步调用和异步调用两种形式，fs 模块对文件的几乎所有操作都有同步和异步两种形式，两者可以结合使用，但是推荐能使用异步调用解决问题的情况下，少用同步调用。</p><p>例如：<code>readFile()</code> 和 <code>readFileSync()</code>。</p><h2 id="引入包"><a href="#引入包" class="headerlink" title="引入包"></a>引入包</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br></pre></td></tr></table></figure><h2 id="同步操作"><a href="#同步操作" class="headerlink" title="同步操作"></a>同步操作</h2><a id="more"></a><ul><li>同步代码会阻塞后续代码执行，效率低</li><li>同步 API 需要 try-catch 捕获异常</li><li>同步 API 优点代码符合思维逻辑，</li><li>按顺序执行，简单执行</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> data = fs.readFileSync(<span class="string">'./README.md'</span>, <span class="string">'utf8'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'读取文件失败'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同步读取文件的一个例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> data1 = fs.readFileSync(<span class="string">'./01.txt'</span>, <span class="string">'utf8'</span>);</span><br><span class="line">  <span class="keyword">const</span> data2 = fs.readFileSync(<span class="string">'./02.txt'</span>, <span class="string">'utf8'</span>);</span><br><span class="line">  <span class="keyword">const</span> data2 = fs.readFileSync(<span class="string">'./03.txt'</span>, <span class="string">'utf8'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'已完成所有数据的读取'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(data1, data2, data3);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'读取文件失败'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异步操作"><a href="#异步操作" class="headerlink" title="异步操作"></a>异步操作</h2><p>异步 API 往往伴随着一个回调函数用来接收，返回值或异常处理。</p><p>回调函数的参数中第一个参数一般都是一个 err 对象，用来判定异步 API 是否发生异常。</p><ul><li>异步 API 即便没有捕获异常也不会主动抛出异常</li><li>异步 API，无法通过 try-catch 捕获异常</li></ul><p>一般文件操作中，所有的异步 API，都会在回调函数中提供一个 error 对象</p><ul><li>如果操作过程中有异常，则 error 是一个异常对象</li><li>如果操作成功，没有问题，则 error 是一个 null</li><li>所以，为了判定是否有异常，if (err) {// 处理异常}</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.readFile(<span class="string">"./data/01.txt"</span>,<span class="string">"utf8"</span>, (err, data1) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">"失败了"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(data1);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>异步操作中：</p><ul><li>开发阶段，使用 throw err 的形式抛出异常</li><li>目的是为了快速的定位代码的错误</li><li>如果是网站服务器中，这个就不会去 throw err，</li><li>一般会有异常处理机制</li><li>一般在生产环境，会处理异常，例如记录日志方便排查错误</li><li>throw err 会直接抛出异常，退出进程</li></ul><h2 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 开始做某一件事</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"做一件事"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"需要准备一些做这件事的必备品"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"找人帮我买必备品\n\n"</span>);</span><br><span class="line"><span class="comment">// 所有的异步任务都会等待其它的同步代码执行结束之后，才会开始执行</span></span><br><span class="line">fs.readFile(<span class="string">"./data/01.txt"</span>, <span class="string">"utf8"</span>, (err, data1) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"11111111---"</span>, data1);</span><br><span class="line">  fs.readFile(<span class="string">"./data/02.txt"</span>, <span class="string">"utf8"</span>, (err, data2) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"222222-----"</span>, data2);</span><br><span class="line">    fs.readFile(<span class="string">"./data/03.txt"</span>, <span class="string">"utf8"</span>, (err, data3) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"3333----"</span>, data3);</span><br><span class="line">      <span class="comment">// 器材备齐，可以做事了</span></span><br><span class="line">      doSomething (data1, data2, data3);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"先干点别的活"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"然后去睡一会"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"收拾收拾准备"</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">data1, data2, data3</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"ok, 器材已经准备齐全，可以做这件事了"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="封装准备器材的这个过程；"><a href="#封装准备器材的这个过程；" class="headerlink" title="封装准备器材的这个过程；"></a>封装准备器材的这个过程；</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 上面代码的封装</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ready</span>(<span class="params">doSomething</span>)</span>&#123;</span><br><span class="line">  fs.readFile(<span class="string">"./data/01.txt"</span>, <span class="string">"utf8"</span>, (err, data1) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"11111111---"</span>, data1);</span><br><span class="line">    fs.readFile(<span class="string">"./data/02.txt"</span>, <span class="string">"utf8"</span>, (err, data2) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"222222-----"</span>, data2);</span><br><span class="line">      fs.readFile(<span class="string">"./data/03.txt"</span>, <span class="string">"utf8"</span>, (err, data3) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"3333----"</span>, data3);</span><br><span class="line">        <span class="comment">// 器材备齐，可以做事了</span></span><br><span class="line">        doSomething (data1, data2, data3);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">ready(<span class="function">(<span class="params">data1, data2, data3</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"ok, 器材已经准备齐全，可以做这件事了"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="修改封装中的异常处理方式"><a href="#修改封装中的异常处理方式" class="headerlink" title="修改封装中的异常处理方式"></a>修改封装中的异常处理方式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 上面代码的封装</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ready</span>(<span class="params">doSomething</span>)</span>&#123;</span><br><span class="line">  fs.readFile(<span class="string">"./data/01.txt"</span>, <span class="string">"utf8"</span>, (err, data1) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> doSomething(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"11111111---"</span>, data1);</span><br><span class="line">    fs.readFile(<span class="string">"./data/02.txt"</span>, <span class="string">"utf8"</span>, (err, data2) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> doSomething(err);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"222222-----"</span>, data2);</span><br><span class="line">      fs.readFile(<span class="string">"./data/03.txt"</span>, <span class="string">"utf8"</span>, (err, data3) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> doSomething(err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"3333----"</span>, data3);</span><br><span class="line">        <span class="comment">// 不发生错误时，第一个参数传递一个 null</span></span><br><span class="line">        doSomething (<span class="literal">null</span>, data1, data2, data3);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 封装过后处理错误的过程</span></span><br><span class="line">ready(<span class="function">(<span class="params">err, data1, data2, data3</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"ok, 器材已经准备齐全，可以做这件事了"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="封装多个异步并行任务"><a href="#封装多个异步并行任务" class="headerlink" title="封装多个异步并行任务"></a>封装多个异步并行任务</h2><p>找多个人去做准备工作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 上面代码的封装</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 第一个任务</span></span><br><span class="line">fs.readFile(<span class="string">"./data/01.txt"</span>, <span class="string">"utf8"</span>, (err, data1) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"11111111---"</span>, data1);</span><br><span class="line">  count++;</span><br><span class="line">  <span class="keyword">if</span> (count === <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"ok, 器材已经准备齐全，可以做这件事了"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 第二个任务</span></span><br><span class="line">fs.readFile(<span class="string">"./data/02.txt"</span>, <span class="string">"utf8"</span>, (err, data2) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"222222-----"</span>, data2);</span><br><span class="line">  count++;</span><br><span class="line">  <span class="keyword">if</span> (count === <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"ok, 器材已经准备齐全，可以做这件事了"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 第三个任务</span></span><br><span class="line">fs.readFile(<span class="string">"./data/03.txt"</span>, <span class="string">"utf8"</span>, (err, data3) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"3333----"</span>, data3);</span><br><span class="line">  count++;</span><br><span class="line">  <span class="keyword">if</span> (count === <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"ok, 器材已经准备齐全，可以做这件事了"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>将上面代码继续封装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 上面代码的封装</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 第一个任务</span></span><br><span class="line">fs.readFile(<span class="string">"./data/01.txt"</span>, <span class="string">"utf8"</span>, (err, data1) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"11111111---"</span>, data1);</span><br><span class="line">  doSomething();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 第二个任务</span></span><br><span class="line">fs.readFile(<span class="string">"./data/02.txt"</span>, <span class="string">"utf8"</span>, (err, data2) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"222222-----"</span>, data2);</span><br><span class="line">  doSomething();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 第三个任务</span></span><br><span class="line">fs.readFile(<span class="string">"./data/03.txt"</span>, <span class="string">"utf8"</span>, (err, data3) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"3333----"</span>, data3);</span><br><span class="line">  doSomething();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  count++;</span><br><span class="line">  <span class="keyword">if</span> (count === <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"ok, 器材已经准备齐全，可以做这件事了"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上封装的问题，ready 的过程可能失败，应该告诉做事的，而不是主动抛出来；怎么告诉呢？传给回调函数，于是封装成了下面代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line">ready([<span class="string">'./data/01.txt'</span>, <span class="string">'./data/02.txt'</span>, <span class="string">'./data/03.txt'</span>], (err, obj) =&gt; &#123;</span><br><span class="line">  <span class="comment">// obj &#123; data1:'', data2: '', data3: '' &#125;</span></span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'执行任务失败了'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(obj);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 封装多个并行的异步API</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ready</span>(<span class="params">filePaths, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> length = filePaths.length;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 当循环执行结束，就说明分配了三个异步任务</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> filePath <span class="keyword">of</span> filePaths) &#123;</span><br><span class="line">    fs.readFile(filePath, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(err);</span><br><span class="line">      &#125;</span><br><span class="line">      obj[path.parse(filePath).name] = data;</span><br><span class="line">      count++;</span><br><span class="line">      <span class="keyword">if</span> (count === length) &#123;</span><br><span class="line">        callback(<span class="literal">null</span>, obj);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="歌词在控制台一行一行打印-lrc"><a href="#歌词在控制台一行一行打印-lrc" class="headerlink" title="歌词在控制台一行一行打印 lrc"></a>歌词在控制台一行一行打印 lrc</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> iconv = <span class="built_in">require</span>(<span class="string">'iconv-lite'</span>);</span><br><span class="line">fs.readFile(<span class="string">'./data/168305.lrc'</span>, (err, data) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> lrcStr = iconv.decode(data, <span class="string">'gbk'</span>);</span><br><span class="line">  <span class="keyword">const</span> lines = lrcStr.split(<span class="string">'\r\n'</span>);</span><br><span class="line">  <span class="keyword">const</span> regex = <span class="regexp">/^\[(\d&#123;2&#125;)\:(\d&#123;2&#125;)\.(\d&#123;2&#125;)\]\s(.+)$/</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> line <span class="keyword">of</span> lines)&#123;</span><br><span class="line">    <span class="keyword">const</span> matches = regex.exec(line);</span><br><span class="line">    <span class="keyword">if</span> (matches) &#123;</span><br><span class="line">      <span class="keyword">const</span> m = <span class="built_in">parseInt</span>(matches[<span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">const</span> s = <span class="built_in">parseInt</span>(matches[<span class="number">2</span>]);</span><br><span class="line">      <span class="keyword">const</span> ms = <span class="built_in">parseInt</span>(matches[<span class="number">3</span>]);</span><br><span class="line">      <span class="keyword">const</span> content = matches[<span class="number">4</span>];</span><br><span class="line">      <span class="keyword">const</span> time = m * <span class="number">60</span> * <span class="number">1000</span> + s * <span class="number">1000</span> + ms;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(content);</span><br><span class="line">      &#125;, time);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>同步调用立即执行，会阻塞后续代码继续执行，如果想要捕获异常需要使用 <code>try-catch</code></li><li>异步调用不会阻塞后续代码继续执行，需要回调函数作为额外的参数，通常包含一个错误作为回调函数的第一个参数</li><li>异步调用通过判断第一个err对象来处理异常</li><li>异步调用结果往往通过回调函数来进行获取</li></ul><h2 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">copy (<span class="string">'./node.md'</span>,<span class="string">'./a.md'</span>, err =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'copy success'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">src, dest, callback</span>) </span>&#123;</span><br><span class="line">  fs.readFile(src, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(err);</span><br><span class="line">      &#125;</span><br><span class="line">      fs.writeFile(dest, data, err =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err)&#123;</span><br><span class="line">          <span class="keyword">return</span> callback(err);</span><br><span class="line">        &#125;</span><br><span class="line">        callback(<span class="literal">null</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="process"><a href="#process" class="headerlink" title="process"></a>process</h2><p>process.argv 可以获取当前通过执行脚本的时候传递的参数，默认结果是一个数组</p><ul><li>数组中第 0 项就是 node 的可执行文件的绝对路径</li><li>数组中第 1 项就是 执行的当前脚本文件的绝对路径</li><li>数组中从第 2 项开始，就是用户通过执行命令传递进来的参数选项，以空格划分</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> args = process.argv.slice(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>封装复制文件函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> args = process.argv.slice(<span class="number">2</span>);</span><br><span class="line">copy (args[<span class="number">0</span>], args[<span class="number">1</span>], err =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'copy success!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">src, des, callback</span>) </span>&#123;</span><br><span class="line">  fs.readFile(src, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback(err);</span><br><span class="line">    &#125;</span><br><span class="line">    fs.writeFile(des, data, err =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(err);</span><br><span class="line">      &#125;</span><br><span class="line">      callback(<span class="literal">null</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;fs 文件操作模块&lt;/p&gt;
&lt;p&gt;Node 只在文件 IO 操作中，提供了同步调用和异步调用两种形式，fs 模块对文件的几乎所有操作都有同步和异步两种形式，两者可以结合使用，但是推荐能使用异步调用解决问题的情况下，少用同步调用。&lt;/p&gt;
&lt;p&gt;例如：&lt;code&gt;readFile()&lt;/code&gt; 和 &lt;code&gt;readFileSync()&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;引入包&quot;&gt;&lt;a href=&quot;#引入包&quot; class=&quot;headerlink&quot; title=&quot;引入包&quot;&gt;&lt;/a&gt;引入包&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; path = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;path&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;同步操作&quot;&gt;&lt;a href=&quot;#同步操作&quot; class=&quot;headerlink&quot; title=&quot;同步操作&quot;&gt;&lt;/a&gt;同步操作&lt;/h2&gt;
    
    </summary>
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node常用API</title>
    <link href="http://yoursite.com/2016/10/25/Node%E5%B8%B8%E7%94%A8API/"/>
    <id>http://yoursite.com/2016/10/25/Node常用API/</id>
    <published>2016-10-24T16:00:00.000Z</published>
    <updated>2018-06-06T02:42:27.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="path-文件路径处理模块"><a href="#path-文件路径处理模块" class="headerlink" title="path 文件路径处理模块"></a>path 文件路径处理模块</h2><h3 id="引入包"><a href="#引入包" class="headerlink" title="引入包"></a>引入包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;);</span><br></pre></td></tr></table></figure><h3 id="path-文件路径处理的相关-API"><a href="#path-文件路径处理的相关-API" class="headerlink" title="path 文件路径处理的相关 API"></a>path 文件路径处理的相关 API</h3><ul><li>path.basename(path[, ext]): 获取文件名部分</li><li>path.dirname(path): 获取目录部分</li><li>path.extname(path): 获取扩展名部分</li><li>path.isAbsolute(path): 判断是否是绝对路径</li><li>path.join([…paths]): 将多个路径拼接为一个路径</li><li>path.normalize(path): 将一个非标准路径转为一个标准路径</li><li>path.resolve([…paths]): 将多个路径拼接为一个绝对路径</li><li>path.sep: 获取操作系统路径分隔符</li><li>path.format(pathObject): 将一个对象转成路径</li></ul><a id="more"></a><h2 id="fs-文件操作模块"><a href="#fs-文件操作模块" class="headerlink" title="fs 文件操作模块"></a>fs 文件操作模块</h2><h3 id="引入包-1"><a href="#引入包-1" class="headerlink" title="引入包"></a>引入包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&apos;fs&apos;);</span><br></pre></td></tr></table></figure><h3 id="fs-文件操作的相关-API"><a href="#fs-文件操作的相关-API" class="headerlink" title="fs 文件操作的相关 API"></a>fs 文件操作的相关 API</h3><ul><li>fs.writeFile(file, data, callback)：文件写入</li><li>fs.appendFile(file, data, callback)：文件追加</li><li>fs.readFile(file[, options], callback)：文件读取</li><li>fs.unlink(path, callback)：删除文件</li><li>fs.stat(path, callback)：获取文件信息</li><li>fs.access(path, callback)：验证文件路径是否存在<ul><li>fs.access(‘路径’, callback(err))<ul><li>如果没有错误，说明路径存在</li><li>如果有错误，说明路径不存在</li></ul></li></ul></li><li>fs.rename(oldPath, newPath, callback)：重命名或移动文件</li></ul><h3 id="目录操作常用API"><a href="#目录操作常用API" class="headerlink" title="目录操作常用API"></a>目录操作常用API</h3><ul><li>fs.mkdir(path, callback)：创建一个目录</li><li>fs.rmdir(path, callback)：删除一个空目录<ul><li>该 API ，只能删除一个空目录</li><li>如果想要删除一个非空目录，自己写代码：递归思路</li></ul></li><li>fs.readdir(path, callback)：读取一个目录</li><li>fs.rename(oldPath, newPath, callback)：重命名或移动目录</li></ul><h3 id="获取文件信息"><a href="#获取文件信息" class="headerlink" title="获取文件信息"></a>获取文件信息</h3><ul><li>fs.stat(path,callback)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&apos;fs&apos;);</span><br><span class="line">fs.stat(&apos;./a&apos;, (err.stats) =&gt; &#123;</span><br><span class="line">  if (err) &#123;</span><br><span class="line">    throw err</span><br><span class="line">  &#125;</span><br><span class="line">  if (stats.isFile()) &#123;</span><br><span class="line">    console.log(&apos;是文件&apos;);</span><br><span class="line">  &#125; else if (stats.isDirectory()) &#123;</span><br><span class="line">    console.log (&apos;是目录&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>stats.isFile()</li><li>stats.isDirector()</li><li>stats.isBlockDevice()</li><li>stats.isCharacterDeveice()</li><li>stats.isSymbolicLink()</li><li>stats.isFIFO()</li><li>stats.isSocket()</li><li>stats.size; 文件大小</li><li>stats.atime; 最后一次访问时间</li><li>stats.mtime; 最后一次修改时间</li><li>stats.ctime; 创建时间和修改时间</li><li>stats.birthtime; 创建时间</li></ul><h3 id="监视"><a href="#监视" class="headerlink" title="监视"></a>监视</h3><ul><li>fs.watchFile(filename[, options], listener)</li><li>fs.watch(filename[, options][, listener])</li></ul><h2 id="Node-支持的编码类型"><a href="#Node-支持的编码类型" class="headerlink" title="Node 支持的编码类型"></a>Node 支持的编码类型</h2><ul><li>ascii</li><li>utf8<ul><li>万国码</li></ul></li><li>utf16le</li><li>ucs2</li><li>base64<ul><li>图片编码</li></ul></li><li>latin1</li><li>binary</li><li>hex</li></ul><p>Node 不支持 gbk，所以去社区中找可用的第三方包来解决中文 GBK 编码问题。</p><h3 id="文件流"><a href="#文件流" class="headerlink" title="文件流"></a>文件流</h3><ul><li>fs.createReadStream(src);</li><li>fs.createWriteStream(des);</li><li>fs.statSync(src).size;</li><li>writeStream.write(data);</li><li>writeStream.end();</li><li>readStream.pipe(writeStream);</li></ul><p>未完待续…</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;path-文件路径处理模块&quot;&gt;&lt;a href=&quot;#path-文件路径处理模块&quot; class=&quot;headerlink&quot; title=&quot;path 文件路径处理模块&quot;&gt;&lt;/a&gt;path 文件路径处理模块&lt;/h2&gt;&lt;h3 id=&quot;引入包&quot;&gt;&lt;a href=&quot;#引入包&quot; class=&quot;headerlink&quot; title=&quot;引入包&quot;&gt;&lt;/a&gt;引入包&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const path = require(&amp;apos;path&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;path-文件路径处理的相关-API&quot;&gt;&lt;a href=&quot;#path-文件路径处理的相关-API&quot; class=&quot;headerlink&quot; title=&quot;path 文件路径处理的相关 API&quot;&gt;&lt;/a&gt;path 文件路径处理的相关 API&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;path.basename(path[, ext]): 获取文件名部分&lt;/li&gt;
&lt;li&gt;path.dirname(path): 获取目录部分&lt;/li&gt;
&lt;li&gt;path.extname(path): 获取扩展名部分&lt;/li&gt;
&lt;li&gt;path.isAbsolute(path): 判断是否是绝对路径&lt;/li&gt;
&lt;li&gt;path.join([…paths]): 将多个路径拼接为一个路径&lt;/li&gt;
&lt;li&gt;path.normalize(path): 将一个非标准路径转为一个标准路径&lt;/li&gt;
&lt;li&gt;path.resolve([…paths]): 将多个路径拼接为一个绝对路径&lt;/li&gt;
&lt;li&gt;path.sep: 获取操作系统路径分隔符&lt;/li&gt;
&lt;li&gt;path.format(pathObject): 将一个对象转成路径&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Node.js" scheme="http://yoursite.com/categories/Node-js/"/>
    
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
</feed>
